[
 {
  "number": 7257,
  "sha": "a2fdbdeba4230e01a4b6ba10f5015829ec186334",
  "author": "guptapriya",
  "participant": "tfboyd",
  "created_at": "2019-07-19 05:26:11",
  "condition": [
   "test_train"
  ],
  "consequent": [
   "test_train_no_dist_strat"
  ]
 },
 {
  "number": 7257,
  "sha": "a2fdbdeba4230e01a4b6ba10f5015829ec186334",
  "author": "guptapriya",
  "participant": "tfboyd",
  "created_at": "2019-07-19 05:26:11",
  "condition": [
   "int32"
  ],
  "consequent": [
   "int64"
  ]
 },
 {
  "number": 7075,
  "sha": "c4227ed1c1747738255b34c550db3fbdd9cff83f",
  "author": "guptapriya",
  "participant": "tfboyd",
  "created_at": "2019-06-21 02:11:10",
  "condition": [
   "${0:NAME} = ${1:NAME}.MetricLayer(${2:NAME})([${0:NAME}, ${3:NAME}])"
  ],
  "consequent": [
   "if params[\"enable_metrics_in_training\"]:",
   "\t${0:NAME} = ${1:NAME}.MetricLayer(${2:NAME})([${0:NAME}, ${3:NAME}])"
  ]
 },
 {
  "number": 7075,
  "sha": "c4227ed1c1747738255b34c550db3fbdd9cff83f",
  "author": "guptapriya",
  "participant": "tfboyd",
  "created_at": "2019-06-21 02:11:10",
  "condition": [
   "rc = tf.distribute.get_replica_context()",
   "\tdef merge_fn(_):",
   "\treturn 1",
   "    if rc:",
   "\tpass                                                                                                  "
  ],
  "consequent": [
   "for mean, fn in self.metric_mean_fns:"
  ]
 },
 {
  "number": 6997,
  "sha": "2027521661348414c4f84f57d7ac5b95dc656a4c",
  "author": "guptapriya",
  "participant": "bfontain",
  "created_at": "2019-06-11 20:59:28",
  "condition": [
   "test_end_to_end_keras_1_gpu"
  ],
  "consequent": [
   "test_end_to_end_keras_1_gpu_dist_strat"
  ]
 },
 {
  "number": 6997,
  "sha": "2027521661348414c4f84f57d7ac5b95dc656a4c",
  "author": "guptapriya",
  "participant": "bfontain",
  "created_at": "2019-06-11 20:59:28",
  "condition": [
   "test_end_to_end_keras_mlperf"
  ],
  "consequent": [
   "test_end_to_end_keras_dist_strat"
  ]
 },
 {
  "number": 6997,
  "sha": "2027521661348414c4f84f57d7ac5b95dc656a4c",
  "author": "guptapriya",
  "participant": "bfontain",
  "created_at": "2019-06-11 20:59:28",
  "condition": [
   "test_end_to_end_keras"
  ],
  "consequent": [
   "test_end_to_end_keras_no_dist_strat"
  ]
 },
 {
  "number": 6997,
  "sha": "2027521661348414c4f84f57d7ac5b95dc656a4c",
  "author": "guptapriya",
  "participant": "bfontain",
  "created_at": "2019-06-11 20:59:28",
  "condition": [
   "fake_valit_pt_mask"
  ],
  "consequent": [
   "fake_valid_pt_mask"
  ]
 },
 {
  "number": 6997,
  "sha": "2027521661348414c4f84f57d7ac5b95dc656a4c",
  "author": "guptapriya",
  "participant": "bfontain",
  "created_at": "2019-06-11 20:59:28",
  "condition": [
   "return ${0:NAME}, labels"
  ],
  "consequent": [
   "if params[\"distribute_strategy\"] or not ncf_common.is_tf_v2():",
   "\treturn ${0:NAME}",
   "    else:                    ",
   "\treturn (${0:NAME},)"
  ]
 },
 {
  "number": 6997,
  "sha": "2027521661348414c4f84f57d7ac5b95dc656a4c",
  "author": "guptapriya",
  "participant": "bfontain",
  "created_at": "2019-06-11 20:59:28",
  "condition": [
   "if ${0:NAME}[${1:STRING}] and int(tf.__version__.split(\".\")[0]) == 1:"
  ],
  "consequent": [
   "strategy = distribution_utils.get_distribution_strategy(       distribution_strategy=FLAGS.distribution_strategy,       num_gpus=FLAGS.num_gpus)",
   "\t${0:NAME}[\"distribute_strategy\"] = strategy ",
   "  if (${0:NAME}[${1:STRING}] and (       not ncf_common.is_tf_v2() or strategy is None)):"
  ]
 },
 {
  "number": 6997,
  "sha": "2027521661348414c4f84f57d7ac5b95dc656a4c",
  "author": "guptapriya",
  "participant": "bfontain",
  "created_at": "2019-06-11 20:59:28",
  "condition": [
   "${0:NAME} = ${1:NAME}.${2:NAME}.SparseCategoricalCrossentropy("
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.keras.${2:NAME}.SparseCategoricalCrossentropy("
  ]
 },
 {
  "number": 6997,
  "sha": "2027521661348414c4f84f57d7ac5b95dc656a4c",
  "author": "guptapriya",
  "participant": "bfontain",
  "created_at": "2019-06-11 20:59:28",
  "condition": [
   "because"
  ],
  "consequent": [
   "becasue"
  ]
 },
 {
  "number": 6997,
  "sha": "2027521661348414c4f84f57d7ac5b95dc656a4c",
  "author": "guptapriya",
  "participant": "bfontain",
  "created_at": "2019-06-11 20:59:28",
  "condition": [
   "loss_scale_factor"
  ],
  "consequent": [
   "batch_size"
  ]
 },
 {
  "number": 6997,
  "sha": "2027521661348414c4f84f57d7ac5b95dc656a4c",
  "author": "guptapriya",
  "participant": "bfontain",
  "created_at": "2019-06-11 20:59:28",
  "condition": [
   "cast"
  ],
  "consequent": [
   "fake_valid_pt_mask"
  ]
 },
 {
  "number": 6961,
  "sha": "8bf50eaf9d3b2473fa802eedce35c8b13035cce0",
  "author": "guptapriya",
  "participant": "tfboyd",
  "created_at": "2019-06-05 05:40:18",
  "condition": [
   "${0:NAME}.${1:NAME} = ${2:NAME}.get_model_params(${3:NAME}, ${4:NUMBER})[${5:STRING}]"
  ],
  "consequent": [
   "${0:NAME}.${1:NAME} = ${2:NAME}.get_model_params(FLAGS.${3:NAME}, ${4:NUMBER})[${5:STRING}]"
  ]
 },
 {
  "number": 6961,
  "sha": "8bf50eaf9d3b2473fa802eedce35c8b13035cce0",
  "author": "guptapriya",
  "participant": "tfboyd",
  "created_at": "2019-06-05 05:40:18",
  "condition": [
   "${0:NAME}._load_weights_if_possible(${1:NAME}, ${2:NAME}.init_weight_path)"
  ],
  "consequent": [
   "${0:NAME}._load_weights_if_possible(           ${1:NAME}, tf.train.latest_checkpoint(${0:NAME}.${2:NAME}.model_dir))"
  ]
 },
 {
  "number": 6961,
  "sha": "8bf50eaf9d3b2473fa802eedce35c8b13035cce0",
  "author": "guptapriya",
  "participant": "tfboyd",
  "created_at": "2019-06-05 05:40:18",
  "condition": [
   "${0:NAME}=${1:NAME}.TensorShape([batch, ${2:NAME}]),"
  ],
  "consequent": [
   "${0:NAME}=${1:NAME}.TensorShape([${2:NAME}]),"
  ]
 },
 {
  "number": 6961,
  "sha": "8bf50eaf9d3b2473fa802eedce35c8b13035cce0",
  "author": "guptapriya",
  "participant": "tfboyd",
  "created_at": "2019-06-05 05:40:18",
  "condition": [
   "${0:NAME}.${1:NAME} = ${2:NAME}",
   "\t${0:NAME}.init_logdir_timestamp = ${3:NAME}",
   "    ${0:NAME}.${4:NAME} = ${4:NAME} = ${5:STRING}"
  ],
  "consequent": [
   "${0:NAME}.${1:NAME} = os.path.join(${2:NAME}, ${3:NAME})",
   "\t${0:NAME}.${4:NAME} = ${5:STRING}"
  ]
 },
 {
  "number": 6961,
  "sha": "8bf50eaf9d3b2473fa802eedce35c8b13035cce0",
  "author": "guptapriya",
  "participant": "tfboyd",
  "created_at": "2019-06-05 05:40:18",
  "condition": [
   "${0:NAME}.init_weight_path = None",
   "\t${1:NAME}.cur_log_dir = os.path.join(${2:NAME}, FIXED_TIMESTAMP)"
  ],
  "consequent": [
   "${0:NAME}.num_gpus = 1",
   "\t${0:NAME}.distribution_strategy = \"off\"",
   "    ${1:NAME}.model_dir = ${0:NAME}.model_dir",
   "    ${1:NAME}.${2:NAME} = ${2:NAME}"
  ]
 },
 {
  "number": 6961,
  "sha": "8bf50eaf9d3b2473fa802eedce35c8b13035cce0",
  "author": "guptapriya",
  "participant": "tfboyd",
  "created_at": "2019-06-05 05:40:18",
  "condition": [
   "${0:NAME}.${1:NAME} = ${2:NAME}.${3:NAME}.join(${0:NAME}.cur_log_dir, ${4:STRING})"
  ],
  "consequent": [
   "${0:NAME}.${1:NAME} = ${2:NAME}.${3:NAME}.join(temp_dir, ${4:STRING})"
  ]
 },
 {
  "number": 6961,
  "sha": "8bf50eaf9d3b2473fa802eedce35c8b13035cce0",
  "author": "guptapriya",
  "participant": "tfboyd",
  "created_at": "2019-06-05 05:40:18",
  "condition": [
   "${0:NAME}.steps_per_epoch = 1"
  ],
  "consequent": [
   "${0:NAME}.steps_between_evals = 1",
   "\t${0:NAME}.train_steps = 2"
  ]
 },
 {
  "number": 6961,
  "sha": "8bf50eaf9d3b2473fa802eedce35c8b13035cce0",
  "author": "guptapriya",
  "participant": "tfboyd",
  "created_at": "2019-06-05 05:40:18",
  "condition": [
   "return ${0:NAME}.generate_synthetic_data("
  ],
  "consequent": [
   "dataset = ${0:NAME}.generate_synthetic_data("
  ]
 },
 {
  "number": 6961,
  "sha": "8bf50eaf9d3b2473fa802eedce35c8b13035cce0",
  "author": "guptapriya",
  "participant": "tfboyd",
  "created_at": "2019-06-05 05:40:18",
  "condition": [
   "cur_log_dir"
  ],
  "consequent": [
   "temp_dir"
  ]
 },
 {
  "number": 6961,
  "sha": "8bf50eaf9d3b2473fa802eedce35c8b13035cce0",
  "author": "guptapriya",
  "participant": "tfboyd",
  "created_at": "2019-06-05 05:40:18",
  "condition": [
   "                                         ",
   "\t${0:NAME}._assert_exists(os.path.join(${0:NAME}.cur_log_dir, \"logs\"))                      ",
   "    ${0:NAME}._assert_exists(os.path.join(${0:NAME}.cur_log_dir, \"result.csv\"))                       ",
   "    filenames = os.listdir(${0:NAME}.cur_log_dir)",
   "    matched_weight_file = any([WEIGHT_PATTERN.match(f) for f in filenames])",
   "    ${0:NAME}.assertTrue(matched_weight_file)"
  ],
  "consequent": [
   "def test_train_static_batch(${0:NAME}):",
   "\tFLAGS.static_batch = True",
   "    t = tm.TransformerTask(FLAGS)",
   "    t.train() ",
   "  def test_train_1_gpu_with_dist_strat(${0:NAME}):",
   "\tFLAGS.distribution_strategy = \"one_device\"",
   "    t = tm.TransformerTask(FLAGS)",
   "    t.train() ",
   "  def test_train_2_gpu(${0:NAME}):",
   "\tFLAGS.distribution_strategy = \"mirrored\"",
   "    FLAGS.num_gpus = 2",
   "    FLAGS.param_set = \"base\"",
   "    t = tm.TransformerTask(FLAGS)",
   "    t.train()"
  ]
 },
 {
  "number": 6960,
  "sha": "31956b0c97e72db7322753f70400aa3e452b2f50",
  "author": "guptapriya",
  "participant": "tfboyd",
  "created_at": "2019-06-05 05:32:02",
  "condition": [
   "${0:NAME}.${1:NAME} = ${2:NAME}._get_model_dir("
  ],
  "consequent": [
   "${0:NAME}.${1:NAME} = ${2:NAME}._get_model_dir('benchmark_1_gpu_no_ds_sb')"
  ]
 },
 {
  "number": 6943,
  "sha": "ffdafe109091d25197e711374a7285b9ab9efaf8",
  "author": "guptapriya",
  "participant": "tfboyd",
  "created_at": "2019-06-02 23:10:26",
  "condition": [
   "benchmark_2_gpu_ctl"
  ],
  "consequent": [
   "benchmark_2_gpus_ctl"
  ]
 },
 {
  "number": 6862,
  "sha": "625387380fc912b78e0d99ce01c0be823e4bcf31",
  "author": "rxsang",
  "participant": "guptapriya",
  "created_at": "2019-05-23 04:10:43",
  "condition": [
   "benchmark_xla_8_gpu_fp16_tweaked_get_next_as_optional"
  ],
  "consequent": [
   "benchmark_xla_8_gpu_fp16_tweaked_optional_next"
  ]
 },
 {
  "number": 6598,
  "sha": "d5466cce345c17fc8ff8953ff64af8341b978c9c",
  "author": "rxsang",
  "participant": "haoyuz",
  "created_at": "2019-04-17 21:58:21",
  "condition": [
   "per_replica_batch_size"
  ],
  "consequent": [
   "input_layer_batch_size"
  ]
 },
 {
  "number": 6557,
  "sha": "d6bacfe1d728b8312b0d4193fa63738489ef2518",
  "author": "rxsang",
  "participant": "haoyuz",
  "created_at": "2019-04-10 18:58:09",
  "condition": [
   "return \"BatchTimestamp(batch_index: {}, timestamp: {})\".format("
  ],
  "consequent": [
   "return \"'BatchTimestamp<batch_index: {}, timestamp: {}>'\".format("
  ]
 },
 {
  "number": 6508,
  "sha": "7a98fa2bdff1d7a7856fcaaa685d5ac97f81f48d",
  "author": "rxsang",
  "participant": "haoyuz",
  "created_at": "2019-04-02 18:35:45",
  "condition": [
   "${0:NAME} = ${0:NAME}.batch(${1:NAME}, ${2:NAME}=False)"
  ],
  "consequent": [
   "${0:NAME} = ${0:NAME}.batch(${1:NAME}, ${2:NAME}=${2:NAME})"
  ]
 },
 {
  "number": 6508,
  "sha": "7a98fa2bdff1d7a7856fcaaa685d5ac97f81f48d",
  "author": "rxsang",
  "participant": "haoyuz",
  "created_at": "2019-04-02 18:35:45",
  "condition": [
   "${0:NAME} = ${0:NAME}.batch(${1:NAME}, ${2:NAME}=True)"
  ],
  "consequent": [
   "${0:NAME} = ${0:NAME}.batch(${1:NAME}, ${2:NAME}=${2:NAME})"
  ]
 },
 {
  "number": 6508,
  "sha": "7a98fa2bdff1d7a7856fcaaa685d5ac97f81f48d",
  "author": "rxsang",
  "participant": "haoyuz",
  "created_at": "2019-04-02 18:35:45",
  "condition": [
   "${0:NAME} = ${1:NAME}.resnet50(${2:NAME}=${3:NAME}.${4:NAME},                                     ${5:NAME}=${5:NAME})"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.resnet50(           ${2:NAME}=${3:NAME}.${4:NAME},           ${5:NAME}=${5:NAME},           batch_size=per_replica_batch_size)"
  ]
 },
 {
  "number": 6327,
  "sha": "6d4bfdc1d58630522b55416ee2665fd58729259f",
  "author": "pkanwar23",
  "participant": "robieta",
  "created_at": "2019-03-08 19:27:08",
  "condition": [
   "current_epoch: `Tensor` for ${0:NAME} epoch.",
   "\tpoly_rate: Polynomial decay rate."
  ],
  "consequent": [
   "global_step: the ${0:NAME} global_step"
  ]
 },
 {
  "number": 6327,
  "sha": "6d4bfdc1d58630522b55416ee2665fd58729259f",
  "author": "pkanwar23",
  "participant": "robieta",
  "created_at": "2019-03-08 19:27:08",
  "condition": [
   "A scaled `Tensor` for ${0:NAME} ${1:NAME} ${2:NAME}."
  ],
  "consequent": [
   "returns the ${0:NAME} ${1:NAME} ${2:NAME}"
  ]
 },
 {
  "number": 6327,
  "sha": "6d4bfdc1d58630522b55416ee2665fd58729259f",
  "author": "pkanwar23",
  "participant": "robieta",
  "created_at": "2019-03-08 19:27:08",
  "condition": [
   "${0:NAME} = (       ${1:NAME} * ${2:NAME}.cast(${3:NAME}, ${2:NAME}.${4:NAME}) / ${2:NAME}.cast("
  ],
  "consequent": [
   "${0:NAME} = (${1:NAME} * ${2:NAME}.cast(${3:NAME}, ${2:NAME}.${4:NAME}) / ${2:NAME}.cast("
  ]
 },
 {
  "number": 5987,
  "sha": "2fbba5ff135580bfb9b9aa0c402257e98e3537d7",
  "author": "seemuch",
  "participant": "guptapriya",
  "created_at": "2019-01-03 21:46:21",
  "condition": [
   "with ${0:NAME}.scope():"
  ],
  "consequent": [
   "strategy_scope = keras_common.get_strategy_scope(${0:NAME}) ",
   "\twith strategy_scope:"
  ]
 },
 {
  "number": 5838,
  "sha": "17c2f0ccec49e8087f100796027d75ea7fdca41c",
  "author": "cshallue",
  "participant": "rsepassi",
  "created_at": "2018-11-30 02:02:00",
  "condition": [
   "from light_curve_util.cc.${0:NAME} import phase_fold"
  ],
  "consequent": [
   "from light_curve.fast_ops.${0:NAME} import phase_fold"
  ]
 },
 {
  "number": 5838,
  "sha": "17c2f0ccec49e8087f100796027d75ea7fdca41c",
  "author": "cshallue",
  "participant": "rsepassi",
  "created_at": "2018-11-30 02:02:00",
  "condition": [
   "light_curve_util"
  ],
  "consequent": [
   "light_curve"
  ]
 },
 {
  "number": 5838,
  "sha": "17c2f0ccec49e8087f100796027d75ea7fdca41c",
  "author": "cshallue",
  "participant": "rsepassi",
  "created_at": "2018-11-30 02:02:00",
  "condition": [
   "median_filter"
  ],
  "consequent": [
   "light_curve"
  ]
 },
 {
  "number": 5838,
  "sha": "17c2f0ccec49e8087f100796027d75ea7fdca41c",
  "author": "cshallue",
  "participant": "rsepassi",
  "created_at": "2018-11-30 02:02:00",
  "condition": [
   "${0:NAME}.assertEqual(len(${1:NAME}), len(${2:NAME}))"
  ],
  "consequent": [
   "${0:NAME}.assertLen(${1:NAME}, len(${2:NAME}))"
  ]
 },
 {
  "number": 5838,
  "sha": "17c2f0ccec49e8087f100796027d75ea7fdca41c",
  "author": "cshallue",
  "participant": "rsepassi",
  "created_at": "2018-11-30 02:02:00",
  "condition": [
   "${0:NAME}.assertEqual(len(${1:NAME}), ${2:NUMBER})"
  ],
  "consequent": [
   "${0:NAME}.assertLen(${1:NAME}, ${2:NUMBER})"
  ]
 },
 {
  "number": 5838,
  "sha": "17c2f0ccec49e8087f100796027d75ea7fdca41c",
  "author": "cshallue",
  "participant": "rsepassi",
  "created_at": "2018-11-30 02:02:00",
  "condition": [
   "util"
  ],
  "consequent": [
   "light_curve"
  ]
 },
 {
  "number": 5838,
  "sha": "17c2f0ccec49e8087f100796027d75ea7fdca41c",
  "author": "cshallue",
  "participant": "rsepassi",
  "created_at": "2018-11-30 02:02:00",
  "condition": [
   "${0:NAME}.assertEqual(len(${1:NAME}[${2:NUMBER}]), ${3:NUMBER})"
  ],
  "consequent": [
   "${0:NAME}.assertLen(${1:NAME}[${2:NUMBER}], ${3:NUMBER})"
  ]
 },
 {
  "number": 5838,
  "sha": "17c2f0ccec49e8087f100796027d75ea7fdca41c",
  "author": "cshallue",
  "participant": "rsepassi",
  "created_at": "2018-11-30 02:02:00",
  "condition": [
   "assertItemsEqual"
  ],
  "consequent": [
   "assertCountEqual"
  ]
 },
 {
  "number": 5838,
  "sha": "17c2f0ccec49e8087f100796027d75ea7fdca41c",
  "author": "cshallue",
  "participant": "rsepassi",
  "created_at": "2018-11-30 02:02:00",
  "condition": [
   "from light_curve_util.cc.${0:NAME} import view_generator"
  ],
  "consequent": [
   "from light_curve.fast_ops.${0:NAME} import view_generator"
  ]
 },
 {
  "number": 5838,
  "sha": "17c2f0ccec49e8087f100796027d75ea7fdca41c",
  "author": "cshallue",
  "participant": "rsepassi",
  "created_at": "2018-11-30 02:02:00",
  "condition": [
   "from light_curve_util.cc.${0:NAME} import median_filter"
  ],
  "consequent": [
   "from light_curve.fast_ops.${0:NAME} import median_filter"
  ]
 },
 {
  "number": 5838,
  "sha": "17c2f0ccec49e8087f100796027d75ea7fdca41c",
  "author": "cshallue",
  "participant": "rsepassi",
  "created_at": "2018-11-30 02:02:00",
  "condition": [
   "${0:NAME}.assertEqual(${1:NUMBER}, len(${2:NAME}))"
  ],
  "consequent": [
   "${0:NAME}.assertLen(${2:NAME}, ${1:NUMBER})"
  ]
 },
 {
  "number": 5815,
  "sha": "e7e842937ba8be4b3a7ba9fd3ee66ff865be5230",
  "author": "dreamdragon",
  "participant": "robieta",
  "created_at": "2018-11-26 22:52:46",
  "condition": [
   "return ${0:NAME}.${1:NAME}.pack_sequence_as(${2:NAME}=[${3:NUMBER}, ${3:NUMBER}], ${4:NAME}=${5:NAME})"
  ],
  "consequent": [
   "return ${0:NAME}.contrib.framework.${1:NAME}.pack_sequence_as(         ${2:NAME}=[${3:NUMBER}, ${3:NUMBER}], ${4:NAME}=${5:NAME})"
  ]
 },
 {
  "number": 5815,
  "sha": "e7e842937ba8be4b3a7ba9fd3ee66ff865be5230",
  "author": "dreamdragon",
  "participant": "robieta",
  "created_at": "2018-11-26 22:52:46",
  "condition": [
   "tfexample_decoder.BoundingBoxSequence(${0:NAME}=${1:STRING}),"
  ],
  "consequent": [
   "BoundingBoxSequence(${0:NAME}=${1:STRING}),"
  ]
 },
 {
  "number": 5815,
  "sha": "e7e842937ba8be4b3a7ba9fd3ee66ff865be5230",
  "author": "dreamdragon",
  "participant": "robieta",
  "created_at": "2018-11-26 22:52:46",
  "condition": [
   "slim_example_decoder = ${0:NAME}.${1:NAME}.${2:NAME}.tfexample_decoder"
  ],
  "consequent": [
   "tfexample_decoder = ${0:NAME}.${1:NAME}.${2:NAME}.tfexample_decoder"
  ]
 },
 {
  "number": 5815,
  "sha": "e7e842937ba8be4b3a7ba9fd3ee66ff865be5230",
  "author": "dreamdragon",
  "participant": "robieta",
  "created_at": "2018-11-26 22:52:46",
  "condition": [
   "TfSequenceExampleDecoder"
  ],
  "consequent": [
   "TFSequenceExampleDecoder"
  ]
 },
 {
  "number": 5815,
  "sha": "e7e842937ba8be4b3a7ba9fd3ee66ff865be5230",
  "author": "dreamdragon",
  "participant": "robieta",
  "created_at": "2018-11-26 22:52:46",
  "condition": [
   "class TfSequenceExampleDecoder(${0:NAME}.${1:NAME}):"
  ],
  "consequent": [
   "class BoundingBoxSequence(tfexample_decoder.ItemHandler):",
   "\t\"\"\"An ItemHandler that concatenates SparseTensors to Bounding Boxes.",
   "  \"\"\" ",
   "  def __init__(self, keys=None, prefix=None, return_dense=True,                default_value=-1.0):",
   "\t\"\"\"Initialize the bounding box handler.",
   "",
   "    Args:",
   "      keys: A list of four key names representing the ymin, xmin, ymax, xmax",
   "        in the Example or SequenceExample.",
   "      prefix: An optional prefix for each of the bounding box keys in the",
   "        Example or SequenceExample. If provided, `prefix` is prepended to each",
   "        key in `keys`.",
   "      return_dense: if True, returns a dense tensor; if False, returns as",
   "        sparse tensor.",
   "      default_value: The value used when the `tensor_key` is not found in a",
   "        particular `TFExample`.",
   "",
   "    Raises:",
   "      ValueError: if keys is not `None` and also not a list of exactly 4 keys",
   "    \"\"\"",
   "    if keys is None:",
   "\tkeys = ['ymin', 'xmin', 'ymax', 'xmax']",
   "    elif len(keys) != 4:",
   "\traise ValueError('BoundingBoxSequence expects 4 keys but got {}'.format(           len(keys)))",
   "    self._prefix = prefix",
   "    self._keys = keys",
   "    self._full_keys = [prefix + k for k in keys]",
   "    self._return_dense = return_dense",
   "    self._default_value = default_value",
   "    super(BoundingBoxSequence, self).__init__(self._full_keys) ",
   "  def tensors_to_item(self, keys_to_tensors):",
   "\t\"\"\"Maps the given dictionary of tensors to a concatenated list of bboxes.",
   "",
   "    Args:",
   "      keys_to_tensors: a mapping of TF-Example keys to parsed tensors.",
   "",
   "    Returns:",
   "      [time, num_boxes, 4] tensor of bounding box coordinates, in order",
   "          [y_min, x_min, y_max, x_max]. Whether the tensor is a SparseTensor",
   "          or a dense Tensor is determined by the return_dense parameter. Empty",
   "          positions in the sparse tensor are filled with -1.0 values.",
   "    \"\"\"",
   "    sides = []",
   "    for key in self._full_keys:",
   "\tvalue = keys_to_tensors[key]",
   "      expanded_dims = tf.concat(           [tf.to_int64(tf.shape(value)),            tf.constant([1], dtype=tf.int64)], 0)",
   "      side = tf.sparse_reshape(value, expanded_dims)",
   "      sides.append(side)",
   "    bounding_boxes = tf.sparse_concat(2, sides)",
   "    if self._return_dense:",
   "\tbounding_boxes = tf.sparse_tensor_to_dense(           bounding_boxes, default_value=self._default_value)",
   "    return bounding_boxes  ",
   "class TFSequenceExampleDecoder(${0:NAME}.${1:NAME}):"
  ]
 },
 {
  "number": 5815,
  "sha": "e7e842937ba8be4b3a7ba9fd3ee66ff865be5230",
  "author": "dreamdragon",
  "participant": "robieta",
  "created_at": "2018-11-26 22:52:46",
  "condition": [
   "slim_example_decoder"
  ],
  "consequent": [
   "tfexample_decoder"
  ]
 },
 {
  "number": 5815,
  "sha": "e7e842937ba8be4b3a7ba9fd3ee66ff865be5230",
  "author": "dreamdragon",
  "participant": "robieta",
  "created_at": "2018-11-26 22:52:46",
  "condition": [
   "import google3",
   "import ${0:NAME}.google as tf"
  ],
  "consequent": [
   "import ${0:NAME} as tf"
  ]
 },
 {
  "number": 5815,
  "sha": "e7e842937ba8be4b3a7ba9fd3ee66ff865be5230",
  "author": "dreamdragon",
  "participant": "robieta",
  "created_at": "2018-11-26 22:52:46",
  "condition": [
   "TfSequenceExampleDecoderTest"
  ],
  "consequent": [
   "TFSequenceExampleDecoderTest"
  ]
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "condition": [
   "stream_files"
  ],
  "consequent": [
   "stream_files,                        ",
   "\tdeterministic=False                 "
  ]
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "condition": [
   "__repr__"
  ],
  "consequent": [
   "__str__"
  ]
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "condition": [
   "${0:NAME}: Try ${1:NAME} enforce repeatable behavior, even at ${2:NAME} cost ${3:NAME}",
   "\tperformance."
  ],
  "consequent": [
   "params: dict ${3:NAME} parameters for ${2:NAME} run.",
   "\tconstructor_type: The name ${3:NAME} ${2:NAME} constructor subclass that should be used",
   "\tfor ${2:NAME} input pipeline.",
   "    ${0:NAME}: Tell ${2:NAME} data constructor ${1:NAME} produce deterministically."
  ]
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "condition": [
   "super"
  ],
  "consequent": [
   "__str__"
  ]
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "condition": [
   "${0:NAME} ${1:NAME} ${2:NAME} ${3:NAME} ${4:NAME} ${5:NAME} ${6:NAME} ${7:NAME} ${1:NAME} ${8:NAME} which are not used equal"
  ],
  "consequent": [
   "${0:NAME} ${1:NAME} ${2:NAME} ${3:NAME} ${4:NAME} ${5:NAME} a number of unused ${6:NAME} ${7:NAME} ${1:NAME} ${8:NAME} equal"
  ]
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "condition": [
   "${0:NAME}, ${1:NUMBER}, params[\"batches_per_step\"])"
  ],
  "consequent": [
   "${0:NAME}, steps_per_run=${1:NUMBER})"
  ]
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "condition": [
   "${0:NAME} = ${1:NAME}._get_order_chunk()"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}._current_epoch_order[i * ${1:NAME}.train_batch_size:                                               (i + 1) * ${1:NAME}.train_batch_size]"
  ]
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "condition": [
   "${0:NAME}.${1:NAME} = ${2:NAME}.imap_unordered(${3:NAME}.${4:NAME}, ${5:NAME})"
  ],
  "consequent": [
   "imap = ${2:NAME}.imap if ${0:NAME}.deterministic else ${2:NAME}.imap_unordered",
   "\t${0:NAME}.${1:NAME} = imap(${3:NAME}.${4:NAME}, ${5:NAME})"
  ]
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "condition": [
   "${0:NAME}=${1:NAME}, ${2:NAME}=${3:NAME}.${4:NAME}, deterministic=False,"
  ],
  "consequent": [
   "${0:NAME}=${1:NAME}, ${2:NAME}=${3:NAME}.${4:NAME}, params=params,"
  ]
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "condition": [
   "stat_utils"
  ],
  "consequent": [
   "popen_helper"
  ]
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "condition": [
   "${0:NAME}.${1:NAME}.put((${2:NAME}, ${2:NAME}.pop(${3:STRING})))",
   "\telse:",
   "\t${0:NAME}._result_reuse.append(${2:NAME})"
  ],
  "consequent": [
   "${2:NAME} = (${2:NAME}, ${2:NAME}.pop(${3:STRING}))",
   "\t${0:NAME}.${1:NAME}.put(${2:NAME})"
  ]
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "condition": [
   "for ${0:NAME}, (${1:NAME}, ${2:NAME}, ${3:NAME}) in enumerate(zip(${4:NAME}[${5:NAME}.${6:NAME}],                                           ${4:NAME}[${5:NAME}.${7:NAME}],                                           ${4:NAME}[${8:NAME}.${9:NAME}])):"
  ],
  "consequent": [
   "data_list = [           ${4:NAME}[${5:NAME}.${6:NAME}], ${4:NAME}[${5:NAME}.${7:NAME}],           ${4:NAME}[${8:NAME}.${9:NAME}]]",
   "\tfor ${2:NAME} in data_list:",
   "\tmd5.update(${2:NAME}.tobytes()) ",
   "      for ${0:NAME}, (${1:NAME}, ${2:NAME}, ${3:NAME}) in enumerate(zip(*data_list)):"
  ]
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "condition": [
   "${0:NAME} = ${1:NAME}.logical_not(${2:NAME}).astype(${1:NAME}.bool)"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.logical_not(${2:NAME})"
  ]
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "condition": [
   "def test_end_to_end(${0:NAME}):"
  ],
  "consequent": [
   "def _test_end_to_end(${0:NAME}, constructor_type):"
  ]
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "condition": [
   "for u, i, v, l in zip("
  ],
  "consequent": [
   "data_list = ["
  ]
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "condition": [
   "DEFINE_string"
  ],
  "consequent": [
   "DEFINE_integer"
  ]
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "condition": [
   "pickle"
  ],
  "consequent": [
   "mock"
  ]
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "condition": [
   "params=params)"
  ],
  "consequent": [
   "constructor_type=constructor_type, deterministic=True)"
  ]
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "condition": [
   "yield i"
  ],
  "consequent": [
   "yield i",
   "\telse:                       ",
   "\tfor _ in range(self._batches_per_epoch * epochs_between_evals):",
   "\tresult = self._result_queue.get(timeout=300)",
   "          self._result_reuse.append(result)",
   "          yield result"
  ]
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "condition": [
   "if deterministic:",
   "\traise NotImplementedError(\"Fixed seed behavior has not been implemented.\") ",
   "  ${0:NAME} = ${1:NAME}.MaterializedDataConstructor("
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.get_constructor(constructor_type or \"materialized\")("
  ]
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "condition": [
   "print(${0:NAME}.format_exc(), file=sys.stderr)"
  ],
  "consequent": [
   "${0:NAME}.print_exc()"
  ]
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "condition": [
   "def _filter_index_sort(${0:NAME}, ${1:NAME}, match_mlperf):"
  ],
  "consequent": [
   "def _filter_index_sort(${0:NAME}, ${1:NAME}):"
  ]
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "condition": [
   "${0:NAME}, ${1:NAME} = _filter_index_sort(${2:NAME}, ${3:NAME},"
  ],
  "consequent": [
   "${0:NAME}, ${1:NAME} = _filter_index_sort(${2:NAME}, ${3:NAME})"
  ]
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "condition": [
   "for match_mlperf in [True, False]:",
   "\t${0:NAME} = ${1:NAME}.${2:NAME}.join(${3:NAME}.${4:NAME}, ${5:STRING})"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.${2:NAME}.join(${3:NAME}.${4:NAME}, ${5:STRING})"
  ]
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "condition": [
   "def test_fresh_randomness(${0:NAME}):"
  ],
  "consequent": [
   "${0:NAME}.assertRegexpMatches(md5.hexdigest(), END_TO_END_EVAL_MD5) ",
   "\tdef _test_fresh_randomness(${0:NAME}, constructor_type):"
  ]
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "condition": [
   "                                            ",
   "\t${0:NAME}._result_queue.put(${0:NAME}._result_queue.get(timeout=300))",
   "      assert len(${0:NAME}.${1:NAME}) == ${0:NAME}.${2:NAME}"
  ],
  "consequent": [
   "if ${0:NAME}.${1:NAME}:",
   "\tassert len(${0:NAME}.${1:NAME}) == ${0:NAME}.${2:NAME}"
  ]
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "condition": [
   "${0:NAME} = ${1:NAME}.get_forkpool(${2:NUMBER}, ${3:NAME}=False)"
  ],
  "consequent": [
   "if self._shuffle_with_forkpool:",
   "\t${0:NAME} = ${1:NAME}.get_forkpool(${2:NUMBER}, ${3:NAME}=False)",
   "    else:",
   "\t${0:NAME} = ${1:NAME}.get_threadpool(1, ${3:NAME}=False)"
  ]
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "condition": [
   "with ${0:NAME}.get_threadpool(${1:NUMBER}) as ${2:NAME}:"
  ],
  "consequent": [
   "get_pool = (${0:NAME}.get_fauxpool if self.deterministic else                 ${0:NAME}.get_threadpool)",
   "\twith get_pool(${1:NUMBER}) as ${2:NAME}:"
  ]
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "condition": [
   "assert not ${0:NAME}.${1:NAME}.shape[0]",
   "\t${0:NAME}.${1:NAME} = six.next(${0:NAME}.${2:NAME})"
  ],
  "consequent": [
   "${0:NAME}.${1:NAME} = next(${0:NAME}.${2:NAME})"
  ]
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "condition": [
   "def instantiate_pipeline(${0:NAME}, ${1:NAME}, ${2:NAME}, ${3:NAME}):"
  ],
  "consequent": [
   "def instantiate_pipeline(${0:NAME}, ${1:NAME}, ${3:NAME}, constructor_type=None,                          ${2:NAME}=False):"
  ]
 },
 {
  "number": 5557,
  "sha": "3ec25e5dc3baa2d7efd7db24f5aa82a4c63d1570",
  "author": "shizhiw",
  "participant": "robieta",
  "created_at": "2018-10-17 22:50:24",
  "condition": [
   "from google3.third_party.tensorflow_models.${0:NAME}.${1:NAME} import ${2:NAME} as ${3:NAME}",
   "from google3.third_party.tensorflow_models.${0:NAME}.${1:NAME} import stat_utils"
  ],
  "consequent": [
   "from ${0:NAME}.${1:NAME} import ${2:NAME} as ${3:NAME}",
   "from ${0:NAME}.${1:NAME} import stat_utils"
  ]
 },
 {
  "number": 5557,
  "sha": "3ec25e5dc3baa2d7efd7db24f5aa82a4c63d1570",
  "author": "shizhiw",
  "participant": "robieta",
  "created_at": "2018-10-17 22:50:24",
  "condition": [
   "from google3.third_party.tensorflow_models.${0:NAME}.${1:NAME} import movielens"
  ],
  "consequent": [
   "from ${0:NAME}.${1:NAME} import movielens"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "${0:NAME} = (predictions.shape[${1:NUMBER}] == ${1:NUMBER})"
  ],
  "consequent": [
   "${0:NAME} = output_dim == ${1:NUMBER}"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "def __init__(${0:NAME}, ${1:NAME}, ${2:NAME}, ${3:NAME}, ${4:NAME}):"
  ],
  "consequent": [
   "def __init__(${0:NAME}, ${1:NAME}, ${2:NAME}, ${3:NAME}, ${4:NAME}, output_dim):"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "return dataset ",
   "\treturn input_fn  ",
   "def create_model_fn(${0:NAME}, ${1:NAME}, ${2:NAME}=False):"
  ],
  "consequent": [
   "def __init__(self, ${0:NAME}, ${1:NAME}, ${2:NAME}=False):"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "def set_bytes_feature(${0:NAME}, ${1:NAME}, ${2:NAME}, ${3:NAME}=False):"
  ],
  "consequent": [
   "def set_bytes_feature(${0:NAME},                       ${1:NAME},                       ${2:NAME},                       ${3:NAME}=False,                       bytes_encoding=\"latin-1\"):"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "${0:NAME}: ${1:NAME} ${2:NAME} ${3:NAME} ${4:NAME} ${5:NAME} corresponding to ${6:NAME} time ${5:NAME} in",
   "\tall_time."
  ],
  "consequent": [
   "${0:NAME}: ${1:NAME} ${2:NAME} ${3:NAME} ${4:NAME} ${5:NAME}; ${6:NAME} flux values ${3:NAME} ${6:NAME} light curve."
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "raise ValueError(\"Unable to parse the content of the json file %s. \""
  ],
  "consequent": [
   "raise ValueError(\"Unable to parse the content of the json file {}. \"                        \"Parsing error: {}.\".format("
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "${0:NAME} ${1:NAME} values (${2:NAME} ${3:NAME} ${4:NAME}) ${5:NAME} ${6:NAME} ${7:NAME} cause"
  ],
  "consequent": [
   "${0:NAME} ${1:NAME} values (${2:NAME} ${3:NAME} ${4:NAME}) ${5:NAME} ${6:NAME} ${7:NAME} cause logging"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "${0:NAME}.append(${1:NAME})"
  ],
  "consequent": [
   "${0:NAME}.append(${1:NAME})",
   "\tall_quarters.append(quarter) ",
   "  if scramble_type:",
   "\tall_time, ${0:NAME} = scramble_light_curve(all_time, ${0:NAME}, all_quarters,                                               scramble_type)                                                     ",
   "  for i, (time, ${1:NAME}) in enumerate(zip(all_time, ${0:NAME})):",
   "\tflux_and_time_finite = np.logical_and(np.isfinite(${1:NAME}), np.isfinite(time))",
   "    all_time[i] = time[flux_and_time_finite]",
   "    ${0:NAME}[i] = ${1:NAME}[flux_and_time_finite]"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "raise ValueError(\"len(x) must be at least 2. Got: %s\" % ${0:NAME})"
  ],
  "consequent": [
   "raise ValueError(\"len(x) must be at least 2. Got: {}\".format(${0:NAME}))"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "with ${0:NAME}.variable_scope(\"block_%d\" % (${1:NAME} + ${2:NUMBER})):"
  ],
  "consequent": [
   "with ${0:NAME}.variable_scope(\"block_{}\".format(${1:NAME} + ${2:NUMBER})):"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "raise ValueError(\"Unrecognized model name: %s\" % ${0:NAME})"
  ],
  "consequent": [
   "raise ValueError(\"Unrecognized model name: {}\".format(${0:NAME}))"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "${0:NAME}.warn(\"Bad bkspace %.4f: %s\" % (${1:NAME}, ${2:NAME}))"
  ],
  "consequent": [
   "${0:NAME}.warn(\"Bad bkspace {}: {}\".format(${1:NAME}, ${2:NAME}))"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "raise ValueError(\"Expected 2 or more output_args. Got: %d\" % ${0:NAME})"
  ],
  "consequent": [
   "raise ValueError(         \"Expected 2 or more output_args. Got: {}\".format(${0:NAME}))"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "raise ValueError(\"Unknown optimizer: %s\" % ${0:NAME}.${1:NAME})"
  ],
  "consequent": [
   "raise ValueError(\"Unknown optimizer: {}\".format(${0:NAME}.${1:NAME}))"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "def set_feature(${0:NAME}, ${1:NAME}, ${2:NAME}, ${3:NAME}=None, ${4:NAME}=False):"
  ],
  "consequent": [
   "def set_feature(${0:NAME},                 ${1:NAME},                 ${2:NAME},                 ${3:NAME}=None,                 ${4:NAME}=False,                 bytes_encoding=\"latin-1\"):"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "${0:NAME} ${1:NAME} ${2:NAME} ${3:NAME} an ${4:NAME} ${5:NAME} and returns (features, labels)."
  ],
  "consequent": [
   "${0:NAME} ${1:NAME} ${2:NAME} ${3:NAME} the ${4:NAME} ${5:NAME} and returns a tf.data.Dataset",
   "\tobject."
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "raise ValueError(\"x_min (got: %d) must be less than x_max (got: %d)\" %"
  ],
  "consequent": [
   "raise ValueError(\"x_min (got: {}) must be less than x_max (got: {})\".format("
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "${0:NAME}.append((${1:NAME}, ${2:NAME}.${3:NAME}.join(${4:NAME}.${5:NAME},                                              ${6:STRING})))",
   "\t${0:NAME}.append((${7:NAME}, ${2:NAME}.${3:NAME}.join(${4:NAME}.${5:NAME},                                               ${8:STRING})))"
  ],
  "consequent": [
   "${0:NAME}.append((${1:NAME},                       ${2:NAME}.${3:NAME}.join(${4:NAME}.${5:NAME}, ${6:STRING})))",
   "\t${0:NAME}.append((${7:NAME},                       ${2:NAME}.${3:NAME}.join(${4:NAME}.${5:NAME}, ${8:STRING})))"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "${0:NAME} = ${1:NAME}.concat(           [${2:NAME}[${3:NUMBER}] for ${2:NAME} in ${4:NAME}],           ${5:NAME}=${3:NUMBER},           ${6:NAME}=${7:STRING})"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.concat([${2:NAME}[${3:NUMBER}] for ${2:NAME} in ${4:NAME}],                                     ${5:NAME}=${3:NUMBER},                                     ${6:NAME}=${7:STRING})"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "                         ",
   "\tvalid_indices = np.where(np.isfinite(flux))",
   "    ${0:NAME} = ${0:NAME}[valid_indices]",
   "    flux = flux[valid_indices] ",
   "    if invert:",
   "\tflux *= -1 ",
   "    if ${0:NAME}.${1:NAME}:"
  ],
  "consequent": [
   "if not ${0:NAME}.${1:NAME}:",
   "\tcontinue                                                             ",
   "    if interpolate_missing_time:",
   "\t${0:NAME} = util.interpolate_missing_time(${0:NAME}, light_curve.CADENCENO)"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "${0:NAME}.run(${1:NAME})"
  ],
  "consequent": [
   "}, ${0:NAME}.run(value_ops)) ",
   "\t${0:NAME}.run(${1:NAME})"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "raise IOError(\"Failed to find .fits files in %s for Kepler ID %s\" %"
  ],
  "consequent": [
   "raise IOError(\"Failed to find .fits files in {} for Kepler ID {}\".format("
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "def _build_metrics(${0:NAME}, ${1:NAME}, ${2:NAME}, ${3:NAME}):"
  ],
  "consequent": [
   "def _build_metrics(${0:NAME}, ${1:NAME}, ${2:NAME}, ${3:NAME}, output_dim=1):"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "${0:NAME} = \"%.9d\" % int(${0:NAME})"
  ],
  "consequent": [
   "${0:NAME} = \"{:09d}\".format(int(${0:NAME}))"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "raise TypeError(\"Requested %s, but Feature has %s\" % (${0:NAME}, ${1:NAME}))"
  ],
  "consequent": [
   "raise TypeError(\"Requested {}, but Feature has {}\".format(         ${0:NAME}, ${1:NAME}))"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "include_labels = (       ${0:NAME} in [tf.estimator.ModeKeys.TRAIN, tf.estimator.ModeKeys.EVAL])",
   "\treverse_time_series_prob = 0.5 if ${0:NAME} == tf.estimator.ModeKeys.TRAIN else 0",
   "  shuffle_filenames = (${0:NAME} == tf.estimator.ModeKeys.TRAIN)"
  ],
  "consequent": [
   "return _InputFn(file_pattern, input_config, ${0:NAME}, shuffle_values_buffer,                   repeat)"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "return model_fn"
  ],
  "consequent": [
   "def create_model_fn(model_class, hparams, use_tpu=False):",
   "\t\"\"\"Wraps model_class as an Estimator or TPUEstimator model_fn.",
   "",
   "  Args:",
   "    model_class: AstroModel or a subclass.",
   "    hparams: ConfigDict of configuration parameters for building the model.",
   "    use_tpu: If True, a TPUEstimator model_fn is returned. Otherwise an",
   "      Estimator model_fn is returned.",
   "",
   "  Returns:",
   "    model_fn: A callable that constructs the model and returns a",
   "        TPUEstimatorSpec if use_tpu is True, otherwise an EstimatorSpec.",
   "  \"\"\"",
   "  return _ModelFn(model_class, hparams, use_tpu)"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "\"Cannot fit a spline on less than 4 points. Got %d points.\" % len(${0:NAME}))"
  ],
  "consequent": [
   "\"Cannot fit a spline on less than 4 points. Got {} points.\".format(             len(${0:NAME})))"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "${0:STRING}\"Wraps model_class as an Estimator or TPUEstimator model_fn."
  ],
  "consequent": [
   "${0:STRING}\"Initializes the model function."
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "raise ValueError(               \"Unrecognized pooling_type: %s\" % ${0:NAME}.${1:NAME})"
  ],
  "consequent": [
   "raise ValueError(\"Unrecognized pooling_type: {}\".format(               ${0:NAME}.${1:NAME}))"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "${0:NAME} = model_class(${1:NAME}, ${2:NAME}, ${3:NAME}, ${4:NAME})"
  ],
  "consequent": [
   "${0:NAME} = self._model_class(${1:NAME}, ${2:NAME}, ${3:NAME}, ${4:NAME})"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "set_feature(${0:NAME}, ${1:NAME}, ${2:NAME}, ${3:STRING}, ${4:NAME})"
  ],
  "consequent": [
   "set_feature(${0:NAME}, ${1:NAME}, ${2:NAME}, ${3:STRING}, ${4:NAME}, bytes_encoding)"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "${0:NAME} = _MockModel(${1:NAME}, ${2:NAME}, ${3:NAME}, ${4:NAME})"
  ],
  "consequent": [
   "${0:NAME} = _MockModel(${1:NAME}, ${2:NAME}, ${3:NAME}, ${4:NAME}, output_dim=1)"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "invert=False):"
  ],
  "consequent": [
   "scramble_type=None,",
   "\tinterpolate_missing_time=False):"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "raise ValueError(\"Unrecognized kind: %s\" % ${0:NAME})"
  ],
  "consequent": [
   "raise ValueError(\"Unrecognized kind: {}\".format(${0:NAME}))"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "${0:NAME}.append((${1:NAME}[${2:NAME}:${3:NAME}], ${4:NAME}.${5:NAME}.join("
  ],
  "consequent": [
   "filename = ${4:NAME}.${5:NAME}.join(         FLAGS.output_dir, \"train-{:05d}-of-{:05d}\".format(             i, FLAGS.num_train_shards))",
   "\t${0:NAME}.append((${1:NAME}[${2:NAME}:${3:NAME}], filename))"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "estimator_util"
  ],
  "consequent": [
   "estimator_runner"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "dataset = dataset_ops.build_dataset(         file_pattern=file_pattern,         input_config=input_config,         batch_size=params[\"batch_size\"],         include_labels=include_labels,         reverse_time_series_prob=reverse_time_series_prob,         shuffle_filenames=shuffle_filenames,         shuffle_values_buffer=shuffle_values_buffer,         repeat=repeat,         use_tpu=use_tpu)"
  ],
  "consequent": [
   "class _ModelFn(object):",
   "\t\"\"\"Class that acts as a callable model function for Estimator train / eval.\"\"\""
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "def model_fn(${0:NAME}, ${1:NAME}, ${2:NAME}, ${3:NAME}):"
  ],
  "consequent": [
   "def __call__(self, ${0:NAME}, ${1:NAME}, ${2:NAME}, ${3:NAME}):"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "raise ValueError(\"Unknown input type: %s\" % ${0:NAME})"
  ],
  "consequent": [
   "raise ValueError(\"Unknown input type: {}\".format(${0:NAME}))"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "${0:STRING}\"${1:NAME} ${2:NAME}. ${3:NAME} ${4:NAME} ${5:NAME} ${6:NAME} is ${7:NAME} in build()."
  ],
  "consequent": [
   "${0:STRING}\"${1:NAME} ${2:NAME}. ",
   "\t${3:NAME} ${4:NAME} ${5:NAME} ${6:NAME} is ${7:NAME} in build()."
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "raise ValueError(\"num_bins must be at least 2. Got: %d\" % ${0:NAME})"
  ],
  "consequent": [
   "raise ValueError(\"num_bins must be at least 2. Got: {}\".format(${0:NAME}))"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "${0:NAME}: ${1:NAME} True, ${2:NAME} ${3:NAME} model_fn is ${4:NAME}. ${5:NAME} an"
  ],
  "consequent": [
   "${0:NAME}: ${1:NAME} True, ${2:NAME} ${3:NAME} will be ${4:NAME}. ${5:NAME} an Estimator",
   "\twill be ${4:NAME}."
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "for ${0:NAME}, ${1:NAME}, ${2:NAME} in zip("
  ],
  "consequent": [
   "for ${0:NAME}, ${1:NAME}, ${2:NAME} in zip(all_time, all_masked_time,"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "${0:NAME}: ${1:NAME} of configuration parameters for ${2:NAME} ${3:NAME} ${4:NAME}."
  ],
  "consequent": [
   "${0:NAME}: ${1:NAME} containing hyperparameters for ${2:NAME} and training",
   "\t${3:NAME} ${4:NAME}."
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "${0:NAME} ${1:NAME} ${2:NAME} ${3:NAME}. ${4:NAME} ${5:NAME} ${6:NAME} ${7:NAME} allow"
  ],
  "consequent": [
   "${0:NAME} ${1:NAME} ${2:NAME} ${3:NAME}. ${4:NAME} ${5:NAME} ${6:NAME} ${7:NAME} allow more"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "${0:NAME} is ${1:NAME} ${2:NAME} ${3:NAME} ${4:NAME} ${5:NAME} ${6:NAME} ${3:NAME} shape"
  ],
  "consequent": [
   "${0:NAME} is ${1:NAME} ${2:NAME} ${3:NAME} ${4:NAME} ${5:NAME} ${6:NAME} ${3:NAME} shape [batch_size, length]."
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "${0:NAME} = [str(${1:NAME}).encode(\"latin-1\") for ${1:NAME} in ${0:NAME}]"
  ],
  "consequent": [
   "${0:NAME} = [str(${1:NAME}).encode(bytes_encoding) for ${1:NAME} in ${0:NAME}]"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "${0:NAME}.${1:NAME}.join(${2:NAME}.${3:NAME}, \"0114/011442793/kplr011442793-%s_llc.fits\")"
  ],
  "consequent": [
   "${0:NAME}.${1:NAME}.join(${2:NAME}.${3:NAME},                      \"0114/011442793/kplr011442793-{}_llc.fits\".format(q))"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "return _build_metrics(${0:NAME}, ${1:NAME}, ${2:NAME}, ${3:NAME})"
  ],
  "consequent": [
   "return _build_metrics(         ${0:NAME},         ${1:NAME},         ${2:NAME},         ${3:NAME},         output_dim=model.hparams.output_dim)"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "${0:NAME} = copy.deepcopy(${0:NAME})"
  ],
  "consequent": [
   "self._model_class = model_class",
   "\tself._base_hparams = ${0:NAME}",
   "    self._use_tpu = use_tpu"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "more ${0:NAME} ${1:NAME} ${2:NAME} used (${3:NAME}.${4:NAME}. ${5:NAME} break-${6:NAME} ${7:NAME}), and"
  ],
  "consequent": [
   "${0:NAME} ${1:NAME} ${2:NAME} used (${3:NAME}.${4:NAME}. ${5:NAME} break-${6:NAME} ${7:NAME}), and vice-versa."
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "${0:NAME}: AstroModel or a subclass."
  ],
  "consequent": [
   "${0:NAME}: Model class."
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "raise ValueError(\"bin_width must be positive. Got: %d\" % ${0:NAME})"
  ],
  "consequent": [
   "raise ValueError(\"bin_width must be positive. Got: {}\".format(${0:NAME}))"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "invert: ${0:NAME} ${1:NAME} invert ${2:NAME} ${3:NAME} measurements by multiplying by -1."
  ],
  "consequent": [
   "scramble_type: What scrambling procedure ${1:NAME} use: 'SCR1', 'SCR2', or 'SCR3'",
   "\t(pg 9: https://exoplanetarchive.ipac.caltech.edu/docs/KSCI-19114-002.pdf).",
   "    interpolate_missing_time: ${0:NAME} ${1:NAME} interpolate missing (NaN) time values.",
   "\tThis should only affect ${2:NAME} output if scramble_type is specified (NaN time       values typically come with NaN ${3:NAME} values, which are removed anyway, but       scrambing decouples NaN time values from NaN ${3:NAME} values)."
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "${0:NAME} = _MockModel(${1:NAME}, ${2:NAME}, ${3:NAME}, ${4:NAME})"
  ],
  "consequent": [
   "${0:NAME} = _MockModel(${1:NAME}, ${2:NAME}, ${3:NAME}, ${4:NAME}, output_dim=4)"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "len(${0:NAME})))"
  ],
  "consequent": [
   "x_len, len(${0:NAME})))"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "raise ValueError(\"Config name '%s' not found in configuration module: %s\" %"
  ],
  "consequent": [
   "raise ValueError(         \"Config name '{}' not found in configuration module: {}\".format("
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "raise ValueError(\"Found no input files matching %s\" % ${0:NAME})"
  ],
  "consequent": [
   "raise ValueError(\"Found no input files matching {}\".format(${0:NAME}))"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "\"outliers, got %d points.\" % ${0:NAME}.sum(${1:NAME}))"
  ],
  "consequent": [
   "\"outliers, got {} points.\".format(${0:NAME}.sum(${1:NAME})))"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "raise ValueError(\"Expected mode in %s. Got: %s\" % (${0:NAME}, ${1:NAME}))"
  ],
  "consequent": [
   "raise ValueError(\"Expected mode in {}. Got: {}\".format(${0:NAME}, ${1:NAME}))"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "raise ValueError(\"len(x) (got: %d) must equal len(y) (got: %d)\" % (x_len,"
  ],
  "consequent": [
   "raise ValueError(\"len(x) (got: {}) must equal len(y) (got: {})\".format("
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "estimator_util.evaluate(${0:NAME}, ${1:NAME}, ${2:NAME}=${3:NAME}.${2:NAME})"
  ],
  "consequent": [
   "eval_steps = None                                           ",
   "\teval_args = {${3:NAME}.${2:NAME}: (${1:NAME}, eval_steps)}",
   "  estimator_runner.evaluate(${0:NAME}, eval_args)"
  ]
 },
 {
  "number": 5518,
  "sha": "b98409cb5fc09d51e8aaee7d294efd23bdf47b58",
  "author": "tfboyd",
  "participant": "robieta",
  "created_at": "2018-10-13 15:03:09",
  "condition": [
   "${0:NAME}.define_performance()"
  ],
  "consequent": [
   "${0:NAME}.define_performance(num_parallel_calls=False,                                 tf_gpu_thread_mode=True,                                 datasets_num_private_threads=True,                                 datasets_num_parallel_batches=True)"
  ]
 },
 {
  "number": 5518,
  "sha": "b98409cb5fc09d51e8aaee7d294efd23bdf47b58",
  "author": "tfboyd",
  "participant": "robieta",
  "created_at": "2018-10-13 15:03:09",
  "condition": [
   "num_parallel_calls"
  ],
  "consequent": [
   "datasets_num_parallel_batches"
  ]
 },
 {
  "number": 5518,
  "sha": "b98409cb5fc09d51e8aaee7d294efd23bdf47b58",
  "author": "tfboyd",
  "participant": "robieta",
  "created_at": "2018-10-13 15:03:09",
  "condition": [
   "${0:NAME} ${1:NAME} ${2:NAME} private ${3:NAME} ${4:NAME} for GPU with `${5:NAME}=${6:NAME}`"
  ],
  "consequent": [
   "${0:NAME} ${1:NAME} ${2:NAME} gpu ${3:NAME} ${4:NAME} with `${5:NAME}=${6:NAME}` may perform"
  ]
 },
 {
  "number": 5518,
  "sha": "b98409cb5fc09d51e8aaee7d294efd23bdf47b58",
  "author": "tfboyd",
  "participant": "robieta",
  "created_at": "2018-10-13 15:03:09",
  "condition": [
   "def input_fn(${0:NAME}, ${1:NAME}, ${2:NAME}, ${3:NAME}=${4:NUMBER}, num_gpus=None,"
  ],
  "consequent": [
   "def input_fn(${0:NAME}, ${1:NAME}, ${2:NAME}, ${3:NAME}=${4:NUMBER},"
  ]
 },
 {
  "number": 5518,
  "sha": "b98409cb5fc09d51e8aaee7d294efd23bdf47b58",
  "author": "tfboyd",
  "participant": "robieta",
  "created_at": "2018-10-13 15:03:09",
  "condition": [
   "Adjust"
  ],
  "consequent": [
   "Override"
  ]
 },
 {
  "number": 5518,
  "sha": "b98409cb5fc09d51e8aaee7d294efd23bdf47b58",
  "author": "tfboyd",
  "participant": "robieta",
  "created_at": "2018-10-13 15:03:09",
  "condition": [
   "print('Logical CPU cores:', ${0:NAME})"
  ],
  "consequent": [
   "tf.logging.info('Logical CPU cores: %s', ${0:NAME})"
  ]
 },
 {
  "number": 5518,
  "sha": "b98409cb5fc09d51e8aaee7d294efd23bdf47b58",
  "author": "tfboyd",
  "participant": "robieta",
  "created_at": "2018-10-13 15:03:09",
  "condition": [
   "set_environment_vars"
  ],
  "consequent": [
   "override_flags_and_set_envars_for_gpu_thread_pool"
  ]
 },
 {
  "number": 5518,
  "sha": "b98409cb5fc09d51e8aaee7d294efd23bdf47b58",
  "author": "tfboyd",
  "participant": "robieta",
  "created_at": "2018-10-13 15:03:09",
  "condition": [
   "num_private_threads = (${0:NAME} - total_gpu_thread_count"
  ],
  "consequent": [
   "flags_obj.datasets_num_private_threads = (${0:NAME} - total_gpu_thread_count"
  ]
 },
 {
  "number": 5518,
  "sha": "b98409cb5fc09d51e8aaee7d294efd23bdf47b58",
  "author": "tfboyd",
  "participant": "robieta",
  "created_at": "2018-10-13 15:03:09",
  "condition": [
   "print('TF_GPU_THREAD_COUNT:', ${0:NAME}.${1:NAME}[${2:STRING}])"
  ],
  "consequent": [
   "tf.logging.info('TF_GPU_THREAD_COUNT: %s', ${0:NAME}.${1:NAME}[${2:STRING}])",
   "\ttf.logging.info('TF_GPU_THREAD_MODE: %s', ${0:NAME}.${1:NAME}['TF_GPU_THREAD_MODE'])"
  ]
 },
 {
  "number": 5518,
  "sha": "b98409cb5fc09d51e8aaee7d294efd23bdf47b58",
  "author": "tfboyd",
  "participant": "robieta",
  "created_at": "2018-10-13 15:03:09",
  "condition": [
   "${0:NAME} = set_environment_vars(${1:NAME})"
  ],
  "consequent": [
   "                                                                       ",
   "\tif ${1:NAME}.tf_gpu_thread_mode:",
   "\toverride_flags_and_set_envars_for_gpu_thread_pool(${1:NAME})                                                                                                                            ",
   "  ${0:NAME} = tf.ConfigProto(       inter_op_parallelism_threads=${1:NAME}.inter_op_parallelism_threads,       intra_op_parallelism_threads=${1:NAME}.intra_op_parallelism_threads,       allow_soft_placement=True)"
  ]
 },
 {
  "number": 5518,
  "sha": "b98409cb5fc09d51e8aaee7d294efd23bdf47b58",
  "author": "tfboyd",
  "participant": "robieta",
  "created_at": "2018-10-13 15:03:09",
  "condition": [
   "num_gpus=num_gpus,",
   "\texamples_per_epoch=_NUM_IMAGES['train'] if is_training else None,",
   "      ${0:NAME}=${0:NAME}"
  ],
  "consequent": [
   "${0:NAME}=${0:NAME},",
   "\tdatasets_num_private_threads=datasets_num_private_threads,",
   "      num_parallel_batches=num_parallel_batches"
  ]
 },
 {
  "number": 5299,
  "sha": "9cc4cec8295c002f1edea50fc21a58bc97cc0ef4",
  "author": "samikama",
  "participant": "karmel",
  "created_at": "2018-09-13 02:39:26",
  "condition": [
   "_collect_gpu_info(${0:NAME},${1:NAME})"
  ],
  "consequent": [
   "_collect_gpu_info(${0:NAME}, ${1:NAME})"
  ]
 },
 {
  "number": 5299,
  "sha": "9cc4cec8295c002f1edea50fc21a58bc97cc0ef4",
  "author": "samikama",
  "participant": "karmel",
  "created_at": "2018-09-13 02:39:26",
  "condition": [
   "def _collect_gpu_info(${0:NAME},${1:NAME}=None):"
  ],
  "consequent": [
   "def _collect_gpu_info(${0:NAME}, ${1:NAME}=None):"
  ]
 },
 {
  "number": 5253,
  "sha": "5c0c749b5e4fdf0588ae929008cd0036f0f83b9b",
  "author": "tfboyd",
  "participant": "robieta",
  "created_at": "2018-09-05 21:29:46",
  "condition": [
   "lambda ${0:NAME}: ${1:NAME}.parse_record(${0:NAME}, False))"
  ],
  "consequent": [
   "lambda ${0:NAME}: ${1:NAME}.parse_record(${0:NAME}, False, tf.float32))"
  ]
 },
 {
  "number": 5225,
  "sha": "967133c11ef03207e758b8b3f88f6791a4dd6b6d",
  "author": "tfboyd",
  "participant": "robieta",
  "created_at": "2018-09-02 15:42:55",
  "condition": [
   "${0:NAME} ${1:NAME} removed ${2:NAME} aspects ${3:NAME} ${4:NAME} ${5:NAME} ${6:NAME} other than ${4:NAME}",
   "\t${7:NAME} ${8:NAME} ${9:NAME} ${10:NAME}. ${0:NAME} is useful in debugging ${5:NAME} ${6:NAME} performance."
  ],
  "consequent": [
   "${0:NAME} ${1:NAME} returns a data set that iterates over a set ${3:NAME} random data and",
   "\tbypasses ${2:NAME} preprocessing, e.g. jpeg decode and ${10:NAME}. The ${7:NAME} ${8:NAME} ${9:NAME}",
   "  ${10:NAME} is still included. ${0:NAME} used ${8:NAME} find ${4:NAME} upper throughput bound when",
   "  tunning ${4:NAME} full ${5:NAME} ${6:NAME}."
  ]
 },
 {
  "number": 5058,
  "sha": "e9dbef6be831bac9c5cbacf6b3b13e4557e4777c",
  "author": "raymond-yuan",
  "participant": "googlebot",
  "created_at": "2018-08-10 16:53:25",
  "condition": [
   "${0:NAME} = -${1:NAME}.${2:NAME}.softmax_cross_entropy_with_logits_v2(${3:NAME}=${4:NAME}, ${5:NAME}=${5:NAME})"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.${2:NAME}.softmax_cross_entropy_with_logits_v2(${3:NAME}=${4:NAME}, ${5:NAME}=${5:NAME})"
  ]
 },
 {
  "number": 4852,
  "sha": "60613a8729122012c3f6739550de981d01087326",
  "author": "raymond-yuan",
  "participant": "alextp",
  "created_at": "2018-07-20 23:11:13",
  "condition": [
   "${0:NAME}, ${1:NAME} = model(tf_wrap(${2:NAME}[None, :]))"
  ],
  "consequent": [
   "${0:NAME}, ${1:NAME} = model(tf.convert_to_tensor(${2:NAME}[None, :], dtype=tf.float32))"
  ]
 },
 {
  "number": 4852,
  "sha": "60613a8729122012c3f6739550de981d01087326",
  "author": "raymond-yuan",
  "participant": "alextp",
  "created_at": "2018-07-20 23:11:13",
  "condition": [
   "${0:NAME} = ${1:NAME}.reduce_mean((${2:NAME} + ${3:NAME}))"
  ],
  "consequent": [
   "${3:NAME} *= ${1:NAME}.stop_gradient(advantage)",
   "\t${3:NAME} -= 0.01 * entropy",
   "    ${0:NAME} = ${1:NAME}.reduce_mean((0.5 * ${2:NAME} + ${3:NAME}))"
  ]
 },
 {
  "number": 4852,
  "sha": "60613a8729122012c3f6739550de981d01087326",
  "author": "raymond-yuan",
  "participant": "alextp",
  "created_at": "2018-07-20 23:11:13",
  "condition": [
   "${0:NAME}.add_argument(${1:STRING}, ${2:NAME}=2000, ${3:NAME}=${4:NAME},"
  ],
  "consequent": [
   "${0:NAME}.add_argument(${1:STRING}, ${2:NAME}=1000, ${3:NAME}=${4:NAME},"
  ]
 },
 {
  "number": 4852,
  "sha": "60613a8729122012c3f6739550de981d01087326",
  "author": "raymond-yuan",
  "participant": "alextp",
  "created_at": "2018-07-20 23:11:13",
  "condition": [
   "${0:NAME}.add_argument(\"--train\", type=str2bool, ${1:NAME}=True,                     ${2:NAME}='Train our model or to run an existing model and '                          'watch it play.')",
   "${0:NAME}.add_argument(${3:STRING}, ${1:NAME}=0.0005,"
  ],
  "consequent": [
   "${0:NAME}.add_argument('--train', dest='train', action='store_true',                     ${2:NAME}='Train our model.')",
   "${0:NAME}.add_argument(${3:STRING}, ${1:NAME}=0.001,"
  ]
 },
 {
  "number": 4852,
  "sha": "60613a8729122012c3f6739550de981d01087326",
  "author": "raymond-yuan",
  "participant": "alextp",
  "created_at": "2018-07-20 23:11:13",
  "condition": [
   "${0:NAME}, ${1:NAME}=${2:NAME}.${1:NAME}) for ${0:NAME} in range(${3:NAME}.cpu_count())]"
  ],
  "consequent": [
   "${1:NAME}=${2:NAME}.${1:NAME}) for ${0:NAME} in range(${3:NAME}.cpu_count())]"
  ]
 },
 {
  "number": 4852,
  "sha": "60613a8729122012c3f6739550de981d01087326",
  "author": "raymond-yuan",
  "participant": "alextp",
  "created_at": "2018-07-20 23:11:13",
  "condition": [
   "${0:NAME} = -${1:NAME}.${2:NAME}.softmax_cross_entropy_with_logits_v2(${3:NAME}=${4:NAME},"
  ],
  "consequent": [
   "policy = ${1:NAME}.${2:NAME}.softmax(logits)",
   "\tentropy = ${1:NAME}.reduce_sum(policy * ${1:NAME}.log(policy + 1e-20), axis=1) ",
   "    ${0:NAME} = ${1:NAME}.${2:NAME}.softmax_cross_entropy_with_logits_v2(${3:NAME}=${4:NAME},"
  ]
 },
 {
  "number": 4852,
  "sha": "60613a8729122012c3f6739550de981d01087326",
  "author": "raymond-yuan",
  "participant": "alextp",
  "created_at": "2018-07-20 23:11:13",
  "condition": [
   "${0:NAME} = ${1:NAME}.local_model(tf_wrap(${2:NAME}[None, :]))[-${3:NUMBER}].numpy()[${4:NUMBER}]"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.local_model(           tf.convert_to_tensor(${2:NAME}[None, :],                                dtype=tf.float32))[-${3:NUMBER}].numpy()[${4:NUMBER}]"
  ]
 },
 {
  "number": 4852,
  "sha": "60613a8729122012c3f6739550de981d01087326",
  "author": "raymond-yuan",
  "participant": "alextp",
  "created_at": "2018-07-20 23:11:13",
  "condition": [
   "${0:NAME}, ${1:NAME} = ${2:NAME}.local_model(tf_wrap(${3:NAME}[None, :]))"
  ],
  "consequent": [
   "${0:NAME}, ${1:NAME} = ${2:NAME}.local_model(             tf.convert_to_tensor(${3:NAME}[None, :],                                  dtype=tf.float32))"
  ]
 },
 {
  "number": 4852,
  "sha": "60613a8729122012c3f6739550de981d01087326",
  "author": "raymond-yuan",
  "participant": "alextp",
  "created_at": "2018-07-20 23:11:13",
  "condition": [
   "${0:NAME}, ${1:NAME} = ${2:NAME}.local_model(tf_wrap(${3:NAME}.vstack(${4:NAME}.${5:NAME})))"
  ],
  "consequent": [
   "${0:NAME}, ${1:NAME} = ${2:NAME}.local_model(         tf.convert_to_tensor(${3:NAME}.vstack(${4:NAME}.${5:NAME}),                              dtype=tf.float32))"
  ]
 },
 {
  "number": 4852,
  "sha": "60613a8729122012c3f6739550de981d01087326",
  "author": "raymond-yuan",
  "participant": "alextp",
  "created_at": "2018-07-20 23:11:13",
  "condition": [
   "${0:NAME} = tf_wrap(${1:NAME}.array(${2:NAME})[:, None]) - values"
  ],
  "consequent": [
   "${0:NAME} = tf.convert_to_tensor(${1:NAME}.array(${2:NAME})[:, None],                             dtype=tf.float32) - values"
  ]
 },
 {
  "number": 4852,
  "sha": "60613a8729122012c3f6739550de981d01087326",
  "author": "raymond-yuan",
  "participant": "alextp",
  "created_at": "2018-07-20 23:11:13",
  "condition": [
   "                                   ",
   "\twith tf.device('/cpu:0'):",
   "\t${0:NAME} = [Worker(${1:NAME}.${2:NAME},"
  ],
  "consequent": [
   "${0:NAME} = [Worker(${1:NAME}.${2:NAME},"
  ]
 },
 {
  "number": 4628,
  "sha": "f27ec7f61226224efd03d4bcce306521ba7067f0",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-25 23:01:51",
  "condition": [
   "${0:NAME}.chmod(${1:NAME}.${2:NAME}, 0o744)"
  ],
  "consequent": [
   "                                      ",
   "\t${0:NAME}.chmod(${1:NAME}.${2:NAME}, stat.S_IRWXU | stat.S_IRGRP | stat.S_IROTH)"
  ]
 },
 {
  "number": 4614,
  "sha": "ddee8c74a282fc64929323f45e87b58e47173667",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-24 05:05:07",
  "condition": [
   "def read_and_process_light_curve(${0:NAME}, ${1:NAME}, max_gap_width=0.75):",
   "\t${2:STRING}\"${3:NAME} ${4:NAME} ${5:NAME} ${6:NAME}, fits ${4:NAME} B-spline and divides the ${6:NAME} by the spline."
  ],
  "consequent": [
   "def read_light_curve(${0:NAME}, ${1:NAME}):",
   "\t${2:STRING}\"${3:NAME} ${4:NAME} Kepler ${5:NAME} ${6:NAME}."
  ]
 },
 {
  "number": 4614,
  "sha": "ddee8c74a282fc64929323f45e87b58e47173667",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-24 05:05:07",
  "condition": [
   "${0:NAME}: ${1:NAME} ${2:NAME} ${3:NUMBER}${4:NAME} ${5:NAME} ${6:NAME}; ${7:NAME} flux (brightness) ${8:NAME} ${2:NAME} ${7:NAME} light"
  ],
  "consequent": [
   "${0:NAME}: ${1:NAME} ${2:NAME} ${3:NUMBER}${4:NAME} ${5:NAME} ${6:NAME}; ${7:NAME} flux ${8:NAME} ${2:NAME} ${7:NAME} light curve."
  ]
 },
 {
  "number": 4614,
  "sha": "ddee8c74a282fc64929323f45e87b58e47173667",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-24 05:05:07",
  "condition": [
   "all_time, all_flux = ${0:NAME}.read_kepler_light_curve(${1:NAME})"
  ],
  "consequent": [
   "return ${0:NAME}.read_kepler_light_curve(${1:NAME})"
  ]
 },
 {
  "number": 4614,
  "sha": "ddee8c74a282fc64929323f45e87b58e47173667",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-24 05:05:07",
  "condition": [
   "flux: 1D NumPy array; ${0:NAME} normalized flux values ${1:NAME} ${0:NAME} light curve."
  ],
  "consequent": [
   "all_flux: A list ${1:NAME} numpy arrays corresponding to ${0:NAME} time arrays in",
   "\tall_time."
  ]
 },
 {
  "number": 4614,
  "sha": "ddee8c74a282fc64929323f45e87b58e47173667",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-24 05:05:07",
  "condition": [
   "${0:NAME} = ${1:NAME}.concatenate([${1:NAME}.diff(${2:NAME}) / ${1:NAME}.sqrt(${3:NUMBER}) for ${2:NAME} in ${4:NAME}])"
  ],
  "consequent": [
   "${0:NAME} = [${1:NAME}.diff(${2:NAME}) / ${1:NAME}.sqrt(${3:NUMBER}) for ${2:NAME} in ${4:NAME}]",
   "\t${0:NAME} = ${1:NAME}.concatenate(${0:NAME}) if ${0:NAME} else ${1:NAME}.array([])"
  ]
 },
 {
  "number": 4614,
  "sha": "ddee8c74a282fc64929323f45e87b58e47173667",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-24 05:05:07",
  "condition": [
   "${0:NAME}: 1D NumPy array; ${1:NAME} ${0:NAME} ${2:NAME} ${3:NAME} ${1:NAME} ${4:NAME} ${5:NAME}."
  ],
  "consequent": [
   "all_time: A list ${3:NAME} numpy arrays; ${1:NAME} ${0:NAME} ${2:NAME} ${3:NAME} ${1:NAME} raw ${4:NAME} ${5:NAME}."
  ]
 },
 {
  "number": 4614,
  "sha": "ddee8c74a282fc64929323f45e87b58e47173667",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-24 05:05:07",
  "condition": [
   "                                                                                    ",
   "\tbkspaces = np.logspace(np.log10(0.5), np.log10(20), num=20)                      ",
   "  ${0:NAME} = ${1:NAME}.choose_kepler_spline(       ${2:NAME}, ${3:NAME}, bkspaces, penalty_coeff=1.0, ${4:NAME}=False)[${5:NUMBER}] ",
   "  if ${0:NAME} is None:",
   "\traise ValueError(\"Failed to fit spline with Kepler ID %s\", kepid)"
  ],
  "consequent": [
   "                                                      ",
   "\t${0:NAME} = ${1:NAME}.fit_kepler_spline(${2:NAME}, ${3:NAME}, ${4:NAME}=False)[${5:NUMBER}]"
  ]
 },
 {
  "number": 4614,
  "sha": "ddee8c74a282fc64929323f45e87b58e47173667",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-24 05:05:07",
  "condition": [
   "                                   ",
   "\ttime, flux = ${0:NAME}.read_and_process_light_curve(${1:NAME}.${2:NAME},"
  ],
  "consequent": [
   "all_time, all_flux = ${0:NAME}.read_light_curve(${1:NAME}.${2:NAME},"
  ]
 },
 {
  "number": 4614,
  "sha": "ddee8c74a282fc64929323f45e87b58e47173667",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-24 05:05:07",
  "condition": [
   "${0:NAME}, ${1:NAME} = ${2:NAME}.split(${0:NAME}, ${1:NAME}, ${3:NAME}=max_gap_width)"
  ],
  "consequent": [
   "${0:NAME}, ${1:NAME} = ${2:NAME}.split(${0:NAME}, ${1:NAME}, ${3:NAME}=0.75)"
  ]
 },
 {
  "number": 4570,
  "sha": "20da056d32106cca5b8fce4d44fb415754b1eb1e",
  "author": "djoshea",
  "participant": "sussillo",
  "created_at": "2018-06-18 22:37:42",
  "condition": [
   "${0:NAME} expected value is taken over hidden (z) variables, namely ${1:NAME} ${2:NAME}",
   "\t${3:NAME} and ${1:NAME} ${4:NAME} ${5:NAME}, by pushing ${1:NAME} ${6:NAME} ${7:NAME} for ${8:NAME}",
   "    ${9:NAME} ${1:NAME} ${10:NAME} rather than by sampling (as in ${11:NAME})",
   "    A ${12:NAME} ${13:NAME} ${14:NAME} ${15:NAME} ${16:NAME} ${17:NAME} ${18:NAME} ${19:NAME} time."
  ],
  "consequent": [
   "${0:NAME} ${6:NAME} ${7:NAME} for ${8:NAME} ${2:NAME} ${3:NAME} and ${1:NAME} ${4:NAME} ${5:NAME} ${16:NAME}",
   "\tpushed ${9:NAME} ${1:NAME} ${10:NAME} instead ${13:NAME} sampling (as is done in     ${11:NAME}).",
   "    This is ${19:NAME} quick and approximate version ${13:NAME} estimating these ${7:NAME} instead",
   "    ${13:NAME} sampling from ${1:NAME} posterior many times and then averaging those ${7:NAME} ${13:NAME}",
   "    interest. ",
   "    Internally, ${19:NAME} ${12:NAME} ${13:NAME} ${14:NAME} ${15:NAME} ${16:NAME} ${17:NAME} ${9:NAME} ${1:NAME} ${10:NAME} ${18:NAME} once."
  ]
 },
 {
  "number": 4570,
  "sha": "20da056d32106cca5b8fce4d44fb415754b1eb1e",
  "author": "djoshea",
  "participant": "sussillo",
  "created_at": "2018-06-18 22:37:42",
  "condition": [
   "${0:STRING}\"${1:NAME} ${2:NAME} value for goodies for ${2:NAME} entire ${3:NAME} using ${2:NAME} means"
  ],
  "consequent": [
   "${0:STRING}\"${1:NAME} values of interest for ${2:NAME}  ${3:NAME} by pushing ${2:NAME} means through"
  ]
 },
 {
  "number": 4570,
  "sha": "20da056d32106cca5b8fce4d44fb415754b1eb1e",
  "author": "djoshea",
  "participant": "sussillo",
  "created_at": "2018-06-18 22:37:42",
  "condition": [
   "def _case_with_no_default(pairs):",
   "\tdef _default_value_fn():",
   "\twith ${0:NAME}.control_dependencies([${0:NAME}.Assert(False, [\"Reached default\"])]):",
   "\treturn ${0:NAME}.identity(pairs[0][1]())",
   "      return ${0:NAME}.case(pairs, _default_value_fn, ${1:NAME}=True)",
   "    ${2:NAME} = _case_with_no_default(${3:NAME})",
   "\t${4:NAME} = _case_with_no_default(${5:NAME})",
   "    ${6:NAME} = _case_with_no_default(${7:NAME})",
   "    ${8:NAME} = _case_with_no_default(${9:NAME})"
  ],
  "consequent": [
   "${2:NAME} = ${0:NAME}.case(${3:NAME}, ${1:NAME}=True)",
   "\t${4:NAME} = ${0:NAME}.case(${5:NAME}, ${1:NAME}=True)",
   "    ${6:NAME} = ${0:NAME}.case(${7:NAME}, ${1:NAME}=True)",
   "    ${8:NAME} = ${0:NAME}.case(${9:NAME}, ${1:NAME}=True)"
  ]
 },
 {
  "number": 4570,
  "sha": "20da056d32106cca5b8fce4d44fb415754b1eb1e",
  "author": "djoshea",
  "participant": "sussillo",
  "created_at": "2018-06-18 22:37:42",
  "condition": [
   "averaged"
  ],
  "consequent": [
   "estimated"
  ]
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "condition": [
   "               ",
   "\tabs_deviations = ${0:NAME}.concatenate([${0:NAME}.abs(${1:NAME}[1:] - ${1:NAME}[:-1]) for ${1:NAME} in ${2:NAME}])",
   "  sigma = ${0:NAME}.median(abs_deviations) * 1.48 / ${0:NAME}.sqrt(${3:NUMBER})"
  ],
  "consequent": [
   "                                                                                                                                                                                                                                                                                                                                         ",
   "\tscaled_diffs = ${0:NAME}.concatenate([${0:NAME}.diff(${1:NAME}) / ${0:NAME}.sqrt(${3:NUMBER}) for ${1:NAME} in ${2:NAME}])",
   "  if not scaled_diffs.size:",
   "\tbest_spline = [${0:NAME}.array([${0:NAME}.nan] * len(${1:NAME})) for ${1:NAME} in ${2:NAME}]",
   "    metadata.light_curve_mask = [         ${0:NAME}.zeros_like(${1:NAME}, dtype=${0:NAME}.bool) for ${1:NAME} in ${2:NAME}     ]",
   "    return best_spline, metadata"
  ]
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "condition": [
   "_rmse"
  ],
  "consequent": [
   "all_flux"
  ]
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "condition": [
   "${0:NAME}.append(${1:NAME})"
  ],
  "consequent": [
   "metadata.${0:NAME}.append(${1:NAME})"
  ]
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "condition": [
   "time, flux, ${0:NAME}, ${1:NAME}=${2:NUMBER})"
  ],
  "consequent": [
   "all_time, all_flux, ${0:NAME}, ${1:NAME}=${2:NUMBER})"
  ]
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "condition": [
   "def testChooseKeplerSpline(${0:NAME}):"
  ],
  "consequent": [
   "class ChooseKeplerSplineTest(absltest.TestCase): ",
   "\tdef testNoPoints(${0:NAME}):",
   "\tall_time = [np.array([])]",
   "    all_flux = [np.array([])]                                                              ",
   "    bkspaces = np.logspace(np.log10(0.5), np.log10(5), num=20) ",
   "    spline, metadata = kepler_spline.choose_kepler_spline(         all_time, all_flux, bkspaces, penalty_coeff=1.0, verbose=False)",
   "    np.testing.assert_array_equal(spline, [[]])",
   "    np.testing.assert_array_equal(metadata.light_curve_mask, [[]]) ",
   "  def testTooFewPoints(${0:NAME}):                                                 ",
   "\tall_time = [         np.array([0.1]),         np.array([0.2, 0.3]),         np.array([0.4, 0.5, 0.6])     ]",
   "    all_flux = [np.sin(t) for t in all_time]                                                              ",
   "    bkspaces = np.logspace(np.log10(0.5), np.log10(5), num=20) ",
   "    spline, metadata = kepler_spline.choose_kepler_spline(         all_time, all_flux, bkspaces, penalty_coeff=1.0, verbose=False)                             ",
   "    ${0:NAME}.assertTrue(np.all(np.isnan(np.concatenate(spline))))",
   "    ${0:NAME}.assertFalse(np.any(np.concatenate(metadata.light_curve_mask)))",
   "    ${0:NAME}.assertIsNone(metadata.bkspace)",
   "    ${0:NAME}.assertEmpty(metadata.bad_bkspaces)",
   "    ${0:NAME}.assertIsNone(metadata.likelihood_term)",
   "    ${0:NAME}.assertIsNone(metadata.penalty_term)",
   "    ${0:NAME}.assertIsNone(metadata.bic)                             ",
   "    all_time.append(np.arange(0.7, 2.0, 0.1))",
   "    all_flux.append(np.sin(all_time[-1])) ",
   "    spline, metadata = kepler_spline.choose_kepler_spline(         all_time, all_flux, bkspaces, penalty_coeff=1.0, verbose=False)                                 ",
   "    for i in range(3):",
   "\t${0:NAME}.assertTrue(np.all(np.isnan(spline[i])))",
   "      ${0:NAME}.assertFalse(np.any(metadata.light_curve_mask[i]))                                    ",
   "    ${0:NAME}.assertTrue(np.all(np.isfinite(spline[3])))",
   "    ${0:NAME}.assertTrue(np.all(metadata.light_curve_mask[3]))",
   "    ${0:NAME}.assertEmpty(metadata.bad_bkspaces)",
   "    ${0:NAME}.assertAlmostEqual(metadata.likelihood_term, -58.0794069927957)",
   "    ${0:NAME}.assertAlmostEqual(metadata.penalty_term, 7.69484807238461)",
   "    ${0:NAME}.assertAlmostEqual(metadata.bic, -50.3845589204111) ",
   "  def testFitSine(${0:NAME}):"
  ]
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "condition": [
   "${0:NAME}.assertSequenceAlmostEqual(         [${1:NUMBER}, ${1:NUMBER}, ${1:NUMBER}, ${1:NUMBER}, ${1:NUMBER}, ${1:NUMBER}, ${1:NUMBER}, ${1:NUMBER}, ${1:NUMBER}, ${1:NUMBER}, ${1:NUMBER}, ${1:NUMBER}, ${1:NUMBER}, ${1:NUMBER}, ${1:NUMBER}], ${2:NAME}[${3:NUMBER}])",
   "\t${0:NAME}.assertSequenceAlmostEqual(         [3., 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9], ${4:NAME}[${1:NUMBER}])",
   "    ${0:NAME}.assertSequenceAlmostEqual([${1:NUMBER}, ${1:NUMBER}, ${1:NUMBER}, ${1:NUMBER}, ${1:NUMBER}, ${1:NUMBER}, ${1:NUMBER}, ${1:NUMBER}, ${1:NUMBER}, ${1:NUMBER}],                                    ${2:NAME}[${1:NUMBER}])"
  ],
  "consequent": [
   "${0:NAME}.assertSequenceAlmostEqual(np.ones(15), ${2:NAME}[${3:NUMBER}])",
   "\t${0:NAME}.assertSequenceAlmostEqual(np.arange(3, 4, 0.1), ${4:NAME}[${1:NUMBER}])",
   "    ${0:NAME}.assertSequenceAlmostEqual(np.ones(10), ${2:NAME}[${1:NUMBER}])",
   "    ${0:NAME}.assertSequenceAlmostEqual(np.arange(4, 5, 0.1), ${4:NAME}[2])",
   "    ${0:NAME}.assertSequenceAlmostEqual(np.ones(10), ${2:NAME}[2])"
  ]
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "condition": [
   "best_bic = None",
   "\tbest_spline = None",
   "  best_spline_mask = None",
   "  best_bkspace = None",
   "  bad_bkspaces = []"
  ],
  "consequent": [
   "                                                                                                                                                                                                                                                                ",
   "\tsigma = np.median(np.abs(scaled_diffs)) * 1.48"
  ]
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "condition": [
   "${0:NAME}.assertSequenceAlmostEqual(         [0., ${1:NUMBER}, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], ${2:NAME}[0])",
   "\t${0:NAME}.assertSequenceAlmostEqual([${3:NUMBER}, ${3:NUMBER}, ${3:NUMBER}, ${3:NUMBER}, ${3:NUMBER}, ${3:NUMBER}, ${3:NUMBER}, ${3:NUMBER}, ${3:NUMBER}, ${3:NUMBER}],                                    split_flux[0])",
   "    ${0:NAME}.assertSequenceAlmostEqual([${4:NUMBER}, 1.6, 1.7, 1.8, 1.9], ${2:NAME}[${3:NUMBER}])"
  ],
  "consequent": [
   "${0:NAME}.assertSequenceAlmostEqual(np.arange(${4:NUMBER}, 2, ${1:NUMBER}), ${2:NAME}[${3:NUMBER}])"
  ]
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "condition": [
   "${0:NAME}.assertEmpty(${1:NAME})"
  ],
  "consequent": [
   "${0:NAME}.assertEmpty(metadata.${1:NAME})",
   "\t${0:NAME}.assertAlmostEqual(metadata.likelihood_term, -6685.64217856480)",
   "    ${0:NAME}.assertAlmostEqual(metadata.penalty_term, 942.51190498322)",
   "    ${0:NAME}.assertAlmostEqual(metadata.bic, -5743.13027358158)"
  ]
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "condition": [
   "                                                                                                                                                                                                        ",
   "\tif len(${0:NAME}) > 0 and not isinstance(${0:NAME}[0], collections.Iterable):                                        "
  ],
  "consequent": [
   "if isinstance(${0:NAME}, np.ndarray) and ${0:NAME}.ndim == 1:"
  ]
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "condition": [
   "${0:NAME}.assertLen(${1:NAME}, 3)"
  ],
  "consequent": [
   "${0:NAME}.assertLen(${1:NAME}, 4)"
  ]
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "condition": [
   "testKeplerSplineCubic"
  ],
  "consequent": [
   "testFitCubic"
  ]
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "condition": [
   "${0:NAME}.assertTrue(${1:NAME}.all(mask))"
  ],
  "consequent": [
   "${0:NAME}.assertTrue(${1:NAME}.all(metadata.light_curve_mask))"
  ]
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "condition": [
   "spline_mask"
  ],
  "consequent": [
   "light_curve_mask"
  ]
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "condition": [
   "best_bkspace = bkspace"
  ],
  "consequent": [
   "metadata.bkspace = bkspace",
   "\tmetadata.likelihood_term = likelihood_term",
   "      metadata.penalty_term = penalty_term",
   "      metadata.bic = bic"
  ]
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "condition": [
   "                                                                                                                                                                                                         ",
   "\tif len(${0:NAME}) > 0 and not isinstance(${0:NAME}[0], collections.Iterable):                                        "
  ],
  "consequent": [
   "if isinstance(${0:NAME}, np.ndarray) and ${0:NAME}.ndim == 1:"
  ]
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "condition": [
   "flux = [${0:NAME}.sin(${1:NAME}) for ${1:NAME} in time]"
  ],
  "consequent": [
   "all_flux = [${0:NAME}.sin(${1:NAME}) for ${1:NAME} in all_time]"
  ]
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "condition": [
   "${0:NAME}, mask, bkspace, bad_bkspaces = ${1:NAME}.choose_kepler_spline("
  ],
  "consequent": [
   "${0:NAME}, metadata = ${1:NAME}.choose_kepler_spline("
  ]
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "condition": [
   "spline_mask: List of boolean numpy arrays indicating which points in ${0:NAME}",
   "\tflux arrays were used to ${1:NAME} ${0:NAME} best-${1:NAME} ${2:NAME}.",
   "    bkspace: The break-point spacing used for ${0:NAME} best-${1:NAME} ${2:NAME}.",
   "\tbad_bkspaces: List of break-point spacing values that failed."
  ],
  "consequent": [
   "metadata: Object containing metadata about ${0:NAME} ${2:NAME} ${1:NAME}."
  ]
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "condition": [
   "${0:NAME}.assertEmpty(${1:NAME})"
  ],
  "consequent": [
   "${0:NAME}.assertEmpty(metadata.${1:NAME})",
   "\t${0:NAME}.assertAlmostEqual(metadata.likelihood_term, -6731.59913975551)",
   "    ${0:NAME}.assertAlmostEqual(metadata.penalty_term, 1064.12634433589)",
   "    ${0:NAME}.assertAlmostEqual(metadata.bic, -6625.18650532192)"
  ]
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "condition": [
   "${0:NAME}.assertLen(${1:NAME}, 2)"
  ],
  "consequent": [
   "${0:NAME}.assertLen(${1:NAME}, 3)"
  ]
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "condition": [
   "time"
  ],
  "consequent": [
   "all_time"
  ]
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "condition": [
   "${0:NAME}.assertSequenceAlmostEqual(         [3., 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9], ${1:NAME}[${2:NUMBER}])",
   "\t${0:NAME}.assertSequenceAlmostEqual([1, 1, 1, 1, 1, 1, 1, 1, 1, 1],                                    ${3:NAME}[${2:NUMBER}])"
  ],
  "consequent": [
   "${0:NAME}.assertSequenceAlmostEqual(np.arange(3, 4, 0.1), ${1:NAME}[${2:NUMBER}])",
   "\t${0:NAME}.assertSequenceAlmostEqual(np.ones(10), ${3:NAME}[${2:NUMBER}])",
   "    ${0:NAME}.assertSequenceAlmostEqual(np.arange(4, 5, 0.1), ${1:NAME}[3])",
   "    ${0:NAME}.assertSequenceAlmostEqual(np.ones(10), ${3:NAME}[3])"
  ]
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "condition": [
   "testKeplerSplineSine"
  ],
  "consequent": [
   "testFitSine"
  ]
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "condition": [
   "${0:NAME}.assertSequenceAlmostEqual([${1:NUMBER}, ${1:NUMBER}, ${1:NUMBER}, ${1:NUMBER}, ${1:NUMBER}], ${2:NAME}[${1:NUMBER}])"
  ],
  "consequent": [
   "${0:NAME}.assertSequenceAlmostEqual(np.ones(5), ${2:NAME}[${1:NUMBER}])"
  ]
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "condition": [
   "${0:NAME}.assertAlmostEqual(${1:NAME}, ${2:NUMBER})"
  ],
  "consequent": [
   "${0:NAME}.assertAlmostEqual(metadata.${1:NAME}, ${2:NUMBER})"
  ]
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "condition": [
   "if len(${0:NAME}) > 0:"
  ],
  "consequent": [
   "if ${0:NAME}.size:"
  ]
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "condition": [
   "${0:NAME}.assertLen(${1:NAME}, 3)"
  ],
  "consequent": [
   "${0:NAME}.assertLen(${1:NAME}, 4)",
   "\t${0:NAME}.assertSequenceAlmostEqual(np.arange(0, 1, 0.1), split_time[0])",
   "    ${0:NAME}.assertSequenceAlmostEqual(np.ones(10), ${1:NAME}[0])"
  ]
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "condition": [
   "${0:NAME}.append(${1:NAME}.full_like(${2:NAME}, ${1:NAME}.${3:NAME}))"
  ],
  "consequent": [
   "${0:NAME}.append(${1:NAME}.array([${1:NAME}.${3:NAME}] * len(${2:NAME})))"
  ]
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "condition": [
   "return ${0:NAME}, best_spline_mask, best_bkspace, bad_bkspaces"
  ],
  "consequent": [
   "if ${0:NAME} is None:                                                                                                          ",
   "\t${0:NAME} = [np.array([np.nan] * len(f)) for f in all_flux]",
   "    metadata.light_curve_mask = [         np.zeros_like(f, dtype=np.bool) for f in all_flux     ] ",
   "  return ${0:NAME}, metadata"
  ]
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "condition": [
   "${0:NAME}.assertEmpty(${1:NAME})"
  ],
  "consequent": [
   "${0:NAME}.assertEmpty(metadata.${1:NAME})",
   "\t${0:NAME}.assertAlmostEqual(metadata.likelihood_term, -6495.65564287904)",
   "    ${0:NAME}.assertAlmostEqual(metadata.penalty_term, 836.099270549629)",
   "    ${0:NAME}.assertAlmostEqual(metadata.bic, -4823.45710177978)"
  ]
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "condition": [
   "spline_mask"
  ],
  "consequent": [
   "append"
  ]
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "condition": [
   "best_spline_mask = spline_mask"
  ],
  "consequent": [
   "metadata.light_curve_mask = light_curve_mask"
  ]
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "condition": [
   "${0:NAME} = [${1:NAME}.array([${2:NUMBER}] * ${3:NUMBER})]"
  ],
  "consequent": [
   "${0:NAME} = [${1:NAME}.ones(${3:NUMBER}), ${1:NAME}.ones(10)] ",
   "\tself.assertEqual(len(all_time), 2)",
   "    self.assertEqual(len(all_time[0]), ${3:NUMBER})",
   "    self.assertEqual(len(all_time[${2:NUMBER}]), 10) ",
   "    self.assertEqual(len(${0:NAME}), 2)",
   "    self.assertEqual(len(${0:NAME}[0]), ${3:NUMBER})",
   "    self.assertEqual(len(${0:NAME}[${2:NUMBER}]), 10)"
  ]
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "condition": [
   "def testKeplerSplineError(${0:NAME}):               ",
   "\t${1:NAME} = ${2:NAME}.concatenate([${2:NAME}.arange(0, 1, ${3:NUMBER}), [2]])"
  ],
  "consequent": [
   "def testInsufficientPointsError(${0:NAME}):                         ",
   "\t${1:NAME} = ${2:NAME}.array([])",
   "    flux = ${2:NAME}.array([]) ",
   "    with ${0:NAME}.assertRaises(kepler_spline.InsufficientPointsError):",
   "\tkepler_spline.kepler_spline(${1:NAME}, flux, bkspace=0.5)                      ",
   "    ${1:NAME} = ${2:NAME}.array([${3:NUMBER}, 0.2, 0.3])"
  ]
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "condition": [
   "${0:NAME} = ${1:NAME} + ${2:NAME} * nparams * np.log(npoints)"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME} + ${2:NAME} * penalty_term"
  ]
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "condition": [
   "if best_bic is None or ${0:NAME} < best_bic:"
  ],
  "consequent": [
   "if best_spline is None or ${0:NAME} < metadata.${0:NAME}:"
  ]
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "condition": [
   "class ConditionalEvalTest(tf.test.${0:NAME}):"
  ],
  "consequent": [
   "class ConditionalEvalTest(absltest.${0:NAME}):"
  ]
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "condition": [
   "class MnistInfoGANEvalTest(tf.test.${0:NAME}):"
  ],
  "consequent": [
   "class MnistInfoGANEvalTest(absltest.${0:NAME}):"
  ]
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "condition": [
   "${0:NAME} = ${1:NAME}.${2:NAME}.join(${3:NAME}._get_testdata_dir(), ${4:STRING})"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.${2:NAME}.join(${3:NAME}.testdata_dir, ${4:STRING})"
  ]
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "condition": [
   "class EvalTest(${0:NAME}.${1:NAME}.${2:NAME}):"
  ],
  "consequent": [
   "class EvalTest(${0:NAME}.${1:NAME}.${2:NAME}, parameterized.${2:NAME}):"
  ]
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "condition": [
   "tf.test.main()"
  ],
  "consequent": [
   "absltest.main()"
  ]
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "condition": [
   "tf.${0:NAME}.set_verbosity(tf.${0:NAME}.${1:NAME})"
  ],
  "consequent": [
   "${0:NAME}.set_verbosity(${0:NAME}.${1:NAME})"
  ]
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "condition": [
   "tf.${0:NAME}.run()"
  ],
  "consequent": [
   "${0:NAME}.run()"
  ]
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "condition": [
   "def _test_build_graph_helper(${0:NAME}, ${1:NAME}, ${2:NAME}):"
  ],
  "consequent": [
   "@parameterized.named_parameters(       ('RealData', True, False),       ('GeneratedData', False, False),       ('GeneratedDataConditional', False, True))",
   "\tdef test_build_graph(${0:NAME}, ${1:NAME}, ${2:NAME}):"
  ]
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "condition": [
   "tf.${0:NAME}.info('dir_path: {}'.format(${1:NAME}.listdir(${2:NAME}.${3:NAME})))"
  ],
  "consequent": [
   "${0:NAME}.info('dir_path: %s', ${1:NAME}.listdir(${2:NAME}.${3:NAME}))"
  ]
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "condition": [
   "class EvalTest(tf.test.${0:NAME}):"
  ],
  "consequent": [
   "class EvalTest(parameterized.${0:NAME}):"
  ]
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "condition": [
   "tf.${0:NAME}.info('gen x: {}'.format(${1:NAME}.listdir(${2:NAME}.${3:NAME})))"
  ],
  "consequent": [
   "${0:NAME}.info('gen x: %s', ${1:NAME}.listdir(${2:NAME}.${3:NAME}))"
  ]
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "condition": [
   "class DataProviderTest(${0:NAME}.${1:NAME}.${2:NAME}):"
  ],
  "consequent": [
   "class DataProviderTest(${0:NAME}.${1:NAME}.${2:NAME}, parameterized.${2:NAME}):"
  ]
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "condition": [
   "def _test_build_graph_helper(${0:NAME}, ${1:NAME}):"
  ],
  "consequent": [
   "@parameterized.named_parameters(       ('RealData', True),       ('GeneratedData', False))",
   "\tdef test_build_graph(${0:NAME}, ${1:NAME}):"
  ]
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "condition": [
   "${0:NAME}.${1:NAME}.add_image_comparison_summaries(       ${2:NAME}, num_comparisons=3, display_diffs=False)",
   "\t${0:NAME}.${1:NAME}.add_gan_model_image_summaries(       ${2:NAME}, grid_size=int(np.sqrt(FLAGS.batch_size)))"
  ],
  "consequent": [
   "${0:NAME}.${1:NAME}.add_cyclegan_image_summaries(${2:NAME})"
  ]
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "condition": [
   "def _test_build_graph_helper(${0:NAME}, ${1:NAME}, ${2:NAME}):"
  ],
  "consequent": [
   "@parameterized.named_parameters(       ('Unconditional', False, False),       ('Conditional', True, False),       ('SyncReplicas', False, True))",
   "\tdef test_build_graph_helper(${0:NAME}, ${1:NAME}, ${2:NAME}):"
  ]
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "condition": [
   "def _test_data_provider_helper(${0:NAME}, ${1:NAME}):"
  ],
  "consequent": [
   "@parameterized.named_parameters(       ('train', 'train'),       ('validation', 'validation'))",
   "\tdef test_data_provider(${0:NAME}, ${1:NAME}):"
  ]
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "condition": [
   "def _test_build_graph_helper(${0:NAME}, ${1:NAME}):"
  ],
  "consequent": [
   "@parameterized.named_parameters(       ('NoAdversarialLoss', 0.0),       ('AdversarialLoss', 1.0))",
   "\tdef test_build_graph(${0:NAME}, ${1:NAME}):"
  ]
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "condition": [
   "def _test_build_graph_helper(${0:NAME}, ${1:NAME}):"
  ],
  "consequent": [
   "@parameterized.named_parameters(       ('Unconditional', 'unconditional'),       ('Conditional', 'conditional'),       ('InfoGAN', 'infogan'))",
   "\tdef test_build_graph(${0:NAME}, ${1:NAME}):"
  ]
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "condition": [
   "tf.${0:NAME}.info('Testing {} for realism.'.format(${1:NAME}))"
  ],
  "consequent": [
   "${0:NAME}.info('Testing %s for realism.', ${1:NAME})"
  ]
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "condition": [
   "tf.${0:NAME}.run()"
  ],
  "consequent": [
   "${0:NAME}.run(main)"
  ]
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "condition": [
   "class TrainTest(${0:NAME}.${1:NAME}.${2:NAME}):"
  ],
  "consequent": [
   "class TrainTest(${0:NAME}.${1:NAME}.${2:NAME}, parameterized.${2:NAME}):"
  ]
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "condition": [
   "import tensorflow as tf"
  ],
  "consequent": [
   "from absl.testing import absltest"
  ]
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "condition": [
   "import numpy as np"
  ],
  "consequent": [
   "from absl import flags"
  ]
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "condition": [
   "import tensorflow as tf"
  ],
  "consequent": [
   "from absl import flags",
   "from absl.testing import absltest",
   "from absl.testing import parameterized"
  ]
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "condition": [
   "${0:NAME}, ${1:NAME} = ${2:NAME}.cyclegan_generator_resnet(${3:NAME})"
  ],
  "consequent": [
   "${0:NAME}, ${1:NAME} = ${2:NAME}.cyclegan_generator_resnet(${3:NAME},                                                           num_outputs=channels)"
  ]
 },
 {
  "number": 4084,
  "sha": "4cfb259f02135f6e5b5a8f965833f6a5ab7672d9",
  "author": "XinyueZ",
  "participant": "MarkDaoust",
  "created_at": "2018-04-25 14:25:39",
  "condition": [
   "return dataset"
  ],
  "consequent": [
   "return dataset.make_one_shot_iterator().get_next() ",
   "\treturn input_fn"
  ]
 },
 {
  "number": 4084,
  "sha": "4cfb259f02135f6e5b5a8f965833f6a5ab7672d9",
  "author": "XinyueZ",
  "participant": "MarkDaoust",
  "created_at": "2018-04-25 14:25:39",
  "condition": [
   "${0:NAME} = ${1:NAME}.evaluate(${2:NAME}=automobile_data.from_dataset(test))"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.evaluate(${2:NAME}=test_input_fn)"
  ]
 },
 {
  "number": 4084,
  "sha": "4cfb259f02135f6e5b5a8f965833f6a5ab7672d9",
  "author": "XinyueZ",
  "participant": "MarkDaoust",
  "created_at": "2018-04-25 14:25:39",
  "condition": [
   "${0:NAME}.train(${1:NAME}=automobile_data.from_dataset(${2:NAME}), ${3:NAME}=${4:NAME}.${5:NAME})"
  ],
  "consequent": [
   "${0:NAME}.${2:NAME}(${1:NAME}=train_input_fn, ${3:NAME}=${4:NAME}.${5:NAME})"
  ]
 },
 {
  "number": 4084,
  "sha": "4cfb259f02135f6e5b5a8f965833f6a5ab7672d9",
  "author": "XinyueZ",
  "participant": "MarkDaoust",
  "created_at": "2018-04-25 14:25:39",
  "condition": [
   "train"
  ],
  "consequent": [
   "train_input_fn"
  ]
 },
 {
  "number": 4084,
  "sha": "4cfb259f02135f6e5b5a8f965833f6a5ab7672d9",
  "author": "XinyueZ",
  "participant": "MarkDaoust",
  "created_at": "2018-04-25 14:25:39",
  "condition": [
   "test"
  ],
  "consequent": [
   "make_dataset"
  ]
 },
 {
  "number": 4084,
  "sha": "4cfb259f02135f6e5b5a8f965833f6a5ab7672d9",
  "author": "XinyueZ",
  "participant": "MarkDaoust",
  "created_at": "2018-04-25 14:25:39",
  "condition": [
   "${0:NAME} = ${1:NAME}.predict(${2:NAME}=automobile_data.from_dataset(${3:NAME}))"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.${3:NAME}(${2:NAME}=predict_input_fn)"
  ]
 },
 {
  "number": 4084,
  "sha": "4cfb259f02135f6e5b5a8f965833f6a5ab7672d9",
  "author": "XinyueZ",
  "participant": "MarkDaoust",
  "created_at": "2018-04-25 14:25:39",
  "condition": [
   "predict = ${0:NAME}.make_dataset(${1:NUMBER}, ${2:NAME})"
  ],
  "consequent": [
   "                                    ",
   "\tpredict_input_fn = ${0:NAME}.make_dataset(${1:NUMBER}, ${2:NAME})"
  ]
 },
 {
  "number": 3853,
  "sha": "13c9de3965168b97cd78d30650efbbe5bd8edd02",
  "author": "walkerlala",
  "participant": "RomRoc",
  "created_at": "2018-04-03 12:06:49",
  "condition": [
   "${0:NAME} = glob.glob(${1:NAME}.${2:NAME}.join(${3:NAME}.${4:NAME}, ${5:STRING}))"
  ],
  "consequent": [
   "${0:NAME} = tf.gfile.Glob(${1:NAME}.${2:NAME}.join(${3:NAME}.${4:NAME}, ${5:STRING}))"
  ]
 },
 {
  "number": 3853,
  "sha": "13c9de3965168b97cd78d30650efbbe5bd8edd02",
  "author": "walkerlala",
  "participant": "RomRoc",
  "created_at": "2018-04-03 12:06:49",
  "condition": [
   "def get_extra_layer_scopes():"
  ],
  "consequent": [
   "def get_extra_layer_scopes(last_layers_contain_logits_only=False):"
  ]
 },
 {
  "number": 3853,
  "sha": "13c9de3965168b97cd78d30650efbbe5bd8edd02",
  "author": "walkerlala",
  "participant": "RomRoc",
  "created_at": "2018-04-03 12:06:49",
  "condition": [
   "${0:NAME}: dataset split (${1:NAME}.${2:NAME}., ${3:NAME}, ${4:NAME})"
  ],
  "consequent": [
   "${0:NAME}: Dataset split (${1:NAME}.${2:NAME}., ${3:NAME}, ${4:NAME})."
  ]
 },
 {
  "number": 3853,
  "sha": "13c9de3965168b97cd78d30650efbbe5bd8edd02",
  "author": "walkerlala",
  "participant": "RomRoc",
  "created_at": "2018-04-03 12:06:49",
  "condition": [
   "${0:NAME} = ${1:NAME}.get_extra_layer_scopes()"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.get_extra_layer_scopes(FLAGS.last_layers_contain_logits_only)"
  ]
 },
 {
  "number": 3853,
  "sha": "13c9de3965168b97cd78d30650efbbe5bd8edd02",
  "author": "walkerlala",
  "participant": "RomRoc",
  "created_at": "2018-04-03 12:06:49",
  "condition": [
   "${0:NAME} = int(${1:NAME}.ceil(${2:NAME}) / float(${3:NAME}))"
  ],
  "consequent": [
   "${0:NAME} = int(${1:NAME}.ceil(${2:NAME} / float(${3:NAME})))"
  ]
 },
 {
  "number": 3853,
  "sha": "13c9de3965168b97cd78d30650efbbe5bd8edd02",
  "author": "walkerlala",
  "participant": "RomRoc",
  "created_at": "2018-04-03 12:06:49",
  "condition": [
   "${0:NAME}: dir in ${1:NAME} ${2:NAME} ${3:NAME} locates"
  ],
  "consequent": [
   "${0:NAME}: Dir in ${1:NAME} ${2:NAME} ${3:NAME} locates."
  ]
 },
 {
  "number": 3853,
  "sha": "13c9de3965168b97cd78d30650efbbe5bd8edd02",
  "author": "walkerlala",
  "participant": "RomRoc",
  "created_at": "2018-04-03 12:06:49",
  "condition": [
   "${0:NAME} = glob.glob(${1:NAME}.${2:NAME}.join(${3:NAME}, ${4:STRING}))"
  ],
  "consequent": [
   "${0:NAME} = tf.gfile.Glob(${1:NAME}.${2:NAME}.join(${3:NAME}, ${4:STRING}))"
  ]
 },
 {
  "number": 3852,
  "sha": "279aa927d0160a7f08e48f17b83250ebbf7b866d",
  "author": "DefineFC",
  "participant": "googlebot",
  "created_at": "2018-04-03 08:32:41",
  "condition": [
   "${0:NAME} = ${1:NAME}.${2:NAME}.FastGFile(${3:NAME}, 'r').read()"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.${2:NAME}.FastGFile(${3:NAME}, 'rb').read()"
  ]
 },
 {
  "number": 3852,
  "sha": "279aa927d0160a7f08e48f17b83250ebbf7b866d",
  "author": "DefineFC",
  "participant": "googlebot",
  "created_at": "2018-04-03 08:32:41",
  "condition": [
   "for ${0:NAME}, ${1:NAME} in ${2:NAME}.iteritems():"
  ],
  "consequent": [
   "for ${0:NAME}, ${1:NAME} in six.iteritems(${2:NAME}):"
  ]
 },
 {
  "number": 3852,
  "sha": "279aa927d0160a7f08e48f17b83250ebbf7b866d",
  "author": "DefineFC",
  "participant": "googlebot",
  "created_at": "2018-04-03 08:32:41",
  "condition": [
   "${0:NAME} = ${1:NAME}.${2:NAME}.FastGFile(${3:NAME}[${4:NAME}], 'r').read()"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.${2:NAME}.FastGFile(${3:NAME}[${4:NAME}], 'rb').read()"
  ]
 },
 {
  "number": 3852,
  "sha": "279aa927d0160a7f08e48f17b83250ebbf7b866d",
  "author": "DefineFC",
  "participant": "googlebot",
  "created_at": "2018-04-03 08:32:41",
  "condition": [
   "${0:NAME} = ${1:NAME}.${2:NAME} / ${3:NAME}.num_clones"
  ],
  "consequent": [
   "${0:NAME} = int(${1:NAME}.${2:NAME} / ${3:NAME}.num_clones)"
  ]
 },
 {
  "number": 3852,
  "sha": "279aa927d0160a7f08e48f17b83250ebbf7b866d",
  "author": "DefineFC",
  "participant": "googlebot",
  "created_at": "2018-04-03 08:32:41",
  "condition": [
   "${0:NAME}=${1:NAME}.values(),"
  ],
  "consequent": [
   "${0:NAME}=list(${1:NAME}.values()),"
  ]
 },
 {
  "number": 3852,
  "sha": "279aa927d0160a7f08e48f17b83250ebbf7b866d",
  "author": "DefineFC",
  "participant": "googlebot",
  "created_at": "2018-04-03 08:32:41",
  "condition": [
   "return ${0:NAME}.${1:NAME}.Feature(${2:NAME}=${0:NAME}.${1:NAME}.BytesList(${3:NAME}=[${4:NAME}]))"
  ],
  "consequent": [
   "def norm2bytes(${3:NAME}):",
   "\treturn ${3:NAME}.encode() if isinstance(${3:NAME}, str) else ${3:NAME} ",
   "  return ${0:NAME}.${1:NAME}.Feature(${2:NAME}=${0:NAME}.${1:NAME}.BytesList(${3:NAME}=[norm2bytes(${4:NAME})]))"
  ]
 },
 {
  "number": 3712,
  "sha": "a305455e16cc481d9705ead496d7109d5114d6fc",
  "author": "rzumer",
  "participant": "nmjohn",
  "created_at": "2018-03-23 03:57:02",
  "condition": [
   "${0:NAME} = ${1:NAME}.read()"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.read('rb')"
  ]
 },
 {
  "number": 3712,
  "sha": "a305455e16cc481d9705ead496d7109d5114d6fc",
  "author": "rzumer",
  "participant": "nmjohn",
  "created_at": "2018-03-23 03:57:02",
  "condition": [
   "with ${0:NAME}.${1:NAME}.FastGFile(${2:NAME}.${3:NAME}, 'r') as ${4:NAME}:"
  ],
  "consequent": [
   "with ${0:NAME}.${1:NAME}.FastGFile(${2:NAME}.${3:NAME}, 'rb') as ${4:NAME}:"
  ]
 },
 {
  "number": 3622,
  "sha": "14b8bf2521fa7fc0bd8ff631b808a418cb75f930",
  "author": "cshallue",
  "participant": "nealwu",
  "created_at": "2018-03-16 00:51:10",
  "condition": [
   "with ${0:NAME}.open(open(${1:NAME}, \"r\")) as ${2:NAME}:"
  ],
  "consequent": [
   "with ${0:NAME}.open(open(${1:NAME}, \"rb\")) as ${2:NAME}:"
  ]
 },
 {
  "number": 3622,
  "sha": "14b8bf2521fa7fc0bd8ff631b808a418cb75f930",
  "author": "cshallue",
  "participant": "nealwu",
  "created_at": "2018-03-16 00:51:10",
  "condition": [
   "${0:NAME}.${1:NAME}.${2:NAME}[${3:NAME}].${4:NAME}.${5:NAME}.extend([str(${6:NAME}) for ${6:NAME} in ${5:NAME}])"
  ],
  "consequent": [
   "${0:NAME}.${1:NAME}.${2:NAME}[${3:NAME}].${4:NAME}.${5:NAME}.extend([       str(${6:NAME}).encode(\"latin-1\") for ${6:NAME} in ${5:NAME}])"
  ]
 },
 {
  "number": 3622,
  "sha": "14b8bf2521fa7fc0bd8ff631b808a418cb75f930",
  "author": "cshallue",
  "participant": "nealwu",
  "created_at": "2018-03-16 00:51:10",
  "condition": [
   "for ${0:NAME}, ${1:NAME} in itertools.izip(${2:NAME}, ${3:NAME}):"
  ],
  "consequent": [
   "for ${0:NAME}, ${1:NAME} in zip(${2:NAME}, ${3:NAME}):"
  ]
 },
 {
  "number": 3622,
  "sha": "14b8bf2521fa7fc0bd8ff631b808a418cb75f930",
  "author": "cshallue",
  "participant": "nealwu",
  "created_at": "2018-03-16 00:51:10",
  "condition": [
   "iteritems"
  ],
  "consequent": [
   "items"
  ]
 },
 {
  "number": 3622,
  "sha": "14b8bf2521fa7fc0bd8ff631b808a418cb75f930",
  "author": "cshallue",
  "participant": "nealwu",
  "created_at": "2018-03-16 00:51:10",
  "condition": [
   "for ${0:NAME}, ${1:NAME}, ${2:NAME} in itertools.izip("
  ],
  "consequent": [
   "for ${0:NAME}, ${1:NAME}, ${2:NAME} in zip("
  ]
 },
 {
  "number": 3622,
  "sha": "14b8bf2521fa7fc0bd8ff631b808a418cb75f930",
  "author": "cshallue",
  "participant": "nealwu",
  "created_at": "2018-03-16 00:51:10",
  "condition": [
   "_set_bytes_feature(${0:NAME}, ${1:NAME}, [str(${2:NAME})])"
  ],
  "consequent": [
   "_set_bytes_feature(${0:NAME}, ${1:NAME}, [${2:NAME}])"
  ]
 },
 {
  "number": 3619,
  "sha": "0308e7e1799cac46b7211d6dda158d9842a02222",
  "author": "qlzh727",
  "participant": "googlebot",
  "created_at": "2018-03-15 20:39:50",
  "condition": [
   "def ptb_raw_data(${0:NAME}):"
  ],
  "consequent": [
   "def ptb_raw_data(${0:NAME}=None):"
  ]
 },
 {
  "number": 3534,
  "sha": "c173bd9bfe614f79638aa3b244ecb91205017064",
  "author": "MTDzi",
  "participant": "lukaszkaiser",
  "created_at": "2018-03-06 20:36:37",
  "condition": [
   "with ${0:NAME}.${1:NAME}.GFile(${2:NAME} % ${3:STRING}) as ${4:NAME}:"
  ],
  "consequent": [
   "with ${0:NAME}.${1:NAME}.GFile(${2:NAME} % ${3:STRING}, 'rb') as ${4:NAME}:"
  ]
 },
 {
  "number": 3534,
  "sha": "c173bd9bfe614f79638aa3b244ecb91205017064",
  "author": "MTDzi",
  "participant": "lukaszkaiser",
  "created_at": "2018-03-06 20:36:37",
  "condition": [
   "itervalues"
  ],
  "consequent": [
   "values"
  ]
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "condition": [
   "${0:NAME} = inputs.create_train_input_fn("
  ],
  "consequent": [
   "${0:NAME} = create_train_input_fn("
  ]
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "condition": [
   "${0:NAME} = ${1:NAME}.reshape(${1:NAME}.arange(${2:NUMBER}**${3:NUMBER}), [${2:NUMBER}, ${2:NUMBER}, ${2:NUMBER}, ${2:NUMBER}])"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.reshape(${1:NAME}.arange(${3:NUMBER}).astype(${1:NAME}.float32), [1, ${2:NUMBER}, ${2:NUMBER}, 1])"
  ]
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "condition": [
   "'area': float((${0:NAME}[${1:NAME}, ${2:NUMBER}] - ${0:NAME}[${1:NAME}, ${3:NUMBER}]) *"
  ],
  "consequent": [
   "float((${0:NAME}[${1:NAME}, ${2:NUMBER}] - ${0:NAME}[${1:NAME}, ${3:NUMBER}]) *"
  ]
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "condition": [
   "${0:NAME} = config_util.get_configs_from_pipeline_file(${1:NAME})"
  ],
  "consequent": [
   "get_configs_from_pipeline_file = MODEL_BUILD_UTIL_MAP[       'get_configs_from_pipeline_file']",
   "\tcreate_pipeline_proto_from_configs = MODEL_BUILD_UTIL_MAP[       'create_pipeline_proto_from_configs']",
   "  merge_external_params_with_configs = MODEL_BUILD_UTIL_MAP[       'merge_external_params_with_configs']",
   "  create_train_input_fn = MODEL_BUILD_UTIL_MAP['create_train_input_fn']",
   "  create_eval_input_fn = MODEL_BUILD_UTIL_MAP['create_eval_input_fn']",
   "  create_predict_input_fn = MODEL_BUILD_UTIL_MAP['create_predict_input_fn'] ",
   "  ${0:NAME} = get_configs_from_pipeline_file(${1:NAME})"
  ]
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "condition": [
   "${0:NAME}: if ${1:NAME} `${2:NAME}` or `${3:NAME}` are not of ${1:NAME}"
  ],
  "consequent": [
   "${0:NAME}: if ${1:NAME} `${2:NAME}`, `${3:NAME}` or `model_config`"
  ]
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "condition": [
   "min_padded_size_ratio = [           (op.min_padded_size_ratio[0], op.min_padded_size_ratio[1])           for op in config.operations]",
   "\tmax_padded_size_ratio = [           (op.max_padded_size_ratio[0], op.max_padded_size_ratio[1])           for op in config.operations]",
   "      return (${0:NAME}.${1:NAME},               {                   'min_object_covered': min_object_covered,                   'aspect_ratio': config.aspect_ratio,                   'aspect_ratio_range': aspect_ratio_range,                   'area_range': area_range,                   'overlap_thresh': overlap_thresh,                   'random_coef': random_coef,                   'min_padded_size_ratio': min_padded_size_ratio,                   'max_padded_size_ratio': max_padded_size_ratio,               })",
   "    return (${0:NAME}.${1:NAME}, {})"
  ],
  "consequent": [
   "return (${0:NAME}.${1:NAME}, kwargs)"
  ]
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "condition": [
   "${0:NAME} = ${1:NAME}.array([${2:NUMBER}, ${2:NUMBER}, ${3:NUMBER}])"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.array([${2:NUMBER}, ${2:NUMBER}, ${3:NUMBER}], dtype=${1:NAME}.int32)"
  ]
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "condition": [
   "${0:NAME} = ${1:NAME}.SyncReplicasOptimizer("
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.train.SyncReplicasOptimizer("
  ]
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "condition": [
   "${0:NAME}.",
   "\tExportSingleImageGroundtruthToCoco("
  ],
  "consequent": [
   "${0:NAME}.ExportSingleImageGroundtruthToCoco("
  ]
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "condition": [
   "${0:NAME} = ${1:NAME}.array([${2:NUMBER}, ${2:NUMBER}, ${2:NUMBER}, ${2:NUMBER}, ${2:NUMBER}, ${2:NUMBER}])"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.array([${2:NUMBER}, ${2:NUMBER}, ${2:NUMBER}, ${2:NUMBER}, ${2:NUMBER}, ${2:NUMBER}], dtype=${1:NAME}.int32)"
  ]
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "condition": [
   "'category_id': int(${0:NAME}[${1:NAME}]),"
  ],
  "consequent": [
   "int(${0:NAME}[${1:NAME}]),",
   "\t'bbox':"
  ]
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "condition": [
   "(${0:NAME}, tf_op_output) = ${1:NAME}.execute(${2:NAME}, [${3:NAME}])"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.execute(${2:NAME}, [${3:NAME}]) ",
   "\texpected_output = [[[[0], [0], [1], [1]],                         [[0], [0], [1], [1]],                         [[2], [2], [3], [3]],                         [[2], [2], [3], [3]]]]"
  ]
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "condition": [
   "${0:NAME} = config_util.merge_external_params_with_configs("
  ],
  "consequent": [
   "${0:NAME} = merge_external_params_with_configs("
  ]
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "condition": [
   "${0:NAME}=inputs.create_predict_input_fn("
  ],
  "consequent": [
   "${0:NAME}=create_predict_input_fn("
  ]
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "condition": [
   "if len(${0:NAME}) == ${1:NUMBER}:"
  ],
  "consequent": [
   "if (len(${0:NAME}) == ${1:NUMBER}           and (isinstance(${0:NAME}, list)                or isinstance(${0:NAME}, tuple))):"
  ]
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "condition": [
   "nms = box_list_ops.non_max_suppression(         boxes, iou_thresh, max_output_size)",
   "\twith ${0:NAME}.test_session() as sess:",
   "\twith ${0:NAME}.assertRaisesWithPredicateMatch("
  ],
  "consequent": [
   "with ${0:NAME}.assertRaisesWithPredicateMatch(ValueError,"
  ]
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "condition": [
   "${0:NAME}, ${1:NAME} = ${2:NAME}.build_nasnet_large("
  ],
  "consequent": [
   "with arg_scope([slim.conv2d,                       slim.batch_norm,                       slim.separable_conv2d],                      reuse=self._reuse_weights):",
   "\t${0:NAME}, ${1:NAME} = ${2:NAME}.build_nasnet_large("
  ]
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "condition": [
   "${0:NAME} = ${1:NAME}.array([${2:NUMBER}, ${3:NUMBER}, ${4:NUMBER}])"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.array([${2:NUMBER}, ${3:NUMBER}, ${4:NUMBER}], dtype=${1:NAME}.int32)"
  ]
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "condition": [
   "output_dict[detection_fields.${0:NAME}] = (         ${1:NAME}.get())"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.get()"
  ]
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "condition": [
   "aspect_ratio_range = [(${0:NAME}.${1:NAME}, ${0:NAME}.${2:NAME})"
  ],
  "consequent": [
   "kwargs['aspect_ratio_range'] = [(${0:NAME}.${1:NAME}, ${0:NAME}.${2:NAME})                                       for ${0:NAME} in config.operations]",
   "\tkwargs['area_range'] = [(${0:NAME}.min_area, ${0:NAME}.max_area)"
  ]
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "condition": [
   "'bbox': list(_ConvertBoxToCOCOFormat(${0:NAME}[${1:NAME}, :])),"
  ],
  "consequent": [
   "list(_ConvertBoxToCOCOFormat(${0:NAME}[${1:NAME}, :])),",
   "\t'area':"
  ]
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "condition": [
   "${0:NAME} = slim_example_decoder.BackupHandler("
  ],
  "consequent": [
   "                                                                                                                                                                                                                                                       ",
   "\t${0:NAME} = BackupHandler("
  ]
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "condition": [
   "area_range = [(${0:NAME}.min_area, ${0:NAME}.max_area) for ${0:NAME} in ${1:NAME}.${2:NAME}]",
   "\t${3:NAME} = [${0:NAME}.${3:NAME} for ${0:NAME} in ${1:NAME}.${2:NAME}]"
  ],
  "consequent": [
   "kwargs['overlap_thresh'] = [${0:NAME}.${3:NAME} for ${0:NAME} in ${1:NAME}.${2:NAME}]"
  ]
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "condition": [
   "${0:NAME} = config_util.create_pipeline_proto_from_configs("
  ],
  "consequent": [
   "${0:NAME} = create_pipeline_proto_from_configs("
  ]
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "condition": [
   "tf_op_output"
  ],
  "consequent": [
   "expected_output"
  ]
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "condition": [
   "errors.InvalidArgumentError, 'scores has incompatible shape'):",
   "\tsess.run(nms.get())"
  ],
  "consequent": [
   "'Dimensions must be equal'):",
   "\tbox_list_ops.non_max_suppression(boxes, iou_thresh, max_output_size)"
  ]
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "condition": [
   "${0:NAME} = inputs.create_eval_input_fn("
  ],
  "consequent": [
   "${0:NAME} = create_eval_input_fn("
  ]
 },
 {
  "number": 3474,
  "sha": "36f803298c1ac60997841dd2b0df00dc704a8c7f",
  "author": "suharshs",
  "participant": "googlebot",
  "created_at": "2018-02-26 22:05:46",
  "condition": [
   "${0:NAME}.DEFINE_string('logdir', ${1:STRING}, 'Directory for writing training event logs')"
  ],
  "consequent": [
   "${0:NAME}.DEFINE_string('checkpoint_dir', ${1:STRING},                     'Directory for writing training checkpoints and logs')"
  ]
 },
 {
  "number": 3474,
  "sha": "36f803298c1ac60997841dd2b0df00dc704a8c7f",
  "author": "suharshs",
  "participant": "googlebot",
  "created_at": "2018-02-26 22:05:46",
  "condition": [
   "logdir"
  ],
  "consequent": [
   "checkpoint_dir"
  ]
 },
 {
  "number": 3414,
  "sha": "900ea81409940e5f6ca9d5e0cc834ad0eae8204a",
  "author": "a-dai",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-20 21:33:45",
  "condition": [
   "from adversarial_text.${0:NAME} import document_generators"
  ],
  "consequent": [
   "from ${0:NAME} import document_generators"
  ]
 },
 {
  "number": 3414,
  "sha": "900ea81409940e5f6ca9d5e0cc834ad0eae8204a",
  "author": "a-dai",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-20 21:33:45",
  "condition": [
   "from adversarial_text import graphs"
  ],
  "consequent": [
   "import graphs"
  ]
 },
 {
  "number": 3414,
  "sha": "900ea81409940e5f6ca9d5e0cc834ad0eae8204a",
  "author": "a-dai",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-20 21:33:45",
  "condition": [
   "from adversarial_text import ${0:NAME} as ${1:NAME}",
   "from adversarial_text import ${2:NAME} as layers_lib"
  ],
  "consequent": [
   "import ${0:NAME} as ${1:NAME}",
   "import ${2:NAME} as layers_lib"
  ]
 },
 {
  "number": 3414,
  "sha": "900ea81409940e5f6ca9d5e0cc834ad0eae8204a",
  "author": "a-dai",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-20 21:33:45",
  "condition": [
   "from adversarial_text import ${0:NAME}",
   "from adversarial_text import train_utils"
  ],
  "consequent": [
   "import ${0:NAME}",
   "import train_utils"
  ]
 },
 {
  "number": 3414,
  "sha": "900ea81409940e5f6ca9d5e0cc834ad0eae8204a",
  "author": "a-dai",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-20 21:33:45",
  "condition": [
   "from adversarial_text import ${0:NAME} as adv_lib"
  ],
  "consequent": [
   "import ${0:NAME} as adv_lib"
  ]
 },
 {
  "number": 3414,
  "sha": "900ea81409940e5f6ca9d5e0cc834ad0eae8204a",
  "author": "a-dai",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-20 21:33:45",
  "condition": [
   "from adversarial_text.${0:NAME} import data_utils"
  ],
  "consequent": [
   "from ${0:NAME} import data_utils"
  ]
 },
 {
  "number": 3402,
  "sha": "9a9e42288490bbfb4146489b1a817e4eefd6bca8",
  "author": "a-dai",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-17 02:46:08",
  "condition": [
   "with ${0:NAME}.control_dependencies([${1:NAME}, variables_averages_op]):"
  ],
  "consequent": [
   "with ${0:NAME}.control_dependencies([${1:NAME}]):"
  ]
 },
 {
  "number": 3402,
  "sha": "9a9e42288490bbfb4146489b1a817e4eefd6bca8",
  "author": "a-dai",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-17 02:46:08",
  "condition": [
   "${0:NAME} * (${1:NAME}.${2:NAME}.log_softmax(${3:NAME}) - ${1:NAME}.${2:NAME}.log_softmax(${4:NAME})), ${5:NUMBER})"
  ],
  "consequent": [
   "${0:NAME} * (${1:NAME}.${2:NAME}.log_softmax(${3:NAME}) - ${1:NAME}.${2:NAME}.log_softmax(${4:NAME})), -${5:NUMBER})"
  ]
 },
 {
  "number": 3402,
  "sha": "9a9e42288490bbfb4146489b1a817e4eefd6bca8",
  "author": "a-dai",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-17 02:46:08",
  "condition": [
   "${0:NAME}.${1:NAME} = ${2:NAME}.contrib.framework.get_or_create_global_step()"
  ],
  "consequent": [
   "${0:NAME}.${1:NAME} = ${2:NAME}.train.get_or_create_global_step()"
  ]
 },
 {
  "number": 3402,
  "sha": "9a9e42288490bbfb4146489b1a817e4eefd6bca8",
  "author": "a-dai",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-17 02:46:08",
  "condition": [
   "${0:NAME} = tf.matmul(${1:NAME}, ${2:NAME}.lin_w) + ${2:NAME}.lin_b"
  ],
  "consequent": [
   "${0:NAME} = ${2:NAME}.multiclass_dense_layer(${1:NAME})"
  ]
 },
 {
  "number": 3402,
  "sha": "9a9e42288490bbfb4146489b1a817e4eefd6bca8",
  "author": "a-dai",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-17 02:46:08",
  "condition": [
   "${0:NAME} = ${1:NAME}.argmax(${2:NAME}, 1)"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.argmax(${2:NAME}, 2)"
  ]
 },
 {
  "number": 3402,
  "sha": "9a9e42288490bbfb4146489b1a817e4eefd6bca8",
  "author": "a-dai",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-17 02:46:08",
  "condition": [
   "static_rnn"
  ],
  "consequent": [
   "dynamic_rnn"
  ]
 },
 {
  "number": 3402,
  "sha": "9a9e42288490bbfb4146489b1a817e4eefd6bca8",
  "author": "a-dai",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-17 02:46:08",
  "condition": [
   "${0:NAME} = ${1:NAME}.expand_dims(${0:NAME}, -${2:NUMBER})"
  ],
  "consequent": [
   "labels_reshaped = ${1:NAME}.reshape(${0:NAME}, [-${2:NUMBER}])",
   "\tlabels_reshaped = ${1:NAME}.expand_dims(labels_reshaped, -${2:NUMBER})"
  ]
 },
 {
  "number": 3402,
  "sha": "9a9e42288490bbfb4146489b1a817e4eefd6bca8",
  "author": "a-dai",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-17 02:46:08",
  "condition": [
   "${0:NAME} = ${1:NAME}.accuracy(${2:NAME}, ${3:NAME}.${4:NAME}, ${3:NAME}.${5:NAME})"
  ],
  "consequent": [
   "if FLAGS.single_label:",
   "\tindices = tf.stack([tf.range(FLAGS.batch_size), ${3:NAME}.length - 1], 1)",
   "      ${4:NAME} = tf.expand_dims(tf.gather_nd(${3:NAME}.${4:NAME}, indices), 1)",
   "      ${5:NAME} = tf.expand_dims(tf.gather_nd(${3:NAME}.${5:NAME}, indices), 1)",
   "    else:",
   "\t${4:NAME} = ${3:NAME}.${4:NAME}",
   "      ${5:NAME} = ${3:NAME}.${5:NAME}",
   "    ${0:NAME} = ${1:NAME}.accuracy(${2:NAME}, ${4:NAME}, ${5:NAME})"
  ]
 },
 {
  "number": 3402,
  "sha": "9a9e42288490bbfb4146489b1a817e4eefd6bca8",
  "author": "a-dai",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-17 02:46:08",
  "condition": [
   "${0:NAME}: bool."
  ],
  "consequent": [
   "${0:NAME}: integer, starting from 0."
  ]
 },
 {
  "number": 3402,
  "sha": "9a9e42288490bbfb4146489b1a817e4eefd6bca8",
  "author": "a-dai",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-17 02:46:08",
  "condition": [
   "${0:NAME}.predictions(${1:NAME}), inputs.${2:NAME}, inputs.${3:NAME})"
  ],
  "consequent": [
   "${0:NAME}.predictions(${1:NAME}), ${2:NAME}, ${3:NAME})"
  ]
 },
 {
  "number": 3402,
  "sha": "9a9e42288490bbfb4146489b1a817e4eefd6bca8",
  "author": "a-dai",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-17 02:46:08",
  "condition": [
   "${0:NAME} = ${1:NAME}.squeeze(${0:NAME})"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.squeeze(${0:NAME}, 2)"
  ]
 },
 {
  "number": 3402,
  "sha": "9a9e42288490bbfb4146489b1a817e4eefd6bca8",
  "author": "a-dai",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-17 02:46:08",
  "condition": [
   "x"
  ],
  "consequent": [
   "inputs_reshaped"
  ]
 },
 {
  "number": 3402,
  "sha": "9a9e42288490bbfb4146489b1a817e4eefd6bca8",
  "author": "a-dai",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-17 02:46:08",
  "condition": [
   "${0:NAME}, ${1:NAME} = ${2:NAME}.contrib.rnn.static_rnn("
  ],
  "consequent": [
   "${0:NAME}, ${1:NAME} = ${2:NAME}.nn.dynamic_rnn("
  ]
 },
 {
  "number": 3402,
  "sha": "9a9e42288490bbfb4146489b1a817e4eefd6bca8",
  "author": "a-dai",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-17 02:46:08",
  "condition": [
   "${0:NAME} = ${1:NAME}.classification_loss(${2:NAME}, inputs.${3:NAME}, inputs.${4:NAME})"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.classification_loss(${2:NAME}, ${3:NAME}, ${4:NAME})"
  ]
 },
 {
  "number": 3402,
  "sha": "9a9e42288490bbfb4146489b1a817e4eefd6bca8",
  "author": "a-dai",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-17 02:46:08",
  "condition": [
   "${0:NAME} = ${1:NAME}.contrib.keras"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.keras"
  ]
 },
 {
  "number": 3402,
  "sha": "9a9e42288490bbfb4146489b1a817e4eefd6bca8",
  "author": "a-dai",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-17 02:46:08",
  "condition": [
   "${0:NAME}.get_shape().assert_has_rank(1)"
  ],
  "consequent": [
   "${0:NAME}.get_shape().assert_has_rank(2)"
  ]
 },
 {
  "number": 3402,
  "sha": "9a9e42288490bbfb4146489b1a817e4eefd6bca8",
  "author": "a-dai",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-17 02:46:08",
  "condition": [
   "${0:NAME}=int(${1:NAME}[${2:NUMBER}]),"
  ],
  "consequent": [
   "${0:NAME}=int(${1:NAME}[${2:NUMBER}]) - 1,"
  ]
 },
 {
  "number": 3402,
  "sha": "9a9e42288490bbfb4146489b1a817e4eefd6bca8",
  "author": "a-dai",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-17 02:46:08",
  "condition": [
   "${0:NAME}=${1:NAME}.squeeze(${0:NAME}), ${2:NAME}=${1:NAME}.cast(${2:NAME}, ${1:NAME}.${3:NAME}))"
  ],
  "consequent": [
   "${0:NAME}=${1:NAME}.squeeze(${0:NAME}, -1), ${2:NAME}=${1:NAME}.cast(${2:NAME}, ${1:NAME}.${3:NAME}))"
  ]
 },
 {
  "number": 3402,
  "sha": "9a9e42288490bbfb4146489b1a817e4eefd6bca8",
  "author": "a-dai",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-17 02:46:08",
  "condition": [
   "${0:NAME} = ${1:NAME}.cast(${1:NAME}.greater(${1:NAME}.squeeze(${2:NAME}), ${3:NUMBER}), ${1:NAME}.${4:NAME})"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.cast(${1:NAME}.greater(${1:NAME}.squeeze(${2:NAME}, -1), ${3:NUMBER}), ${1:NAME}.${4:NAME})"
  ]
 },
 {
  "number": 3402,
  "sha": "9a9e42288490bbfb4146489b1a817e4eefd6bca8",
  "author": "a-dai",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-17 02:46:08",
  "condition": [
   "${0:NAME} = tf.no_op(name='train_op')"
  ],
  "consequent": [
   "${0:NAME} = variable_averages.apply(tvars)"
  ]
 },
 {
  "number": 3402,
  "sha": "9a9e42288490bbfb4146489b1a817e4eefd6bca8",
  "author": "a-dai",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-17 02:46:08",
  "condition": [
   "labels"
  ],
  "consequent": [
   "labels_reshaped"
  ]
 },
 {
  "number": 3400,
  "sha": "2b56ede527955ae6ca582520c9a91a440e112c46",
  "author": "asimshankar",
  "participant": "sbl",
  "created_at": "2018-02-16 23:25:43",
  "condition": [
   "${0:STRING}\"Class that defines a graph ${1:NAME} ${2:NAME} ${3:NAME} in ${4:NAME} ${5:NAME} ${6:NAME}."
  ],
  "consequent": [
   "${0:STRING}\"Model ${1:NAME} ${2:NAME} ${3:NAME} in ${4:NAME} ${5:NAME} ${6:NAME}."
  ]
 },
 {
  "number": 3400,
  "sha": "2b56ede527955ae6ca582520c9a91a440e112c46",
  "author": "asimshankar",
  "participant": "sbl",
  "created_at": "2018-02-16 23:25:43",
  "condition": [
   "${0:NAME} = ${1:NAME}.test(${2:NAME}.${3:NAME}).batch(10000)"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.test(${2:NAME}.${3:NAME}).batch(${2:NAME}.batch_size)"
  ]
 },
 {
  "number": 3400,
  "sha": "2b56ede527955ae6ca582520c9a91a440e112c46",
  "author": "asimshankar",
  "participant": "sbl",
  "created_at": "2018-02-16 23:25:43",
  "condition": [
   "${0:NAME} ${1:NAME} as ${2:NAME} ${3:NAME}.${4:NAME} and ${3:NAME}.${5:NAME} APIs."
  ],
  "consequent": [
   "${0:NAME} ${1:NAME} as ${2:NAME} ${3:NAME}.${4:NAME}.Model using the ${3:NAME}.${5:NAME} API."
  ]
 },
 {
  "number": 3376,
  "sha": "982a5504d5879b3cfdb051f452f4573e35623fc3",
  "author": "plakal",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-13 20:58:10",
  "condition": [
   "if upper_edge_hertz > nyquist_hertz:",
   "\traise ValueError(\"upper_edge_hertz %.1f is greater than Nyquist %.1f\" %                      (upper_edge_hertz, nyquist_hertz))"
  ],
  "consequent": [
   "if lower_edge_hertz < 0.0:",
   "\traise ValueError(\"lower_edge_hertz %.1f must be >= 0\" % lower_edge_hertz)"
  ]
 },
 {
  "number": 3343,
  "sha": "75c042575c8a4fed4239d419d0d463ca5bb5f80b",
  "author": "nealwu",
  "participant": "karmel",
  "created_at": "2018-02-08 07:11:18",
  "condition": [
   "${0:NAME}.assertEqual(${1:NAME}.get_shape().as_list(), [${2:NUMBER}])",
   "\t${0:NAME}.assertEqual(${3:NAME}.get_shape().as_list(), [32, 32, 3])"
  ],
  "consequent": [
   "${0:NAME}.assertAllEqual(${1:NAME}.shape, (${2:NUMBER},))",
   "\t${0:NAME}.assertAllEqual(${3:NAME}.shape, (_HEIGHT, _WIDTH, _NUM_CHANNELS))"
  ]
 },
 {
  "number": 3343,
  "sha": "75c042575c8a4fed4239d419d0d463ca5bb5f80b",
  "author": "nealwu",
  "participant": "karmel",
  "created_at": "2018-02-08 07:11:18",
  "condition": [
   "for ${0:NAME} in range(3):"
  ],
  "consequent": [
   "for ${0:NAME} in range(_NUM_CHANNELS):"
  ]
 },
 {
  "number": 3343,
  "sha": "75c042575c8a4fed4239d419d0d463ca5bb5f80b",
  "author": "nealwu",
  "participant": "karmel",
  "created_at": "2018-02-08 07:11:18",
  "condition": [
   "${0:NAME} = ${1:NAME}.random_uniform([${2:NAME}, 32, 32, 3])"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.random_uniform([${2:NAME}, _HEIGHT, _WIDTH, _NUM_CHANNELS])"
  ]
 },
 {
  "number": 3343,
  "sha": "75c042575c8a4fed4239d419d0d463ca5bb5f80b",
  "author": "nealwu",
  "participant": "karmel",
  "created_at": "2018-02-08 07:11:18",
  "condition": [
   "for ${0:NAME} in range(1024):"
  ],
  "consequent": [
   "for ${0:NAME} in range(_HEIGHT * _WIDTH):"
  ]
 },
 {
  "number": 3339,
  "sha": "fd087884c2d5f2fccd50c1c1432aa1547742644e",
  "author": "newcoder",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-07 08:34:26",
  "condition": [
   "${0:NAME} = ${1:NAME}.load(${2:NAME}, encoding='latin1')"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.load(${2:NAME})"
  ]
 },
 {
  "number": 3334,
  "sha": "2ed6b9d9febdfd38b224dfb2ce1916d0a49c2f50",
  "author": "nealwu",
  "participant": "k-w-w",
  "created_at": "2018-02-06 20:29:28",
  "condition": [
   "${0:NAME}, ${1:NAME} = ${2:NAME}.input_fn(${3:NAME}.${4:NAME}, ${5:NUMBER}, False, ${5:NUMBER})"
  ],
  "consequent": [
   "dataset = ${2:NAME}.input_fn(${3:NAME}.${4:NAME}, ${5:NUMBER}, False, ${5:NUMBER})",
   "\t${0:NAME}, ${1:NAME} = dataset.make_one_shot_iterator().get_next()"
  ]
 },
 {
  "number": 3314,
  "sha": "4070fa635b0964f4279e63b62d92903ac14c2899",
  "author": "djoshea",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-03 00:34:12",
  "condition": [
   "b_collections = [tf.GraphKeys.GLOBAL_VARIABLES]",
   "\tif collections:",
   "\tb_collections += collections",
   "  bname = (name + \"/b\") if name else \"/b\""
  ],
  "consequent": [
   "b = None"
  ]
 },
 {
  "number": 3314,
  "sha": "4070fa635b0964f4279e63b62d92903ac14c2899",
  "author": "djoshea",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-03 00:34:12",
  "condition": [
   "                 ",
   "${0:NAME}.DEFINE_boolean(${1:STRING}, ${2:NAME}, \"Whether to train the readin matrices and bias vectors. False leaves them fixed at their initial values specified by the alignment matrices / vectors.\")"
  ],
  "consequent": [
   "                                             ",
   "${0:NAME}.DEFINE_boolean(${1:STRING}, ${2:NAME}, \"Whether to train the \\",
   "                     readin matrices and bias vectors. False leaves them fixed \\",
   "                     at their initial values specified by the alignment \\",
   "                     matrices and vectors.\")"
  ]
 },
 {
  "number": 3314,
  "sha": "4070fa635b0964f4279e63b62d92903ac14c2899",
  "author": "djoshea",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-03 00:34:12",
  "condition": [
   "print(\"Setting non-trainable readin matrix to alignment matrix provided for dataset:\", ${0:NAME})"
  ],
  "consequent": [
   "print(\"Setting non-trainable readin matrix to alignment matrix\"                     \" provided for dataset:\", ${0:NAME})"
  ]
 },
 {
  "number": 3314,
  "sha": "4070fa635b0964f4279e63b62d92903ac14c2899",
  "author": "djoshea",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-03 00:34:12",
  "condition": [
   "print(\"Initializing trainable readin matrix with alignment matrix provided for dataset:\", ${0:NAME})"
  ],
  "consequent": [
   "print(\"Initializing trainable readin matrix with alignment matrix\"                     \" provided for dataset:\", ${0:NAME})"
  ]
 },
 {
  "number": 3314,
  "sha": "4070fa635b0964f4279e63b62d92903ac14c2899",
  "author": "djoshea",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-03 00:34:12",
  "condition": [
   "print(${0:STRING}, ${1:NAME}.${2:NAME}, ${3:STRING})"
  ],
  "consequent": [
   "print(${0:STRING}, ${1:NAME}.${2:NAME},             ${3:STRING})"
  ]
 },
 {
  "number": 3314,
  "sha": "4070fa635b0964f4279e63b62d92903ac14c2899",
  "author": "djoshea",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-03 00:34:12",
  "condition": [
   "print(\"Initializing trainable readin bias with alignment bias provided for dataset:\", ${0:NAME})"
  ],
  "consequent": [
   "print(\"Initializing trainable readin bias with alignment bias \"                   \"provided for dataset:\", ${0:NAME})"
  ]
 },
 {
  "number": 3314,
  "sha": "4070fa635b0964f4279e63b62d92903ac14c2899",
  "author": "djoshea",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-03 00:34:12",
  "condition": [
   "${0:NAME} = ${1:NAME}.Variable(${2:NAME}, ${3:NAME}=${4:NAME}, ${5:NAME}=${6:NAME}, ${7:NAME}=${7:NAME})"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.Variable(${2:NAME}, ${3:NAME}=${4:NAME}, ${5:NAME}=${6:NAME},                       ${7:NAME}=${7:NAME})"
  ]
 },
 {
  "number": 3314,
  "sha": "4070fa635b0964f4279e63b62d92903ac14c2899",
  "author": "djoshea",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-03 00:34:12",
  "condition": [
   "print(\"Setting non-trainable readin bias to alignment bias provided for dataset:\", ${0:NAME})"
  ],
  "consequent": [
   "print(\"Setting non-trainable readin bias to alignment bias \"                   \"provided for dataset:\", ${0:NAME})"
  ]
 },
 {
  "number": 3113,
  "sha": "6daaec16e98329961473076ff81c13a553abaadd",
  "author": "asimshankar",
  "participant": "jhseu",
  "created_at": "2018-01-06 01:47:58",
  "condition": [
   "${0:NAME}.${1:NAME}.DEFINE_integer(${2:STRING}, 128,"
  ],
  "consequent": [
   "${0:NAME}.${1:NAME}.DEFINE_integer(${2:STRING}, 1024,"
  ]
 },
 {
  "number": 3093,
  "sha": "4a36e31baf9c98130bee1d40e779a959755d8652",
  "author": "asimshankar",
  "participant": "k-w-w",
  "created_at": "2018-01-02 22:04:45",
  "condition": [
   "zipped_filename = filename + '.gz'"
  ],
  "consequent": [
   "zipped_filepath = filepath + '.gz'",
   "\tprint('Downloading %s to %s' % (url, zipped_filepath))",
   "  urllib.request.urlretrieve(url, zipped_filepath)",
   "  with gzip.open(zipped_filepath, 'rb') as f_in, open(filepath, 'wb') as f_out:"
  ]
 },
 {
  "number": 3093,
  "sha": "4a36e31baf9c98130bee1d40e779a959755d8652",
  "author": "asimshankar",
  "participant": "k-w-w",
  "created_at": "2018-01-02 22:04:45",
  "condition": [
   "maybe_download"
  ],
  "consequent": [
   "download"
  ]
 },
 {
  "number": 3024,
  "sha": "4d79fee396e789b1c2fb53d391ea792907c59c95",
  "author": "asimshankar",
  "participant": "martinwicke",
  "created_at": "2017-12-19 01:15:43",
  "condition": [
   "return predict_spec(${0:NAME}, features)"
  ],
  "consequent": [
   "logits = ${0:NAME}(image, training=False)",
   "\tpredictions = {         'classes': tf.argmax(logits, axis=1),         'probabilities': tf.nn.softmax(logits),     }",
   "    return tf.estimator.EstimatorSpec(         mode=tf.estimator.ModeKeys.PREDICT,         predictions=predictions,         export_outputs={             'classify': tf.estimator.export.PredictOutput(predictions)         })"
  ]
 },
 {
  "number": 3024,
  "sha": "4d79fee396e789b1c2fb53d391ea792907c59c95",
  "author": "asimshankar",
  "participant": "martinwicke",
  "created_at": "2017-12-19 01:15:43",
  "condition": [
   "${0:STRING}: tf.placeholder(tf.float32, [None, 28, 28])"
  ],
  "consequent": [
   "${0:STRING}: image,"
  ]
 },
 {
  "number": 3024,
  "sha": "4d79fee396e789b1c2fb53d391ea792907c59c95",
  "author": "asimshankar",
  "participant": "martinwicke",
  "created_at": "2017-12-19 01:15:43",
  "condition": [
   "return eval_spec(${0:NAME}, features, ${1:NAME})"
  ],
  "consequent": [
   "logits = ${0:NAME}(image, training=False)",
   "\tloss = tf.losses.softmax_cross_entropy(onehot_labels=${1:NAME}, logits=logits)",
   "    return tf.estimator.EstimatorSpec(         mode=tf.estimator.ModeKeys.EVAL,         loss=loss,         eval_metric_ops={             'accuracy':                 tf.metrics.accuracy(                     ${1:NAME}=tf.argmax(${1:NAME}, axis=1),                     predictions=tf.argmax(logits, axis=1)),         })"
  ]
 },
 {
  "number": 3024,
  "sha": "4d79fee396e789b1c2fb53d391ea792907c59c95",
  "author": "asimshankar",
  "participant": "martinwicke",
  "created_at": "2017-12-19 01:15:43",
  "condition": [
   "${0:NAME}.${1:NAME} = ${2:NAME}.${3:NAME}.Dropout(0.5)"
  ],
  "consequent": [
   "${0:NAME}.${1:NAME} = ${2:NAME}.${3:NAME}.Dropout(0.4)"
  ]
 },
 {
  "number": 3024,
  "sha": "4d79fee396e789b1c2fb53d391ea792907c59c95",
  "author": "asimshankar",
  "participant": "martinwicke",
  "created_at": "2017-12-19 01:15:43",
  "condition": [
   "return train_spec(${0:NAME}, features, ${1:NAME})"
  ],
  "consequent": [
   "optimizer = tf.train.AdamOptimizer(learning_rate=1e-4)",
   "\tlogits = ${0:NAME}(image, training=True)",
   "    loss = tf.losses.softmax_cross_entropy(onehot_labels=${1:NAME}, logits=logits)",
   "    accuracy = tf.metrics.accuracy(         ${1:NAME}=tf.argmax(${1:NAME}, axis=1), predictions=tf.argmax(logits, axis=1))                                                                                            ",
   "    tf.identity(accuracy[1], name='train_accuracy')",
   "    tf.summary.scalar('train_accuracy', accuracy[1])",
   "    return tf.estimator.EstimatorSpec(         mode=tf.estimator.ModeKeys.TRAIN,         loss=loss,         train_op=optimizer.minimize(loss, tf.train.get_or_create_global_step()))"
  ]
 },
 {
  "number": 3023,
  "sha": "c8ed619afb0af0cd597e8e1c5ed8db0aa6cc70de",
  "author": "mhyttsten",
  "participant": "tensorflow-jenkins",
  "created_at": "2017-12-18 23:36:59",
  "condition": [
   "${0:NAME} = urlopen(${1:NAME}).read()"
  ],
  "consequent": [
   "${0:NAME} = request.urlopen(${1:NAME}).read()"
  ]
 },
 {
  "number": 3023,
  "sha": "c8ed619afb0af0cd597e8e1c5ed8db0aa6cc70de",
  "author": "mhyttsten",
  "participant": "tensorflow-jenkins",
  "created_at": "2017-12-18 23:36:59",
  "condition": [
   "if sys.version_info < (3, 0, 0):",
   "\tfrom ${0:NAME} import urlopen",
   "else:",
   "\tfrom ${0:NAME}.${1:NAME} import urlopen"
  ],
  "consequent": [
   "import six.moves.${0:NAME}.${1:NAME} as ${1:NAME}"
  ]
 },
 {
  "number": 2849,
  "sha": "eff8d09d853d7b6b2716e652ab6baa96322208f2",
  "author": "cclauss",
  "participant": "tensorflow-jenkins",
  "created_at": "2017-11-21 05:46:03",
  "condition": [
   "iteritems"
  ],
  "consequent": [
   "items"
  ]
 },
 {
  "number": 2846,
  "sha": "f893da6d95c1feff49576548d6cc75415e42118c",
  "author": "cclauss",
  "participant": "tensorflow-jenkins",
  "created_at": "2017-11-21 05:12:42",
  "condition": [
   "from ${0:NAME} import xrange"
  ],
  "consequent": [
   "from ${0:NAME}.moves import xrange"
  ]
 },
 {
  "number": 2727,
  "sha": "3543f02d214cdd9798b4603fa8783652d222a73f",
  "author": "tombstone",
  "participant": "derekjchow",
  "created_at": "2017-11-07 19:31:26",
  "condition": [
   "def test_build_ssd_anchor_generator_withoud_reduced_boxes(${0:NAME}):"
  ],
  "consequent": [
   "def test_build_ssd_anchor_generator_with_custom_scales(${0:NAME}):",
   "\tanchor_generator_text_proto = \"\"\"",
   "      ssd_anchor_generator {",
   "        aspect_ratios: [1.0]",
   "        scales: [0.1, 0.15, 0.2, 0.4, 0.6, 0.8]",
   "        reduce_boxes_in_lowest_layer: false",
   "      }",
   "    \"\"\"",
   "    anchor_generator_proto = anchor_generator_pb2.AnchorGenerator()",
   "    text_format.Merge(anchor_generator_text_proto, anchor_generator_proto)",
   "    anchor_generator_object = anchor_generator_builder.build(         anchor_generator_proto)",
   "    ${0:NAME}.assertTrue(isinstance(anchor_generator_object,                                multiple_grid_anchor_generator.                                MultipleGridAnchorGenerator))",
   "    for actual_scales, expected_scales in zip(         list(anchor_generator_object._scales),         [(0.1, math.sqrt(0.1 * 0.15)),          (0.15, math.sqrt(0.15 * 0.2)),          (0.2, math.sqrt(0.2 * 0.4)),          (0.4, math.sqrt(0.4 * 0.6)),          (0.6, math.sqrt(0.6 * 0.8)),          (0.8, math.sqrt(0.8 * 1.0))]):",
   "\t${0:NAME}.assert_almost_list_equal(expected_scales, actual_scales, delta=1e-2) ",
   "  def test_build_ssd_anchor_generator_with_custom_interpolated_scale(${0:NAME}):",
   "\tanchor_generator_text_proto = \"\"\"",
   "      ssd_anchor_generator {",
   "        aspect_ratios: [0.5]",
   "        interpolated_scale_aspect_ratio: 0.5",
   "        reduce_boxes_in_lowest_layer: false",
   "      }",
   "    \"\"\"",
   "    anchor_generator_proto = anchor_generator_pb2.AnchorGenerator()",
   "    text_format.Merge(anchor_generator_text_proto, anchor_generator_proto)",
   "    anchor_generator_object = anchor_generator_builder.build(         anchor_generator_proto)",
   "    ${0:NAME}.assertTrue(isinstance(anchor_generator_object,                                multiple_grid_anchor_generator.                                MultipleGridAnchorGenerator))",
   "    for actual_aspect_ratio, expected_aspect_ratio in zip(         list(anchor_generator_object._aspect_ratios),         6 * [(0.5, 0.5)]):",
   "\t${0:NAME}.assert_almost_list_equal(expected_aspect_ratio, actual_aspect_ratio) ",
   "  def test_build_ssd_anchor_generator_without_reduced_boxes(${0:NAME}):"
  ]
 },
 {
  "number": 2727,
  "sha": "3543f02d214cdd9798b4603fa8783652d222a73f",
  "author": "tombstone",
  "participant": "derekjchow",
  "created_at": "2017-11-07 19:31:26",
  "condition": [
   "${0:NAME}.assert_almost_list_equal(expected_aspect_ratio, actual_aspect_ratio)"
  ],
  "consequent": [
   "${0:NAME}.assert_almost_list_equal(expected_offsets, actual_offsets)"
  ]
 },
 {
  "number": 2690,
  "sha": "ae5adb595834aceb09e6b434ad73cfb0f5f58cdb",
  "author": "k-w-w",
  "participant": "nealwu",
  "created_at": "2017-11-02 19:14:22",
  "condition": [
   "${0:NAME} = ${1:NAME}.decode_raw(value, ${1:NAME}.${2:NAME})"
  ],
  "consequent": [
   "record_vector = ${1:NAME}.decode_raw(${0:NAME}, ${1:NAME}.${2:NAME})"
  ]
 },
 {
  "number": 2690,
  "sha": "ae5adb595834aceb09e6b434ad73cfb0f5f58cdb",
  "author": "k-w-w",
  "participant": "nealwu",
  "created_at": "2017-11-02 19:14:22",
  "condition": [
   "${0:NAME} = ${1:NAME}.cast(raw_record[${2:NUMBER}], ${1:NAME}.${3:NAME})"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.cast(record_vector[${2:NUMBER}], ${1:NAME}.${3:NAME})",
   "\t${0:NAME} = ${1:NAME}.one_hot(${0:NAME}, _NUM_CLASSES)"
  ]
 },
 {
  "number": 2690,
  "sha": "ae5adb595834aceb09e6b434ad73cfb0f5f58cdb",
  "author": "k-w-w",
  "participant": "nealwu",
  "created_at": "2017-11-02 19:14:22",
  "condition": [
   "lambda ${0:NAME}, ${1:NAME}: (tf.${0:NAME}.per_image_standardization(${0:NAME}), ${1:NAME}))"
  ],
  "consequent": [
   "lambda ${0:NAME}, ${1:NAME}: (preprocess_image(${0:NAME}, is_training), ${1:NAME})) ",
   "\tdataset = dataset.prefetch(2 * batch_size)"
  ]
 },
 {
  "number": 2690,
  "sha": "ae5adb595834aceb09e6b434ad73cfb0f5f58cdb",
  "author": "k-w-w",
  "participant": "nealwu",
  "created_at": "2017-11-02 19:14:22",
  "condition": [
   "${0:NAME} = ${1:NAME}.reshape(raw_record[${2:NAME}:${3:NAME}],                            [${4:NAME}, ${5:NAME}, ${6:NAME}])"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.reshape(       record_vector[${2:NAME}:${3:NAME}], [${4:NAME}, ${5:NAME}, ${6:NAME}])"
  ]
 },
 {
  "number": 2690,
  "sha": "ae5adb595834aceb09e6b434ad73cfb0f5f58cdb",
  "author": "k-w-w",
  "participant": "nealwu",
  "created_at": "2017-11-02 19:14:22",
  "condition": [
   "${0:NAME} = ${0:NAME}.shuffle(${1:NAME}=_SHUFFLE_BUFFER)"
  ],
  "consequent": [
   "                                                                     ",
   "\t${0:NAME} = ${0:NAME}.shuffle(${1:NAME}=_NUM_IMAGES['train'])"
  ]
 },
 {
  "number": 2690,
  "sha": "ae5adb595834aceb09e6b434ad73cfb0f5f58cdb",
  "author": "k-w-w",
  "participant": "nealwu",
  "created_at": "2017-11-02 19:14:22",
  "condition": [
   "${0:NAME} = ${0:NAME}.map(       ${1:NAME}, num_threads=1, output_buffer_size=${2:NAME})"
  ],
  "consequent": [
   "${0:NAME} = ${0:NAME}.map(${1:NAME}).prefetch(${2:NAME})"
  ]
 },
 {
  "number": 2690,
  "sha": "ae5adb595834aceb09e6b434ad73cfb0f5f58cdb",
  "author": "k-w-w",
  "participant": "nealwu",
  "created_at": "2017-11-02 19:14:22",
  "condition": [
   "def dataset_parser(value):",
   "\t\"\"\"Parse a CIFAR-10 record from value.\"\"\""
  ],
  "consequent": [
   "def parse_record(raw_record):",
   "\t\"\"\"Parse CIFAR-10 image and label from a raw record.\"\"\""
  ]
 },
 {
  "number": 2631,
  "sha": "3237c08023d9667a3b4f30420b5c2ebe71e11cad",
  "author": "tombstone",
  "participant": "jch1",
  "created_at": "2017-10-28 20:37:34",
  "condition": [
   "test_create_faster_rcnn_inception_resnet_v2_model_from_config"
  ],
  "consequent": [
   "test_create_faster_rcnn_nas_model_from_config"
  ]
 },
 {
  "number": 2620,
  "sha": "0a49aee83d52d41c2426984b9ace0be2ce3650c6",
  "author": "tombstone",
  "participant": "jch1",
  "created_at": "2017-10-27 22:17:29",
  "condition": [
   "def test_build_ssd_anchor_generator_with_custom_scales(${0:NAME}):",
   "\tanchor_generator_text_proto = \"\"\"",
   "      ssd_anchor_generator {",
   "        aspect_ratios: [1.0]",
   "        scales: [0.1, 0.15, 0.2, 0.4, 0.6, 0.8]",
   "        reduce_boxes_in_lowest_layer: false",
   "      }",
   "    \"\"\"",
   "    anchor_generator_proto = anchor_generator_pb2.AnchorGenerator()",
   "    text_format.Merge(anchor_generator_text_proto, anchor_generator_proto)",
   "    anchor_generator_object = anchor_generator_builder.build(         anchor_generator_proto)",
   "    ${0:NAME}.assertTrue(isinstance(anchor_generator_object,                                multiple_grid_anchor_generator.                                MultipleGridAnchorGenerator))",
   "    for actual_scales, expected_scales in zip(         list(anchor_generator_object._scales),         [(0.1, math.sqrt(0.1 * 0.15)),          (0.15, math.sqrt(0.15 * 0.2)),          (0.2, math.sqrt(0.2 * 0.4)),          (0.4, math.sqrt(0.4 * 0.6)),          (0.6, math.sqrt(0.6 * 0.8)),          (0.8, math.sqrt(0.8 * 1.0))]):",
   "\t${0:NAME}.assert_almost_list_equal(expected_scales, actual_scales, delta=1e-2) ",
   "  def test_build_ssd_anchor_generator_with_custom_interpolated_scale(${0:NAME}):",
   "\tanchor_generator_text_proto = \"\"\"",
   "      ssd_anchor_generator {",
   "        aspect_ratios: [0.5]",
   "        interpolated_scale_aspect_ratio: 0.5",
   "        reduce_boxes_in_lowest_layer: false",
   "      }",
   "    \"\"\"",
   "    anchor_generator_proto = anchor_generator_pb2.AnchorGenerator()",
   "    text_format.Merge(anchor_generator_text_proto, anchor_generator_proto)",
   "    anchor_generator_object = anchor_generator_builder.build(         anchor_generator_proto)",
   "    ${0:NAME}.assertTrue(isinstance(anchor_generator_object,                                multiple_grid_anchor_generator.                                MultipleGridAnchorGenerator))",
   "    for actual_aspect_ratio, expected_aspect_ratio in zip(         list(anchor_generator_object._aspect_ratios),         6 * [(0.5, 0.5)]):",
   "\t${0:NAME}.assert_almost_list_equal(expected_aspect_ratio, actual_aspect_ratio) ",
   "  def test_build_ssd_anchor_generator_without_reduced_boxes(${0:NAME}):"
  ],
  "consequent": [
   "def test_build_ssd_anchor_generator_withoud_reduced_boxes(${0:NAME}):"
  ]
 },
 {
  "number": 2522,
  "sha": "745a4481c5cbab8f7e7740802474cf4f34bbffee",
  "author": "crizCraig",
  "participant": "tensorflow-jenkins",
  "created_at": "2017-10-11 22:30:49",
  "condition": [
   "${0:NAME}.DEFINE_string(${1:STRING}, ${2:STRING}, 'DNS name of the TensorFlow master to use.')"
  ],
  "consequent": [
   "${0:NAME}.DEFINE_string(${1:STRING}, ${2:STRING}, 'Name of the TensorFlow master to use.')"
  ]
 },
 {
  "number": 2443,
  "sha": "8815a8606c45e7c6c01549179903329af2b2d442",
  "author": "itsmeolivia",
  "participant": "nealwu",
  "created_at": "2017-09-22 22:04:53",
  "condition": [
   "tf.app.flags.DEFINE_string('data_dir', ${0:STRING},"
  ],
  "consequent": [
   "parser.add_argument('--data_dir', type=str, default=${0:STRING},"
  ]
 },
 {
  "number": 2443,
  "sha": "8815a8606c45e7c6c01549179903329af2b2d442",
  "author": "itsmeolivia",
  "participant": "nealwu",
  "created_at": "2017-09-22 22:04:53",
  "condition": [
   "tf.app.flags.DEFINE_integer('num_gpus', ${0:NUMBER},"
  ],
  "consequent": [
   "parser.add_argument('--num_gpus', type=int, default=${0:NUMBER},"
  ]
 },
 {
  "number": 2443,
  "sha": "8815a8606c45e7c6c01549179903329af2b2d442",
  "author": "itsmeolivia",
  "participant": "nealwu",
  "created_at": "2017-09-22 22:04:53",
  "condition": [
   "${0:NAME}.add_argument(${1:STRING}, ${2:NAME}=${3:NAME}, ${4:NAME}=${5:NUMBER}, ${6:NAME}=${7:STRING})"
  ],
  "consequent": [
   "${0:NAME}.add_argument(${1:STRING}, ${2:NAME}=${3:NAME}, ${4:NAME}=${5:NUMBER},                     ${6:NAME}=${7:STRING})"
  ]
 },
 {
  "number": 2443,
  "sha": "8815a8606c45e7c6c01549179903329af2b2d442",
  "author": "itsmeolivia",
  "participant": "nealwu",
  "created_at": "2017-09-22 22:04:53",
  "condition": [
   "FLAGS = tf.app.flags.FLAGS"
  ],
  "consequent": [
   "parser = argparse.ArgumentParser()"
  ]
 },
 {
  "number": 2443,
  "sha": "8815a8606c45e7c6c01549179903329af2b2d442",
  "author": "itsmeolivia",
  "participant": "nealwu",
  "created_at": "2017-09-22 22:04:53",
  "condition": [
   "tf.app.flags.DEFINE_boolean('use_fp16', False,"
  ],
  "consequent": [
   "parser.add_argument('--use_fp16', type=bool, default=False,"
  ]
 },
 {
  "number": 2443,
  "sha": "8815a8606c45e7c6c01549179903329af2b2d442",
  "author": "itsmeolivia",
  "participant": "nealwu",
  "created_at": "2017-09-22 22:04:53",
  "condition": [
   "${0:NAME} = argparse.ArgumentParser()"
  ],
  "consequent": [
   "${0:NAME} = cifar10.${0:NAME}"
  ]
 },
 {
  "number": 2443,
  "sha": "8815a8606c45e7c6c01549179903329af2b2d442",
  "author": "itsmeolivia",
  "participant": "nealwu",
  "created_at": "2017-09-22 22:04:53",
  "condition": [
   "FLAGS = tf.app.flags.FLAGS"
  ],
  "consequent": [
   "parser = cifar10.parser"
  ]
 },
 {
  "number": 2443,
  "sha": "8815a8606c45e7c6c01549179903329af2b2d442",
  "author": "itsmeolivia",
  "participant": "nealwu",
  "created_at": "2017-09-22 22:04:53",
  "condition": [
   "\"\"\"and checkpoint.\"\"\")",
   "tf.app.flags.DEFINE_integer('max_steps', ${0:NUMBER},"
  ],
  "consequent": [
   "parser.add_argument('--max_steps', type=int, default=${0:NUMBER},"
  ]
 },
 {
  "number": 2443,
  "sha": "8815a8606c45e7c6c01549179903329af2b2d442",
  "author": "itsmeolivia",
  "participant": "nealwu",
  "created_at": "2017-09-22 22:04:53",
  "condition": [
   "tf.app.flags.DEFINE_integer('log_frequency', ${0:NUMBER},"
  ],
  "consequent": [
   "parser.add_argument('--log_frequency', type=int, default=${0:NUMBER},"
  ]
 },
 {
  "number": 2443,
  "sha": "8815a8606c45e7c6c01549179903329af2b2d442",
  "author": "itsmeolivia",
  "participant": "nealwu",
  "created_at": "2017-09-22 22:04:53",
  "condition": [
   "tf.app.flags.DEFINE_integer('batch_size', ${0:NUMBER},"
  ],
  "consequent": [
   "parser.add_argument('--batch_size', type=int, default=${0:NUMBER},"
  ]
 },
 {
  "number": 2443,
  "sha": "8815a8606c45e7c6c01549179903329af2b2d442",
  "author": "itsmeolivia",
  "participant": "nealwu",
  "created_at": "2017-09-22 22:04:53",
  "condition": [
   "${0:NAME}.add_argument(${1:STRING}, ${2:NAME}=${3:NAME}, ${4:NAME}=${5:STRING}, ${6:NAME}=${7:STRING})"
  ],
  "consequent": [
   "${0:NAME}.add_argument(${1:STRING}, ${2:NAME}=${3:NAME}, ${4:NAME}=${5:STRING},                     ${6:NAME}=${7:STRING})"
  ]
 },
 {
  "number": 2443,
  "sha": "8815a8606c45e7c6c01549179903329af2b2d442",
  "author": "itsmeolivia",
  "participant": "nealwu",
  "created_at": "2017-09-22 22:04:53",
  "condition": [
   "tf.app.flags.DEFINE_string('train_dir', ${0:STRING},"
  ],
  "consequent": [
   "parser.add_argument('--train_dir', type=str, default=${0:STRING},"
  ]
 },
 {
  "number": 2443,
  "sha": "8815a8606c45e7c6c01549179903329af2b2d442",
  "author": "itsmeolivia",
  "participant": "nealwu",
  "created_at": "2017-09-22 22:04:53",
  "condition": [
   "${0:NAME}.add_argument(${1:STRING}, ${2:NAME}=${3:NAME}, ${4:NAME}=${5:NUMBER}*${6:NUMBER}, ${7:NAME}=${8:STRING})"
  ],
  "consequent": [
   "${0:NAME}.add_argument(${1:STRING}, ${2:NAME}=${3:NAME}, ${4:NAME}=${5:NUMBER}*${6:NUMBER},                     ${7:NAME}=${8:STRING})"
  ]
 },
 {
  "number": 2443,
  "sha": "8815a8606c45e7c6c01549179903329af2b2d442",
  "author": "itsmeolivia",
  "participant": "nealwu",
  "created_at": "2017-09-22 22:04:53",
  "condition": [
   "tf.app.flags.DEFINE_boolean('log_device_placement', False,"
  ],
  "consequent": [
   "parser.add_argument('--log_device_placement', type=bool, default=False,"
  ]
 },
 {
  "number": 2443,
  "sha": "8815a8606c45e7c6c01549179903329af2b2d442",
  "author": "itsmeolivia",
  "participant": "nealwu",
  "created_at": "2017-09-22 22:04:53",
  "condition": [
   "${0:NAME}.add_argument(${1:STRING}, ${2:NAME}=${3:NAME}, ${4:NAME}=False, ${5:NAME}=${6:STRING})"
  ],
  "consequent": [
   "${0:NAME}.add_argument(${1:STRING}, ${2:NAME}=${3:NAME}, ${4:NAME}=False,                     ${5:NAME}=${6:STRING})"
  ]
 },
 {
  "number": 2363,
  "sha": "1016fce9399b06d4590bf1171bf48559736c5758",
  "author": "VastoLorde95",
  "participant": "jch1",
  "created_at": "2017-09-11 08:09:16",
  "condition": [
   "${0:NAME}: ${1:NAME} 3-${2:NAME} ${3:NAME} with shape"
  ],
  "consequent": [
   "${0:NAME}: ${1:NAME} 4-${2:NAME} ${3:NAME} with shape"
  ]
 },
 {
  "number": 2363,
  "sha": "1016fce9399b06d4590bf1171bf48559736c5758",
  "author": "VastoLorde95",
  "participant": "jch1",
  "created_at": "2017-09-11 08:09:16",
  "condition": [
   "${0:NAME}: 2-${1:NAME} ${2:NAME} ${3:NAME} ${4:NAME} shape"
  ],
  "consequent": [
   "${0:NAME}: 3-${1:NAME} ${2:NAME} ${3:NAME} ${4:NAME} shape"
  ]
 },
 {
  "number": 2363,
  "sha": "1016fce9399b06d4590bf1171bf48559736c5758",
  "author": "VastoLorde95",
  "participant": "jch1",
  "created_at": "2017-09-11 08:09:16",
  "condition": [
   "${0:NAME}: ${1:NAME} 3-${2:NAME} ${3:NAME} with shape"
  ],
  "consequent": [
   "${0:NAME}: ${1:NAME} 2-${2:NAME} ${3:NAME} with shape"
  ]
 },
 {
  "number": 2363,
  "sha": "1016fce9399b06d4590bf1171bf48559736c5758",
  "author": "VastoLorde95",
  "participant": "jch1",
  "created_at": "2017-09-11 08:09:16",
  "condition": [
   "${0:NUMBER}) ${1:NAME}: ${2:NAME} 3-${3:NAME} ${4:NAME} with shape"
  ],
  "consequent": [
   "${0:NUMBER}) ${1:NAME}: ${2:NAME} 2-${3:NAME} ${4:NAME} with shape"
  ]
 },
 {
  "number": 2363,
  "sha": "1016fce9399b06d4590bf1171bf48559736c5758",
  "author": "VastoLorde95",
  "participant": "jch1",
  "created_at": "2017-09-11 08:09:16",
  "condition": [
   "${0:NUMBER}) ${1:NAME}: ${0:NUMBER}-${2:NAME} ${3:NAME} ${4:NAME} ${5:NAME} shape"
  ],
  "consequent": [
   "${0:NUMBER}) ${1:NAME}: 3-${2:NAME} ${3:NAME} ${4:NAME} ${5:NAME} shape"
  ]
 },
 {
  "number": 2363,
  "sha": "1016fce9399b06d4590bf1171bf48559736c5758",
  "author": "VastoLorde95",
  "participant": "jch1",
  "created_at": "2017-09-11 08:09:16",
  "condition": [
   "${0:NAME}: ${1:NAME} 2-${2:NAME} ${3:NAME} ${4:NAME} ${5:NAME} shape"
  ],
  "consequent": [
   "${0:NAME}: ${1:NAME} 3-${2:NAME} ${3:NAME} ${4:NAME} ${5:NAME} shape"
  ]
 },
 {
  "number": 2363,
  "sha": "1016fce9399b06d4590bf1171bf48559736c5758",
  "author": "VastoLorde95",
  "participant": "jch1",
  "created_at": "2017-09-11 08:09:16",
  "condition": [
   "${0:NAME}: 4-${1:NAME} ${2:NAME} ${3:NAME} ${4:NAME} shape"
  ],
  "consequent": [
   "${0:NAME}: 3-${1:NAME} ${2:NAME} ${3:NAME} ${4:NAME} shape"
  ]
 },
 {
  "number": 2363,
  "sha": "1016fce9399b06d4590bf1171bf48559736c5758",
  "author": "VastoLorde95",
  "participant": "jch1",
  "created_at": "2017-09-11 08:09:16",
  "condition": [
   "${0:NAME}: ${1:NAME} 4-${2:NAME} ${3:NAME} ${4:NAME} ${5:NAME} shape"
  ],
  "consequent": [
   "${0:NAME}: ${1:NAME} 3-${2:NAME} ${3:NAME} ${4:NAME} ${5:NAME} shape"
  ]
 },
 {
  "number": 2363,
  "sha": "1016fce9399b06d4590bf1171bf48559736c5758",
  "author": "VastoLorde95",
  "participant": "jch1",
  "created_at": "2017-09-11 08:09:16",
  "condition": [
   "${0:NUMBER}) ${1:NAME}: ${2:NAME} 3-${3:NAME} ${4:NAME} with shape"
  ],
  "consequent": [
   "${0:NUMBER}) ${1:NAME}: ${2:NAME} ${0:NUMBER}-${3:NAME} ${4:NAME} with shape"
  ]
 },
 {
  "number": 2343,
  "sha": "28d37e7a6f9af003823571972f0815b5e7a88169",
  "author": "elibixby",
  "participant": "tfboyd",
  "created_at": "2017-09-06 01:04:41",
  "condition": [
   "${0:NAME}=get_model_fn(${1:NAME}, ${2:NAME}, num_workers),"
  ],
  "consequent": [
   "${0:NAME}=get_model_fn(${1:NAME}, ${2:NAME},                               run_config.num_worker_replicas or 1),"
  ]
 },
 {
  "number": 2254,
  "sha": "289a2f99a7df528f6193a5ab3ee284ff3112b731",
  "author": "alanyee",
  "participant": "snurkabill",
  "created_at": "2017-08-18 21:41:19",
  "condition": [
   "${0:NAME} = MaskingNoiseAutoencoder(n_input = 784,"
  ],
  "consequent": [
   "${0:NAME} = MaskingNoiseAutoencoder("
  ]
 },
 {
  "number": 2254,
  "sha": "289a2f99a7df528f6193a5ab3ee284ff3112b731",
  "author": "alanyee",
  "participant": "snurkabill",
  "created_at": "2017-08-18 21:41:19",
  "condition": [
   "${0:NAME} = ${1:NAME}.read_data_sets(${2:STRING}, ${3:NAME} = True)"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.read_data_sets(${2:STRING}, ${3:NAME}=True)"
  ]
 },
 {
  "number": 2254,
  "sha": "289a2f99a7df528f6193a5ab3ee284ff3112b731",
  "author": "alanyee",
  "participant": "snurkabill",
  "created_at": "2017-08-18 21:41:19",
  "condition": [
   "${0:NAME} = ${1:NAME}.${2:NAME}.AdamOptimizer(${3:NAME} = ${4:NUMBER}))"
  ],
  "consequent": [
   "${0:NAME}=${1:NAME}.${2:NAME}.AdamOptimizer(${3:NAME} = ${4:NUMBER}))"
  ]
 },
 {
  "number": 2254,
  "sha": "289a2f99a7df528f6193a5ab3ee284ff3112b731",
  "author": "alanyee",
  "participant": "snurkabill",
  "created_at": "2017-08-18 21:41:19",
  "condition": [
   "print(${0:STRING}, '%04d' % (${1:NAME} + ${2:NUMBER}), \"cost=\", ${3:STRING}.format(${4:NAME}))"
  ],
  "consequent": [
   "print(${0:STRING}, '%d,' % (${1:NAME} + ${2:NUMBER}),               \"Cost:\", ${3:STRING}.format(${4:NAME}))"
  ]
 },
 {
  "number": 2254,
  "sha": "289a2f99a7df528f6193a5ab3ee284ff3112b731",
  "author": "alanyee",
  "participant": "snurkabill",
  "created_at": "2017-08-18 21:41:19",
  "condition": [
   "print(\"Epoch: \", ${0:STRING} % (${1:NAME} + ${2:NUMBER}), \"Cost: \", ${3:STRING}.format(${4:NAME}))"
  ],
  "consequent": [
   "print(\"Epoch:\", ${0:STRING} % (${1:NAME} + ${2:NUMBER}),               \"Cost:\", ${3:STRING}.format(${4:NAME}))"
  ]
 },
 {
  "number": 2254,
  "sha": "289a2f99a7df528f6193a5ab3ee284ff3112b731",
  "author": "alanyee",
  "participant": "snurkabill",
  "created_at": "2017-08-18 21:41:19",
  "condition": [
   "${0:NAME} = ${1:NAME}.${2:NAME}.AdamOptimizer(${3:NAME} = ${4:NUMBER}),"
  ],
  "consequent": [
   "${0:NAME}=${1:NAME}.${2:NAME}.AdamOptimizer(${3:NAME}=${4:NUMBER}),"
  ]
 },
 {
  "number": 2254,
  "sha": "289a2f99a7df528f6193a5ab3ee284ff3112b731",
  "author": "alanyee",
  "participant": "snurkabill",
  "created_at": "2017-08-18 21:41:19",
  "condition": [
   "${0:NAME} = ${1:NAME}.${2:NAME}.AdamOptimizer(${3:NAME} = ${4:NUMBER}))"
  ],
  "consequent": [
   "${0:NAME}=${1:NAME}.${2:NAME}.AdamOptimizer(${3:NAME}=${4:NUMBER}))"
  ]
 },
 {
  "number": 2254,
  "sha": "289a2f99a7df528f6193a5ab3ee284ff3112b731",
  "author": "alanyee",
  "participant": "snurkabill",
  "created_at": "2017-08-18 21:41:19",
  "condition": [
   "${0:NAME} = Autoencoder(n_input = 784,"
  ],
  "consequent": [
   "${0:NAME} = Autoencoder("
  ]
 },
 {
  "number": 2254,
  "sha": "289a2f99a7df528f6193a5ab3ee284ff3112b731",
  "author": "alanyee",
  "participant": "snurkabill",
  "created_at": "2017-08-18 21:41:19",
  "condition": [
   "${0:NAME} = ${1:NUMBER},",
   "\t${2:NAME} = ${3:NAME}.${4:NAME}.${5:NAME},",
   "                                               ${6:NAME} = ${3:NAME}.${7:NAME}.AdamOptimizer(${8:NAME} = ${9:NUMBER}),",
   "                                               ${10:NAME} = ${11:NUMBER})"
  ],
  "consequent": [
   "n_input=784,",
   "\t${0:NAME}=${1:NUMBER},",
   "    ${2:NAME}=${3:NAME}.${4:NAME}.${5:NAME},",
   "    ${6:NAME}=${3:NAME}.${7:NAME}.AdamOptimizer(${8:NAME} = ${9:NUMBER}),",
   "    ${10:NAME}=${11:NUMBER})"
  ]
 },
 {
  "number": 2254,
  "sha": "289a2f99a7df528f6193a5ab3ee284ff3112b731",
  "author": "alanyee",
  "participant": "snurkabill",
  "created_at": "2017-08-18 21:41:19",
  "condition": [
   "${0:NAME} = AdditiveGaussianNoiseAutoencoder(n_input = 784,"
  ],
  "consequent": [
   "${0:NAME} = AdditiveGaussianNoiseAutoencoder("
  ]
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "condition": [
   "worker = '/gpu:%d' % ${0:NAME}",
   "\t${1:NAME} = _create_device_setter(is_cpu_ps, worker, FLAGS.${2:NAME})"
  ],
  "consequent": [
   "worker_device = '/{}:{}'.format(device_type, ${0:NAME})",
   "\tif variable_strategy == 'CPU':",
   "\t${1:NAME} = cifar10_utils.local_device_setter(               worker_device=worker_device)",
   "      elif variable_strategy == 'GPU':",
   "\t${1:NAME} = cifar10_utils.local_device_setter(               ps_device_type='gpu',               worker_device=worker_device,               ps_strategy=tf.contrib.training.GreedyLoadBalancingStrategy(                   ${2:NAME},                   tf.contrib.training.byte_size_load_fn               )           )"
  ]
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "condition": [
   "${0:NAME} = ${1:NAME}.${2:NAME}.join(FLAGS.${3:NAME}, ${4:NAME} + ${5:STRING})"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.${2:NAME}.join(${3:NAME}, ${4:NAME} + ${5:STRING})"
  ]
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "condition": [
   "raise ValueError('train_batch_size must be multiple of num_gpus.')"
  ],
  "consequent": [
   "raise ValueError('--train-batch-size must be multiple of --num-gpus.')"
  ]
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "condition": [
   "batch_size: Total batch size used to calculate examples/second from",
   "\tglobal time.",
   "      every_n_steps: Log stats every n steps.",
   "      every_n_secs: Log stats every n seconds."
  ],
  "consequent": [
   "features: a list of tensors, one for each tower",
   "\tlabels: a list of tensors, one for each tower",
   "      mode: ModeKeys.TRAIN or EVAL",
   "      params: Hyperparameters suitable for tuning",
   "    Returns:",
   "\tA EstimatorSpec object."
  ]
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "condition": [
   "FLAGS.${0:NAME}, ${1:NAME}=${1:NAME}, ${2:NAME}=${2:NAME})"
  ],
  "consequent": [
   "${0:NAME},",
   "\tbatch_norm_decay=batch_norm_decay,",
   "      batch_norm_epsilon=batch_norm_epsilon,",
   "      ${1:NAME}=${1:NAME}, ${2:NAME}=${2:NAME})"
  ]
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "condition": [
   "${0:NAME}=FLAGS.batch_norm_epsilon,"
  ],
  "consequent": [
   "${0:NAME}=self._batch_norm_epsilon,"
  ]
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "condition": [
   "FLAGS"
  ],
  "consequent": [
   "params"
  ]
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "condition": [
   "num_eval_examples = cifar10.Cifar10DataSet.num_examples_per_epoch('eval')",
   "\tif num_eval_examples % FLAGS.eval_batch_size != 0:",
   "\traise ValueError('validation set size must be multiple of eval_batch_size') ",
   "  train_input_fn = functools.partial(input_fn, subset='train',                                      num_shards=FLAGS.num_gpus) ",
   "  eval_input_fn = functools.partial(input_fn, subset='eval',                                     num_shards=FLAGS.num_gpus) ",
   "  train_steps = FLAGS.train_steps",
   "  eval_steps = num_eval_examples // FLAGS.eval_batch_size                            ",
   "  sess_config = tf.ConfigProto()",
   "  sess_config.allow_soft_placement = True",
   "  sess_config.log_device_placement = FLAGS.log_device_placement",
   "  sess_config.intra_op_parallelism_threads = FLAGS.num_intra_threads",
   "  sess_config.inter_op_parallelism_threads = FLAGS.num_inter_threads",
   "  sess_config.gpu_options.force_gpu_compatible = FLAGS.force_gpu_compatible                                                                                                                               ",
   "  tensors_to_log = {'learning_rate': 'learning_rate',                     'loss': 'gradient_averaging/loss'} ",
   "  logging_hook = tf.train.LoggingTensorHook(       tensors=tensors_to_log, every_n_iter=100) ",
   "  examples_sec_hook = ExamplesPerSecondHook(       FLAGS.train_batch_size, every_n_steps=10) ",
   "  hooks = [logging_hook, examples_sec_hook] ",
   "  if FLAGS.run_experiment:",
   "\tconfig = tf.contrib.learn.RunConfig(model_dir=FLAGS.model_dir)",
   "    config = config.replace(session_config=sess_config)",
   "    tf.contrib.learn.learn_runner.run(         get_experiment_fn(train_input_fn, eval_input_fn,                           train_steps, eval_steps,                           hooks), run_config=config) ",
   "  else:",
   "\tconfig = tf.estimator.RunConfig()",
   "    config = config.replace(session_config=sess_config)",
   "    classifier = tf.estimator.Estimator(         model_fn=_resnet_model_fn, model_dir=FLAGS.model_dir, config=config) ",
   "    print('Starting to train...')",
   "    classifier.train(input_fn=train_input_fn,                      steps=train_steps,                      hooks=hooks) ",
   "    print('Starting to evaluate...')",
   "    eval_results = classifier.evaluate(         input_fn=eval_input_fn,         steps=eval_steps)",
   "    print(eval_results) ",
   "if __name__ == '__main__':",
   "\ttf.app.run()"
  ],
  "consequent": [
   "main(**vars(args))"
  ]
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "condition": [
   "tf.flags.DEFINE_string('data_dir', '',                        'The directory where the CIFAR-10 input data is stored.')"
  ],
  "consequent": [
   "def get_model_fn(num_gpus, variable_strategy, num_workers, sync):",
   "\tdef _resnet_model_fn(features, labels, mode, params):",
   "\t\"\"\"Resnet model body."
  ]
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "condition": [
   "${0:NAME}=FLAGS.batch_norm_decay,"
  ],
  "consequent": [
   "${0:NAME}=self._batch_norm_decay,"
  ]
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "condition": [
   "def get_experiment_fn(train_input_fn, eval_input_fn, train_steps, eval_steps,                       train_hooks):"
  ],
  "consequent": [
   "def get_experiment_fn(data_dir, num_gpus, is_gpu_ps,                       use_distortion_for_training=True,                       sync=True):"
  ]
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "condition": [
   "def input_fn(${0:NAME}, ${1:NAME}):"
  ],
  "consequent": [
   "def input_fn(data_dir, ${0:NAME}, ${1:NAME}, batch_size,              use_distortion_for_training=True):"
  ]
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "condition": [
   "is_cpu_ps = FLAGS.is_cpu_ps",
   "\tnum_gpus = FLAGS.num_gpus",
   "  ${0:NAME} = FLAGS.${0:NAME}"
  ],
  "consequent": [
   "${0:NAME} = params.${0:NAME}"
  ]
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "condition": [
   "super(${0:NAME}, ${1:NAME}).__init__(${2:NAME}, ${3:NAME})"
  ],
  "consequent": [
   "super(${0:NAME}, ${1:NAME}).__init__(         ${2:NAME},         ${3:NAME},         batch_norm_decay,         batch_norm_epsilon     )"
  ]
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "condition": [
   "from tensorflow.python.platform import tf_logging as logging",
   "from tensorflow.python.training import basic_session_run_hooks",
   "from tensorflow.python.training import session_run_hook",
   "from tensorflow.python.training import training_util"
  ],
  "consequent": [
   "import cifar10",
   "import cifar10_model",
   "import cifar10_utils"
  ]
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "condition": [
   "                                     ",
   "\t${0:NAME} = ${1:NAME}.${2:NAME}.num_examples_per_epoch("
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.${2:NAME}.num_examples_per_epoch("
  ]
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "condition": [
   "tf.app.run(${0:NAME})"
  ],
  "consequent": [
   "parser = argparse.ArgumentParser()",
   "\tparser.add_argument(       '--input-dir',       type=str,       default='',       help='Directory where CIFAR10 data is located.'   )",
   "  parser.add_argument(       '--output-dir',       type=str,       default='',       help=\"\"\"\\",
   "      Directory where TFRecords will be saved.The TFRecords will have the same",
   "      name as the CIFAR10 inputs + .tfrecords.\\",
   "      \"\"\"   )",
   "  args = parser.parse_args()",
   "  ${0:NAME}(args.input_dir, args.output_dir)"
  ]
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "condition": [
   "FLAGS"
  ],
  "consequent": [
   "args"
  ]
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "condition": [
   "def __init__(${0:NAME}, ${1:NAME}, ${2:NAME}):"
  ],
  "consequent": [
   "def __init__(${0:NAME}, ${1:NAME}, ${2:NAME}, batch_norm_decay, batch_norm_epsilon):"
  ]
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "condition": [
   "${0:NAME} = ${1:NAME} == ${2:STRING} and FLAGS.use_distortion_for_training"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME} == ${2:STRING} and use_distortion_for_training"
  ]
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "condition": [
   "loss = tf.reduce_mean(tower_losses, name='loss')"
  ],
  "consequent": [
   "all_grads = {}"
  ]
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "condition": [
   "if FLAGS.${0:NAME} == ${1:NUMBER} and not FLAGS.is_cpu_ps:"
  ],
  "consequent": [
   "if args.${0:NAME} == ${1:NUMBER} and args.variable_strategy == 'GPU':"
  ]
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "condition": [
   "raise ValueError('eval_batch_size must be multiple of num_gpus.')"
  ],
  "consequent": [
   "raise ValueError('--eval-batch-size must be multiple of --num-gpus.')"
  ]
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "condition": [
   "def main(unused_argv):"
  ],
  "consequent": [
   "def main(input_dir, output_dir):"
  ]
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "condition": [
   "${0:NAME}.${1:NAME}.join(FLAGS.${2:NAME}, ${3:NAME}) for ${3:NAME} in ${4:NAME}]"
  ],
  "consequent": [
   "${0:NAME}.${1:NAME}.join(${2:NAME}, ${3:NAME}) for ${3:NAME} in ${4:NAME}]"
  ]
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "condition": [
   "tf.flags.DEFINE_string('model_dir', '',                        'The directory where the model will be stored.')"
  ],
  "consequent": [
   "Support single host, one or more GPU training. Parameter distribution can",
   "\tbe either one of the following scheme.",
   "    1. CPU is the parameter server and manages gradient updates.",
   "    2. Parameters are distributed evenly across all GPUs, and the first GPU",
   "\tmanages gradient updates."
  ]
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "condition": [
   "${0:NAME} = ${1:NAME}.Cifar10DataSet(FLAGS.${2:NAME}, ${3:NAME}, ${4:NAME})"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.Cifar10DataSet(${2:NAME}, ${3:NAME}, ${4:NAME})"
  ]
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "condition": [
   "if FLAGS.${0:NAME} < ${1:NUMBER}:"
  ],
  "consequent": [
   "                        ",
   "\tsess_config = tf.ConfigProto(       allow_soft_placement=True,       log_device_placement=log_device_placement,       intra_op_parallelism_threads=num_intra_threads,       gpu_options=tf.GPUOptions(           force_gpu_compatible=True       )   ) ",
   "  config = cifar10_utils.RunConfig(       session_config=sess_config,       model_dir=job_dir)",
   "  tf.contrib.learn.learn_runner.run(       get_experiment_fn(           data_dir,           ${0:NAME},           variable_strategy,           use_distortion_for_training,           sync       ),       run_config=config,       hparams=tf.contrib.training.HParams(**hparams)   )  ",
   "if __name__ == '__main__':",
   "\tparser = argparse.ArgumentParser()",
   "  parser.add_argument(       '--data-dir',       type=str,       required=True,       help='The directory where the CIFAR-10 input data is stored.'   )",
   "  parser.add_argument(       '--job-dir',       type=str,       required=True,       help='The directory where the model will be stored.'   )",
   "  parser.add_argument(       '--variable-strategy',       choices=['CPU', 'GPU'],       type=str,       default='CPU',       help='Where to locate variable operations'   )",
   "  parser.add_argument(       '--num-gpus',       type=int,       default=1,       help='The number of gpus used. Uses only CPU if set to 0.'   )",
   "  parser.add_argument(       '--num-layers',       type=int,       default=44,       help='The number of layers of the model.'   )",
   "  parser.add_argument(       '--train-steps',       type=int,       default=80000,       help='The number of steps to use for training.'   )",
   "  parser.add_argument(       '--train-batch-size',       type=int,       default=128,       help='Batch size for training.'   )",
   "  parser.add_argument(       '--eval-batch-size',       type=int,       default=100,       help='Batch size for validation.'   )",
   "  parser.add_argument(       '--momentum',       type=float,       default=0.9,       help='Momentum for MomentumOptimizer.'   )",
   "  parser.add_argument(       '--weight-decay',       type=float,       default=2e-4,       help='Weight decay for convolutions.'   )",
   "  parser.add_argument(       '--learning-rate',       type=float,       default=0.1,       help=\"\"\"\\",
   "      This is the inital learning rate value. The learning rate will decrease",
   "      during training. For more details check the model_fn implementation in",
   "      this file.\\",
   "      \"\"\"   )",
   "  parser.add_argument(       '--use-distortion-for-training',       type=bool,       default=True,       help='If doing image distortion for training.'   )",
   "  parser.add_argument(       '--sync',       action='store_true',       default=False,       help=\"\"\"\\",
   "      If present when running in a distributed environment will run on sync mode.\\",
   "      \"\"\"   )",
   "  parser.add_argument(       '--num-intra-threads',       type=int,       default=${1:NUMBER},       help=\"\"\"\\",
   "      Number of threads to use for intra-op parallelism. When training on CPU",
   "      set to 0 to have the system pick the appropriate number or alternatively",
   "      set it to the number of physical CPU cores.\\",
   "      \"\"\"   )",
   "  parser.add_argument(       '--num-inter-threads',       type=int,       default=${1:NUMBER},       help=\"\"\"\\",
   "      Number of threads to use for inter-op parallelism. If set to 0, the",
   "      system will pick an appropriate number.\\",
   "      \"\"\"   )",
   "  parser.add_argument(       '--log-device-placement',       action='store_true',       default=False,       help='Whether to log device placement.'   )",
   "  parser.add_argument(       '--batch-norm-decay',       type=float,       default=0.997,       help='Decay for batch norm.'   )",
   "  parser.add_argument(       '--batch-norm-epsilon',       type=float,       default=1e-5,       help='Epsilon for batch norm.'   )",
   "  args = parser.parse_args() ",
   "  if args.${0:NAME} < ${1:NUMBER}:"
  ]
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "condition": [
   "def _tower_fn(${0:NAME}, ${1:NAME}, ${2:NAME}, ${3:NAME}, tower_losses,               tower_gradvars, tower_preds, ${4:NAME}):"
  ],
  "consequent": [
   "def _tower_fn(${0:NAME},               ${1:NAME},               ${2:NAME},               ${3:NAME},               ${4:NAME},               num_layers,               batch_norm_decay,               batch_norm_epsilon):"
  ]
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "condition": [
   "for zipped_gradvars in zip(*${0:NAME}):"
  ],
  "consequent": [
   "for grad, var in itertools.chain(*${0:NAME}):"
  ]
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "condition": [
   "${0:NAME} = ${1:NAME}.${2:NAME}.Estimator(model_fn=_resnet_model_fn,"
  ],
  "consequent": [
   "train_input_fn = functools.partial(         input_fn,         data_dir,         subset='train',         num_shards=num_gpus,         batch_size=hparams.train_batch_size,         use_distortion_for_training=use_distortion_for_training     ) ",
   "\teval_input_fn = functools.partial(         input_fn,         data_dir,         subset='eval',         batch_size=hparams.eval_batch_size,         num_shards=num_gpus     ) ",
   "    num_eval_examples = cifar10.Cifar10DataSet.num_examples_per_epoch('eval')",
   "    if num_eval_examples % hparams.eval_batch_size != 0:",
   "\traise ValueError('validation set size must be multiple of eval_batch_size') ",
   "    train_steps = hparams.train_steps",
   "    eval_steps = num_eval_examples // hparams.eval_batch_size",
   "    examples_sec_hook = cifar10_utils.ExamplesPerSecondHook(       hparams.train_batch_size, every_n_steps=10) ",
   "    tensors_to_log = {'learning_rate': 'learning_rate',                       'loss': 'loss'} ",
   "    logging_hook = ${1:NAME}.train.LoggingTensorHook(       tensors=tensors_to_log, every_n_iter=100) ",
   "    hooks = [logging_hook, examples_sec_hook] ",
   "    ${0:NAME} = ${1:NAME}.${2:NAME}.Estimator("
  ]
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "condition": [
   "def __init__(${0:NAME}, ${1:NAME}, ${2:NAME}, ${3:NAME}=${4:STRING}):"
  ],
  "consequent": [
   "def __init__(${0:NAME},                ${1:NAME},                ${2:NAME},                batch_norm_decay,                batch_norm_epsilon,                ${3:NAME}=${4:STRING}):"
  ]
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "condition": [
   "${0:STRING}) // (FLAGS.${1:NAME} * FLAGS.${2:NAME})"
  ],
  "consequent": [
   "${0:STRING}) // (params.${1:NAME} * ${2:NAME})"
  ]
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "condition": [
   "def main(unused_argv):"
  ],
  "consequent": [
   "def main(job_dir,          data_dir,          num_gpus,          variable_strategy,          use_distortion_for_training,          log_device_placement,          num_intra_threads,          sync,          **hparams):"
  ]
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "condition": [
   "                                                             ",
   "\t${0:NAME} = zipped_gradvars[0][1]",
   "        ${1:NAME} = [gv[0] for gv in zipped_gradvars]"
  ],
  "consequent": [
   "if grad is not None:",
   "\tall_grads.setdefault(${0:NAME}, []).append(grad)",
   "      for ${0:NAME}, ${1:NAME} in six.iteritems(all_grads):"
  ]
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "condition": [
   "raise ValueError('Invalid num_layers parameter.')"
  ],
  "consequent": [
   "raise ValueError('Invalid --num-layers parameter.')"
  ]
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "condition": [
   "${0:NAME}.extend_train_hooks(train_hooks)"
  ],
  "consequent": [
   "${0:NAME}.extend_train_hooks(hooks)"
  ]
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "condition": [
   "_tower_fn(${0:NAME}, ${1:NAME}, ${2:NAME}[${3:NAME}],                       ${4:NAME}[${3:NAME}], ${5:NAME}, ${6:NAME},                       ${7:NAME}, False)"
  ],
  "consequent": [
   "loss, gradvars, preds = _tower_fn(                 ${0:NAME},                 ${1:NAME},                 ${2:NAME}[${3:NAME}],                 ${4:NAME}[${3:NAME}],                 (device_type == 'cpu'),                 params.num_layers,                 params.batch_norm_decay,                 params.batch_norm_epsilon)",
   "\t${5:NAME}.append(loss)",
   "            ${6:NAME}.append(gradvars)",
   "            ${7:NAME}.append(preds)"
  ]
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "condition": [
   "operator"
  ],
  "consequent": [
   "itertools"
  ]
 },
 {
  "number": 2090,
  "sha": "99cb3f707710e572ab48e107eb03b7bf5b8ae239",
  "author": "mari-linhares",
  "participant": "tfboyd",
  "created_at": "2017-08-02 00:27:05",
  "condition": [
   "${0:NAME}.${1:NAME}.DEFINE_integer(${2:STRING}, ${3:NUMBER}, 'Number of workers')"
  ],
  "consequent": [
   "${0:NAME}.${1:NAME}.DEFINE_integer(${2:STRING}, ${3:NUMBER}, 'Number of workers.')"
  ]
 },
 {
  "number": 2080,
  "sha": "6fe50699409f13834a9fd0a408dafccff0fd18e9",
  "author": "mari-linhares",
  "participant": "tfboyd",
  "created_at": "2017-08-01 00:05:48",
  "condition": [
   "file_name"
  ],
  "consequent": [
   "mode"
  ]
 },
 {
  "number": 2080,
  "sha": "6fe50699409f13834a9fd0a408dafccff0fd18e9",
  "author": "mari-linhares",
  "participant": "tfboyd",
  "created_at": "2017-08-01 00:05:48",
  "condition": [
   "${0:NAME} = ${1:NAME}.transpose(${1:NAME}.reshape(${0:NAME}, [${2:NAME}, ${3:NAME}, ${4:NAME}]), [${5:NUMBER}, ${6:NUMBER}, ${7:NUMBER}])"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.cast(         ${1:NAME}.transpose(${1:NAME}.reshape(${0:NAME}, [${2:NAME}, ${3:NAME}, ${4:NAME}]), [${5:NUMBER}, ${6:NUMBER}, ${7:NUMBER}]),         ${1:NAME}.float32)"
  ]
 },
 {
  "number": 2080,
  "sha": "6fe50699409f13834a9fd0a408dafccff0fd18e9",
  "author": "mari-linhares",
  "participant": "tfboyd",
  "created_at": "2017-08-01 00:05:48",
  "condition": [
   "for file_name in ${0:NAME}:",
   "\tinput_file = ${1:NAME}.${2:NAME}.join(${3:NAME}.${4:NAME}, file_name)"
  ],
  "consequent": [
   "for mode, files in ${0:NAME}.items():",
   "\tinput_files = [         ${1:NAME}.${2:NAME}.join(${3:NAME}.${4:NAME}, f) for f in files]"
  ]
 },
 {
  "number": 2080,
  "sha": "6fe50699409f13834a9fd0a408dafccff0fd18e9",
  "author": "mari-linhares",
  "participant": "tfboyd",
  "created_at": "2017-08-01 00:05:48",
  "condition": [
   "if ${0:NAME}.${1:NAME} == ${2:STRING}:",
   "\treturn [           ${3:NAME}.${4:NAME}.join(${0:NAME}.${5:NAME}, 'data_batch_%d.tfrecords' % i)           for i in xrange(1, 5)       ]",
   "    elif ${0:NAME}.${1:NAME} == ${6:STRING}:",
   "\treturn [${3:NAME}.${4:NAME}.join(${0:NAME}.${5:NAME}, 'data_batch_5.tfrecords')]",
   "    elif ${0:NAME}.${1:NAME} == ${7:STRING}:",
   "\treturn [${3:NAME}.${4:NAME}.join(${0:NAME}.${5:NAME}, 'test_batch.tfrecords')]"
  ],
  "consequent": [
   "if ${0:NAME}.${1:NAME} in [${2:STRING}, ${6:STRING}, ${7:STRING}]:",
   "\treturn [${3:NAME}.${4:NAME}.join(${0:NAME}.${5:NAME}, ${0:NAME}.${1:NAME} + '.tfrecords')]"
  ]
 },
 {
  "number": 2080,
  "sha": "6fe50699409f13834a9fd0a408dafccff0fd18e9",
  "author": "mari-linhares",
  "participant": "tfboyd",
  "created_at": "2017-08-01 00:05:48",
  "condition": [
   "${0:NAME} = read_pickle_from_file(${1:NAME})"
  ],
  "consequent": [
   "for ${1:NAME} in input_files:",
   "\t${0:NAME} = read_pickle_from_file(${1:NAME})"
  ]
 },
 {
  "number": 2080,
  "sha": "6fe50699409f13834a9fd0a408dafccff0fd18e9",
  "author": "mari-linhares",
  "participant": "tfboyd",
  "created_at": "2017-08-01 00:05:48",
  "condition": [
   "def convert_to_tfrecord(input_file, name):"
  ],
  "consequent": [
   "def convert_to_tfrecord(input_files, output_file):"
  ]
 },
 {
  "number": 2080,
  "sha": "6fe50699409f13834a9fd0a408dafccff0fd18e9",
  "author": "mari-linhares",
  "participant": "tfboyd",
  "created_at": "2017-08-01 00:05:48",
  "condition": [
   "input_file"
  ],
  "consequent": [
   "convert_to_tfrecord"
  ]
 },
 {
  "number": 2080,
  "sha": "6fe50699409f13834a9fd0a408dafccff0fd18e9",
  "author": "mari-linhares",
  "participant": "tfboyd",
  "created_at": "2017-08-01 00:05:48",
  "condition": [
   "${0:NAME} = [${1:STRING} % ${2:NAME} for ${2:NAME} in xrange(${3:NUMBER}, 6)]"
  ],
  "consequent": [
   "${0:NAME}['train'] = [${1:STRING} % ${2:NAME} for ${2:NAME} in xrange(${3:NUMBER}, 5)]"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "refined_box_encodings"
  ],
  "consequent": [
   "box_encodings"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME}.${1:NAME} = FakeModel()"
  ],
  "consequent": [
   "${0:NAME}.${1:NAME} = FakeModel(add_detection_masks=True)"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "checkpoint_path = ${0:NAME}.${1:NAME}.join(${2:NAME}.get_temp_dir(), 'model-ckpt')"
  ],
  "consequent": [
   "tmp_dir = ${2:NAME}.get_temp_dir()",
   "\ttrained_checkpoint_prefix = ${0:NAME}.${1:NAME}.join(tmp_dir, 'model.ckpt')"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME}.assertAllClose(scores, [[${1:NUMBER}, ${2:NUMBER}]])"
  ],
  "consequent": [
   "${0:NAME}.assertAllClose(scores_np, [[${1:NUMBER}, ${2:NUMBER}],                                         [0.9, 0.0]])"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "[-${0:NUMBER}, ${1:NAME}, masks.${2:NAME}[${3:NUMBER}].${4:NAME}, masks.${2:NAME}[4].${4:NAME}])"
  ],
  "consequent": [
   "[-${0:NUMBER}, ${1:NAME}, per_image_masks.${2:NAME}[2].${4:NAME},            per_image_masks.${2:NAME}[${3:NUMBER}].${4:NAME}])"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "padded_proposals.get_field(${0:NAME}.${1:NAME}.${2:NAME}))"
  ],
  "consequent": [
   "sampled_padded_boxlist.get_field(${0:NAME}.${1:NAME}.${2:NAME}))",
   "\treturn (tf.stack(single_image_proposal_box_sample),",
   "\ttf.stack(single_image_proposal_score_sample),"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "return ${0:NAME}.expand_dims(${1:NAME}, axis=0)"
  ],
  "consequent": [
   "return ${1:NAME}",
   "\treturn (batch_image_str_placeholder,           ${0:NAME}.map_fn(               decode,               elems=batch_image_str_placeholder,               dtype=${0:NAME}.uint8,               parallel_iterations=32,               back_prop=False))"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME} = ${1:NAME}.${2:NAME}.decode_image(image_str, ${3:NAME}=${4:NUMBER})"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.${2:NAME}.decode_image(encoded_image_string_tensor,                                          ${3:NAME}=${4:NUMBER})"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME}.assertAllClose(nms_output['detection_boxes'], ${1:NAME})"
  ],
  "consequent": [
   "${0:NAME}.assertAllClose(nmsed_boxes, ${1:NAME})"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME} and ${1:NAME} ${2:NAME} ${3:NAME} ${4:NAME}. ${5:NAME} either ${1:NAME} inference"
  ],
  "consequent": [
   "${0:NAME} and ${1:NAME} ${2:NAME} ${3:NAME} ${4:NAME}. ${5:NAME} inference",
   "graph, associated ${4:NAME} files, a frozen inference graph and a"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME}.ones([1, ${1:NUMBER}, 4, ${1:NUMBER}], ${0:NAME}.${2:NAME}))"
  ],
  "consequent": [
   "${0:NAME}.placeholder(${0:NAME}.${2:NAME}, shape=[None, None, None, ${1:NUMBER}]))"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME}.assertAllClose(${1:NAME}, [[${2:NUMBER}, ${2:NUMBER}, ${3:NUMBER}, ${3:NUMBER}],"
  ],
  "consequent": [
   "${0:NAME}.assertAllClose(${1:NAME}, [[[${2:NUMBER}, ${2:NUMBER}, ${3:NUMBER}, ${3:NUMBER}],"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "with ${0:NAME}.test_session() as ${1:NAME}:"
  ],
  "consequent": [
   "with ${0:NAME}.test_session(graph=tf_graph) as ${1:NAME}:"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "tf_example_placeholder = ${0:NAME}.placeholder("
  ],
  "consequent": [
   "\"\"\"Returns input that accepts a batch of strings with tf examples.",
   "",
   "  Returns:",
   "    a tuple of placeholder and input nodes that output decoded images.",
   "  \"\"\"",
   "\tbatch_tf_example_placeholder = ${0:NAME}.placeholder("
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "inference_graph_path = ${0:NAME}.${1:NAME}.join(self.get_temp_dir(),                                         ${2:STRING})"
  ],
  "consequent": [
   "output_directory = ${0:NAME}.${1:NAME}.join(tmp_dir, 'output')",
   "\tsaved_model_path = ${0:NAME}.${1:NAME}.join(output_directory, ${2:STRING})"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "def _batch_decode_refined_boxes(${0:NAME}, refined_box_encodings, proposal_boxes):"
  ],
  "consequent": [
   "def _batch_decode_boxes(${0:NAME}, box_encodings, anchor_boxes):"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME}.assertAllClose(${1:NAME}, [${2:NUMBER}])"
  ],
  "consequent": [
   "${0:NAME}.assertAllClose(num_detections_np, [${2:NUMBER}, 1]) ",
   "\tdef test_export_checkpoint_and_run_inference(${0:NAME}):",
   "\ttmp_dir = ${0:NAME}.get_temp_dir()",
   "    trained_checkpoint_prefix = os.path.join(tmp_dir, 'model.ckpt')",
   "    ${0:NAME}._save_checkpoint_from_mock_model(trained_checkpoint_prefix,                                           use_moving_averages=False)",
   "    output_directory = os.path.join(tmp_dir, 'output')",
   "    model_path = os.path.join(output_directory, 'model.ckpt')",
   "    meta_graph_path = model_path + '.meta' ",
   "    with mock.patch.object(         model_builder, 'build', autospec=True) as mock_builder:",
   "\tmock_builder.return_value = FakeModel(add_detection_masks=True)",
   "      pipeline_config = pipeline_pb2.TrainEvalPipelineConfig()",
   "      pipeline_config.eval_config.use_moving_averages = False",
   "      exporter.export_inference_graph(           input_type='tf_example',           pipeline_config=pipeline_config,           trained_checkpoint_prefix=trained_checkpoint_prefix,           output_directory=output_directory) ",
   "    tf_example_np = np.hstack([${0:NAME}._create_tf_example(         np.ones((4, 4, 3)).astype(np.uint8))] * ${2:NUMBER})",
   "    with tf.Graph().as_default() as od_graph:",
   "\twith ${0:NAME}.test_session(graph=od_graph) as sess:",
   "\tnew_saver = tf.train.import_meta_graph(meta_graph_path)",
   "        new_saver.restore(sess, model_path) ",
   "        tf_example = od_graph.get_tensor_by_name('tf_example:0')",
   "        boxes = od_graph.get_tensor_by_name('detection_boxes:0')",
   "        scores = od_graph.get_tensor_by_name('detection_scores:0')",
   "        classes = od_graph.get_tensor_by_name('detection_classes:0')",
   "        masks = od_graph.get_tensor_by_name('detection_masks:0')",
   "        ${1:NAME} = od_graph.get_tensor_by_name('num_detections:0')",
   "        (boxes_np, scores_np, classes_np, masks_np,          num_detections_np) = sess.run(              [boxes, scores, classes, masks, ${1:NAME}],              feed_dict={tf_example: tf_example_np})",
   "        ${0:NAME}.assertAllClose(boxes_np, [[[0.0, 0.0, 0.5, 0.5],                                         [0.5, 0.5, 0.8, 0.8]],                                        [[0.5, 0.5, 1.0, 1.0],                                         [0.0, 0.0, 0.0, 0.0]]])",
   "        ${0:NAME}.assertAllClose(scores_np, [[0.7, 0.6],                                         [0.9, 0.0]])",
   "        ${0:NAME}.assertAllClose(classes_np, [[1, ${2:NUMBER}],                                          [${2:NUMBER}, 1]])",
   "        ${0:NAME}.assertAllClose(masks_np, np.arange(64).reshape([${2:NUMBER}, ${2:NUMBER}, 4, 4]))",
   "        ${0:NAME}.assertAllClose(num_detections_np, [${2:NUMBER}, 1])"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "return ${0:NAME}.expand_dims(image, axis=0)  ",
   "def _image_tensor_input_placeholder():",
   "\treturn ${0:NAME}.placeholder(${1:NAME}=${0:NAME}.${2:NAME},                         shape=(1, None, None, 3),                         name='image_tensor')"
  ],
  "consequent": [
   "return image_tensor",
   "\treturn (batch_tf_example_placeholder,           ${0:NAME}.map_fn(decode,                     elems=batch_tf_example_placeholder,                     ${1:NAME}=${0:NAME}.${2:NAME},                     parallel_iterations=32,                     back_prop=False))"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   ") in zip(per_image_boxes_list, per_image_scores_list,",
   "\tper_image_masks_list, num_valid_boxes_list):",
   "      if num_valid_boxes is not None:",
   "\t${0:NAME} = ${1:NAME}.reshape("
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.reshape("
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "num_proposals"
  ],
  "consequent": [
   "num_proposals_placeholder"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME} = ${1:NAME}.get_tensor_by_name('import/detection_masks:0')"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.get_tensor_by_name('detection_masks:0')"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "proposal_boxes_list = []"
  ],
  "consequent": [
   "def _unpad_proposals_and_sample_box_classifier_batch(       self,       proposal_boxes,"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME}.assertAllClose(masks, ${1:NAME}.arange(32).reshape([${2:NUMBER}, ${3:NUMBER}, ${3:NUMBER}]))"
  ],
  "consequent": [
   "${0:NAME}.assertAllClose(masks_np, ${1:NAME}.arange(64).reshape([${2:NUMBER}, ${2:NUMBER}, ${3:NUMBER}, ${3:NUMBER}]))"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "normalized_proposals, ${0:NAME}=${1:NAME}.max_num_proposals)",
   "\tproposal_boxes_list.append(padded_proposals.get())",
   "      proposal_scores_list.append("
  ],
  "consequent": [
   "sampled_boxlist,",
   "\t${0:NAME}=${1:NAME}._second_stage_batch_size)",
   "      single_image_num_proposals_sample.append(tf.minimum(           sampled_boxlist.${0:NAME}(),           ${1:NAME}._second_stage_batch_size))",
   "\tbb = sampled_padded_boxlist.get()",
   "      single_image_proposal_box_sample.append(bb)",
   "      single_image_proposal_score_sample.append("
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:STRING}: class_predictions_with_background,"
  ],
  "consequent": [
   "${0:STRING}:",
   "\tclass_predictions_with_background_placeholder,"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "checkpoint_path"
  ],
  "consequent": [
   "trained_checkpoint_prefix"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "image_str = ${0:NAME}.placeholder(${1:NAME}=${0:NAME}.${2:NAME},                              ${3:NAME}=[],"
  ],
  "consequent": [
   "\"\"\"Returns input that accepts a batch of PNG or JPEG strings.",
   "",
   "  Returns:",
   "    a tuple of placeholder and input nodes that output decoded images.",
   "  \"\"\"",
   "\tbatch_image_str_placeholder = ${0:NAME}.placeholder(       ${1:NAME}=${0:NAME}.${2:NAME},       ${3:NAME}=[None],"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "tiled_proposal_boxes"
  ],
  "consequent": [
   "reshape"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME}.unstack(rpn_objectness_predictions_with_background_batch))):",
   "\tdecoded_boxes = self._box_coder.decode(",
   "\trpn_box_encodings, box_list.BoxList(anchors))",
   "      objectness_scores = ${0:NAME}.unstack(",
   "\t${0:NAME}.nn.softmax(rpn_objectness_predictions_with_background), axis=${1:NUMBER})[${1:NUMBER}]",
   "      proposal_boxlist = post_processing.multiclass_non_max_suppression(",
   "\t${0:NAME}.expand_dims(decoded_boxes.get(), ${1:NUMBER}),",
   "          ${0:NAME}.expand_dims(objectness_scores, ${1:NUMBER}),",
   "          self._first_stage_nms_score_threshold,",
   "          self._first_stage_nms_iou_threshold, self._first_stage_max_proposals,",
   "          clip_window=clip_window)"
  ],
  "consequent": [
   "${0:NAME}.unstack(proposal_scores),",
   "\t${0:NAME}.unstack(num_proposals),",
   "             groundtruth_boxlists,",
   "             groundtruth_classes_with_background_list):",
   "      static_shape = single_image_proposal_boxes.get_shape()",
   "\tsliced_static_shape = ${0:NAME}.TensorShape([${0:NAME}.Dimension(None),                                             static_shape.dims[-${1:NUMBER}]])",
   "      single_image_proposal_boxes = ${0:NAME}.slice(",
   "\tsingle_image_proposal_boxes,",
   "          [0, 0],",
   "          [single_image_num_proposals, -${1:NUMBER}])",
   "      single_image_proposal_boxes.set_shape(sliced_static_shape)"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "export_as_saved_model=False):"
  ],
  "consequent": [
   "output_collection_name='inference_op'):"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "'detection_classes': ${0:NAME} [${1:NAME}, ${2:NAME}] ${3:NAME} tensor"
  ],
  "consequent": [
   "'nmsed_classes': ${0:NAME} [${1:NAME}, ${2:NAME}] ${3:NAME} tensor"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "per_image_boxes_list = ${0:NAME}.unstack(${1:NAME})",
   "\tper_image_scores_list = ${0:NAME}.unstack(scores)",
   "    num_valid_boxes_list = len(per_image_boxes_list) * [None]",
   "    per_image_masks_list = len(per_image_boxes_list) * [None]"
  ],
  "consequent": [
   "boxes_shape = ${1:NAME}.shape",
   "\tbatch_size = boxes_shape[0].value",
   "    num_anchors = boxes_shape[1].value ",
   "    if batch_size is None:",
   "\tbatch_size = ${0:NAME}.shape(${1:NAME})[0]",
   "    if num_anchors is None:",
   "\tnum_anchors = ${0:NAME}.shape(${1:NAME})[1]                                                                                        "
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:STRING}: ${1:NAME}.constant([${2:NUMBER}], ${1:NAME}.${3:NAME})"
  ],
  "consequent": [
   "${0:STRING}: ${1:NAME}.constant([${2:NUMBER}, 1], ${1:NAME}.${3:NAME})"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "num_instances = ${0:NAME}.shape(${1:NAME})[0] ",
   "\tdef resize_masks_branch():",
   "\t${2:NAME} = ${0:NAME}.expand_dims(${1:NAME}, ${3:NUMBER})"
  ],
  "consequent": [
   "${2:NAME} = ${0:NAME}.expand_dims(${1:NAME}, ${3:NUMBER})"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "--checkpoint_path ${0:NAME}/${1:NAME}/${2:NAME}-${3:NAME} \\"
  ],
  "consequent": [
   "--trained_checkpoint_prefix ${0:NAME}/${1:NAME}/${2:NAME}.${3:NAME} \\"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "prediction_out = ${0:NAME}.run(prediction_dict,                                   ${1:NAME}={                                       ${2:NAME}:                                       ${3:NAME}.zeros(input_image_shape)                                   }) ",
   "\t${4:NAME}.assertEqual(set(prediction_out.keys()), expected_output_keys) ",
   "        ${4:NAME}.assertAllEqual(prediction_out['image_shape'], input_image_shape)",
   "        for output_key, expected_shape in expected_output_shapes.items():",
   "\t${4:NAME}.assertAllEqual(prediction_out[output_key].${5:NAME}, expected_shape)"
  ],
  "consequent": [
   "tensor_dict_out = ${0:NAME}.run(result_tensor_dict, ${1:NAME}={             ${2:NAME}:             ${3:NAME}.zeros((batch_size, image_size, image_size, 3))})",
   "\t${4:NAME}.assertEqual(set(tensor_dict_out.keys()),                        set(expected_shapes.keys()))",
   "      for key in expected_shapes:",
   "\t${4:NAME}.assertAllEqual(tensor_dict_out[key].${5:NAME}, expected_shapes[key])"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "'detection_scores': ${0:NAME} [bath_size, ${1:NAME}] ${2:NAME} ${3:NAME} containing"
  ],
  "consequent": [
   "'nmsed_scores': ${0:NAME} [batch_size, ${1:NAME}] ${2:NAME} ${3:NAME} containing"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "tf_example_placeholder"
  ],
  "consequent": [
   "tf_example_string_tensor"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME}.DEFINE_string('checkpoint_path', '', 'Optional path to checkpoint file. '                     'If provided, bakes the weights from the checkpoint into '                     'the graph.')",
   "${0:NAME}.DEFINE_string('inference_graph_path', '', 'Path to write the output '                     'inference graph.')",
   "${0:NAME}.DEFINE_bool('export_as_saved_model', False, 'Whether the exported graph '                   'should be saved as a SavedModel')"
  ],
  "consequent": [
   "${0:NAME}.DEFINE_string('trained_checkpoint_prefix', None,                     'Path to trained checkpoint, typically of the form '                     'path/to/model.ckpt')",
   "${0:NAME}.DEFINE_string('output_directory', None, 'Path to write outputs.')"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME} = ${1:NAME}.get_tensor_by_name('import/num_detections:0')"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.get_tensor_by_name('num_detections:0')"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME} = ${1:NAME}.random_uniform(in_image_shape)"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.placeholder(${1:NAME}.float32, shape=(None, None, 3))",
   "\tin_masks = ${1:NAME}.placeholder(${1:NAME}.float32, shape=(None, None, None))"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "inference_graph_path"
  ],
  "consequent": [
   "saved_model_path"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME} = tf.constant([${1:NUMBER}, ${2:NUMBER}], ${3:NAME}=tf.${4:NAME})"
  ],
  "consequent": [
   "${0:NAME} = np.array([${1:NUMBER}, ${2:NUMBER}], ${3:NAME}=np.${4:NAME})"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME} = ${1:NAME}.squeeze(${0:NAME}, axis=${2:NUMBER})"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.squeeze(${0:NAME}, ${2:NUMBER})"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "saver = ${0:NAME}.${1:NAME}.Saver(var_map)"
  ],
  "consequent": [
   "init_saver = ${0:NAME}.${1:NAME}.Saver(available_var_map)"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME} = bcoder.batch_decode(${1:NAME}, ${2:NAME}._box_coder,"
  ],
  "consequent": [
   "${0:NAME} = ${2:NAME}._batch_decode(${1:NAME})"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "(boxes, scores, classes, masks, num_detections) = ${0:NAME}.run("
  ],
  "consequent": [
   "(boxes_np, scores_np, classes_np, masks_np,          num_detections_np) = ${0:NAME}.run("
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME}.assertAllClose(nms_output['detection_masks'], ${1:NAME})"
  ],
  "consequent": [
   "${0:NAME}.assertAllClose(nmsed_masks, ${1:NAME}) ",
   "\tdef test_batch_multiclass_nms_with_dynamic_batch_size(${0:NAME}):",
   "\tboxes_placeholder = tf.placeholder(tf.float32, shape=(None, None, 2, 4))",
   "    scores_placeholder = tf.placeholder(tf.float32, shape=(None, None, 2))",
   "    masks_placeholder = tf.placeholder(tf.float32, shape=(None, None, 2, 2, 2)) ",
   "    boxes = np.array([[[[0, 0, 1, 1], [0, 0, 4, 5]],                        [[0, 0.1, 1, 1.1], [0, 0.1, 2, 1.1]],                        [[0, -0.1, 1, 0.9], [0, -0.1, 1, 0.9]],                        [[0, 10, 1, 11], [0, 10, 1, 11]]],                       [[[0, 10.1, 1, 11.1], [0, 10.1, 1, 11.1]],                        [[0, 100, 1, 101], [0, 100, 1, 101]],                        [[0, 1000, 1, 1002], [0, 999, 2, 1004]],                        [[0, 1000, 1, 1002.1], [0, 999, 2, 1002.7]]]])",
   "    scores = np.array([[[.9, 0.01], [.75, 0.05],                         [.6, 0.01], [.95, 0]],                        [[.5, 0.01], [.3, 0.01],                         [.01, .85], [.01, .5]]])",
   "    masks = np.array([[[[[0, 1], [2, 3]], [[1, 2], [3, 4]]],                        [[[2, 3], [4, 5]], [[3, 4], [5, 6]]],                        [[[4, 5], [6, 7]], [[5, 6], [7, 8]]],                        [[[6, 7], [8, 9]], [[7, 8], [9, 10]]]],                       [[[[8, 9], [10, 11]], [[9, 10], [11, 12]]],                        [[[10, 11], [12, 13]], [[11, 12], [13, 14]]],                        [[[12, 13], [14, 15]], [[13, 14], [15, 16]]],                        [[[14, 15], [16, 17]], [[15, 16], [17, 18]]]]])",
   "    score_thresh = 0.1",
   "    iou_thresh = .5",
   "    max_output_size = 4 ",
   "    exp_nms_corners = np.array([[[0, 10, 1, 11],                                  [0, 0, 1, 1],                                  [0, 0, 0, 0],                                  [0, 0, 0, 0]],                                 [[0, 999, 2, 1004],                                  [0, 10.1, 1, 11.1],                                  [0, 100, 1, 101],                                  [0, 0, 0, 0]]])",
   "    exp_nms_scores = np.array([[.95, .9, 0, 0],                                [.85, .5, .3, 0]])",
   "    exp_nms_classes = np.array([[0, 0, 0, 0],                                 [1, 0, 0, 0]])",
   "    ${1:NAME} = np.array([[[[6, 7], [8, 9]],                                [[0, 1], [2, 3]],                                [[0, 0], [0, 0]],                                [[0, 0], [0, 0]]],                               [[[13, 14], [15, 16]],                                [[8, 9], [10, 11]],                                [[10, 11], [12, 13]],                                [[0, 0], [0, 0]]]]) ",
   "    (nmsed_boxes, nmsed_scores, nmsed_classes, nmsed_masks,      num_detections) = post_processing.batch_multiclass_non_max_suppression(          boxes_placeholder, scores_placeholder, score_thresh, iou_thresh,          max_size_per_class=max_output_size, max_total_size=max_output_size,          masks=masks_placeholder)                           ",
   "    ${0:NAME}.assertAllEqual(nmsed_boxes.shape.as_list(), [None, 4, 4])",
   "    ${0:NAME}.assertAllEqual(nmsed_scores.shape.as_list(), [None, 4])",
   "    ${0:NAME}.assertAllEqual(nmsed_classes.shape.as_list(), [None, 4])",
   "    ${0:NAME}.assertAllEqual(nmsed_masks.shape.as_list(), [None, 4, 2, 2])",
   "    ${0:NAME}.assertEqual(num_detections.shape.as_list(), [None]) ",
   "    with ${0:NAME}.test_session() as sess:",
   "\t(nmsed_boxes, nmsed_scores, nmsed_classes, nmsed_masks,        num_detections) = sess.run([nmsed_boxes, nmsed_scores, nmsed_classes,                                    nmsed_masks, num_detections],                                   feed_dict={boxes_placeholder: boxes,                                              scores_placeholder: scores,                                              masks_placeholder: masks})",
   "      ${0:NAME}.assertAllClose(nmsed_boxes, exp_nms_corners)",
   "      ${0:NAME}.assertAllClose(nmsed_scores, exp_nms_scores)",
   "      ${0:NAME}.assertAllClose(nmsed_classes, exp_nms_classes)",
   "      ${0:NAME}.assertAllClose(num_detections, [2, 3])",
   "      ${0:NAME}.assertAllClose(nmsed_masks, ${1:NAME})"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME}: if iou_thresh is not in [0, ${1:NUMBER}] or if input boxlist does not have",
   "\ta valid ${2:NAME} field."
  ],
  "consequent": [
   "${0:NAME}: if `q` in boxes.shape is not ${1:NUMBER} or not equal to number of",
   "\tclasses as inferred from ${2:NAME}.shape."
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME} = large_size"
  ],
  "consequent": [
   "${0:NAME} = _compute_new_dynamic_size(image, min_dimension,                                            max_dimension)"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "* `${0:NAME}`: ${1:NAME} ${2:NAME} scalar ${3:NAME} ${4:NAME} ${5:NAME} encoded PNG"
  ],
  "consequent": [
   "* `${0:NAME}`: ${1:NAME} ${2:NAME} 1-D ${3:NAME} ${4:NAME} ${5:NAME} shape [None]"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "frozen_graph_def = freeze_graph_with_def_protos(       input_graph_def=inference_graph_def,       input_saver_def=saver.as_saver_def(),       input_checkpoint=input_checkpoint,       output_node_names=output_node_names,       restore_op_name='save/restore_all',       filename_tensor_name='save/Const:0',       clear_devices=True,       initializer_nodes='')",
   "\treturn frozen_graph_def"
  ],
  "consequent": [
   "def _image_tensor_input_placeholder():",
   "\t\"\"\"Returns placeholder and input node that accepts a batch of uint8 images.\"\"\"",
   "  input_tensor = tf.placeholder(dtype=tf.uint8,                                 shape=(None, None, None, 3),                                 name='image_tensor')",
   "  return input_tensor, input_tensor"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME}.assertAllClose(nms_output['detection_scores'], ${1:NAME})"
  ],
  "consequent": [
   "${0:NAME}.assertAllClose(nmsed_scores, ${1:NAME})"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "_ = importer.import_graph_def(${0:NAME}, ${1:NAME}=${2:STRING})"
  ],
  "consequent": [
   "with tf.Graph().as_default():",
   "\ttf.import_graph_def(${0:NAME}, ${1:NAME}=${2:STRING})"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME} = ${1:NAME}.${2:NAME}.resize_nearest_neighbor("
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.${2:NAME}.resize_nearest_neighbor(${0:NAME}, new_size,"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME}.expand_dims(proposal_boxes, ${1:NUMBER}), [${2:NUMBER}, ${2:NUMBER}, self.${3:NAME}, ${2:NUMBER}])"
  ],
  "consequent": [
   "${0:NAME}.expand_dims(anchor_boxes, ${1:NUMBER}), [${2:NUMBER}, ${2:NUMBER}, ${3:NAME}, ${2:NUMBER}])"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "image_str"
  ],
  "consequent": [
   "image_str_batch_np"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "prediction_dict = model.predict(preprocessed_inputs)                                                                                                                                                                                                                                                                                                                  ",
   "\texpected_num_anchors = height * width * 3 * 3",
   "      expected_output_keys = set([           'rpn_box_predictor_features', 'rpn_features_to_crop', 'image_shape',           'rpn_box_encodings', 'rpn_objectness_predictions_with_background',           'anchors'])",
   "      expected_output_shapes = {"
  ],
  "consequent": [
   "expected_shapes = {"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "detections = ${0:NAME}._second_stage_nms_fn("
  ],
  "consequent": [
   "(nmsed_boxes, nmsed_scores, nmsed_classes, nmsed_masks,      num_detections) = ${0:NAME}._second_stage_nms_fn("
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME} = tf.constant("
  ],
  "consequent": [
   "${0:NAME} = np.array("
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "def testResizeImageWithMasks(${0:NAME}):",
   "\t\"\"\"Tests image resizing, checking output sizes.\"\"\"",
   "    in_image_shape_list = [[60, 40, 3], [15, 30, 3]]",
   "    in_masks_shape_list = [[15, 60, 40], [10, 15, 30]]",
   "    height = 50",
   "    width = 100",
   "    expected_image_shape_list = [[50, 100, 3], [50, 100, 3]]",
   "    expected_masks_shape_list = [[15, 50, 100], [10, 50, 100]] ",
   "    for (in_image_shape, expected_image_shape, in_masks_shape,          expected_mask_shape) in zip(in_image_shape_list,                                      expected_image_shape_list,                                      in_masks_shape_list,                                      expected_masks_shape_list):",
   "\tin_image = tf.random_uniform(in_image_shape)",
   "      in_masks = tf.random_uniform(in_masks_shape)",
   "      out_image, out_masks = preprocessor.resize_image(           in_image, in_masks, new_height=height, new_width=width)",
   "      out_image_shape = tf.shape(out_image)",
   "      out_masks_shape = tf.shape(out_masks) ",
   "      with ${0:NAME}.test_session() as sess:",
   "\tout_image_shape, out_masks_shape = sess.run(             [out_image_shape, out_masks_shape])",
   "        ${0:NAME}.assertAllEqual(out_image_shape, expected_image_shape)",
   "        ${0:NAME}.assertAllEqual(out_masks_shape, expected_mask_shape) ",
   "  def testResizeImageWithNoInstanceMask(${0:NAME}):"
  ],
  "consequent": [
   "def testResizeToRangeWithInstanceMasksTensorOfSizeZero(${0:NAME}):"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME}.assertTrue(${1:STRING} in ${2:NAME})"
  ],
  "consequent": [
   "for input_shape in input_shapes:",
   "\ttf_graph = tf.Graph()",
   "      with tf_graph.as_default():",
   "\tpreprocessed_input_placeholder = tf.placeholder(tf.float32,                                                         shape=input_shape)",
   "        prediction_dict = ${0:NAME}._model.predict(preprocessed_input_placeholder)",
   "        ${2:NAME} = ${0:NAME}._model.postprocess(prediction_dict)",
   "        ${0:NAME}.assertTrue(${1:STRING} in ${2:NAME})"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "[-${0:NUMBER}, self.max_num_proposals, self.${1:NAME}, ${2:NUMBER}])"
  ],
  "consequent": [
   "tf.stack([combined_shape[0], combined_shape[${0:NUMBER}],                                 ${1:NAME}, ${2:NUMBER}]))"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:STRING}: ${1:NAME}.constant([[${2:NUMBER}, ${3:NUMBER}]], ${1:NAME}.${4:NAME}),"
  ],
  "consequent": [
   "${0:STRING}: ${1:NAME}.constant([[${2:NUMBER}, ${3:NUMBER}],                                             [${3:NUMBER}, ${2:NUMBER}]], ${1:NAME}.${4:NAME}),"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME} = bcoder.batch_decode(${1:NAME}[${2:STRING}],"
  ],
  "consequent": [
   "${0:NAME} = self._batch_decode(${1:NAME}[${2:STRING}])"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "proposal_scores_list = []"
  ],
  "consequent": [
   "proposal_scores,"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "inference_graph_path: ${0:NAME} ${1:NAME} ${2:NAME} inference ${3:NAME}.",
   "\tcheckpoint_path: Optional path ${1:NAME} the checkpoint file.",
   "    use_moving_averages: Whether ${1:NAME} export the original or the moving averages",
   "\tof the trainable variables from the checkpoint.",
   "    output_node_names: Output tensor names, defaults are: num_detections,",
   "\tdetection_scores, detection_boxes, detection_classes.",
   "  \"\"\"",
   "  inference_graph_def = tf.get_default_graph().as_graph_def()",
   "  if checkpoint_path:",
   "    output_graph_def = get_frozen_graph_def(",
   "        inference_graph_def=inference_graph_def,",
   "        use_moving_averages=use_moving_averages,",
   "        input_checkpoint=checkpoint_path,",
   "        output_node_names=output_node_names,",
   "    )",
   "",
   "    with gfile.GFile(inference_graph_path, 'wb') as f:",
   "      f.write(output_graph_def.SerializeToString())",
   "    logging.info('%d ops in the final graph.', len(output_graph_def.node))",
   "",
   "    return",
   "  tf.train.write_graph(inference_graph_def,",
   "                       os.path.dirname(inference_graph_path),",
   "                       os.path.basename(inference_graph_path),",
   "                       as_text=False)",
   "",
   "",
   "def _write_saved_model(inference_graph_path, inputs, outputs,",
   "                       checkpoint_path=None, use_moving_averages=False):",
   "  \"\"\"Writes ${4:NAME} ${1:NAME} disk. ",
   "\tIf checkpoint_path is not None bakes the weights into the ${3:NAME} thereby",
   "  eliminating the need of checkpoint files during inference. If the model",
   "  was trained with moving averages, setting use_moving_averages ${1:NAME} true",
   "  restores the moving averages, otherwise the original set of variables",
   "  is restored. ",
   "  Args:",
   "\tinference_graph_path: ${0:NAME} ${1:NAME} ${2:NAME} inference ${3:NAME}."
  ],
  "consequent": [
   "saved_model_path: ${0:NAME} ${1:NAME} ${2:NAME} ${4:NAME}.",
   "\tfrozen_graph_def: tf.GraphDef holding frozen ${3:NAME}."
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME}.assertAllClose(${1:NAME}, ${2:NAME}.arange(32).reshape([${3:NUMBER}, ${4:NUMBER}, ${4:NUMBER}]))"
  ],
  "consequent": [
   "${0:NAME}.assertAllClose(${1:NAME}, ${2:NAME}.arange(64).reshape([${3:NUMBER}, ${3:NUMBER}, ${4:NUMBER}, ${4:NUMBER}]))"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "per_image_masks_list = ${0:NAME}.unstack(${1:NAME})"
  ],
  "consequent": [
   "masks_shape = ${0:NAME}.stack([batch_size, num_anchors, 1, 0, 0])",
   "\t${1:NAME} = ${0:NAME}.zeros(masks_shape)"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME}.assertAllClose(classes, [[${1:NUMBER}, ${2:NUMBER}]])"
  ],
  "consequent": [
   "${0:NAME}.assertAllClose(classes_np, [[${1:NUMBER}, ${2:NUMBER}],                                        [${2:NUMBER}, ${1:NUMBER}]])"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME} = ${1:NAME}.run(${2:NAME})"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.run(             ${2:NAME},             feed_dict={                 refined_box_encodings_placeholder: refined_box_encodings,                 class_predictions_with_background_placeholder:                 class_predictions_with_background,                 num_proposals_placeholder: num_proposals,                 proposal_boxes_placeholder: proposal_boxes,                 image_shape_placeholder: image_shape             })"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME}.DEFINE_string(${1:STRING}, '',"
  ],
  "consequent": [
   "${0:NAME}.DEFINE_string(${1:STRING}, None,"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "checkpoint_path,"
  ],
  "consequent": [
   "trained_checkpoint_prefix,",
   "\toutput_directory,"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "out_node_names = list(outputs.keys())",
   "\tif export_as_saved_model:",
   "\t_write_saved_model(inference_graph_path, inputs, outputs, checkpoint_path,                        ${0:NAME})"
  ],
  "consequent": [
   "output_collection_name) ",
   "\tsaver = None",
   "  if ${0:NAME}:",
   "\tvariable_averages = tf.train.ExponentialMovingAverage(0.0)",
   "    variables_to_restore = variable_averages.variables_to_restore()",
   "    saver = tf.train.Saver(variables_to_restore)"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "preprocessed_input = tf.random_uniform((${0:NAME}, ${1:NUMBER}, ${1:NUMBER}, ${2:NUMBER}),                                            dtype=tf.float32)",
   "\tprediction_dict = self._model.predict(preprocessed_input) ",
   "    self.assertTrue('box_encodings' in prediction_dict)",
   "    self.assertTrue('class_predictions_with_background' in prediction_dict)",
   "    self.assertTrue('feature_maps' in prediction_dict)"
  ],
  "consequent": [
   "image_size = ${1:NUMBER}",
   "\tinput_shapes = [(${0:NAME}, image_size, image_size, ${2:NUMBER}),                     (None, image_size, image_size, ${2:NUMBER}),                     (${0:NAME}, None, None, ${2:NUMBER}),                     (None, None, None, ${2:NUMBER})]"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "or ${0:NAME} ${1:NAME}.",
   "\t* `${2:NAME}`: ${3:NAME} ${4:NAME} ${5:NAME} ${6:NAME} proto. The batch size in this",
   "\tcase is always 1."
  ],
  "consequent": [
   "containing encoded PNG or ${0:NAME} images. Image resolutions are expected to be",
   "\tthe same if more than 1 ${1:NAME} is provided.",
   "  * `${2:NAME}`: ${3:NAME} ${4:NAME} 1-D string tensor of shape [None] containing",
   "\t${5:NAME} ${6:NAME} protos. Image resolutions are expected to be the same",
   "    if more than 1 ${1:NAME} is provided."
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "np.ones((4, 4, 3)).astype(np.uint8))})",
   "\t${0:NAME}.assertAllClose(boxes, [[${1:NUMBER}, ${1:NUMBER}, ${2:NUMBER}, ${2:NUMBER}],"
  ],
  "consequent": [
   "${0:NAME}.assertAllClose(boxes_np, [[[${1:NUMBER}, ${1:NUMBER}, ${2:NUMBER}, ${2:NUMBER}],"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "checkpoint_path, inference_graph_path,",
   "\texport_as_saved_model)"
  ],
  "consequent": [
   "trained_checkpoint_prefix, output_directory,",
   "\toptimize_graph, output_collection_name)"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "return detections"
  ],
  "consequent": [
   "return {'detection_boxes': nmsed_boxes,               'detection_scores': nmsed_scores,               'detection_classes': nmsed_classes,               'num_detections': tf.to_float(num_detections)}"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "refined_box_encodings"
  ],
  "consequent": [
   "refined_box_encodings_placeholder"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "graph or a SavedModel (${0:NAME}://${1:NAME}.${2:NAME}.${3:NAME}/${4:NAME}/${5:NAME}.${6:NAME})."
  ],
  "consequent": [
   "SavedModel (${0:NAME}://${1:NAME}.${2:NAME}.${3:NAME}/${4:NAME}/${5:NAME}.${6:NAME})."
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME}.assertAllClose(${1:NAME}, [${2:NUMBER}])"
  ],
  "consequent": [
   "${0:NAME}.assertAllClose(${1:NAME}, [${2:NUMBER}, 1]) ",
   "\tdef test_raise_runtime_error_on_images_with_different_sizes(${0:NAME}):",
   "\ttmp_dir = ${0:NAME}.get_temp_dir()",
   "    trained_checkpoint_prefix = os.path.join(tmp_dir, 'model.ckpt')",
   "    ${0:NAME}._save_checkpoint_from_mock_model(trained_checkpoint_prefix,                                           use_moving_averages=True)",
   "    output_directory = os.path.join(tmp_dir, 'output')",
   "    inference_graph_path = os.path.join(output_directory,                                         'frozen_inference_graph.pb')",
   "    with mock.patch.object(         model_builder, 'build', autospec=True) as mock_builder:",
   "\tmock_builder.return_value = FakeModel(add_detection_masks=True)",
   "      pipeline_config = pipeline_pb2.TrainEvalPipelineConfig()",
   "      pipeline_config.eval_config.use_moving_averages = False",
   "      exporter.export_inference_graph(           input_type='encoded_image_string_tensor',           pipeline_config=pipeline_config,           trained_checkpoint_prefix=trained_checkpoint_prefix,           output_directory=output_directory) ",
   "    inference_graph = ${0:NAME}._load_inference_graph(inference_graph_path)",
   "    large_image = ${0:NAME}._create_encoded_image_string(         np.ones((4, 4, 3)).astype(np.uint8), 'jpg')",
   "    small_image = ${0:NAME}._create_encoded_image_string(         np.ones((${2:NUMBER}, ${2:NUMBER}, 3)).astype(np.uint8), 'jpg') ",
   "    image_str_batch_np = np.hstack([large_image, small_image])",
   "    with ${0:NAME}.test_session(graph=inference_graph) as sess:",
   "\timage_str_tensor = inference_graph.get_tensor_by_name(           'encoded_image_string_tensor:0')",
   "      boxes = inference_graph.get_tensor_by_name('detection_boxes:0')",
   "      scores = inference_graph.get_tensor_by_name('detection_scores:0')",
   "      classes = inference_graph.get_tensor_by_name('detection_classes:0')",
   "      masks = inference_graph.get_tensor_by_name('detection_masks:0')",
   "      num_detections = inference_graph.get_tensor_by_name('num_detections:0')",
   "      with ${0:NAME}.assertRaisesRegexp(tf.errors.InvalidArgumentError,                                    '^TensorArray has inconsistent shapes.'):",
   "\tsess.run([boxes, scores, classes, masks, num_detections],                  feed_dict={image_str_tensor: image_str_batch_np})"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "def _write_inference_graph(inference_graph_path,                            checkpoint_path=None,                            use_moving_averages=False,"
  ],
  "consequent": [
   "def _write_frozen_graph(frozen_graph_path, frozen_graph_def):",
   "\t\"\"\"Writes frozen graph to disk.",
   "",
   "  Args:",
   "    frozen_graph_path: Path to write inference graph.",
   "    frozen_graph_def: tf.GraphDef holding frozen graph.",
   "  \"\"\"",
   "  with gfile.GFile(frozen_graph_path, 'wb') as f:",
   "\tf.write(frozen_graph_def.SerializeToString())",
   "  logging.info('%d ops in the final graph.', len(frozen_graph_def.node))  ",
   "def _write_saved_model(saved_model_path,                        frozen_graph_def,                        inputs,"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "tiled_proposals_boxlist"
  ],
  "consequent": [
   "tiled_anchors_boxlist"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "SavedModelBuilder"
  ],
  "consequent": [
   "saved_model_path"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "batch_size = static_shape.get_batch_size(${0:NAME}.get_shape())",
   "\tif batch_size is None:",
   "\tfeatures_height = static_shape.get_height(${0:NAME}.get_shape())",
   "      features_width = static_shape.get_width(${0:NAME}.get_shape())",
   "      flattened_predictions_size = (features_height * features_width *                                     num_predictions_per_location)",
   "      ${1:NAME} = ${2:NAME}.reshape("
  ],
  "consequent": [
   "combined_feature_map_shape = shape_utils.combined_static_and_dynamic_shape(         ${0:NAME})",
   "\t${1:NAME} = ${2:NAME}.reshape("
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "nms_dict = ${0:NAME}.batch_multiclass_non_max_suppression("
  ],
  "consequent": [
   "(nmsed_boxes, nmsed_scores, nmsed_classes, nmsed_masks,      num_detections) = ${0:NAME}.batch_multiclass_non_max_suppression("
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "if masks is not None:"
  ],
  "consequent": [
   "[-1, num_classes])"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME} = _add_output_tensor_nodes(${1:NAME})"
  ],
  "consequent": [
   "${0:NAME} = _add_output_tensor_nodes(${1:NAME},"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "num_valid_boxes_list = ${0:NAME}.unstack(${1:NAME})"
  ],
  "consequent": [
   "${1:NAME} = ${0:NAME}.ones([batch_size], dtype=${0:NAME}.int32) * num_anchors"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "def test_export_frozen_graph_with_moving_averages(${0:NAME}):"
  ],
  "consequent": [
   "def test_export_model_with_all_output_nodes(${0:NAME}):",
   "\ttmp_dir = ${0:NAME}.get_temp_dir()"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:STRING}: (batch_size, height, width, ${1:NUMBER}),"
  ],
  "consequent": [
   "${0:STRING}: (2, image_size, image_size, ${1:NUMBER}),",
   "\t'image_shape': (4,),"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "testResizeToRange"
  ],
  "consequent": [
   "testResizeToRangePreservesStaticSpatialShape"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "with session.Session() as sess:",
   "\tif input_saver_def:",
   "\tsaver = saver_lib.Saver(saver_def=input_saver_def)",
   "      saver.restore(sess, input_checkpoint)"
  ],
  "consequent": [
   "if optimize_graph:",
   "\tlogging.info('Graph Rewriter optimizations enabled')",
   "      rewrite_options = rewriter_config_pb2.RewriterConfig(           optimize_tensor_layout=True)",
   "      rewrite_options.optimizers.append('pruning')",
   "      rewrite_options.optimizers.append('constfold')",
   "      rewrite_options.optimizers.append('layout')",
   "      graph_options = tf.GraphOptions(           rewrite_options=rewrite_options, infer_shapes=True)"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME}={${1:NAME}: ${2:NAME}.ones((1, ${3:NUMBER}, ${3:NUMBER}, ${4:NUMBER})).astype(${2:NAME}.${5:NAME})})"
  ],
  "consequent": [
   "${0:NAME}={${1:NAME}: ${2:NAME}.ones((2, ${3:NUMBER}, ${3:NUMBER}, ${4:NUMBER})).astype(${2:NAME}.${5:NAME})})"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "testResizeToRangeWithMasks"
  ],
  "consequent": [
   "testResizeToRangeWithMasksPreservesStaticSpatialShape"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME} = ${1:NAME}.run(${2:NAME})"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.run(${2:NAME},                                   feed_dict={                                       preprocessed_input_placeholder:                                       np.random.uniform(                                           size=(batch_size, 2, 2, 3))})"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME} = ${1:NAME}.get_tensor_by_name('import/detection_scores:0')"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.get_tensor_by_name('detection_scores:0')"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:STRING}: ${1:NAME}.constant([[${2:NUMBER}, ${2:NUMBER}, ${3:NUMBER}, ${3:NUMBER}],"
  ],
  "consequent": [
   "${0:STRING}: ${1:NAME}.constant([[[${2:NUMBER}, ${2:NUMBER}, ${3:NUMBER}, ${3:NUMBER}],                                            [${3:NUMBER}, ${3:NUMBER}, 0.8, 0.8]],                                           [[${3:NUMBER}, ${3:NUMBER}, 1.0, 1.0],"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "inference_graph_path,"
  ],
  "consequent": [
   "optimize_graph=False,"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME},",
   "\t[-${1:NUMBER}, flattened_predictions_size, ${1:NUMBER}, ${2:NAME}.${3:NAME}])"
  ],
  "consequent": [
   "${0:NAME}, tf.stack([combined_feature_map_shape[0],                                  combined_feature_map_shape[${1:NUMBER}] *                                  combined_feature_map_shape[2] *                                  num_predictions_per_location,                                  ${1:NUMBER}, ${2:NAME}.${3:NAME}]))"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME} = ${1:NAME}.run(${0:NAME})"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.run(${0:NAME},                                    feed_dict={in_image:                                               np.random.randn(*in_shape)})"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "checkpoint_path: ${0:NAME} ${1:NAME} ${2:NAME} ${3:NAME} ${4:NAME} ${1:NAME} freeze.",
   "\tinference_graph_path: ${0:NAME} ${1:NAME} ${5:NAME} inference ${6:NAME} ${1:NAME}.",
   "    export_as_saved_model: ${7:NAME} ${2:NAME} model should be exported as ${8:NAME} SavedModel. ${7:NAME}",
   "\tfalse, it is saved as an inference ${6:NAME}."
  ],
  "consequent": [
   "trained_checkpoint_prefix: ${0:NAME} ${1:NAME} ${2:NAME} trained ${3:NAME} ${4:NAME}.",
   "\toutput_directory: ${0:NAME} ${1:NAME} ${5:NAME} outputs.",
   "    optimize_graph: Whether ${1:NAME} optimize ${6:NAME} using Grappler.",
   "    output_collection_name: Name of collection ${1:NAME} add output tensors ${1:NAME}.",
   "\t${7:NAME} None, does not add output tensors ${1:NAME} ${8:NAME} collection."
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "tiled_proposal_boxes = ${0:NAME}.tile("
  ],
  "consequent": [
   "\"\"\"Decodes box encodings with respect to the anchor boxes.",
   "",
   "    Args:",
   "      box_encodings: a 4-D tensor with shape",
   "        [batch_size, num_anchors, num_classes, self._box_coder.code_size]",
   "        representing box encodings.",
   "      anchor_boxes: [batch_size, num_anchors, 4] representing",
   "        decoded bounding boxes.",
   "",
   "    Returns:",
   "      decoded_boxes: a [batch_size, num_anchors, num_classes, 4]",
   "        float tensor representing bounding box predictions",
   "        (for each image in batch, proposal and class).",
   "    \"\"\"",
   "\tcombined_shape = shape_utils.combined_static_and_dynamic_shape(         box_encodings)",
   "    num_classes = combined_shape[2]",
   "    tiled_anchor_boxes = ${0:NAME}.tile("
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME}={${1:NAME}: self._create_tf_example("
  ],
  "consequent": [
   "${0:NAME}={${1:NAME}: tf_example_np})"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:STRING}: ${1:NAME} [batchsize] ${2:NAME} ${3:NAME} ${4:NAME} ${5:NAME} ${6:NAME} of"
  ],
  "consequent": [
   "'nmsed_masks': (optional) a",
   "\t[batch_size, max_detections, mask_height, mask_width] ${2:NAME} ${3:NAME}",
   "      containing masks for each selected box. This is set to None if input",
   "      `masks` is None.",
   "    ${0:STRING}: ${1:NAME} [batch_size] int32 ${3:NAME} ${4:NAME} ${5:NAME} ${6:NAME} of"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "testResizeToRangeWithNoInstanceMask"
  ],
  "consequent": [
   "testResizeToRangeWithMasksAndDynamicSpatialShape"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   ") = ${0:NAME}._format_groundtruth_data(${1:NAME})"
  ],
  "consequent": [
   ") = ${0:NAME}._format_groundtruth_data(${1:NAME})",
   "\t(proposal_boxes, proposal_scores,",
   "\tnum_proposals) = ${0:NAME}._unpad_proposals_and_sample_box_classifier_batch(",
   "\tproposal_boxes, proposal_scores, num_proposals,",
   "             groundtruth_boxlists, groundtruth_classes_with_background_list)                               ",
   "    proposal_boxes_reshaped = tf.reshape(proposal_boxes, [-1, 4])",
   "\tnormalized_proposal_boxes_reshaped = box_list_ops.to_normalized_coordinates(",
   "\tbox_list.BoxList(proposal_boxes_reshaped),",
   "        ${1:NAME}[1], ${1:NAME}[2], check_range=False).get()",
   "    proposal_boxes = tf.reshape(normalized_proposal_boxes_reshaped,",
   "\t[-1, proposal_boxes.shape[1].value, 4])",
   "    return proposal_boxes, proposal_scores, num_proposals"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "rpn_box_encodings_batch"
  ],
  "consequent": [
   "unstack"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "model = self._build_model(         is_training=False, first_stage_only=False, second_stage_batch_size=6)"
  ],
  "consequent": [
   "num_proposals_shapes = [(2), (None)]",
   "\trefined_box_encodings_shapes = [(16, 2, 4), (None, 2, 4)]",
   "    class_predictions_with_background_shapes = [(16, 3), (None, 3)]",
   "    proposal_boxes_shapes = [(2, 8, 4), (None, 8, 4)]"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "num_proposals_list = []",
   "\tfor (batch_index,          (rpn_box_encodings,           rpn_objectness_predictions_with_background)) in enumerate(zip("
  ],
  "consequent": [
   "num_proposals,",
   "\tgroundtruth_boxlists,",
   "      groundtruth_classes_with_background_list):",
   "    \"\"\"Unpads proposals and samples a minibatch for second stage.",
   "",
   "    Args:",
   "      proposal_boxes: A float tensor with shape",
   "        [batch_size, num_proposals, 4] representing the (potentially zero",
   "        padded) proposal boxes for all images in the batch.  These boxes are",
   "        represented as normalized coordinates.",
   "      proposal_scores:  A float tensor with shape",
   "        [batch_size, num_proposals] representing the (potentially zero",
   "        padded) proposal objectness scores for all images in the batch.",
   "      num_proposals: A Tensor of type `int32`. A 1-D tensor of shape [batch]",
   "        representing the number of proposals predicted for each image in",
   "        the batch.",
   "      groundtruth_boxlists: A list of BoxLists containing (absolute) coordinates",
   "        of the groundtruth boxes.",
   "      groundtruth_classes_with_background_list: A list of 2-D one-hot",
   "        (or k-hot) tensors of shape [num_boxes, num_classes+1] containing the",
   "        class targets with the 0th index assumed to map to the background class.",
   "",
   "    Returns:",
   "      proposal_boxes: A float tensor with shape",
   "        [batch_size, second_stage_batch_size, 4] representing the (potentially",
   "        zero padded) proposal boxes for all images in the batch.  These boxes",
   "        are represented as normalized coordinates.",
   "      proposal_scores:  A float tensor with shape",
   "        [batch_size, second_stage_batch_size] representing the (potentially zero",
   "        padded) proposal objectness scores for all images in the batch.",
   "      num_proposals: A Tensor of type `int32`. A 1-D tensor of shape [batch]",
   "        representing the number of proposals predicted for each image in",
   "        the batch.",
   "    \"\"\"",
   "\tsingle_image_proposal_box_sample = []",
   "    single_image_proposal_score_sample = []",
   "    single_image_num_proposals_sample = []",
   "    for (single_image_proposal_boxes,",
   "\tsingle_image_proposal_scores,",
   "         single_image_num_proposals,",
   "         single_image_groundtruth_boxlist,",
   "         single_image_groundtruth_classes_with_background) in zip("
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME}.assertAllClose(classes, [[${1:NUMBER}, ${2:NUMBER}]])"
  ],
  "consequent": [
   "${0:NAME}.assertAllClose(classes_np, [[${1:NUMBER}, ${2:NUMBER}],                                          [${2:NUMBER}, ${1:NUMBER}]])"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME}.assertAllClose(${1:NAME}, [[${2:NUMBER}, ${3:NUMBER}]])"
  ],
  "consequent": [
   "${0:NAME}.assertAllClose(${1:NAME}, [[${2:NUMBER}, ${3:NUMBER}],                                         [0.9, 0.0]])"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "nms_dict['detection_masks'] = tf.stack(detection_masks_list)",
   "\treturn nms_dict"
  ],
  "consequent": [
   "batch_nmsed_masks = None ",
   "\treturn (batch_nmsed_boxes, batch_nmsed_scores, batch_nmsed_classes,             batch_nmsed_masks, batch_num_detections)"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "if masks is not None:"
  ],
  "consequent": [
   "if original_masks is None:"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME} = ${1:NAME}.get_tensor_by_name('import/tf_example:0')"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.get_tensor_by_name('tf_example:0')"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "def export_inference_graph(${0:NAME}, ${1:NAME}, checkpoint_path,                            inference_graph_path, export_as_saved_model=False):"
  ],
  "consequent": [
   "frozen_graph_def = freeze_graph_with_def_protos(       input_graph_def=tf.get_default_graph().as_graph_def(),       input_saver_def=input_saver_def,       input_checkpoint=trained_checkpoint_prefix,       output_node_names=','.join(outputs.keys()),       restore_op_name='save/restore_all',       filename_tensor_name='save/Const:0',       clear_devices=True,       optimize_graph=optimize_graph,       initializer_nodes='')",
   "\t_write_frozen_graph(frozen_graph_path, frozen_graph_def)",
   "  _write_saved_model(saved_model_path, frozen_graph_def, placeholder_tensor,                      outputs)  ",
   "def export_inference_graph(${0:NAME},                            ${1:NAME},                            trained_checkpoint_prefix,                            output_directory,                            optimize_graph=False,                            output_collection_name='inference_op'):"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME} = ${1:NAME}.postprocess({"
  ],
  "consequent": [
   "num_proposals_placeholder = tf.placeholder(tf.int32,                                                    shape=num_proposals_shape)",
   "\trefined_box_encodings_placeholder = tf.placeholder(             tf.float32, shape=refined_box_encoding_shape)",
   "        class_predictions_with_background_placeholder = tf.placeholder(             tf.float32, shape=class_predictions_with_background_shape)",
   "        proposal_boxes_placeholder = tf.placeholder(             tf.float32, shape=proposal_boxes_shape)",
   "        image_shape_placeholder = tf.placeholder(tf.int32, shape=(4)) ",
   "        ${0:NAME} = ${1:NAME}.postprocess({"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME}.assertAllClose(nms_output['detection_masks'], ${1:NAME})"
  ],
  "consequent": [
   "${0:NAME}.assertAllClose(nmsed_masks, ${1:NAME})"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "proposal_boxes"
  ],
  "consequent": [
   "proposal_boxes_placeholder"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "nms_dict = {         'detection_boxes': ${0:NAME}.stack(detection_boxes_list),         'detection_scores': ${0:NAME}.stack(detection_scores_list),         'detection_classes': ${0:NAME}.stack(detection_classes_list),         'num_detections': ${0:NAME}.stack(num_detections_list)     }"
  ],
  "consequent": [
   "(batch_nmsed_boxes, batch_nmsed_scores,      batch_nmsed_classes, batch_nmsed_masks,      batch_num_detections) = ${0:NAME}.map_fn(          single_image_nms_fn,          elems=[boxes, scores, masks, num_valid_boxes],          dtype=[${0:NAME}.float32, ${0:NAME}.float32, ${0:NAME}.float32, ${0:NAME}.float32, ${0:NAME}.int32],          parallel_iterations=parallel_iterations)"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME}.assertAllClose(nms_output['num_detections'], [${1:NUMBER}, ${1:NUMBER}])"
  ],
  "consequent": [
   "${0:NAME}.assertAllClose(num_detections, [${1:NUMBER}, ${1:NUMBER}])"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME}.import_graph_def(checkpoint_graph_def)"
  ],
  "consequent": [
   "${0:NAME}.import_graph_def(frozen_graph_def, name='')"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "checkpoint_path = ${0:NAME}.${1:NAME}.join(self.get_temp_dir(), 'model-ckpt')"
  ],
  "consequent": [
   "trained_checkpoint_prefix = ${0:NAME}.${1:NAME}.join(tmp_dir, 'model.ckpt')"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME}.assertAllClose(scores, [[${1:NUMBER}, ${2:NUMBER}]])"
  ],
  "consequent": [
   "${0:NAME}.assertAllClose(scores_np, [[${1:NUMBER}, ${2:NUMBER}],                                       [0.9, 0.0]])"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "inference_graph_path = ${0:NAME}.${1:NAME}.join(self.get_temp_dir(),                                           'exported_graph.pbtxt')"
  ],
  "consequent": [
   "output_directory = ${0:NAME}.${1:NAME}.join(tmp_dir, 'output')"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "checkpoint_path=None,",
   "\tinference_graph_path=inference_graph_path)"
  ],
  "consequent": [
   "trained_checkpoint_prefix=trained_checkpoint_prefix,",
   "\toutput_directory=output_directory)"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "TODO(jonathanhuang,rathodv): ${0:NAME} ${1:NAME} ${2:NAME}'${3:NAME} ${4:NAME} ${5:NAME} ${6:NAME} the"
  ],
  "consequent": [
   "TODO: ${0:NAME} ${1:NAME} ${2:NAME}'${3:NAME} ${4:NAME} ${5:NAME} ${6:NAME} the"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "_write_inference_graph(inference_graph_path, checkpoint_path,                            use_moving_averages,                            output_node_names=','.join(out_node_names))"
  ],
  "consequent": [
   "saver = tf.train.Saver()",
   "\tinput_saver_def = saver.as_saver_def()"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "checkpoint_path=checkpoint_path,",
   "\tinference_graph_path=inference_graph_path)"
  ],
  "consequent": [
   "trained_checkpoint_prefix=trained_checkpoint_prefix,",
   "\toutput_directory=output_directory)"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "checkpoint_path=checkpoint_path,",
   "\tinference_graph_path=inference_graph_path,",
   "          export_as_saved_model=True)"
  ],
  "consequent": [
   "trained_checkpoint_prefix=trained_checkpoint_prefix,",
   "\toutput_directory=output_directory)"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "output_node_names=("
  ],
  "consequent": [
   "outputs):",
   "\t\"\"\"Writes SavedModel to disk."
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "(boxes, scores, classes, masks, num_detections) = ${0:NAME}.run("
  ],
  "consequent": [
   "(boxes_np, scores_np, classes_np, masks_np, num_detections_np) = ${0:NAME}.run("
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME}.export_inference_graph(${1:NAME}.${2:NAME}, ${3:NAME},                                   ${1:NAME}.checkpoint_path,                                   ${1:NAME}.inference_graph_path,                                   ${1:NAME}.export_as_saved_model)"
  ],
  "consequent": [
   "${0:NAME}.export_inference_graph(       ${1:NAME}.${2:NAME}, ${3:NAME}, ${1:NAME}.trained_checkpoint_prefix,       ${1:NAME}.output_directory)"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "proposal_boxlist, groundtruth_boxlists[batch_index],",
   "\tgroundtruth_classes_with_background_list[batch_index]) ",
   "      normalized_proposals = ${0:NAME}.to_normalized_coordinates(",
   "\tproposal_boxlist, image_shape[1], image_shape[2],",
   "          check_range=False)                                            ",
   "      padded_proposals = ${0:NAME}.pad_or_clip_box_list("
  ],
  "consequent": [
   "sampled_padded_boxlist = ${0:NAME}.pad_or_clip_box_list("
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME} = ${1:NAME} * ${2:NAME}.max_num_proposals"
  ],
  "consequent": [
   "image_shape = np.array((2, 36, 48, 3), dtype=np.int32)",
   "\tfor (num_proposals_shape, refined_box_encoding_shape,          class_predictions_with_background_shape,          proposal_boxes_shape) in zip(num_proposals_shapes,                                       refined_box_encodings_shapes,                                       class_predictions_with_background_shapes,                                       proposal_boxes_shapes):",
   "\ttf_graph = tf.Graph()",
   "      with tf_graph.as_default():",
   "\t${2:NAME} = self._build_model(             is_training=False, first_stage_only=False,             second_stage_batch_size=6)",
   "        ${0:NAME} = ${1:NAME} * ${2:NAME}.max_num_proposals"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "assert ${0:NAME}.inference_graph_path, 'Inference graph path missing.'",
   "\tassert ${0:NAME}.input_type, 'Input type missing.'"
  ],
  "consequent": [
   "assert ${0:NAME}.trained_checkpoint_prefix, (          '`trained_checkpoint_prefix` is missing')",
   "\tassert ${0:NAME}.output_directory, '`output_directory` is missing'"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME}.assertAllClose(nms_output['detection_classes'], ${1:NAME})"
  ],
  "consequent": [
   "${0:NAME}.assertAllClose(nmsed_classes, ${1:NAME})"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "inputs_shape = ${0:NAME}.get_shape().as_list()",
   "\t${1:NAME} = ${2:NAME}.concat([         [inputs_shape[${3:NUMBER}]*inputs_shape[${4:NUMBER}]], ${2:NAME}.shape(${0:NAME})[${5:NUMBER}:-${4:NUMBER}],         [inputs_shape[-${4:NUMBER}]]], ${3:NUMBER})"
  ],
  "consequent": [
   "combined_shape = shape_utils.combined_static_and_dynamic_shape(${0:NAME})",
   "\t${1:NAME} = ${2:NAME}.stack([combined_shape[${3:NUMBER}] * combined_shape[${4:NUMBER}]] +                                combined_shape[${5:NUMBER}:])"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:STRING}: ${1:NAME}.constant([[${2:NUMBER}, ${3:NUMBER}]], ${1:NAME}.${4:NAME}),"
  ],
  "consequent": [
   "${0:STRING}: ${1:NAME}.constant([[${2:NUMBER}, ${3:NUMBER}],                                            [0.9, 0.0]], ${1:NAME}.${4:NAME}),"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:STRING}: image_shape"
  ],
  "consequent": [
   "${0:STRING}: image_shape_placeholder,"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "preprocessed_input = tf.random_uniform((${0:NAME}, ${1:NUMBER}, ${1:NUMBER}, ${2:NUMBER}),                                            dtype=tf.float32)",
   "\tprediction_dict = self._model.predict(preprocessed_input)",
   "    detections = self._model.postprocess(prediction_dict)"
  ],
  "consequent": [
   "image_size = ${1:NUMBER}",
   "\tinput_shapes = [(${0:NAME}, image_size, image_size, ${2:NUMBER}),                     (None, image_size, image_size, ${2:NUMBER}),                     (${0:NAME}, None, None, ${2:NUMBER}),                     (None, None, None, ${2:NUMBER})]"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME}.assertAllClose(boxes, [[${1:NUMBER}, ${1:NUMBER}, ${2:NUMBER}, ${2:NUMBER}],"
  ],
  "consequent": [
   "${0:NAME}.assertAllClose(boxes_np, [[[${1:NUMBER}, ${1:NUMBER}, ${2:NUMBER}, ${2:NUMBER}],"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME}.assertAllClose(nms_output['num_detections'], [${1:NUMBER}, ${2:NUMBER}])"
  ],
  "consequent": [
   "${0:NAME}.assertAllClose(num_detections, [${1:NUMBER}, ${2:NUMBER}])"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "if self._is_training:",
   "\tproposal_boxlist.set(${0:NAME}.stop_gradient(proposal_boxlist.get()))",
   "        if not self._hard_example_miner:"
  ],
  "consequent": [
   "single_image_proposal_scores = ${0:NAME}.slice(single_image_proposal_scores,                                               [0],                                               [single_image_num_proposals])",
   "\tsingle_image_boxlist = box_list.BoxList(single_image_proposal_boxes)",
   "      single_image_boxlist.add_field(fields.BoxListFields.scores,                                      single_image_proposal_scores)"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME} = ${1:NAME}.${2:NAME}.join(self.get_temp_dir(),"
  ],
  "consequent": [
   "output_directory = ${1:NAME}.${2:NAME}.join(tmp_dir, 'output')",
   "\t${0:NAME} = ${1:NAME}.${2:NAME}.join(output_directory,"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME} = ${1:NAME}.get_tensor_by_name('import/detection_boxes:0')"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.get_tensor_by_name('detection_boxes:0')"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "test_graph = tf.Graph()",
   "\twith test_graph.as_default():",
   "\tmodel = self._build_model(           is_training=False, first_stage_only=True, second_stage_batch_size=${0:NUMBER})",
   "      ${1:NAME} = ${0:NUMBER}"
  ],
  "consequent": [
   "${1:NAME} = ${0:NUMBER}",
   "\timage_size = 10",
   "    input_shapes = [(${1:NAME}, image_size, image_size, 3),                     (None, image_size, image_size, 3),"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "proposal_boxlist = ${0:NAME}._sample_box_classifier_minibatch("
  ],
  "consequent": [
   "sampled_boxlist = ${0:NAME}._sample_box_classifier_minibatch(           single_image_boxlist,           single_image_groundtruth_boxlist,           single_image_groundtruth_classes_with_background)"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "Note that currently `batch` is always 1, but we will support `batch` > 1 in",
   "the future. ",
   "Optionally, one can freeze the graph by converting the weights in the provided",
   "checkpoint as graph constants thereby eliminating the need ${0:NAME} use a checkpoint",
   "file during inference. ",
   "Note that this ${1:NAME} ${2:NAME} `${3:NAME}` from ${4:NAME} ${0:NAME} decide"
  ],
  "consequent": [
   "Notes:",
   "\t* This ${1:NAME} ${2:NAME} `${3:NAME}` from ${4:NAME} ${0:NAME} decide which"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME}.get_shape().as_list() for ${0:NAME} in feature_maps"
  ],
  "consequent": [
   "shape_utils.combined_static_and_dynamic_shape(             ${0:NAME}) for ${0:NAME} in feature_maps"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "nms_output = ${0:NAME}.run(nms_dict)"
  ],
  "consequent": [
   "(nmsed_boxes, nmsed_scores, nmsed_classes,        num_detections) = ${0:NAME}.run([nmsed_boxes, nmsed_scores, nmsed_classes,                                    num_detections])"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "out_image_shape = tf.shape(${0:NAME})",
   "\tout_masks_shape = tf.shape(${1:NAME}) ",
   "      with ${2:NAME}.test_session() as sess:",
   "\tout_image_shape, out_masks_shape = sess.run(             [out_image_shape, out_masks_shape])",
   "        ${2:NAME}.assertAllEqual(out_image_shape, ${3:NAME})"
  ],
  "consequent": [
   "${2:NAME}.assertAllEqual(${1:NAME}.get_shape().as_list(), expected_mask_shape)",
   "\t${2:NAME}.assertAllEqual(${0:NAME}.get_shape().as_list(), ${3:NAME})"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME}.slice(${1:NAME}, ${2:NUMBER}*[${3:NUMBER}],"
  ],
  "consequent": [
   "${0:NAME}.slice(${1:NAME}, ${2:NUMBER} * [${3:NUMBER}],"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME}.arange(32).reshape([${1:NUMBER}, ${2:NUMBER}, ${2:NUMBER}]), ${3:NAME}.${4:NAME})"
  ],
  "consequent": [
   "${0:NAME}.arange(64).reshape([${1:NUMBER}, ${1:NUMBER}, ${2:NUMBER}, ${2:NUMBER}]), ${3:NAME}.${4:NAME})"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME}.stack([num_valid_boxes, -${1:NUMBER}])), [-${1:NUMBER}, num_classes])"
  ],
  "consequent": [
   "${0:NAME}.stack([per_image_num_valid_boxes, -${1:NUMBER}])),"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "detection_classes_list.append(           ${0:NAME}.get_field(${1:NAME}.${2:NAME}.${3:NAME}))"
  ],
  "consequent": [
   "nmsed_classes = ${0:NAME}.get_field(${1:NAME}.${2:NAME}.${3:NAME})"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "(${0:NAME}, groundtruth_classes_with_background_list"
  ],
  "consequent": [
   "proposal_boxes = tf.stop_gradient(proposal_boxes)",
   "\tif not self._hard_example_miner:",
   "\t(${0:NAME}, groundtruth_classes_with_background_list,"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "test_predict_gives_correct_shapes_in_inference_mode_first_stage_only"
  ],
  "consequent": [
   "test_predict_correct_shapes_in_inference_mode_both_stages"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME}.assertEqual(nms_output['num_detections'], [${1:NUMBER}])"
  ],
  "consequent": [
   "${0:NAME}.assertEqual(num_detections, [${1:NUMBER}])"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "--inference_graph_path ${0:NAME}/${1:NAME}/inference_graph.pb"
  ],
  "consequent": [
   "--output_directory ${0:NAME}/${1:NAME}/exported_model_directory ",
   "The expected output would be in the directory",
   "${0:NAME}/${1:NAME}/exported_model_directory (which is created if it does not exist)",
   "with contents:",
   "\t- graph.pbtxt",
   " - model.ckpt.data-00000-of-00001",
   " - model.ckpt.info",
   " - model.ckpt.meta",
   " - frozen_inference_graph.pb",
   " + saved_model (a directory)"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "num_proposals_list.append(${0:NAME}.minimum(normalized_proposals.num_boxes(),                                            self.max_num_proposals)) ",
   "\treturn (${0:NAME}.stack(proposal_boxes_list), ${0:NAME}.stack(proposal_scores_list),             ${0:NAME}.stack(num_proposals_list))"
  ],
  "consequent": [
   "${0:NAME}.stack(single_image_num_proposals_sample))"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME} = ${1:NAME}.global_variables_initializer()"
  ],
  "consequent": [
   "for input_shape in input_shapes:",
   "\ttf_graph = ${1:NAME}.Graph()",
   "      with tf_graph.as_default():",
   "\tpreprocessed_input_placeholder = ${1:NAME}.placeholder(${1:NAME}.float32,                                                         shape=input_shape)",
   "        prediction_dict = self._model.predict(preprocessed_input_placeholder) ",
   "        self.assertTrue('box_encodings' in prediction_dict)",
   "        self.assertTrue('class_predictions_with_background' in prediction_dict)",
   "        self.assertTrue('feature_maps' in prediction_dict) ",
   "        ${0:NAME} = ${1:NAME}.global_variables_initializer()"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "var_map = ${0:NAME}.get_variables_available_in_checkpoint("
  ],
  "consequent": [
   "available_var_map = (${0:NAME}.                            get_variables_available_in_checkpoint("
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME}.assertAllClose(num_detections, [${1:NUMBER}])"
  ],
  "consequent": [
   "${0:NAME}.assertAllClose(num_detections_np, [${1:NUMBER}, 1])"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "image_shape = tf.shape(${0:NAME})",
   "\torig_height = tf.to_float(image_shape[0])",
   "    orig_width = tf.to_float(image_shape[1])",
   "    orig_min_dim = tf.minimum(orig_height, orig_width)                                                   ",
   "    ${1:NAME} = tf.constant(${1:NAME}, dtype=tf.float32)",
   "    large_scale_factor = ${1:NAME} / orig_min_dim                                                                                                                                                                                                                                                                       ",
   "    large_height = tf.to_int32(tf.round(orig_height * large_scale_factor))",
   "    large_width = tf.to_int32(tf.round(orig_width * large_scale_factor))",
   "    large_size = tf.stack([large_height, large_width]) ",
   "    if ${2:NAME}:                                                                                                 ",
   "\torig_max_dim = tf.maximum(orig_height, orig_width)",
   "      ${2:NAME} = tf.constant(${2:NAME}, dtype=tf.float32)",
   "      small_scale_factor = ${2:NAME} / orig_max_dim                                                                                                                                                                                                                                                                              ",
   "      small_height = tf.to_int32(tf.round(orig_height * small_scale_factor))",
   "      small_width = tf.to_int32(tf.round(orig_width * small_scale_factor))",
   "      small_size = tf.stack([small_height, small_width]) ",
   "      ${3:NAME} = tf.cond(           tf.to_float(tf.reduce_max(large_size)) > ${2:NAME},           lambda: small_size, lambda: large_size)"
  ],
  "consequent": [
   "if ${0:NAME}.get_shape().is_fully_defined():",
   "\t${3:NAME} = _compute_new_static_size(${0:NAME}, ${1:NAME},                                           ${2:NAME})"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "with ${0:NAME}.test_session() as ${1:NAME}:"
  ],
  "consequent": [
   "with ${0:NAME}.test_session(graph=test_graph) as ${1:NAME}:"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "detection_boxes_list.append(${0:NAME}.get())",
   "\tdetection_scores_list.append("
  ],
  "consequent": [
   "num_detections = nmsed_boxlist.num_boxes()",
   "\tnmsed_boxes = ${0:NAME}.get()"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME} = ${1:NAME}.get_shape().as_list()[${2:NUMBER}]",
   "\t${3:NAME} = (${1:NAME}.get_shape().as_list()[${4:NUMBER}]                    * ${1:NAME}.get_shape().as_list()[${5:NUMBER}])"
  ],
  "consequent": [
   "combined_feature_shape = shape_utils.combined_static_and_dynamic_shape(         ${1:NAME})",
   "\t${0:NAME} = combined_feature_shape[${2:NUMBER}]",
   "    ${3:NAME} = (combined_feature_shape[${4:NUMBER}] * combined_feature_shape[${5:NUMBER}])"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "def _add_output_tensor_nodes(${0:NAME}):"
  ],
  "consequent": [
   "def _add_output_tensor_nodes(${0:NAME},                              output_collection_name='inference_op'):"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "detections = ${0:NAME}._non_max_suppression_fn(${1:NAME},"
  ],
  "consequent": [
   "(nmsed_boxes, nmsed_scores, nmsed_classes, _,        num_detections) = ${0:NAME}._non_max_suppression_fn(${1:NAME},"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME} = ${1:NAME}.get_tensor_by_name('import/detection_classes:0')"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.get_tensor_by_name('detection_classes:0')"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME}.assertAllClose(${1:NAME}, [[${2:NUMBER}, ${3:NUMBER}]])"
  ],
  "consequent": [
   "${0:NAME}.assertAllClose(${1:NAME}, [[${2:NUMBER}, ${3:NUMBER}],                                          [${3:NUMBER}, ${2:NUMBER}]])"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "if ${0:NAME} is not None:",
   "\tdetection_masks_list.append(             ${1:NAME}.get_field(${2:NAME}.${3:NAME}.${0:NAME}))"
  ],
  "consequent": [
   "nmsed_masks = ${1:NAME}.get_field(${2:NAME}.${3:NAME}.${0:NAME})",
   "\treturn [nmsed_boxes, nmsed_scores, nmsed_classes, nmsed_masks,               num_detections]"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME} = ${1:NAME}.${2:NAME}.join(self.get_temp_dir(),"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.${2:NAME}.join(output_directory,"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "nms_output = ${0:NAME}.run(nms_dict)"
  ],
  "consequent": [
   "(nmsed_boxes, nmsed_scores, nmsed_classes, nmsed_masks,        num_detections) = ${0:NAME}.run([nmsed_boxes, nmsed_scores, nmsed_classes,                                    nmsed_masks, num_detections])"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME} = ${1:NAME}.to_float(${2:NAME}[${3:NAME}]())"
  ],
  "consequent": [
   "placeholder_tensor, input_tensors = ${2:NAME}[${3:NAME}]()",
   "\t${0:NAME} = ${1:NAME}.to_float(input_tensors)"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME}.get_field(${1:NAME}.${2:NAME}.${3:NAME}))"
  ],
  "consequent": [
   "nmsed_scores = ${0:NAME}.get_field(${1:NAME}.${2:NAME}.${3:NAME})"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "height = 10",
   "\twidth = 12",
   "      input_image_shape = (${0:NAME}, height, width, ${1:NUMBER}) ",
   "      preprocessed_inputs = tf.placeholder(dtype=tf.float32,                                            shape=(${0:NAME}, None, None, ${1:NUMBER}))"
  ],
  "consequent": [
   "(${0:NAME}, None, None, ${1:NUMBER}),",
   "\t(None, None, None, ${1:NUMBER})]",
   "    expected_num_anchors = image_size * image_size * ${1:NUMBER} * ${1:NUMBER}"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "_batch_decode_refined_boxes"
  ],
  "consequent": [
   "_batch_decode_boxes"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "checkpoint_path=checkpoint_path,",
   "\tinference_graph_path=inference_graph_path) ",
   "  def test_export_model_with_all_output_nodes(self):",
   "\tcheckpoint_path = os.path.join(self.get_temp_dir(), 'model-ckpt')",
   "    self._save_checkpoint_from_mock_model(checkpoint_path,",
   "\tuse_moving_averages=False)",
   "    inference_graph_path = os.path.join(self.get_temp_dir(),",
   "\t'exported_graph.pb')",
   "    with mock.patch.object(",
   "\tmodel_builder, 'build', autospec=True) as mock_builder:",
   "      mock_builder.return_value = FakeModel(add_detection_masks=True)",
   "\tpipeline_config = pipeline_pb2.TrainEvalPipelineConfig()",
   "      exporter.export_inference_graph(",
   "\tinput_type='image_tensor',",
   "          pipeline_config=pipeline_config,",
   "          checkpoint_path=checkpoint_path,",
   "          inference_graph_path=inference_graph_path)"
  ],
  "consequent": [
   "trained_checkpoint_prefix=trained_checkpoint_prefix,",
   "\toutput_directory=output_directory)"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:STRING}: (batch_size, height, width, ${1:NUMBER}),"
  ],
  "consequent": [
   "${0:STRING}:",
   "\t(2, image_size, image_size, ${1:NUMBER}),"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "detection_boxes_list = []",
   "\tdetection_scores_list = []",
   "    detection_classes_list = []",
   "    num_detections_list = []",
   "    detection_masks_list = []",
   "    for (${0:NAME}, ${1:NAME}, ${2:NAME}, num_valid_boxes"
  ],
  "consequent": [
   "def single_image_nms_fn(args):",
   "\t\"\"\"Runs NMS on a single image and returns padded output.\"\"\"",
   "      (${0:NAME}, ${1:NAME}, ${2:NAME},        per_image_num_valid_boxes) = args"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "saver"
  ],
  "consequent": [
   "init_saver"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "def test_export_frozen_graph(${0:NAME}):"
  ],
  "consequent": [
   "def test_export_graph_with_moving_averages(${0:NAME}):",
   "\ttmp_dir = ${0:NAME}.get_temp_dir()"
  ]
 },
 {
  "number": 2044,
  "sha": "2e960eb1ed234c94917e1cee55d915b57d6be336",
  "author": "tfboyd",
  "participant": "protoget",
  "created_at": "2017-07-26 15:21:36",
  "condition": [
   "${0:NAME} = _create_device_setter(${1:NAME}, ${2:NAME})"
  ],
  "consequent": [
   "${0:NAME} = _create_device_setter(${1:NAME}, ${2:NAME}, FLAGS.num_gpus)"
  ]
 },
 {
  "number": 2044,
  "sha": "2e960eb1ed234c94917e1cee55d915b57d6be336",
  "author": "tfboyd",
  "participant": "protoget",
  "created_at": "2017-07-26 15:21:36",
  "condition": [
   "${0:NAME} = [${1:STRING} % ${2:NAME} for ${2:NAME} in range(FLAGS.${3:NAME})]"
  ],
  "consequent": [
   "${0:NAME} = [${1:STRING} % ${2:NAME} for ${2:NAME} in range(${3:NAME})]"
  ]
 },
 {
  "number": 2044,
  "sha": "2e960eb1ed234c94917e1cee55d915b57d6be336",
  "author": "tfboyd",
  "participant": "protoget",
  "created_at": "2017-07-26 15:21:36",
  "condition": [
   "ParamServerDeviceSetter"
  ],
  "consequent": [
   "GpuParamServerDeviceSetter"
  ]
 },
 {
  "number": 2044,
  "sha": "2e960eb1ed234c94917e1cee55d915b57d6be336",
  "author": "tfboyd",
  "participant": "protoget",
  "created_at": "2017-07-26 15:21:36",
  "condition": [
   "${0:NAME}: ${1:NAME} ${2:NAME} ${3:NAME} ${4:NAME} for computer ops."
  ],
  "consequent": [
   "${0:NAME}: ${1:NAME} ${2:NAME} ${3:NAME} ${4:NAME} for computation Ops."
  ]
 },
 {
  "number": 2044,
  "sha": "2e960eb1ed234c94917e1cee55d915b57d6be336",
  "author": "tfboyd",
  "participant": "protoget",
  "created_at": "2017-07-26 15:21:36",
  "condition": [
   "ops"
  ],
  "consequent": [
   "Ops"
  ]
 },
 {
  "number": 2044,
  "sha": "2e960eb1ed234c94917e1cee55d915b57d6be336",
  "author": "tfboyd",
  "participant": "protoget",
  "created_at": "2017-07-26 15:21:36",
  "condition": [
   "                                                ",
   "class ParamServerDeviceSetter(${0:NAME}):"
  ],
  "consequent": [
   "class GpuParamServerDeviceSetter(${0:NAME}):"
  ]
 },
 {
  "number": 2044,
  "sha": "2e960eb1ed234c94917e1cee55d915b57d6be336",
  "author": "tfboyd",
  "participant": "protoget",
  "created_at": "2017-07-26 15:21:36",
  "condition": [
   "def _create_device_setter(${0:NAME}, ${1:NAME}):"
  ],
  "consequent": [
   "def _create_device_setter(${0:NAME}, ${1:NAME}, num_gpus):"
  ]
 },
 {
  "number": 2012,
  "sha": "dac7db72dd5b9514801fa13d54f84817372e224c",
  "author": "sussillo",
  "participant": "googlebot",
  "created_at": "2017-07-21 21:09:26",
  "condition": [
   "spikified_data_e: ${0:NAME} ${1:NAME} ${2:NAME} ${3:NAME} ${4:NAME} ${2:NAME} ${5:NAME} ${6:NAME} represented as spikes,",
   "\tsampled from ${5:NAME} underlying poisson process."
  ],
  "consequent": [
   "gauss_e: ${0:NAME} ${1:NAME} ${2:NAME} ${3:NAME} ${4:NAME} ${2:NAME} ${5:NAME} ${6:NAME} with noise."
  ]
 },
 {
  "number": 2012,
  "sha": "dac7db72dd5b9514801fa13d54f84817372e224c",
  "author": "sussillo",
  "participant": "googlebot",
  "created_at": "2017-07-21 21:09:26",
  "condition": [
   "spikified_data_e"
  ],
  "consequent": [
   "spikified_e"
  ]
 },
 {
  "number": 1869,
  "sha": "545b75f9e221d84f4470df657493dd63c92f6c6a",
  "author": "tmattio",
  "participant": "derekjchow",
  "created_at": "2017-07-06 06:38:12",
  "condition": [
   "for ${0:NAME}, ${1:NAME} in six.iteritems(${2:NAME}):"
  ],
  "consequent": [
   "for ${0:NAME}, ${1:NAME} in ${2:NAME}.items():"
  ]
 },
 {
  "number": 1538,
  "sha": "b5acc005968d37495f0e7d83d2dd2ef3d3674211",
  "author": "tfboyd",
  "participant": "nealwu",
  "created_at": "2017-06-08 17:14:00",
  "condition": [
   "${0:NAME}, ${1:NAME} = ${2:NAME}.distorted_inputs()"
  ],
  "consequent": [
   "                                                                                                                  ",
   "\twith tf.device('/cpu:0'):",
   "\t${0:NAME}, ${1:NAME} = ${2:NAME}.distorted_inputs()"
  ]
 },
 {
  "number": 1538,
  "sha": "b5acc005968d37495f0e7d83d2dd2ef3d3674211",
  "author": "tfboyd",
  "participant": "nealwu",
  "created_at": "2017-06-08 17:14:00",
  "condition": [
   "${0:NAME} = tower_loss(${1:NAME})"
  ],
  "consequent": [
   "${0:NAME} = tower_loss(${1:NAME}, images, labels)"
  ]
 },
 {
  "number": 1538,
  "sha": "b5acc005968d37495f0e7d83d2dd2ef3d3674211",
  "author": "tfboyd",
  "participant": "nealwu",
  "created_at": "2017-06-08 17:14:00",
  "condition": [
   "def tower_loss(${0:NAME}):"
  ],
  "consequent": [
   "def tower_loss(${0:NAME}, images, labels):"
  ]
 },
 {
  "number": 1536,
  "sha": "11733fcafdb148878052c47dda0e4b9e76736700",
  "author": "awilliamson",
  "participant": "nealwu",
  "created_at": "2017-06-07 18:13:27",
  "condition": [
   "${0:NAME} = ${1:NAME}.${2:NAME}.local_response_normalization("
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.${2:NAME}.local_response_normalization(conv1,                                               alpha=1e-4,                                               beta=0.75,                                               depth_radius=2,                                               bias=2.0)"
  ]
 },
 {
  "number": 1536,
  "sha": "11733fcafdb148878052c47dda0e4b9e76736700",
  "author": "awilliamson",
  "participant": "nealwu",
  "created_at": "2017-06-07 18:13:27",
  "condition": [
   "${0:NAME} = ${1:NAME}.${2:NAME}.local_response_normalization("
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.${2:NAME}.local_response_normalization(conv2,                                               alpha=1e-4,                                               beta=0.75,                                               depth_radius=2,                                               bias=2.0)"
  ]
 },
 {
  "number": 1532,
  "sha": "76cf35de36b3d5a10255c54b2e54500048c79b47",
  "author": "andrewgilbert12",
  "participant": "nealwu",
  "created_at": "2017-06-06 09:49:02",
  "condition": [
   "${0:NAME} = ${1:NAME}.concat([${2:NAME}, ${3:NAME}], ${4:NUMBER})"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.concat(axis=${4:NUMBER}, values=[${2:NAME}, ${3:NAME}])"
  ]
 },
 {
  "number": 1532,
  "sha": "76cf35de36b3d5a10255c54b2e54500048c79b47",
  "author": "andrewgilbert12",
  "participant": "nealwu",
  "created_at": "2017-06-06 09:49:02",
  "condition": [
   "convolution2d"
  ],
  "consequent": [
   "conv2d"
  ]
 },
 {
  "number": 1487,
  "sha": "99f9442b0f1f5225c7ef725c32e55afb41186e66",
  "author": "nealwu",
  "participant": "jhseu",
  "created_at": "2017-05-18 23:58:45",
  "condition": [
   "${0:NAME} = total_loss"
  ],
  "consequent": [
   "${0:NAME} = tf.identity(total_loss, name='train_op')"
  ]
 },
 {
  "number": 1487,
  "sha": "99f9442b0f1f5225c7ef725c32e55afb41186e66",
  "author": "nealwu",
  "participant": "jhseu",
  "created_at": "2017-05-18 23:58:45",
  "condition": [
   "barrier = ${0:NAME}.no_op(name='gradient_barrier')",
   "\twith ${0:NAME}.control_dependencies([barrier]):",
   "\t${1:NAME} = ${1:NAME}"
  ],
  "consequent": [
   "${1:NAME} = ${0:NAME}.identity(${1:NAME})"
  ]
 },
 {
  "number": 1487,
  "sha": "99f9442b0f1f5225c7ef725c32e55afb41186e66",
  "author": "nealwu",
  "participant": "jhseu",
  "created_at": "2017-05-18 23:58:45",
  "condition": [
   "${0:NAME}.assertEquals(${1:NAME}.${2:NAME}.${3:NAME}, 'Dropout/dropout/mul_1')"
  ],
  "consequent": [
   "${0:NAME}.assertEquals(${1:NAME}.${2:NAME}.${3:NAME}, 'Dropout/dropout/mul')"
  ]
 },
 {
  "number": 1425,
  "sha": "b2fc63b3fcd1cd7732b732d07b108cec64bf75de",
  "author": "edouardfouche",
  "participant": "googlebot",
  "created_at": "2017-04-28 17:39:08",
  "condition": [
   "for ${0:NAME} in range(len(${1:NAME})):"
  ],
  "consequent": [
   "for ${0:NAME} in six.moves.range(len(${1:NAME})):"
  ]
 },
 {
  "number": 1425,
  "sha": "b2fc63b3fcd1cd7732b732d07b108cec64bf75de",
  "author": "edouardfouche",
  "participant": "googlebot",
  "created_at": "2017-04-28 17:39:08",
  "condition": [
   "for ${0:NAME} in range(${1:NAME}.${2:NAME}):"
  ],
  "consequent": [
   "for ${0:NAME} in six.moves.range(${1:NAME}.${2:NAME}):"
  ]
 },
 {
  "number": 1127,
  "sha": "74ad728e9ec024be1182fc7e4f8b881440d9c274",
  "author": "AsterAI",
  "participant": "googlebot",
  "created_at": "2017-03-08 13:19:42",
  "condition": [
   "${0:NAME} = time.time() - ${1:NAME}._start_time"
  ],
  "consequent": [
   "${0:NAME} = current_time - ${1:NAME}._start_time"
  ]
 },
 {
  "number": 1127,
  "sha": "74ad728e9ec024be1182fc7e4f8b881440d9c274",
  "author": "AsterAI",
  "participant": "googlebot",
  "created_at": "2017-03-08 13:19:42",
  "condition": [
   "${0:NAME}.${1:NAME} = time.time()"
  ],
  "consequent": [
   "${0:NAME}.${1:NAME} = current_time"
  ]
 },
 {
  "number": 1127,
  "sha": "74ad728e9ec024be1182fc7e4f8b881440d9c274",
  "author": "AsterAI",
  "participant": "googlebot",
  "created_at": "2017-03-08 13:19:42",
  "condition": [
   "${0:NAME}.${1:NAME}.${2:NAME}.DEFINE_integer('log_steps_count', ${3:NUMBER},"
  ],
  "consequent": [
   "${0:NAME}.${1:NAME}.${2:NAME}.DEFINE_integer('log_frequency', ${3:NUMBER},"
  ]
 },
 {
  "number": 1127,
  "sha": "74ad728e9ec024be1182fc7e4f8b881440d9c274",
  "author": "AsterAI",
  "participant": "googlebot",
  "created_at": "2017-03-08 13:19:42",
  "condition": [
   "log_steps = ${0:NAME}.log_steps_count",
   "\tif ${1:NAME}.${2:NAME} % log_steps == ${3:NUMBER}:"
  ],
  "consequent": [
   "if ${1:NAME}.${2:NAME} % ${0:NAME}.log_frequency == ${3:NUMBER}:",
   "\tcurrent_time = time.time()"
  ]
 },
 {
  "number": 1127,
  "sha": "74ad728e9ec024be1182fc7e4f8b881440d9c274",
  "author": "AsterAI",
  "participant": "googlebot",
  "created_at": "2017-03-08 13:19:42",
  "condition": [
   "num_examples_per_step = ${0:NAME}.${1:NAME}",
   "\t${2:NAME} = num_examples_per_step * ${0:NAME}.log_steps_count / ${3:NAME}",
   "          ${4:NAME} = float(${3:NAME} / log_steps)"
  ],
  "consequent": [
   "${2:NAME} = ${0:NAME}.log_frequency * ${0:NAME}.${1:NAME} / ${3:NAME}",
   "\t${4:NAME} = float(${3:NAME} / ${0:NAME}.log_frequency)"
  ]
 },
 {
  "number": 1073,
  "sha": "d6787c0fdd0011d61860f849767e40d9d45e87e3",
  "author": "knathanieltucker",
  "participant": "martinwicke",
  "created_at": "2017-02-26 07:51:14",
  "condition": [
   "${0:NAME} = ${1:NAME}.${2:NAME}.${3:NAME}.MultiRNNCell([lstm_cell] * config.num_layers)"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.${2:NAME}.${3:NAME}.MultiRNNCell(lstm_cells)"
  ]
 },
 {
  "number": 1073,
  "sha": "d6787c0fdd0011d61860f849767e40d9d45e87e3",
  "author": "knathanieltucker",
  "participant": "martinwicke",
  "created_at": "2017-02-26 07:51:14",
  "condition": [
   "${0:NAME} = ${1:NAME}.${2:NAME}.${3:NAME}.BasicLSTMCell(${4:NAME}, ${5:NAME}=${6:NUMBER})"
  ],
  "consequent": [
   "lstm_cells = []",
   "\tfor layer in range(config.num_layers):",
   "\t${0:NAME} = ${1:NAME}.${2:NAME}.${3:NAME}.BasicLSTMCell(${4:NAME}, ${5:NAME}=${6:NUMBER})"
  ]
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "participant": "TheodoreGalanos",
  "created_at": "2017-02-23 22:32:21",
  "condition": [
   "${0:NAME} = ${1:NAME}.concat(${2:NAME}=${3:NAME}, ${4:NAME}=${5:NUMBER})"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.concat(${2:NAME}=${5:NUMBER}, ${4:NAME}=${3:NAME})"
  ]
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "participant": "TheodoreGalanos",
  "created_at": "2017-02-23 22:32:21",
  "condition": [
   "${0:NAME} = ${1:NAME}.split(${2:NAME}=${1:NAME}.${3:NAME}.log_softmax(${4:NAME}), ${5:NAME}=${6:NAME}, ${7:NAME}=${8:NUMBER})"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.split(${2:NAME}=${8:NUMBER}, ${5:NAME}=${6:NAME}, ${7:NAME}=${1:NAME}.${3:NAME}.log_softmax(${4:NAME}))"
  ]
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "participant": "TheodoreGalanos",
  "created_at": "2017-02-23 22:32:21",
  "condition": [
   "${0:NAME}.add(${1:NAME}.${2:NAME}.scalar(${3:STRING}, ${4:NAME},"
  ],
  "consequent": [
   "${0:NAME}.add(${1:NAME}.${2:NAME}.scalar(${3:STRING}, ${4:NAME}))"
  ]
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "participant": "TheodoreGalanos",
  "created_at": "2017-02-23 22:32:21",
  "condition": [
   "${0:NAME} = ${1:NAME}.concat(${2:NAME}=[${3:NAME}, ${4:NAME}, ${5:NAME}, ${6:NAME}], ${7:NAME}=${8:NUMBER})"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.concat(${2:NAME}=${8:NUMBER}, ${7:NAME}=[${3:NAME}, ${4:NAME}, ${5:NAME}, ${6:NAME}])"
  ]
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "participant": "TheodoreGalanos",
  "created_at": "2017-02-23 22:32:21",
  "condition": [
   "${0:NAME} = ops.conv2d(${0:NAME}, 192, [1, 1])",
   "\t${1:NAME} = ${2:NAME}.concat(${3:NAME}=[${4:NAME}, ${5:NAME}, ${6:NAME}, ${0:NAME}], ${7:NAME}=${8:NUMBER})"
  ],
  "consequent": [
   "${1:NAME} = ${2:NAME}.concat(${3:NAME}=${8:NUMBER}, ${7:NAME}=[${4:NAME}, ${5:NAME}, ${6:NAME}, ${0:NAME}])"
  ]
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "participant": "TheodoreGalanos",
  "created_at": "2017-02-23 22:32:21",
  "condition": [
   "${0:NAME} = ${1:NAME}.reshape(${1:NAME}.concat(${2:NAME}=${3:NAME}, ${4:NAME}=${5:NUMBER}), [-${5:NUMBER}, ${6:NAME}])"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.reshape(${1:NAME}.concat(${2:NAME}=${5:NUMBER}, ${4:NAME}=${3:NAME}), [-${5:NUMBER}, ${6:NAME}])"
  ]
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "participant": "TheodoreGalanos",
  "created_at": "2017-02-23 22:32:21",
  "condition": [
   "${0:NAME} = ${1:NAME}.concat(${2:NAME}=${0:NAME}, ${3:NAME}=${4:NUMBER})"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.concat(${2:NAME}=${4:NUMBER}, ${3:NAME}=${0:NAME})"
  ]
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "participant": "TheodoreGalanos",
  "created_at": "2017-02-23 22:32:21",
  "condition": [
   "${0:NAME} = ${1:NAME}.split(${2:NAME}=${3:NAME}.${4:NAME}, ${5:NAME}=${6:NAME}, ${7:NAME}=${8:NUMBER})"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.split(${2:NAME}=${8:NUMBER}, ${5:NAME}=${6:NAME}, ${7:NAME}=${3:NAME}.${4:NAME})"
  ]
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "participant": "TheodoreGalanos",
  "created_at": "2017-02-23 22:32:21",
  "condition": [
   "${0:NAME} = ${1:NAME}.avg_pool(${2:NAME}, [${3:NUMBER}, ${3:NUMBER}])"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.avg_pool(${2:NAME}, [${3:NUMBER}, ${3:NUMBER}])",
   "\t${0:NAME} = ${1:NAME}.conv2d(${0:NAME}, 192, [1, 1])"
  ]
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "participant": "TheodoreGalanos",
  "created_at": "2017-02-23 22:32:21",
  "condition": [
   "${0:NAME} = ${1:NAME}.concat(${2:NAME}=[${3:NAME}.conv2d(${0:NAME}, ${4:NUMBER}, [${5:NUMBER}, ${6:NUMBER}]),"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.concat(${2:NAME}=${6:NUMBER}, values=[${3:NAME}.conv2d(${0:NAME}, ${4:NUMBER}, [${5:NUMBER}, ${6:NUMBER}]),"
  ]
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "participant": "TheodoreGalanos",
  "created_at": "2017-02-23 22:32:21",
  "condition": [
   "${0:NAME} = ${1:NAME}.reshape(${1:NAME}.transpose(${1:NAME}.concat(${2:NAME}=${0:NAME}, ${3:NAME}=${4:NUMBER}), [${4:NUMBER}, ${5:NUMBER}]),"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.reshape(${1:NAME}.transpose(${1:NAME}.concat(${2:NAME}=${4:NUMBER}, ${3:NAME}=${0:NAME}), [${4:NUMBER}, ${5:NUMBER}]),"
  ]
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "participant": "TheodoreGalanos",
  "created_at": "2017-02-23 22:32:21",
  "condition": [
   "${0:NAME}, ${1:NAME} = ${2:NAME}.split(${3:NAME}=${1:NAME}, ${4:NAME}=${5:NUMBER}, ${6:NAME}=${7:NUMBER})"
  ],
  "consequent": [
   "${0:NAME}, ${1:NAME} = ${2:NAME}.split(${3:NAME}=${7:NUMBER}, ${4:NAME}=${5:NUMBER}, ${6:NAME}=${1:NAME})"
  ]
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "participant": "TheodoreGalanos",
  "created_at": "2017-02-23 22:32:21",
  "condition": [
   "${0:NAME}.${1:NAME}.scalar(${2:STRING}, ${3:NAME},"
  ],
  "consequent": [
   "${0:NAME}.${1:NAME}.scalar(${2:STRING}, ${3:NAME})"
  ]
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "participant": "TheodoreGalanos",
  "created_at": "2017-02-23 22:32:21",
  "condition": [
   "${0:NAME}.concat(${1:NAME}=[${2:NAME}, ${3:NAME}], ${4:NAME}=${5:NUMBER}), ${6:NAME} * ${7:NAME}, ${8:NAME}=${9:STRING})"
  ],
  "consequent": [
   "${0:NAME}.concat(${1:NAME}=${5:NUMBER}, ${4:NAME}=[${2:NAME}, ${3:NAME}]), ${6:NAME} * ${7:NAME}, ${8:NAME}=${9:STRING})"
  ]
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "participant": "TheodoreGalanos",
  "created_at": "2017-02-23 22:32:21",
  "condition": [
   "${0:NAME}.${1:NAME}.scalar(${2:STRING}, ${3:NAME}.${4:NAME}, name=${2:STRING})"
  ],
  "consequent": [
   "${0:NAME}.${1:NAME}.scalar(${2:STRING}, ${3:NAME}.${4:NAME})"
  ]
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "participant": "TheodoreGalanos",
  "created_at": "2017-02-23 22:32:21",
  "condition": [
   "${0:NAME} = ${1:NAME}.concat(${2:NAME}=[${3:NAME}, ${4:NAME}, ${5:NAME}], ${6:NAME}=${7:NUMBER})"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.concat(${2:NAME}=${7:NUMBER}, ${6:NAME}=[${3:NAME}, ${4:NAME}, ${5:NAME}])"
  ]
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "participant": "TheodoreGalanos",
  "created_at": "2017-02-23 22:32:21",
  "condition": [
   "${0:NAME} = [${1:NAME}.concat(${2:NAME}=${3:NAME}, ${4:NAME}=${5:NUMBER}) for ${3:NAME} in ${6:NAME}]"
  ],
  "consequent": [
   "${0:NAME} = [${1:NAME}.concat(${2:NAME}=${5:NUMBER}, ${4:NAME}=${3:NAME}) for ${3:NAME} in ${6:NAME}]"
  ]
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "participant": "TheodoreGalanos",
  "created_at": "2017-02-23 22:32:21",
  "condition": [
   "${0:NAME}, ${1:NAME} = ${2:NAME}.split(${3:NAME}=${0:NAME}, ${4:NAME}=${5:NUMBER}, ${6:NAME}=${7:NUMBER})"
  ],
  "consequent": [
   "${0:NAME}, ${1:NAME} = ${2:NAME}.split(${3:NAME}=${7:NUMBER}, ${4:NAME}=${5:NUMBER}, ${6:NAME}=${0:NAME})"
  ]
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "participant": "TheodoreGalanos",
  "created_at": "2017-02-23 22:32:21",
  "condition": [
   "${0:NAME} = ${1:NAME}.reshape(${1:NAME}.concat(${2:NAME}=[${3:NAME}, ${4:NAME}], ${5:NAME}=${6:NUMBER}),"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.reshape(${1:NAME}.concat(${2:NAME}=${6:NUMBER}, ${5:NAME}=[${3:NAME}, ${4:NAME}]),"
  ]
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "participant": "TheodoreGalanos",
  "created_at": "2017-02-23 22:32:21",
  "condition": [
   "${0:NAME} = ${1:NAME}.concat(${2:NAME}=[${1:NAME}.expand_dims(${3:NAME}, ${4:NUMBER}),"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.concat(${2:NAME}=${4:NUMBER}, values=[${1:NAME}.expand_dims(${3:NAME}, ${4:NUMBER}),"
  ]
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "participant": "TheodoreGalanos",
  "created_at": "2017-02-23 22:32:21",
  "condition": [
   "${0:NAME} = ${1:NAME}.split(${2:NAME}=${0:NAME}, ${3:NAME}=${4:NUMBER}, ${5:NAME}=${6:NUMBER})"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.split(${2:NAME}=${6:NUMBER}, ${3:NAME}=${4:NUMBER}, ${5:NAME}=${0:NAME})"
  ]
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "participant": "TheodoreGalanos",
  "created_at": "2017-02-23 22:32:21",
  "condition": [
   "${0:NAME}.expand_dims(${1:NAME}, ${2:NUMBER})], values=${2:NUMBER})"
  ],
  "consequent": [
   "${0:NAME}.expand_dims(${1:NAME}, ${2:NUMBER})])"
  ]
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "participant": "TheodoreGalanos",
  "created_at": "2017-02-23 22:32:21",
  "condition": [
   "${0:NAME} = ${1:NAME}.concat(${2:NAME}=[${1:NAME}.shape(${3:NAME}), [${4:NUMBER}]], ${5:NAME}=${6:NUMBER})"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.concat(${2:NAME}=${6:NUMBER}, ${5:NAME}=[${1:NAME}.shape(${3:NAME}), [${4:NUMBER}]])"
  ]
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "participant": "TheodoreGalanos",
  "created_at": "2017-02-23 22:32:21",
  "condition": [
   "${0:NAME}, ${1:NAME} = ${2:NAME}.${3:NAME}.top_k(${2:NAME}.concat(${4:NAME}=${5:NAME}, ${6:NAME}=${7:NUMBER}), ${8:NAME}=${9:NAME})"
  ],
  "consequent": [
   "${0:NAME}, ${1:NAME} = ${2:NAME}.${3:NAME}.top_k(${2:NAME}.concat(${4:NAME}=${7:NUMBER}, ${6:NAME}=${5:NAME}), ${8:NAME}=${9:NAME})"
  ]
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "participant": "TheodoreGalanos",
  "created_at": "2017-02-23 22:32:21",
  "condition": [
   "${0:NAME} = ${1:NAME}.concat(${2:NAME}=[${3:NAME}] * ${4:NAME}, ${5:NAME}=${6:NUMBER})"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.concat(${2:NAME}=${6:NUMBER}, ${5:NAME}=[${3:NAME}] * ${4:NAME})"
  ]
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "participant": "TheodoreGalanos",
  "created_at": "2017-02-23 22:32:21",
  "condition": [
   "${0:NAME}.${1:NAME}.scalar(${2:NAME}.${3:NAME} + ${4:STRING}, ${5:NAME},"
  ],
  "consequent": [
   "${0:NAME}.${1:NAME}.scalar(${2:NAME}.${3:NAME} + ${4:STRING}, ${5:NAME})"
  ]
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "participant": "TheodoreGalanos",
  "created_at": "2017-02-23 22:32:21",
  "condition": [
   "${0:NAME}.${1:NAME} = ${2:NAME}.concat(${3:NAME}=${0:NAME}.${1:NAME}, ${4:NAME}=${5:NUMBER})"
  ],
  "consequent": [
   "${0:NAME}.${1:NAME} = ${2:NAME}.concat(${3:NAME}=${5:NUMBER}, ${4:NAME}=${0:NAME}.${1:NAME})"
  ]
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "participant": "TheodoreGalanos",
  "created_at": "2017-02-23 22:32:21",
  "condition": [
   "${0:NAME}.conv2d(${1:NAME}, ${2:NUMBER}, [${3:NUMBER}, ${4:NUMBER}])], values=${3:NUMBER})"
  ],
  "consequent": [
   "${0:NAME}.conv2d(${1:NAME}, ${2:NUMBER}, [${3:NUMBER}, ${4:NUMBER}])])"
  ]
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "participant": "TheodoreGalanos",
  "created_at": "2017-02-23 22:32:21",
  "condition": [
   "${0:NAME}.${1:NAME} = ${2:NAME}.concat(${3:NAME}=${4:NAME}, ${5:NAME}=${6:NUMBER})"
  ],
  "consequent": [
   "${0:NAME}.${1:NAME} = ${2:NAME}.concat(${3:NAME}=${6:NUMBER}, ${5:NAME}=${4:NAME})"
  ]
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "participant": "TheodoreGalanos",
  "created_at": "2017-02-23 22:32:21",
  "condition": [
   "${0:NAME} = ${1:NAME}.concat(${2:NAME}=[${0:NAME}] * ${3:NAME}, ${4:NAME}=${5:NUMBER})"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.concat(${2:NAME}=${5:NUMBER}, ${4:NAME}=[${0:NAME}] * ${3:NAME})"
  ]
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "participant": "TheodoreGalanos",
  "created_at": "2017-02-23 22:32:21",
  "condition": [
   "${0:NAME} = ${1:NAME}.concat(${2:NAME}=[${3:NAME}, ${4:NAME}], ${5:NAME}=${6:NUMBER})"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.concat(${2:NAME}=${6:NUMBER}, ${5:NAME}=[${3:NAME}, ${4:NAME}])"
  ]
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "participant": "TheodoreGalanos",
  "created_at": "2017-02-23 22:32:21",
  "condition": [
   "${0:NAME}.concat(${1:NAME}=${2:NAME}, ${3:NAME}=${4:NUMBER}, ${5:NAME}=${6:STRING})"
  ],
  "consequent": [
   "${0:NAME}.concat(${1:NAME}=${4:NUMBER}, ${3:NAME}=${2:NAME}, ${5:NAME}=${6:STRING})"
  ]
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "participant": "TheodoreGalanos",
  "created_at": "2017-02-23 22:32:21",
  "condition": [
   "return ${0:NAME}.concat(${1:NAME}=[${2:NAME}, ${3:NAME}, ${4:NAME}], ${5:NAME}=${6:NUMBER})"
  ],
  "consequent": [
   "return ${0:NAME}.concat(${1:NAME}=${6:NUMBER}, ${5:NAME}=[${2:NAME}, ${3:NAME}, ${4:NAME}])"
  ]
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "participant": "TheodoreGalanos",
  "created_at": "2017-02-23 22:32:21",
  "condition": [
   "${0:NAME}.${1:NAME}.scalar(${2:STRING}, ${3:NAME}, name='lr_summ')"
  ],
  "consequent": [
   "${0:NAME}.${1:NAME}.scalar(${2:STRING}, ${3:NAME})"
  ]
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "participant": "TheodoreGalanos",
  "created_at": "2017-02-23 22:32:21",
  "condition": [
   "${0:NAME}, ${1:NAME} = ${2:NAME}.split(${3:NAME}=${4:NAME}, ${5:NAME}=${6:NUMBER}, ${7:NAME}=${8:NUMBER})"
  ],
  "consequent": [
   "${0:NAME}, ${1:NAME} = ${2:NAME}.split(${3:NAME}=${8:NUMBER}, ${5:NAME}=${6:NUMBER}, ${7:NAME}=${4:NAME})"
  ]
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "participant": "TheodoreGalanos",
  "created_at": "2017-02-23 22:32:21",
  "condition": [
   "${0:NAME}.${1:NAME} = [${2:NAME}.concat(${3:NAME}=[${4:NAME}[${5:NAME}] for ${5:NAME} in xrange(${6:NAME})], ${7:NAME}=${8:NUMBER})]"
  ],
  "consequent": [
   "${0:NAME}.${1:NAME} = [${2:NAME}.concat(${3:NAME}=${8:NUMBER}, ${7:NAME}=[${4:NAME}[${5:NAME}] for ${5:NAME} in xrange(${6:NAME})])]"
  ]
 },
 {
  "number": 1053,
  "sha": "289b439308be829db258d5b1bb33a6de03769e57",
  "author": "nealwu",
  "participant": "jhseu",
  "created_at": "2017-02-22 02:24:55",
  "condition": [
   "'Recall@5': ${0:NAME}.${1:NAME}.streaming_recall_at_k("
  ],
  "consequent": [
   "'Recall_5': ${0:NAME}.${1:NAME}.streaming_recall_at_k("
  ]
 },
 {
  "number": 1053,
  "sha": "289b439308be829db258d5b1bb33a6de03769e57",
  "author": "nealwu",
  "participant": "jhseu",
  "created_at": "2017-02-22 02:24:55",
  "condition": [
   "net"
  ],
  "consequent": [
   "logits"
  ]
 },
 {
  "number": 1053,
  "sha": "289b439308be829db258d5b1bb33a6de03769e57",
  "author": "nealwu",
  "participant": "jhseu",
  "created_at": "2017-02-22 02:24:55",
  "condition": [
   "tf.squeeze(${0:NAME}), ${1:NAME}, ${2:NAME}=${3:NAME}.${2:NAME}, ${4:NAME}=${5:NUMBER})"
  ],
  "consequent": [
   "${0:NAME}=${0:NAME}, onehot_labels=${1:NAME},",
   "\t${2:NAME}=${3:NAME}.${2:NAME}, ${4:NAME}=${5:NUMBER})"
  ]
 },
 {
  "number": 1053,
  "sha": "289b439308be829db258d5b1bb33a6de03769e57",
  "author": "nealwu",
  "participant": "jhseu",
  "created_at": "2017-02-22 02:24:55",
  "condition": [
   "${0:NAME}.${1:NAME}.scalar('clone_loss', ${2:NAME})"
  ],
  "consequent": [
   "${0:NAME}.${1:NAME}.scalar(clone.scope + '/clone_loss', ${2:NAME})"
  ]
 },
 {
  "number": 1031,
  "sha": "64254ad355f9ea72531ae305c2db2a737c47c9a9",
  "author": "nealwu",
  "participant": "panyx0718",
  "created_at": "2017-02-18 01:43:59",
  "condition": [
   "info"
  ],
  "consequent": [
   "get_shape"
  ]
 },
 {
  "number": 1031,
  "sha": "64254ad355f9ea72531ae305c2db2a737c47c9a9",
  "author": "nealwu",
  "participant": "panyx0718",
  "created_at": "2017-02-18 01:43:59",
  "condition": [
   "${0:NAME}.${1:NAME}.info('loss: %.3f, precision: %.3f, best precision: %.3f\\n' %"
  ],
  "consequent": [
   "${0:NAME}.${1:NAME}.info('loss: %.3f, precision: %.3f, best precision: %.3f' %"
  ]
 },
 {
  "number": 982,
  "sha": "0d8916f4b84e8687eb46696883b50b84ac6aa420",
  "author": "arvind385801",
  "participant": "googlebot",
  "created_at": "2017-02-05 15:05:57",
  "condition": [
   "return ${0:NAME}.nn.seq2seq.embedding_attention_seq2seq("
  ],
  "consequent": [
   "return ${0:NAME}.contrib.legacy_seq2seq.embedding_attention_seq2seq("
  ]
 },
 {
  "number": 982,
  "sha": "0d8916f4b84e8687eb46696883b50b84ac6aa420",
  "author": "arvind385801",
  "participant": "googlebot",
  "created_at": "2017-02-05 15:05:57",
  "condition": [
   "return ${0:NAME}.nn.rnn_cell.GRUCell(${1:NAME})"
  ],
  "consequent": [
   "return ${0:NAME}.contrib.rnn.GRUCell(${1:NAME})"
  ]
 },
 {
  "number": 982,
  "sha": "0d8916f4b84e8687eb46696883b50b84ac6aa420",
  "author": "arvind385801",
  "participant": "googlebot",
  "created_at": "2017-02-05 15:05:57",
  "condition": [
   "${0:NAME}.${1:NAME}, ${0:NAME}.${2:NAME} = ${3:NAME}.nn.seq2seq.model_with_buckets("
  ],
  "consequent": [
   "${0:NAME}.${1:NAME}, ${0:NAME}.${2:NAME} = ${3:NAME}.contrib.legacy_seq2seq.model_with_buckets("
  ]
 },
 {
  "number": 982,
  "sha": "0d8916f4b84e8687eb46696883b50b84ac6aa420",
  "author": "arvind385801",
  "participant": "googlebot",
  "created_at": "2017-02-05 15:05:57",
  "condition": [
   "return ${0:NAME}.nn.rnn_cell.BasicLSTMCell(${1:NAME})"
  ],
  "consequent": [
   "return ${0:NAME}.contrib.rnn.BasicLSTMCell(${1:NAME})"
  ]
 },
 {
  "number": 982,
  "sha": "0d8916f4b84e8687eb46696883b50b84ac6aa420",
  "author": "arvind385801",
  "participant": "googlebot",
  "created_at": "2017-02-05 15:05:57",
  "condition": [
   "${0:NAME} = ${1:NAME}.nn.rnn_cell.MultiRNNCell([single_cell() for ${2:NAME} in range(${3:NAME})])"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.contrib.rnn.MultiRNNCell([single_cell() for ${2:NAME} in range(${3:NAME})])"
  ]
 },
 {
  "number": 982,
  "sha": "0d8916f4b84e8687eb46696883b50b84ac6aa420",
  "author": "arvind385801",
  "participant": "googlebot",
  "created_at": "2017-02-05 15:05:57",
  "condition": [
   "def sampled_loss(${0:NAME},${1:NAME}):"
  ],
  "consequent": [
   "def sampled_loss(${0:NAME}, ${1:NAME}):"
  ]
 },
 {
  "number": 959,
  "sha": "4ec3452d9524726297c0aeb92933a79296345e7e",
  "author": "yaroslavvb",
  "participant": "panyx0718",
  "created_at": "2017-01-26 22:07:26",
  "condition": [
   "concat"
  ],
  "consequent": [
   "concat_v2"
  ]
 },
 {
  "number": 959,
  "sha": "4ec3452d9524726297c0aeb92933a79296345e7e",
  "author": "yaroslavvb",
  "participant": "panyx0718",
  "created_at": "2017-01-26 22:07:26",
  "condition": [
   "for ${0:NAME} in xrange(${1:NAME}.${2:NAME}):"
  ],
  "consequent": [
   "for ${0:NAME} in six.moves.range(${1:NAME}.${2:NAME}):"
  ]
 },
 {
  "number": 881,
  "sha": "a46f826f5e3f063dc39cce339d4f836a167ce6b1",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2017-01-10 18:56:31",
  "condition": [
   "mul"
  ],
  "consequent": [
   "multiply"
  ]
 },
 {
  "number": 881,
  "sha": "a46f826f5e3f063dc39cce339d4f836a167ce6b1",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2017-01-10 18:56:31",
  "condition": [
   "${0:NAME} = ${1:NAME}.split(${2:NUMBER}, ${3:NUMBER}, ${4:NAME})"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.split(value=${4:NAME}, num_or_size_splits=${3:NUMBER}, axis=${2:NUMBER})"
  ]
 },
 {
  "number": 881,
  "sha": "a46f826f5e3f063dc39cce339d4f836a167ce6b1",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2017-01-10 18:56:31",
  "condition": [
   "${0:NAME} = ${1:NAME}.nn.rnn_cell.BasicLSTMCell("
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.contrib.rnn.BasicLSTMCell("
  ]
 },
 {
  "number": 881,
  "sha": "a46f826f5e3f063dc39cce339d4f836a167ce6b1",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2017-01-10 18:56:31",
  "condition": [
   "${0:NAME}.concat(${1:NUMBER}, ${2:NAME}, ${3:NAME}=${4:STRING})"
  ],
  "consequent": [
   "${0:NAME}.concat_v2(${2:NAME}, ${1:NUMBER}, ${3:NAME}=${4:STRING})"
  ]
 },
 {
  "number": 881,
  "sha": "a46f826f5e3f063dc39cce339d4f836a167ce6b1",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2017-01-10 18:56:31",
  "condition": [
   "all_variables"
  ],
  "consequent": [
   "global_variables"
  ]
 },
 {
  "number": 881,
  "sha": "a46f826f5e3f063dc39cce339d4f836a167ce6b1",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2017-01-10 18:56:31",
  "condition": [
   "${0:NAME} = ${1:NAME}.${2:NAME}.sparse_softmax_cross_entropy_with_logits(${3:NAME}, ${4:NAME})"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.${2:NAME}.sparse_softmax_cross_entropy_with_logits(labels=${4:NAME},                                                               ${3:NAME}=${3:NAME})"
  ]
 },
 {
  "number": 881,
  "sha": "a46f826f5e3f063dc39cce339d4f836a167ce6b1",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2017-01-10 18:56:31",
  "condition": [
   "sub"
  ],
  "consequent": [
   "subtract"
  ]
 },
 {
  "number": 881,
  "sha": "a46f826f5e3f063dc39cce339d4f836a167ce6b1",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2017-01-10 18:56:31",
  "condition": [
   "${0:NAME} = ${1:NAME}.nn.rnn_cell.DropoutWrapper("
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.contrib.rnn.DropoutWrapper("
  ]
 },
 {
  "number": 864,
  "sha": "f4161b6fc15caa519a275afea14a6c6173a80abe",
  "author": "martinwicke",
  "participant": "zlj9155",
  "created_at": "2017-01-08 09:25:56",
  "condition": [
   "${0:NAME}.${1:NAME}.softmax_cross_entropy_with_logits(${2:NAME}, ${3:NAME}))"
  ],
  "consequent": [
   "${0:NAME}.${1:NAME}.softmax_cross_entropy_with_logits(logits=${2:NAME}, targets=${3:NAME}))"
  ]
 },
 {
  "number": 864,
  "sha": "f4161b6fc15caa519a275afea14a6c6173a80abe",
  "author": "martinwicke",
  "participant": "zlj9155",
  "created_at": "2017-01-08 09:25:56",
  "condition": [
   "${0:NAME} = ${1:NAME}.${2:NAME}.softmax_cross_entropy_with_logits(${3:NAME},"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.${2:NAME}.softmax_cross_entropy_with_logits(${3:NAME}=${3:NAME},"
  ]
 },
 {
  "number": 852,
  "sha": "97e391dd868abcf833c8273866b34aa69a0d4d17",
  "author": "tae-jun",
  "participant": "nealwu",
  "created_at": "2017-01-05 07:28:54",
  "condition": [
   "${0:NAME}/${1:NAME}/${2:NAME}/data/create_mnist_dataset.py"
  ],
  "consequent": [
   "${0:NAME}/${1:NAME}/${2:NAME}/datasets/download_and_convert_mnist.py"
  ]
 },
 {
  "number": 785,
  "sha": "ba98bc479cb6bf06eb886e885fd5cd730082f670",
  "author": "mrphoenix13",
  "participant": "YuMS",
  "created_at": "2016-12-21 08:05:05",
  "condition": [
   "${0:NAME}.contrib.deprecated.image_summary(${1:STRING}, ${2:NAME})"
  ],
  "consequent": [
   "${0:NAME}.image_summary(${1:STRING}, ${2:NAME})"
  ]
 },
 {
  "number": 785,
  "sha": "ba98bc479cb6bf06eb886e885fd5cd730082f670",
  "author": "mrphoenix13",
  "participant": "YuMS",
  "created_at": "2016-12-21 08:05:05",
  "condition": [
   "${0:NAME}.contrib.deprecated.histogram_summary(${1:NAME}.${2:NAME}.${3:NAME} + ${4:STRING},"
  ],
  "consequent": [
   "${0:NAME}.histogram_summary(${1:NAME}.${2:NAME}.${3:NAME} + ${4:STRING},"
  ]
 },
 {
  "number": 785,
  "sha": "ba98bc479cb6bf06eb886e885fd5cd730082f670",
  "author": "mrphoenix13",
  "participant": "YuMS",
  "created_at": "2016-12-21 08:05:05",
  "condition": [
   "${0:NAME} = ${1:NAME}.contrib.deprecated.merge_summary(${2:NAME})"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.merge_summary(${2:NAME})"
  ]
 },
 {
  "number": 785,
  "sha": "ba98bc479cb6bf06eb886e885fd5cd730082f670",
  "author": "mrphoenix13",
  "participant": "YuMS",
  "created_at": "2016-12-21 08:05:05",
  "condition": [
   "${0:NAME}.contrib.deprecated.scalar_summary(${1:NAME}, ${2:NAME})"
  ],
  "consequent": [
   "${0:NAME}.scalar_summary(${1:NAME}, ${2:NAME})"
  ]
 },
 {
  "number": 785,
  "sha": "ba98bc479cb6bf06eb886e885fd5cd730082f670",
  "author": "mrphoenix13",
  "participant": "YuMS",
  "created_at": "2016-12-21 08:05:05",
  "condition": [
   "${0:NAME}.contrib.deprecated.scalar_summary(${1:STRING}, ${2:NAME})"
  ],
  "consequent": [
   "${0:NAME}.scalar_summary(${1:STRING}, ${2:NAME})"
  ]
 },
 {
  "number": 785,
  "sha": "ba98bc479cb6bf06eb886e885fd5cd730082f670",
  "author": "mrphoenix13",
  "participant": "YuMS",
  "created_at": "2016-12-21 08:05:05",
  "condition": [
   "${0:NAME}.append(${1:NAME}.contrib.deprecated.scalar_summary(${2:STRING}, ${3:NAME}))"
  ],
  "consequent": [
   "${0:NAME}.append(${1:NAME}.scalar_summary(${2:STRING}, ${3:NAME}))"
  ]
 },
 {
  "number": 785,
  "sha": "ba98bc479cb6bf06eb886e885fd5cd730082f670",
  "author": "mrphoenix13",
  "participant": "YuMS",
  "created_at": "2016-12-21 08:05:05",
  "condition": [
   "${0:NAME}.contrib.deprecated.scalar_summary(${1:STRING}, ${2:NAME}.${3:NAME})"
  ],
  "consequent": [
   "${0:NAME}.scalar_summary(${1:STRING}, ${2:NAME}.${3:NAME})"
  ]
 },
 {
  "number": 785,
  "sha": "ba98bc479cb6bf06eb886e885fd5cd730082f670",
  "author": "mrphoenix13",
  "participant": "YuMS",
  "created_at": "2016-12-21 08:05:05",
  "condition": [
   "${0:NAME}.contrib.deprecated.histogram_summary(${1:NAME}.${2:NAME}.${3:NAME}, ${1:NAME}))"
  ],
  "consequent": [
   "${0:NAME}.histogram_summary(${1:NAME}.${2:NAME}.${3:NAME}, ${1:NAME}))"
  ]
 },
 {
  "number": 783,
  "sha": "48f5b4dab71dc1874d3a052c67450dc8e443b510",
  "author": "dweekly",
  "participant": "nealwu",
  "created_at": "2016-12-21 05:00:58",
  "condition": [
   "${0:NAME}.image_summary(${1:NAME}, ${0:NAME}.expand_dims(${2:NAME}, ${3:NUMBER}))"
  ],
  "consequent": [
   "${0:NAME}.summary.${2:NAME}(${1:NAME}, ${0:NAME}.expand_dims(${2:NAME}, ${3:NUMBER}))"
  ]
 },
 {
  "number": 377,
  "sha": "a0de5ca9364f98aa36241c5ea7e891e2f1e1d80b",
  "author": "kaiix",
  "participant": "googlebot",
  "created_at": "2016-08-31 09:07:08",
  "condition": [
   "${0:NAME} = ${1:NAME}.prepare_or_wait_for_session()"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.prepare_or_wait_for_session(config=tf.ConfigProto(         allow_soft_placement=True))"
  ]
 }
]