[
 {
  "number": 7257,
  "sha": "a2fdbdeba4230e01a4b6ba10f5015829ec186334",
  "author": "guptapriya",
  "created_at": "2019-07-19 05:26:11",
  "condition": [
   "test_train"
  ],
  "consequent": [
   "test_train_no_dist_strat"
  ]
 },
 {
  "number": 7257,
  "sha": "a2fdbdeba4230e01a4b6ba10f5015829ec186334",
  "author": "guptapriya",
  "created_at": "2019-07-19 05:26:11",
  "condition": [
   "int32"
  ],
  "consequent": [
   "int64"
  ]
 },
 {
  "number": 7075,
  "sha": "c4227ed1c1747738255b34c550db3fbdd9cff83f",
  "author": "guptapriya",
  "created_at": "2019-06-21 02:11:10",
  "condition": [
   "rc = tf.distribute.get_replica_context()"
  ],
  "consequent": [
   "for mean, fn in self.metric_mean_fns:"
  ]
 },
 {
  "number": 7075,
  "sha": "c4227ed1c1747738255b34c550db3fbdd9cff83f",
  "author": "guptapriya",
  "created_at": "2019-06-21 02:11:10",
  "condition": [
   "${0:NAME} = ${1:NAME}.MetricLayer(${2:NAME})([${0:NAME}, ${3:NAME}])"
  ],
  "consequent": [
   "if params[\"enable_metrics_in_training\"]:",
   "\t${0:NAME} = ${1:NAME}.MetricLayer(${2:NAME})([${0:NAME}, ${3:NAME}])"
  ]
 },
 {
  "number": 6997,
  "sha": "2027521661348414c4f84f57d7ac5b95dc656a4c",
  "author": "guptapriya",
  "created_at": "2019-06-11 20:59:28",
  "condition": [
   "test_end_to_end_keras"
  ],
  "consequent": [
   "test_end_to_end_keras_no_dist_strat"
  ]
 },
 {
  "number": 6997,
  "sha": "2027521661348414c4f84f57d7ac5b95dc656a4c",
  "author": "guptapriya",
  "created_at": "2019-06-11 20:59:28",
  "condition": [
   "because"
  ],
  "consequent": [
   "becasue"
  ]
 },
 {
  "number": 6997,
  "sha": "2027521661348414c4f84f57d7ac5b95dc656a4c",
  "author": "guptapriya",
  "created_at": "2019-06-11 20:59:28",
  "condition": [
   "${0:NAME} = ${1:NAME}.${2:NAME}.SparseCategoricalCrossentropy("
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.keras.${2:NAME}.SparseCategoricalCrossentropy("
  ]
 },
 {
  "number": 6997,
  "sha": "2027521661348414c4f84f57d7ac5b95dc656a4c",
  "author": "guptapriya",
  "created_at": "2019-06-11 20:59:28",
  "condition": [
   "test_end_to_end_keras_mlperf"
  ],
  "consequent": [
   "test_end_to_end_keras_dist_strat"
  ]
 },
 {
  "number": 6997,
  "sha": "2027521661348414c4f84f57d7ac5b95dc656a4c",
  "author": "guptapriya",
  "created_at": "2019-06-11 20:59:28",
  "condition": [
   "fake_valit_pt_mask"
  ],
  "consequent": [
   "fake_valid_pt_mask"
  ]
 },
 {
  "number": 6997,
  "sha": "2027521661348414c4f84f57d7ac5b95dc656a4c",
  "author": "guptapriya",
  "created_at": "2019-06-11 20:59:28",
  "condition": [
   "loss_scale_factor"
  ],
  "consequent": [
   "batch_size"
  ]
 },
 {
  "number": 6997,
  "sha": "2027521661348414c4f84f57d7ac5b95dc656a4c",
  "author": "guptapriya",
  "created_at": "2019-06-11 20:59:28",
  "condition": [
   "test_end_to_end_keras_1_gpu"
  ],
  "consequent": [
   "test_end_to_end_keras_1_gpu_dist_strat"
  ]
 },
 {
  "number": 6961,
  "sha": "8bf50eaf9d3b2473fa802eedce35c8b13035cce0",
  "author": "guptapriya",
  "created_at": "2019-06-05 05:40:18",
  "condition": [
   "steps_per_epoch"
  ],
  "consequent": [
   "steps_between_evals"
  ]
 },
 {
  "number": 6961,
  "sha": "8bf50eaf9d3b2473fa802eedce35c8b13035cce0",
  "author": "guptapriya",
  "created_at": "2019-06-05 05:40:18",
  "condition": [
   "${0:NAME}._load_weights_if_possible(${1:NAME}, ${2:NAME}.init_weight_path)"
  ],
  "consequent": [
   "${0:NAME}._load_weights_if_possible(",
   "     ${1:NAME}, tf.train.latest_checkpoint(${0:NAME}.${2:NAME}.model_dir))"
  ]
 },
 {
  "number": 6961,
  "sha": "8bf50eaf9d3b2473fa802eedce35c8b13035cce0",
  "author": "guptapriya",
  "created_at": "2019-06-05 05:40:18",
  "condition": [
   "return ${0:NAME}.generate_synthetic_data("
  ],
  "consequent": [
   "dataset = ${0:NAME}.generate_synthetic_data("
  ]
 },
 {
  "number": 6961,
  "sha": "8bf50eaf9d3b2473fa802eedce35c8b13035cce0",
  "author": "guptapriya",
  "created_at": "2019-06-05 05:40:18",
  "condition": [
   "${0:NAME}.init_weight_path = None"
  ],
  "consequent": [
   "${0:NAME}.num_gpus = 1"
  ]
 },
 {
  "number": 6961,
  "sha": "8bf50eaf9d3b2473fa802eedce35c8b13035cce0",
  "author": "guptapriya",
  "created_at": "2019-06-05 05:40:18",
  "condition": [
   "${0:NAME}.${1:NAME} = ${2:NAME}.${3:NAME}.join(${0:NAME}.cur_log_dir, ${4:STRING})"
  ],
  "consequent": [
   "${0:NAME}.${1:NAME} = ${2:NAME}.${3:NAME}.join(temp_dir, ${4:STRING})"
  ]
 },
 {
  "number": 6961,
  "sha": "8bf50eaf9d3b2473fa802eedce35c8b13035cce0",
  "author": "guptapriya",
  "created_at": "2019-06-05 05:40:18",
  "condition": [
   "${0:NAME}.${1:NAME} = ${2:NAME}.get_model_params(${3:NAME}, ${4:NUMBER})[${5:STRING}]"
  ],
  "consequent": [
   "${0:NAME}.${1:NAME} = ${2:NAME}.get_model_params(FLAGS.${3:NAME}, ${4:NUMBER})[${5:STRING}]"
  ]
 },
 {
  "number": 6961,
  "sha": "8bf50eaf9d3b2473fa802eedce35c8b13035cce0",
  "author": "guptapriya",
  "created_at": "2019-06-05 05:40:18",
  "condition": [
   "${0:NAME}=${1:NAME}.TensorShape([batch, ${2:NAME}]),"
  ],
  "consequent": [
   "${0:NAME}=${1:NAME}.TensorShape([${2:NAME}]),"
  ]
 },
 {
  "number": 6960,
  "sha": "31956b0c97e72db7322753f70400aa3e452b2f50",
  "author": "guptapriya",
  "created_at": "2019-06-05 05:32:02",
  "condition": [
   "${0:NAME}.${1:NAME} = ${2:NAME}._get_model_dir("
  ],
  "consequent": [
   "${0:NAME}.${1:NAME} = ${2:NAME}._get_model_dir('benchmark_1_gpu_no_ds_sb')"
  ]
 },
 {
  "number": 6943,
  "sha": "ffdafe109091d25197e711374a7285b9ab9efaf8",
  "author": "guptapriya",
  "created_at": "2019-06-02 23:10:26",
  "condition": [
   "benchmark_2_gpu_ctl"
  ],
  "consequent": [
   "benchmark_2_gpus_ctl"
  ]
 },
 {
  "number": 6862,
  "sha": "625387380fc912b78e0d99ce01c0be823e4bcf31",
  "author": "rxsang",
  "created_at": "2019-05-23 04:10:43",
  "condition": [
   "benchmark_xla_8_gpu_fp16_tweaked_get_next_as_optional"
  ],
  "consequent": [
   "benchmark_xla_8_gpu_fp16_tweaked_optional_next"
  ]
 },
 {
  "number": 6598,
  "sha": "d5466cce345c17fc8ff8953ff64af8341b978c9c",
  "author": "rxsang",
  "created_at": "2019-04-17 21:58:21",
  "condition": [
   "per_replica_batch_size"
  ],
  "consequent": [
   "input_layer_batch_size"
  ]
 },
 {
  "number": 6557,
  "sha": "d6bacfe1d728b8312b0d4193fa63738489ef2518",
  "author": "rxsang",
  "created_at": "2019-04-10 18:58:09",
  "condition": [
   "return \"BatchTimestamp(batch_index: {}, timestamp: {})\".format("
  ],
  "consequent": [
   "return \"'BatchTimestamp<batch_index: {}, timestamp: {}>'\".format("
  ]
 },
 {
  "number": 6508,
  "sha": "7a98fa2bdff1d7a7856fcaaa685d5ac97f81f48d",
  "author": "rxsang",
  "created_at": "2019-04-02 18:35:45",
  "condition": [
   "${0:NAME} = ${0:NAME}.batch(${1:NAME}, ${2:NAME}=False)"
  ],
  "consequent": [
   "${0:NAME} = ${0:NAME}.batch(${1:NAME}, ${2:NAME}=${2:NAME})"
  ]
 },
 {
  "number": 6508,
  "sha": "7a98fa2bdff1d7a7856fcaaa685d5ac97f81f48d",
  "author": "rxsang",
  "created_at": "2019-04-02 18:35:45",
  "condition": [
   "${0:NAME} = ${0:NAME}.batch(${1:NAME}, ${2:NAME}=True)"
  ],
  "consequent": [
   "${0:NAME} = ${0:NAME}.batch(${1:NAME}, ${2:NAME}=${2:NAME})"
  ]
 },
 {
  "number": 6508,
  "sha": "7a98fa2bdff1d7a7856fcaaa685d5ac97f81f48d",
  "author": "rxsang",
  "created_at": "2019-04-02 18:35:45",
  "condition": [
   "${0:NAME} = ${1:NAME}.resnet50(${2:NAME}=${3:NAME}.${4:NAME},",
   "                               ${5:NAME}=${5:NAME})"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.resnet50(",
   "     ${2:NAME}=${3:NAME}.${4:NAME},",
   "     ${5:NAME}=${5:NAME},",
   "     batch_size=per_replica_batch_size)"
  ]
 },
 {
  "number": 6327,
  "sha": "6d4bfdc1d58630522b55416ee2665fd58729259f",
  "author": "pkanwar23",
  "created_at": "2019-03-08 19:27:08",
  "condition": [
   "${0:NAME} = (",
   "   ${1:NAME} * ${2:NAME}.cast(${3:NAME}, ${2:NAME}.${4:NAME}) / ${2:NAME}.cast("
  ],
  "consequent": [
   "${0:NAME} = (${1:NAME} * ${2:NAME}.cast(${3:NAME}, ${2:NAME}.${4:NAME}) / ${2:NAME}.cast("
  ]
 },
 {
  "number": 6327,
  "sha": "6d4bfdc1d58630522b55416ee2665fd58729259f",
  "author": "pkanwar23",
  "created_at": "2019-03-08 19:27:08",
  "condition": [
   "current_epoch: `Tensor` for ${0:NAME} epoch.",
   "poly_rate: Polynomial decay rate."
  ],
  "consequent": [
   "global_step: the ${0:NAME} global_step"
  ]
 },
 {
  "number": 5838,
  "sha": "17c2f0ccec49e8087f100796027d75ea7fdca41c",
  "author": "cshallue",
  "created_at": "2018-11-30 02:02:00",
  "condition": [
   "light_curve_util"
  ],
  "consequent": [
   "light_curve"
  ]
 },
 {
  "number": 5838,
  "sha": "17c2f0ccec49e8087f100796027d75ea7fdca41c",
  "author": "cshallue",
  "created_at": "2018-11-30 02:02:00",
  "condition": [
   "${0:NAME}.assertEqual(len(${1:NAME}), len(${2:NAME}))"
  ],
  "consequent": [
   "${0:NAME}.assertLen(${1:NAME}, len(${2:NAME}))"
  ]
 },
 {
  "number": 5838,
  "sha": "17c2f0ccec49e8087f100796027d75ea7fdca41c",
  "author": "cshallue",
  "created_at": "2018-11-30 02:02:00",
  "condition": [
   "from light_curve_util.cc.${0:NAME} import ${1:NAME}"
  ],
  "consequent": [
   "from light_curve.fast_ops.${0:NAME} import ${1:NAME}"
  ]
 },
 {
  "number": 5838,
  "sha": "17c2f0ccec49e8087f100796027d75ea7fdca41c",
  "author": "cshallue",
  "created_at": "2018-11-30 02:02:00",
  "condition": [
   "${0:NAME}.assertEqual(${1:NUMBER}, len(${2:NAME}))"
  ],
  "consequent": [
   "${0:NAME}.assertLen(${2:NAME}, ${1:NUMBER})"
  ]
 },
 {
  "number": 5838,
  "sha": "17c2f0ccec49e8087f100796027d75ea7fdca41c",
  "author": "cshallue",
  "created_at": "2018-11-30 02:02:00",
  "condition": [
   "${0:NAME}.assertEqual(len(${1:NAME}), ${2:NUMBER})"
  ],
  "consequent": [
   "${0:NAME}.assertLen(${1:NAME}, ${2:NUMBER})"
  ]
 },
 {
  "number": 5838,
  "sha": "17c2f0ccec49e8087f100796027d75ea7fdca41c",
  "author": "cshallue",
  "created_at": "2018-11-30 02:02:00",
  "condition": [
   "assertItemsEqual"
  ],
  "consequent": [
   "assertCountEqual"
  ]
 },
 {
  "number": 5838,
  "sha": "17c2f0ccec49e8087f100796027d75ea7fdca41c",
  "author": "cshallue",
  "created_at": "2018-11-30 02:02:00",
  "condition": [
   "${0:NAME}.assertEqual(len(${1:NAME}[${2:NUMBER}]), ${3:NUMBER})"
  ],
  "consequent": [
   "${0:NAME}.assertLen(${1:NAME}[${2:NUMBER}], ${3:NUMBER})"
  ]
 },
 {
  "number": 5815,
  "sha": "e7e842937ba8be4b3a7ba9fd3ee66ff865be5230",
  "author": "dreamdragon",
  "created_at": "2018-11-26 22:52:46",
  "condition": [
   "TfSequenceExampleDecoderTest"
  ],
  "consequent": [
   "TFSequenceExampleDecoderTest"
  ]
 },
 {
  "number": 5815,
  "sha": "e7e842937ba8be4b3a7ba9fd3ee66ff865be5230",
  "author": "dreamdragon",
  "created_at": "2018-11-26 22:52:46",
  "condition": [
   "TfSequenceExampleDecoder"
  ],
  "consequent": [
   "TFSequenceExampleDecoder"
  ]
 },
 {
  "number": 5815,
  "sha": "e7e842937ba8be4b3a7ba9fd3ee66ff865be5230",
  "author": "dreamdragon",
  "created_at": "2018-11-26 22:52:46",
  "condition": [
   "slim_example_decoder"
  ],
  "consequent": [
   "tfexample_decoder"
  ]
 },
 {
  "number": 5815,
  "sha": "e7e842937ba8be4b3a7ba9fd3ee66ff865be5230",
  "author": "dreamdragon",
  "created_at": "2018-11-26 22:52:46",
  "condition": [
   "tfexample_decoder.BoundingBoxSequence(${0:NAME}=${1:STRING}),"
  ],
  "consequent": [
   "BoundingBoxSequence(${0:NAME}=${1:STRING}),"
  ]
 },
 {
  "number": 5815,
  "sha": "e7e842937ba8be4b3a7ba9fd3ee66ff865be5230",
  "author": "dreamdragon",
  "created_at": "2018-11-26 22:52:46",
  "condition": [
   "return ${0:NAME}.${1:NAME}.pack_sequence_as(${2:NAME}=[${3:NUMBER}, ${3:NUMBER}], ${4:NAME}=${5:NAME})"
  ],
  "consequent": [
   "return ${0:NAME}.contrib.framework.${1:NAME}.pack_sequence_as(",
   "     ${2:NAME}=[${3:NUMBER}, ${3:NUMBER}], ${4:NAME}=${5:NAME})"
  ]
 },
 {
  "number": 5815,
  "sha": "e7e842937ba8be4b3a7ba9fd3ee66ff865be5230",
  "author": "dreamdragon",
  "created_at": "2018-11-26 22:52:46",
  "condition": [
   "class TfSequenceExampleDecoder(${0:NAME}.${1:NAME}):"
  ],
  "consequent": [
   "class BoundingBoxSequence(tfexample_decoder.ItemHandler):",
   "\t\"\"\"An ItemHandler that concatenates SparseTensors to Bounding Boxes.",
   "  \"\"\" ",
   "  def __init__(self, keys=None, prefix=None, return_dense=True,",
   "                default_value=-1.0):",
   "\t\"\"\"Initialize the bounding box handler.",
   "",
   "    Args:",
   "      keys: A list of four key names representing the ymin, xmin, ymax, xmax",
   "        in the Example or SequenceExample.",
   "      prefix: An optional prefix for each of the bounding box keys in the",
   "        Example or SequenceExample. If provided, `prefix` is prepended to each",
   "        key in `keys`.",
   "      return_dense: if True, returns a dense tensor; if False, returns as",
   "        sparse tensor.",
   "      default_value: The value used when the `tensor_key` is not found in a",
   "        particular `TFExample`.",
   "",
   "    Raises:",
   "      ValueError: if keys is not `None` and also not a list of exactly 4 keys",
   "    \"\"\"",
   "",
   "    if keys is None:",
   "\tkeys = ['ymin', 'xmin', 'ymax', 'xmax']",
   "",
   "    elif len(keys) != 4:",
   "\traise ValueError('BoundingBoxSequence expects 4 keys but got {}'.format(",
   "           len(keys)))",
   "",
   "    self._prefix = prefix",
   "",
   "    self._keys = keys",
   "",
   "    self._full_keys = [prefix + k for k in keys]",
   "",
   "    self._return_dense = return_dense",
   "",
   "    self._default_value = default_value",
   "",
   "    super(BoundingBoxSequence, self).__init__(self._full_keys) ",
   "  def tensors_to_item(self, keys_to_tensors):",
   "\t\"\"\"Maps the given dictionary of tensors to a concatenated list of bboxes.",
   "",
   "    Args:",
   "      keys_to_tensors: a mapping of TF-Example keys to parsed tensors.",
   "",
   "    Returns:",
   "      [time, num_boxes, 4] tensor of bounding box coordinates, in order",
   "          [y_min, x_min, y_max, x_max]. Whether the tensor is a SparseTensor",
   "          or a dense Tensor is determined by the return_dense parameter. Empty",
   "          positions in the sparse tensor are filled with -1.0 values.",
   "    \"\"\"",
   "",
   "    sides = []",
   "",
   "    for key in self._full_keys:",
   "\tvalue = keys_to_tensors[key]",
   "",
   "      expanded_dims = tf.concat(",
   "           [tf.to_int64(tf.shape(value)),",
   "            tf.constant([1], dtype=tf.int64)], 0)",
   "",
   "      side = tf.sparse_reshape(value, expanded_dims)",
   "",
   "      sides.append(side)",
   "",
   "    bounding_boxes = tf.sparse_concat(2, sides)",
   "",
   "    if self._return_dense:",
   "\tbounding_boxes = tf.sparse_tensor_to_dense(",
   "           bounding_boxes, default_value=self._default_value)",
   "",
   "    return bounding_boxes  ",
   "class TFSequenceExampleDecoder(${0:NAME}.${1:NAME}):"
  ]
 },
 {
  "number": 5815,
  "sha": "e7e842937ba8be4b3a7ba9fd3ee66ff865be5230",
  "author": "dreamdragon",
  "created_at": "2018-11-26 22:52:46",
  "condition": [
   "Image"
  ],
  "consequent": [
   "tfexample_decoder"
  ]
 },
 {
  "number": 5815,
  "sha": "e7e842937ba8be4b3a7ba9fd3ee66ff865be5230",
  "author": "dreamdragon",
  "created_at": "2018-11-26 22:52:46",
  "condition": [
   "import google3"
  ],
  "consequent": [
   "import tensorflow as tf"
  ]
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "created_at": "2018-11-20 01:53:16",
  "condition": [
   "${0:NAME}=${1:NAME}, ${2:NAME}=${3:NAME}.${4:NAME}, deterministic=False,"
  ],
  "consequent": [
   "${0:NAME}=${1:NAME}, ${2:NAME}=${3:NAME}.${4:NAME}, params=params,"
  ]
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "created_at": "2018-11-20 01:53:16",
  "condition": [
   "${0:NAME} ${1:NAME} ${2:NAME} ${3:NAME} ${4:NAME} ${5:NAME} ${6:NAME} ${7:NAME} ${1:NAME} ${8:NAME} which are not used ${9:NAME}"
  ],
  "consequent": [
   "${0:NAME} ${1:NAME} ${2:NAME} ${3:NAME} ${4:NAME} ${5:NAME} a number of unused ${6:NAME} ${7:NAME} ${1:NAME} ${8:NAME} ${9:NAME}"
  ]
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "created_at": "2018-11-20 01:53:16",
  "condition": [
   "${0:NAME} = ${1:NAME}._get_order_chunk()"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}._current_epoch_order[i * ${1:NAME}.train_batch_size:",
   "                                           (i + 1) * ${1:NAME}.train_batch_size]"
  ]
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "created_at": "2018-11-20 01:53:16",
  "condition": [
   "DEFINE_string"
  ],
  "consequent": [
   "DEFINE_integer"
  ]
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "created_at": "2018-11-20 01:53:16",
  "condition": [
   "${0:NAME}: Try ${1:NAME} enforce repeatable behavior, even at ${2:NAME} cost ${3:NAME}",
   "\tperformance."
  ],
  "consequent": [
   "params: dict ${3:NAME} parameters for ${2:NAME} run.",
   "constructor_type: The name ${3:NAME} ${2:NAME} constructor subclass that should be used",
   "\tfor ${2:NAME} input pipeline.",
   "${0:NAME}: Tell ${2:NAME} data constructor ${1:NAME} produce deterministically."
  ]
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "created_at": "2018-11-20 01:53:16",
  "condition": [
   "${0:NAME}, ${1:NUMBER}, params[\"batches_per_step\"])"
  ],
  "consequent": [
   "${0:NAME}, steps_per_run=${1:NUMBER})"
  ]
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "created_at": "2018-11-20 01:53:16",
  "condition": [
   "stat_utils"
  ],
  "consequent": [
   "popen_helper"
  ]
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "created_at": "2018-11-20 01:53:16",
  "condition": [
   "${0:NAME} = ${1:NAME}.logical_not(${2:NAME}).astype(${1:NAME}.bool)"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.logical_not(${2:NAME})"
  ]
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "created_at": "2018-11-20 01:53:16",
  "condition": [
   "${0:NAME} = ${1:NAME}.get_forkpool(${2:NUMBER}, ${3:NAME}=False)"
  ],
  "consequent": [
   "if self._shuffle_with_forkpool:",
   "\t${0:NAME} = ${1:NAME}.get_forkpool(${2:NUMBER}, ${3:NAME}=False)",
   "else:",
   "\t${0:NAME} = ${1:NAME}.get_threadpool(1, ${3:NAME}=False)"
  ]
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "created_at": "2018-11-20 01:53:16",
  "condition": [
   "__repr__"
  ],
  "consequent": [
   "__str__"
  ]
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "created_at": "2018-11-20 01:53:16",
  "condition": [
   "def instantiate_pipeline(${0:NAME}, ${1:NAME}, ${2:NAME}, ${3:NAME}):"
  ],
  "consequent": [
   "def instantiate_pipeline(${0:NAME}, ${1:NAME}, ${3:NAME}, constructor_type=None,",
   "                          ${2:NAME}=False):"
  ]
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "created_at": "2018-11-20 01:53:16",
  "condition": [
   "def _filter_index_sort(${0:NAME}, ${1:NAME}, match_mlperf):"
  ],
  "consequent": [
   "def _filter_index_sort(${0:NAME}, ${1:NAME}):"
  ]
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "created_at": "2018-11-20 01:53:16",
  "condition": [
   "${0:NAME}._shuffle_iterator = ${1:NAME}.imap_unordered(stat_utils.permutation, args)"
  ],
  "consequent": [
   "imap = ${1:NAME}.imap if ${0:NAME}.deterministic else ${1:NAME}.imap_unordered"
  ]
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "created_at": "2018-11-20 01:53:16",
  "condition": [
   "for match_mlperf in [True, False]:",
   "\t${0:NAME} = ${1:NAME}.${2:NAME}.join(${3:NAME}.${4:NAME}, ${5:STRING})"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.${2:NAME}.join(${3:NAME}.${4:NAME}, ${5:STRING})"
  ]
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "created_at": "2018-11-20 01:53:16",
  "condition": [
   "print(${0:NAME}.format_exc(), file=sys.stderr)"
  ],
  "consequent": [
   "${0:NAME}.print_exc()"
  ]
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "created_at": "2018-11-20 01:53:16",
  "condition": [
   "params=params)"
  ],
  "consequent": [
   "constructor_type=constructor_type, deterministic=True)"
  ]
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "created_at": "2018-11-20 01:53:16",
  "condition": [
   "assert not ${0:NAME}.${1:NAME}.shape[0]"
  ],
  "consequent": [
   "${0:NAME}.${1:NAME} = next(${0:NAME}._shuffle_iterator)"
  ]
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "created_at": "2018-11-20 01:53:16",
  "condition": [
   "with ${0:NAME}.get_threadpool(6) as pool:"
  ],
  "consequent": [
   "get_pool = (${0:NAME}.get_fauxpool if self.deterministic else",
   "             ${0:NAME}.get_threadpool)"
  ]
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "created_at": "2018-11-20 01:53:16",
  "condition": [
   "def test_end_to_end(${0:NAME}):"
  ],
  "consequent": [
   "def _test_end_to_end(${0:NAME}, constructor_type):"
  ]
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "created_at": "2018-11-20 01:53:16",
  "condition": [
   "for u, i, v, l in zip("
  ],
  "consequent": [
   "data_list = ["
  ]
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "created_at": "2018-11-20 01:53:16",
  "condition": [
   "${0:NAME}, ${1:NAME} = _filter_index_sort(${2:NAME}, ${3:NAME},"
  ],
  "consequent": [
   "${0:NAME}, ${1:NAME} = _filter_index_sort(${2:NAME}, ${3:NAME})"
  ]
 },
 {
  "number": 5598,
  "sha": "c5dbd487bb9278ba821f087874bdcf4e404f49bd",
  "author": "josh11b",
  "created_at": "2018-10-24 18:59:23",
  "condition": [
   "${0:NAME} None, ${1:NAME} ${2:NAME} ${3:NAME} ${4:NAME} ${5:NAME} ${6:NAME} topology."
  ],
  "consequent": [
   "algorithms. ${0:NAME} None, ${1:NAME} ${2:NAME} ${3:NAME} ${4:NAME} ${5:NAME} ${6:NAME}"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "\"Cannot fit a spline on less than 4 points. Got %d points.\" % len(${0:NAME}))"
  ],
  "consequent": [
   "\"Cannot fit a spline on less than 4 points. Got {} points.\".format(",
   "     len(${0:NAME})))"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "${0:NAME}: ${1:NAME} True, ${2:NAME} ${3:NAME} model_fn is ${4:NAME}. ${5:NAME} ${6:NAME}"
  ],
  "consequent": [
   "${0:NAME}: ${1:NAME} True, ${2:NAME} ${3:NAME} will be ${4:NAME}. ${5:NAME} ${6:NAME} Estimator",
   "\twill be ${4:NAME}."
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "invert=False):"
  ],
  "consequent": [
   "scramble_type=None,"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "raise ValueError(",
   "     \"Unrecognized pooling_type: %s\" % ${0:NAME}.${1:NAME})"
  ],
  "consequent": [
   "raise ValueError(\"Unrecognized pooling_type: {}\".format(",
   "     ${0:NAME}.${1:NAME}))"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "${0:NAME} = _MockModel(${1:NAME}, ${2:NAME}, ${3:NAME}, ${4:NAME})"
  ],
  "consequent": [
   "${0:NAME} = _MockModel(${1:NAME}, ${2:NAME}, ${3:NAME}, ${4:NAME}, output_dim=4)"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "raise TypeError(\"Requested %s, but Feature has %s\" % (${0:NAME}, ${1:NAME}))"
  ],
  "consequent": [
   "raise TypeError(\"Requested {}, but Feature has {}\".format(",
   "     ${0:NAME}, ${1:NAME}))"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "raise ValueError(\"bin_width must be positive. Got: %d\" % ${0:NAME})"
  ],
  "consequent": [
   "raise ValueError(\"bin_width must be positive. Got: {}\".format(${0:NAME}))"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "${0:NAME}: ${1:NAME} ${2:NAME} ${3:NAME} ${4:NAME} ${5:NAME} corresponding to ${6:NAME} time ${5:NAME} in",
   "\tall_time."
  ],
  "consequent": [
   "${0:NAME}: ${1:NAME} ${2:NAME} ${3:NAME} ${4:NAME} ${5:NAME}; ${6:NAME} flux values ${3:NAME} ${6:NAME} light curve."
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "for ${0:NAME}, ${1:NAME}, ${2:NAME} in zip("
  ],
  "consequent": [
   "for ${0:NAME}, ${1:NAME}, ${2:NAME} in zip(all_time, all_masked_time,"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "${0:NAME} = _MockModel(${1:NAME}, ${2:NAME}, ${3:NAME}, ${4:NAME})"
  ],
  "consequent": [
   "${0:NAME} = _MockModel(${1:NAME}, ${2:NAME}, ${3:NAME}, ${4:NAME}, output_dim=1)"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "raise IOError(\"Failed to find .fits files in %s for Kepler ID %s\" %"
  ],
  "consequent": [
   "raise IOError(\"Failed to find .fits files in {} for Kepler ID {}\".format("
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "def set_feature(${0:NAME}, ${1:NAME}, ${2:NAME}, ${3:NAME}=None, ${4:NAME}=False):"
  ],
  "consequent": [
   "def set_feature(${0:NAME},",
   "                 ${1:NAME},",
   "                 ${2:NAME},",
   "                 ${3:NAME}=None,",
   "                 ${4:NAME}=False,",
   "                 bytes_encoding=\"latin-1\"):"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "${0:NAME}.${1:NAME}.join(${2:NAME}.${3:NAME}, \"0114/011442793/kplr011442793-%s_llc.fits\")"
  ],
  "consequent": [
   "${0:NAME}.${1:NAME}.join(${2:NAME}.${3:NAME},",
   "              \"0114/011442793/kplr011442793-{}_llc.fits\".format(q))"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "dataset = dataset_ops.build_dataset(",
   "     file_pattern=file_pattern,",
   "     input_config=input_config,",
   "     batch_size=params[\"batch_size\"],",
   "     include_labels=include_labels,",
   "     reverse_time_series_prob=reverse_time_series_prob,",
   "     shuffle_filenames=shuffle_filenames,",
   "     shuffle_values_buffer=shuffle_values_buffer,",
   "     repeat=repeat,",
   "     use_tpu=use_tpu)"
  ],
  "consequent": [
   "class _ModelFn(object):",
   "\t\"\"\"Class that acts as a callable model function for Estimator train / eval.\"\"\""
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "more ${0:NAME} ${1:NAME} ${2:NAME} used (${3:NAME}.${4:NAME}. ${5:NAME} break-${6:NAME} ${7:NAME}), and"
  ],
  "consequent": [
   "${0:NAME} ${1:NAME} ${2:NAME} used (${3:NAME}.${4:NAME}. ${5:NAME} break-${6:NAME} ${7:NAME}), and vice-versa."
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "${0:NAME} = (predictions.shape[${1:NUMBER}] == ${1:NUMBER})"
  ],
  "consequent": [
   "${0:NAME} = output_dim == ${1:NUMBER}"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "def set_bytes_feature(${0:NAME}, ${1:NAME}, ${2:NAME}, ${3:NAME}=False):"
  ],
  "consequent": [
   "def set_bytes_feature(${0:NAME},",
   "                       ${1:NAME},",
   "                       ${2:NAME},",
   "                       ${3:NAME}=False,",
   "                       bytes_encoding=\"latin-1\"):"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "raise ValueError(\"len(x) must be at least 2. Got: %s\" % ${0:NAME})"
  ],
  "consequent": [
   "raise ValueError(\"len(x) must be at least 2. Got: {}\".format(${0:NAME}))"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "return _build_metrics(${0:NAME}, ${1:NAME}, ${2:NAME}, ${3:NAME})"
  ],
  "consequent": [
   "return _build_metrics(",
   "     ${0:NAME},",
   "     ${1:NAME},",
   "     ${2:NAME},",
   "     ${3:NAME},",
   "     output_dim=model.hparams.output_dim)"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "raise ValueError(\"Config name '%s' not found in configuration module: %s\" %"
  ],
  "consequent": [
   "raise ValueError(",
   "     \"Config name '{}' not found in configuration module: {}\".format("
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "raise ValueError(\"len(x) (got: %d) must equal len(y) (got: %d)\" % (x_len,"
  ],
  "consequent": [
   "raise ValueError(\"len(x) (got: {}) must equal len(y) (got: {})\".format("
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "len(${0:NAME})))"
  ],
  "consequent": [
   "x_len, len(${0:NAME})))"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "\"outliers, got %d points.\" % ${0:NAME}.sum(${1:NAME}))"
  ],
  "consequent": [
   "\"outliers, got {} points.\".format(${0:NAME}.sum(${1:NAME})))"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "${0:NAME}: AstroModel or a subclass."
  ],
  "consequent": [
   "${0:NAME}: Model class."
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "raise ValueError(\"Expected mode in %s. Got: %s\" % (${0:NAME}, ${1:NAME}))"
  ],
  "consequent": [
   "raise ValueError(\"Expected mode in {}. Got: {}\".format(${0:NAME}, ${1:NAME}))"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "${0:NAME} ${1:NAME} values (${2:NAME} ${3:NAME} ${4:NAME}) ${5:NAME} ${6:NAME} ${7:NAME} ${8:NAME}"
  ],
  "consequent": [
   "${0:NAME} ${1:NAME} values (${2:NAME} ${3:NAME} ${4:NAME}) ${5:NAME} ${6:NAME} ${7:NAME} ${8:NAME} logging"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "${0:NAME}.warn(\"Bad bkspace %.4f: %s\" % (${1:NAME}, ${2:NAME}))"
  ],
  "consequent": [
   "${0:NAME}.warn(\"Bad bkspace {}: {}\".format(${1:NAME}, ${2:NAME}))"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "${0:NAME} = ${1:NAME}.concat(",
   "     [${2:NAME}[${3:NUMBER}] for ${2:NAME} in ${4:NAME}],",
   "     ${5:NAME}=${3:NUMBER},",
   "     ${6:NAME}=${7:STRING})"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.concat([${2:NAME}[${3:NUMBER}] for ${2:NAME} in ${4:NAME}],",
   "                               ${5:NAME}=${3:NUMBER},",
   "                               ${6:NAME}=${7:STRING})"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "def _build_metrics(${0:NAME}, ${1:NAME}, ${2:NAME}, ${3:NAME}):"
  ],
  "consequent": [
   "def _build_metrics(${0:NAME}, ${1:NAME}, ${2:NAME}, ${3:NAME}, output_dim=1):"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "${0:NAME}: ${1:NAME} of configuration parameters for ${2:NAME} ${3:NAME} ${4:NAME}."
  ],
  "consequent": [
   "${0:NAME}: ${1:NAME} containing hyperparameters for ${2:NAME} and training",
   "\t${3:NAME} ${4:NAME}."
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "raise ValueError(\"Unrecognized kind: %s\" % ${0:NAME})"
  ],
  "consequent": [
   "raise ValueError(\"Unrecognized kind: {}\".format(${0:NAME}))"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "${0:NAME} ${1:NAME} ${2:NAME} ${3:NAME} an ${4:NAME} ${5:NAME} and returns (features, labels)."
  ],
  "consequent": [
   "${0:NAME} ${1:NAME} ${2:NAME} ${3:NAME} the ${4:NAME} ${5:NAME} and returns a tf.data.Dataset"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "raise ValueError(\"Expected 2 or more output_args. Got: %d\" % ${0:NAME})"
  ],
  "consequent": [
   "raise ValueError(",
   "     \"Expected 2 or more output_args. Got: {}\".format(${0:NAME}))"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "raise ValueError(\"Unknown optimizer: %s\" % ${0:NAME}.${1:NAME})"
  ],
  "consequent": [
   "raise ValueError(\"Unknown optimizer: {}\".format(${0:NAME}.${1:NAME}))"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "raise ValueError(\"x_min (got: %d) must be less than x_max (got: %d)\" %"
  ],
  "consequent": [
   "raise ValueError(\"x_min (got: {}) must be less than x_max (got: {})\".format("
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "raise ValueError(\"Unable to parse the content of the json file %s. \""
  ],
  "consequent": [
   "raise ValueError(\"Unable to parse the content of the json file {}. \"",
   "                  \"Parsing error: {}.\".format("
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "${0:STRING}\"Wraps model_class as an Estimator or TPUEstimator model_fn."
  ],
  "consequent": [
   "${0:STRING}\"Initializes the model function."
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "with ${0:NAME}.variable_scope(\"block_%d\" % (${1:NAME} + ${2:NUMBER})):"
  ],
  "consequent": [
   "with ${0:NAME}.variable_scope(\"block_{}\".format(${1:NAME} + ${2:NUMBER})):"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "${0:NAME} = \"%.9d\" % int(${0:NAME})"
  ],
  "consequent": [
   "${0:NAME} = \"{:09d}\".format(int(${0:NAME}))"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "def model_fn(${0:NAME}, ${1:NAME}, ${2:NAME}, ${3:NAME}):"
  ],
  "consequent": [
   "def __call__(self, ${0:NAME}, ${1:NAME}, ${2:NAME}, ${3:NAME}):"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "hparams = copy.deepcopy(hparams)"
  ],
  "consequent": [
   "self._model_class = model_class"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "raise ValueError(\"Unknown input type: %s\" % ${0:NAME})"
  ],
  "consequent": [
   "raise ValueError(\"Unknown input type: {}\".format(${0:NAME}))"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "raise ValueError(\"Found no input files matching %s\" % ${0:NAME})"
  ],
  "consequent": [
   "raise ValueError(\"Found no input files matching {}\".format(${0:NAME}))"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "${0:NAME} = model_class(${1:NAME}, ${2:NAME}, ${3:NAME}, ${4:NAME})"
  ],
  "consequent": [
   "${0:NAME} = self._model_class(${1:NAME}, ${2:NAME}, ${3:NAME}, ${4:NAME})"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "file_shards.append((train_tces[start:end], ${0:NAME}.${1:NAME}.join("
  ],
  "consequent": [
   "filename = ${0:NAME}.${1:NAME}.join(",
   "     FLAGS.output_dir, \"train-{:05d}-of-{:05d}\".format(",
   "         i, FLAGS.num_train_shards))"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "def __init__(${0:NAME}, ${1:NAME}, ${2:NAME}, ${3:NAME}, ${4:NAME}):"
  ],
  "consequent": [
   "def __init__(${0:NAME}, ${1:NAME}, ${2:NAME}, ${3:NAME}, ${4:NAME}, output_dim):"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "estimator_util"
  ],
  "consequent": [
   "continuous_train_and_eval"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "raise ValueError(\"num_bins must be at least 2. Got: %d\" % ${0:NAME})"
  ],
  "consequent": [
   "raise ValueError(\"num_bins must be at least 2. Got: {}\".format(${0:NAME}))"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "${0:NAME}.append((${1:NAME}, ${2:NAME}.${3:NAME}.join(${4:NAME}.${5:NAME},",
   "                                            ${6:STRING})))"
  ],
  "consequent": [
   "${0:NAME}.append((${1:NAME},",
   "                     ${2:NAME}.${3:NAME}.join(${4:NAME}.${5:NAME}, ${6:STRING})))"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "set_feature(${0:NAME}, ${1:NAME}, ${2:NAME}, ${3:STRING}, ${4:NAME})"
  ],
  "consequent": [
   "set_feature(${0:NAME}, ${1:NAME}, ${2:NAME}, ${3:STRING}, ${4:NAME}, bytes_encoding)"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "include_labels = (",
   "     ${0:NAME} in [tf.estimator.ModeKeys.TRAIN, tf.estimator.ModeKeys.EVAL])"
  ],
  "consequent": [
   "return _InputFn(file_pattern, input_config, ${0:NAME}, shuffle_values_buffer,",
   "                 repeat)"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "${0:NAME} = [str(${1:NAME}).encode(\"latin-1\") for ${1:NAME} in ${0:NAME}]"
  ],
  "consequent": [
   "${0:NAME} = [str(${1:NAME}).encode(bytes_encoding) for ${1:NAME} in ${0:NAME}]"
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "invert: ${0:NAME} ${1:NAME} invert ${2:NAME} ${3:NAME} measurements by multiplying by -1."
  ],
  "consequent": [
   "scramble_type: What scrambling procedure ${1:NAME} use: 'SCR1', 'SCR2', or 'SCR3'",
   "\t(pg 9: https://exoplanetarchive.ipac.caltech.edu/docs/KSCI-19114-002.pdf).",
   "interpolate_missing_time: ${0:NAME} ${1:NAME} interpolate missing (NaN) time values.",
   "\tThis should only affect ${2:NAME} output if scramble_type is specified (NaN time",
   "   values typically come with NaN ${3:NAME} values, which are removed anyway, but",
   "   scrambing decouples NaN time values from NaN ${3:NAME} values)."
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "estimator_util.evaluate(estimator, input_fn, eval_name=FLAGS.eval_name)"
  ],
  "consequent": [
   "eval_steps = None",
   "                                           "
  ]
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "created_at": "2018-10-16 18:01:00",
  "condition": [
   "raise ValueError(\"Unrecognized model name: %s\" % ${0:NAME})"
  ],
  "consequent": [
   "raise ValueError(\"Unrecognized model name: {}\".format(${0:NAME}))"
  ]
 },
 {
  "number": 5518,
  "sha": "b98409cb5fc09d51e8aaee7d294efd23bdf47b58",
  "author": "tfboyd",
  "created_at": "2018-10-13 15:03:09",
  "condition": [
   "print('TF_GPU_THREAD_COUNT:', ${0:NAME}.${1:NAME}[${2:STRING}])"
  ],
  "consequent": [
   "tf.logging.info('TF_GPU_THREAD_COUNT: %s', ${0:NAME}.${1:NAME}[${2:STRING}])"
  ]
 },
 {
  "number": 5518,
  "sha": "b98409cb5fc09d51e8aaee7d294efd23bdf47b58",
  "author": "tfboyd",
  "created_at": "2018-10-13 15:03:09",
  "condition": [
   "num_parallel_calls"
  ],
  "consequent": [
   "datasets_num_parallel_batches"
  ]
 },
 {
  "number": 5518,
  "sha": "b98409cb5fc09d51e8aaee7d294efd23bdf47b58",
  "author": "tfboyd",
  "created_at": "2018-10-13 15:03:09",
  "condition": [
   "def input_fn(${0:NAME}, ${1:NAME}, ${2:NAME}, ${3:NAME}=${4:NUMBER}, num_gpus=None,"
  ],
  "consequent": [
   "def input_fn(${0:NAME}, ${1:NAME}, ${2:NAME}, ${3:NAME}=${4:NUMBER},"
  ]
 },
 {
  "number": 5518,
  "sha": "b98409cb5fc09d51e8aaee7d294efd23bdf47b58",
  "author": "tfboyd",
  "created_at": "2018-10-13 15:03:09",
  "condition": [
   "num_gpus"
  ],
  "consequent": [
   "dtype"
  ]
 },
 {
  "number": 5518,
  "sha": "b98409cb5fc09d51e8aaee7d294efd23bdf47b58",
  "author": "tfboyd",
  "created_at": "2018-10-13 15:03:09",
  "condition": [
   "${0:NAME}.define_performance()"
  ],
  "consequent": [
   "${0:NAME}.define_performance(num_parallel_calls=False,",
   "                               tf_gpu_thread_mode=True,",
   "                               datasets_num_private_threads=True,",
   "                               datasets_num_parallel_batches=True)"
  ]
 },
 {
  "number": 5518,
  "sha": "b98409cb5fc09d51e8aaee7d294efd23bdf47b58",
  "author": "tfboyd",
  "created_at": "2018-10-13 15:03:09",
  "condition": [
   "set_environment_vars"
  ],
  "consequent": [
   "override_flags_and_set_envars_for_gpu_thread_pool"
  ]
 },
 {
  "number": 5518,
  "sha": "b98409cb5fc09d51e8aaee7d294efd23bdf47b58",
  "author": "tfboyd",
  "created_at": "2018-10-13 15:03:09",
  "condition": [
   "print('Logical CPU cores:', ${0:NAME})"
  ],
  "consequent": [
   "tf.logging.info('Logical CPU cores: %s', ${0:NAME})"
  ]
 },
 {
  "number": 5518,
  "sha": "b98409cb5fc09d51e8aaee7d294efd23bdf47b58",
  "author": "tfboyd",
  "created_at": "2018-10-13 15:03:09",
  "condition": [
   "Adjust"
  ],
  "consequent": [
   "Override"
  ]
 },
 {
  "number": 5518,
  "sha": "b98409cb5fc09d51e8aaee7d294efd23bdf47b58",
  "author": "tfboyd",
  "created_at": "2018-10-13 15:03:09",
  "condition": [
   "num_private_threads = (${0:NAME} - total_gpu_thread_count"
  ],
  "consequent": [
   "flags_obj.datasets_num_private_threads = (${0:NAME} - total_gpu_thread_count"
  ]
 },
 {
  "number": 5518,
  "sha": "b98409cb5fc09d51e8aaee7d294efd23bdf47b58",
  "author": "tfboyd",
  "created_at": "2018-10-13 15:03:09",
  "condition": [
   "${0:NAME} ${1:NAME} ${2:NAME} private ${3:NAME} ${4:NAME} for GPU with `${5:NAME}=${6:NAME}`"
  ],
  "consequent": [
   "${0:NAME} ${1:NAME} ${2:NAME} gpu ${3:NAME} ${4:NAME} with `${5:NAME}=${6:NAME}` may perform"
  ]
 },
 {
  "number": 5299,
  "sha": "9cc4cec8295c002f1edea50fc21a58bc97cc0ef4",
  "author": "samikama",
  "created_at": "2018-09-13 02:39:26",
  "condition": [
   "def _collect_gpu_info(${0:NAME},${1:NAME}=None):"
  ],
  "consequent": [
   "def _collect_gpu_info(${0:NAME}, ${1:NAME}=None):"
  ]
 },
 {
  "number": 5299,
  "sha": "9cc4cec8295c002f1edea50fc21a58bc97cc0ef4",
  "author": "samikama",
  "created_at": "2018-09-13 02:39:26",
  "condition": [
   "_collect_gpu_info(${0:NAME},${1:NAME})"
  ],
  "consequent": [
   "_collect_gpu_info(${0:NAME}, ${1:NAME})"
  ]
 },
 {
  "number": 5253,
  "sha": "5c0c749b5e4fdf0588ae929008cd0036f0f83b9b",
  "author": "tfboyd",
  "created_at": "2018-09-05 21:29:46",
  "condition": [
   "lambda ${0:NAME}: ${1:NAME}.parse_record(${0:NAME}, False))"
  ],
  "consequent": [
   "lambda ${0:NAME}: ${1:NAME}.parse_record(${0:NAME}, False, tf.float32))"
  ]
 },
 {
  "number": 5225,
  "sha": "967133c11ef03207e758b8b3f88f6791a4dd6b6d",
  "author": "tfboyd",
  "created_at": "2018-09-02 15:42:55",
  "condition": [
   "${0:NAME} ${1:NAME} removed all aspects ${2:NAME} the input pipeline other than the"
  ],
  "consequent": [
   "${0:NAME} ${1:NAME} returns a data set that iterates over a set ${2:NAME} random data and"
  ]
 },
 {
  "number": 5058,
  "sha": "e9dbef6be831bac9c5cbacf6b3b13e4557e4777c",
  "author": "raymond-yuan",
  "created_at": "2018-08-10 16:53:25",
  "condition": [
   "${0:NAME} = -${1:NAME}.${2:NAME}.softmax_cross_entropy_with_logits_v2(${3:NAME}=${4:NAME}, ${5:NAME}=${5:NAME})"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.${2:NAME}.softmax_cross_entropy_with_logits_v2(${3:NAME}=${4:NAME}, ${5:NAME}=${5:NAME})"
  ]
 },
 {
  "number": 4852,
  "sha": "60613a8729122012c3f6739550de981d01087326",
  "author": "raymond-yuan",
  "created_at": "2018-07-20 23:11:13",
  "condition": [
   "${0:NAME}.add_argument(\"--train\", type=str2bool, default=True,",
   "                     ${1:NAME}='Train our model or to run an existing model and '",
   "                          'watch it play.')"
  ],
  "consequent": [
   "${0:NAME}.add_argument('--train', dest='train', action='store_true',",
   "                     ${1:NAME}='Train our model.')"
  ]
 },
 {
  "number": 4852,
  "sha": "60613a8729122012c3f6739550de981d01087326",
  "author": "raymond-yuan",
  "created_at": "2018-07-20 23:11:13",
  "condition": [
   "${0:NAME}.add_argument(${1:STRING}, ${2:NAME}=2000, ${3:NAME}=${4:NAME},"
  ],
  "consequent": [
   "${0:NAME}.add_argument(${1:STRING}, ${2:NAME}=1000, ${3:NAME}=${4:NAME},"
  ]
 },
 {
  "number": 4852,
  "sha": "60613a8729122012c3f6739550de981d01087326",
  "author": "raymond-yuan",
  "created_at": "2018-07-20 23:11:13",
  "condition": [
   "${0:NAME}, ${1:NAME} = ${2:NAME}.local_model(tf_wrap(${3:NAME}[None, :]))"
  ],
  "consequent": [
   "${0:NAME}, ${1:NAME} = ${2:NAME}.local_model(",
   "     tf.convert_to_tensor(${3:NAME}[None, :],",
   "                          dtype=tf.float32))"
  ]
 },
 {
  "number": 4852,
  "sha": "60613a8729122012c3f6739550de981d01087326",
  "author": "raymond-yuan",
  "created_at": "2018-07-20 23:11:13",
  "condition": [
   "${0:NAME}, ${1:NAME}=${2:NAME}.${1:NAME}) for ${0:NAME} in range(${3:NAME}.cpu_count())]"
  ],
  "consequent": [
   "${1:NAME}=${2:NAME}.${1:NAME}) for ${0:NAME} in range(${3:NAME}.cpu_count())]"
  ]
 },
 {
  "number": 4852,
  "sha": "60613a8729122012c3f6739550de981d01087326",
  "author": "raymond-yuan",
  "created_at": "2018-07-20 23:11:13",
  "condition": [
   "${0:NAME} = ${1:NAME}.local_model(tf_wrap(${2:NAME}[None, :]))[-${3:NUMBER}].numpy()[${4:NUMBER}]"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.local_model(",
   "     tf.convert_to_tensor(${2:NAME}[None, :],",
   "                          dtype=tf.float32))[-${3:NUMBER}].numpy()[${4:NUMBER}]"
  ]
 },
 {
  "number": 4852,
  "sha": "60613a8729122012c3f6739550de981d01087326",
  "author": "raymond-yuan",
  "created_at": "2018-07-20 23:11:13",
  "condition": [
   "${0:NAME}, ${1:NAME} = ${2:NAME}.local_model(tf_wrap(${3:NAME}.vstack(${4:NAME}.${5:NAME})))"
  ],
  "consequent": [
   "${0:NAME}, ${1:NAME} = ${2:NAME}.local_model(",
   "     tf.convert_to_tensor(${3:NAME}.vstack(${4:NAME}.${5:NAME}),",
   "                          dtype=tf.float32))"
  ]
 },
 {
  "number": 4852,
  "sha": "60613a8729122012c3f6739550de981d01087326",
  "author": "raymond-yuan",
  "created_at": "2018-07-20 23:11:13",
  "condition": [
   "${0:NAME}, ${1:NAME} = model(tf_wrap(${2:NAME}[None, :]))"
  ],
  "consequent": [
   "${0:NAME}, ${1:NAME} = model(tf.convert_to_tensor(${2:NAME}[None, :], dtype=tf.float32))"
  ]
 },
 {
  "number": 4852,
  "sha": "60613a8729122012c3f6739550de981d01087326",
  "author": "raymond-yuan",
  "created_at": "2018-07-20 23:11:13",
  "condition": [
   "global_model"
  ],
  "consequent": [
   "convert_to_tensor"
  ]
 },
 {
  "number": 4852,
  "sha": "60613a8729122012c3f6739550de981d01087326",
  "author": "raymond-yuan",
  "created_at": "2018-07-20 23:11:13",
  "condition": [
   "${0:NAME} = tf_wrap(${1:NAME}.array(${2:NAME})[:, None]) - ${3:NAME}"
  ],
  "consequent": [
   "${0:NAME} = tf.convert_to_tensor(${1:NAME}.array(${2:NAME})[:, None],",
   "                         dtype=tf.float32) - ${3:NAME}"
  ]
 },
 {
  "number": 4852,
  "sha": "60613a8729122012c3f6739550de981d01087326",
  "author": "raymond-yuan",
  "created_at": "2018-07-20 23:11:13",
  "condition": [
   "total_loss = ${0:NAME}.reduce_mean((value_loss + ${1:NAME}))"
  ],
  "consequent": [
   "${1:NAME} *= ${0:NAME}.stop_gradient(advantage)"
  ]
 },
 {
  "number": 4614,
  "sha": "ddee8c74a282fc64929323f45e87b58e47173667",
  "author": "cshallue",
  "created_at": "2018-06-24 05:05:07",
  "condition": [
   "def read_and_process_light_curve(${0:NAME}, ${1:NAME}, max_gap_width=0.75):",
   "\t${2:STRING}\"${3:NAME} ${4:NAME} ${5:NAME} ${6:NAME}, fits ${4:NAME} B-spline and divides the ${6:NAME} by the spline."
  ],
  "consequent": [
   "def read_light_curve(${0:NAME}, ${1:NAME}):",
   "\t${2:STRING}\"${3:NAME} ${4:NAME} Kepler ${5:NAME} ${6:NAME}."
  ]
 },
 {
  "number": 4614,
  "sha": "ddee8c74a282fc64929323f45e87b58e47173667",
  "author": "cshallue",
  "created_at": "2018-06-24 05:05:07",
  "condition": [
   "${0:NAME} = ${1:NAME}.concatenate([${1:NAME}.diff(${2:NAME}) / ${1:NAME}.sqrt(${3:NUMBER}) for ${2:NAME} in ${4:NAME}])"
  ],
  "consequent": [
   "${0:NAME} = [${1:NAME}.diff(${2:NAME}) / ${1:NAME}.sqrt(${3:NUMBER}) for ${2:NAME} in ${4:NAME}]"
  ]
 },
 {
  "number": 4614,
  "sha": "ddee8c74a282fc64929323f45e87b58e47173667",
  "author": "cshallue",
  "created_at": "2018-06-24 05:05:07",
  "condition": [
   "${0:NAME}, ${1:NAME} = ${2:NAME}.split(${0:NAME}, ${1:NAME}, ${3:NAME}=max_gap_width)"
  ],
  "consequent": [
   "${0:NAME}, ${1:NAME} = ${2:NAME}.split(${0:NAME}, ${1:NAME}, ${3:NAME}=0.75)"
  ]
 },
 {
  "number": 4614,
  "sha": "ddee8c74a282fc64929323f45e87b58e47173667",
  "author": "cshallue",
  "created_at": "2018-06-24 05:05:07",
  "condition": [
   "${0:NAME}: ${1:NAME} ${2:NAME} ${3:NUMBER}${4:NAME} ${5:NAME} ${6:NAME}; ${7:NAME} flux (brightness) ${8:NAME} ${2:NAME} ${7:NAME} ${9:NAME}"
  ],
  "consequent": [
   "${0:NAME}: ${1:NAME} ${2:NAME} ${3:NUMBER}${4:NAME} ${5:NAME} ${6:NAME}; ${7:NAME} flux ${8:NAME} ${2:NAME} ${7:NAME} ${9:NAME} curve."
  ]
 },
 {
  "number": 4614,
  "sha": "ddee8c74a282fc64929323f45e87b58e47173667",
  "author": "cshallue",
  "created_at": "2018-06-24 05:05:07",
  "condition": [
   "flux: 1D NumPy array; ${0:NAME} normalized flux values ${1:NAME} ${0:NAME} light curve."
  ],
  "consequent": [
   "all_flux: A list ${1:NAME} numpy arrays corresponding to ${0:NAME} time arrays in",
   "\tall_time."
  ]
 },
 {
  "number": 4614,
  "sha": "ddee8c74a282fc64929323f45e87b58e47173667",
  "author": "cshallue",
  "created_at": "2018-06-24 05:05:07",
  "condition": [
   "all_time, all_flux = ${0:NAME}.read_kepler_light_curve(${1:NAME})"
  ],
  "consequent": [
   "return ${0:NAME}.read_kepler_light_curve(${1:NAME})"
  ]
 },
 {
  "number": 4614,
  "sha": "ddee8c74a282fc64929323f45e87b58e47173667",
  "author": "cshallue",
  "created_at": "2018-06-24 05:05:07",
  "condition": [
   "${0:NAME}: 1D NumPy array; ${1:NAME} ${0:NAME} ${2:NAME} ${3:NAME} ${1:NAME} ${4:NAME} ${5:NAME}."
  ],
  "consequent": [
   "all_time: A list ${3:NAME} numpy arrays; ${1:NAME} ${0:NAME} ${2:NAME} ${3:NAME} ${1:NAME} raw ${4:NAME} ${5:NAME}."
  ]
 },
 {
  "number": 4570,
  "sha": "20da056d32106cca5b8fce4d44fb415754b1eb1e",
  "author": "djoshea",
  "created_at": "2018-06-18 22:37:42",
  "condition": [
   "averaged"
  ],
  "consequent": [
   "estimated"
  ]
 },
 {
  "number": 4570,
  "sha": "20da056d32106cca5b8fce4d44fb415754b1eb1e",
  "author": "djoshea",
  "created_at": "2018-06-18 22:37:42",
  "condition": [
   "${0:STRING}\"${1:NAME} ${2:NAME} value for goodies for ${2:NAME} entire ${3:NAME} using ${2:NAME} ${4:NAME}"
  ],
  "consequent": [
   "${0:STRING}\"${1:NAME} values of interest for ${2:NAME}  ${3:NAME} by pushing ${2:NAME} ${4:NAME} through"
  ]
 },
 {
  "number": 4570,
  "sha": "20da056d32106cca5b8fce4d44fb415754b1eb1e",
  "author": "djoshea",
  "created_at": "2018-06-18 22:37:42",
  "condition": [
   "def _case_with_no_default(pairs):",
   "\tdef _default_value_fn():",
   "\twith ${0:NAME}.control_dependencies([${0:NAME}.Assert(False, [\"Reached default\"])]):",
   "\treturn ${0:NAME}.identity(pairs[0][1]())",
   "  return ${0:NAME}.case(pairs, _default_value_fn, ${1:NAME}=True)",
   "${2:NAME} = _case_with_no_default(${3:NAME})",
   "this_in_fac_b = _case_with_no_default(pf_pairs_in_fac_bs)",
   "this_out_fac_W = _case_with_no_default(pf_pairs_out_fac_Ws)",
   "this_out_fac_b = _case_with_no_default(pf_pairs_out_fac_bs)"
  ],
  "consequent": [
   "${2:NAME} = ${0:NAME}.case(${3:NAME}, ${1:NAME}=True)"
  ]
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "created_at": "2018-06-15 19:26:41",
  "condition": [
   "${0:NAME}.append(${1:NAME})"
  ],
  "consequent": [
   "metadata.${0:NAME}.append(${1:NAME})"
  ]
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "created_at": "2018-06-15 19:26:41",
  "condition": [
   "spline_mask: List of boolean numpy arrays indicating which points in ${0:NAME}",
   "\tflux arrays were used to ${1:NAME} ${0:NAME} best-${1:NAME} ${2:NAME}.",
   "bkspace: The break-point spacing used for ${0:NAME} best-${1:NAME} ${2:NAME}.",
   "bad_bkspaces: List of break-point spacing values that failed."
  ],
  "consequent": [
   "metadata: Object containing metadata about ${0:NAME} ${2:NAME} ${1:NAME}."
  ]
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "created_at": "2018-06-15 19:26:41",
  "condition": [
   "${0:NAME}.assertEmpty(${1:NAME})"
  ],
  "consequent": [
   "${0:NAME}.assertEmpty(metadata.${1:NAME})"
  ]
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "created_at": "2018-06-15 19:26:41",
  "condition": [
   "if len(${0:NAME}) > 0:",
   "                                         "
  ],
  "consequent": [
   "if ${0:NAME}.size:"
  ]
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "created_at": "2018-06-15 19:26:41",
  "condition": [
   "best_bkspace = ${0:NAME}"
  ],
  "consequent": [
   "metadata.${0:NAME} = ${0:NAME}"
  ]
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "created_at": "2018-06-15 19:26:41",
  "condition": [
   "${0:NAME}.assertLen(${1:NAME}, 2)"
  ],
  "consequent": [
   "${0:NAME}.assertLen(${1:NAME}, 3)"
  ]
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "created_at": "2018-06-15 19:26:41",
  "condition": [
   "assertAlmostEqual"
  ],
  "consequent": [
   "all_flux"
  ]
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "created_at": "2018-06-15 19:26:41",
  "condition": [
   "if best_bic is None or ${0:NAME} < best_bic:"
  ],
  "consequent": [
   "if best_spline is None or ${0:NAME} < metadata.${0:NAME}:"
  ]
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "created_at": "2018-06-15 19:26:41",
  "condition": [
   "${0:NAME}.assertLen(${1:NAME}, 3)"
  ],
  "consequent": [
   "${0:NAME}.assertLen(${1:NAME}, 4)"
  ]
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "created_at": "2018-06-15 19:26:41",
  "condition": [
   "testKeplerSplineCubic"
  ],
  "consequent": [
   "testFitCubic"
  ]
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "created_at": "2018-06-15 19:26:41",
  "condition": [
   "${0:NAME} = ${1:NAME} + ${2:NAME} * nparams * np.log(npoints)"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME} + ${2:NAME} * penalty_term"
  ]
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "created_at": "2018-06-15 19:26:41",
  "condition": [
   "${0:NAME}, mask, bkspace, bad_bkspaces = ${1:NAME}.choose_kepler_spline("
  ],
  "consequent": [
   "${0:NAME}, metadata = ${1:NAME}.choose_kepler_spline("
  ]
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "created_at": "2018-06-15 19:26:41",
  "condition": [
   "spline_mask"
  ],
  "consequent": [
   "light_curve_mask"
  ]
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "created_at": "2018-06-15 19:26:41",
  "condition": [
   "time, flux, ${0:NAME}, ${1:NAME}=${2:NUMBER})"
  ],
  "consequent": [
   "all_time, all_flux, ${0:NAME}, ${1:NAME}=${2:NUMBER})"
  ]
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "created_at": "2018-06-15 19:26:41",
  "condition": [
   "${0:NAME}.assertTrue(${1:NAME}.all(mask))"
  ],
  "consequent": [
   "${0:NAME}.assertTrue(${1:NAME}.all(metadata.light_curve_mask))"
  ]
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "created_at": "2018-06-15 19:26:41",
  "condition": [
   "flux = [${0:NAME}.sin(${1:NAME}) for ${1:NAME} in time]"
  ],
  "consequent": [
   "all_flux = [${0:NAME}.sin(${1:NAME}) for ${1:NAME} in all_time]"
  ]
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "created_at": "2018-06-15 19:26:41",
  "condition": [
   "testKeplerSplineSine"
  ],
  "consequent": [
   "testFitSine"
  ]
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "created_at": "2018-06-15 19:26:41",
  "condition": [
   "best_spline_mask = spline_mask"
  ],
  "consequent": [
   "metadata.light_curve_mask = light_curve_mask"
  ]
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "created_at": "2018-06-15 19:26:41",
  "condition": [
   "${0:NAME}.assertSequenceAlmostEqual(",
   "     [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ${1:NAME}[${2:NUMBER}])"
  ],
  "consequent": [
   "${0:NAME}.assertSequenceAlmostEqual(np.ones(15), ${1:NAME}[${2:NUMBER}])"
  ]
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "created_at": "2018-06-15 19:26:41",
  "condition": [
   "${0:NAME}.assertSequenceAlmostEqual([${1:NUMBER}, ${1:NUMBER}, ${1:NUMBER}, ${1:NUMBER}, ${1:NUMBER}], ${2:NAME}[${1:NUMBER}])"
  ],
  "consequent": [
   "${0:NAME}.assertSequenceAlmostEqual(np.ones(5), ${2:NAME}[${1:NUMBER}])"
  ]
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "created_at": "2018-06-15 19:26:41",
  "condition": [
   "assertRaises"
  ],
  "consequent": [
   "InsufficientPointsError"
  ]
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "created_at": "2018-06-15 19:26:41",
  "condition": [
   "${0:NAME}.assertSequenceAlmostEqual(",
   "     [3., 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9], ${1:NAME}[${2:NUMBER}])"
  ],
  "consequent": [
   "${0:NAME}.assertSequenceAlmostEqual(np.arange(3, 4, 0.1), ${1:NAME}[${2:NUMBER}])"
  ]
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "created_at": "2018-06-15 19:26:41",
  "condition": [
   "${0:NAME}.assertAlmostEqual(${1:NAME}, ${2:NUMBER})"
  ],
  "consequent": [
   "${0:NAME}.assertAlmostEqual(metadata.${1:NAME}, ${2:NUMBER})"
  ]
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "created_at": "2018-06-15 19:26:41",
  "condition": [
   "time"
  ],
  "consequent": [
   "all_time"
  ]
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "created_at": "2018-06-15 19:26:41",
  "condition": [
   "${0:NAME}.append(${1:NAME}.full_like(${2:NAME}, ${1:NAME}.${3:NAME}))"
  ],
  "consequent": [
   "${0:NAME}.append(${1:NAME}.array([${1:NAME}.${3:NAME}] * len(${2:NAME})))"
  ]
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "created_at": "2018-06-15 19:26:41",
  "condition": [
   "${0:NAME}.assertSequenceAlmostEqual(",
   "     [0., ${1:NUMBER}, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], ${2:NAME}[0])"
  ],
  "consequent": [
   "${0:NAME}.assertSequenceAlmostEqual(np.arange(1.5, 2, ${1:NUMBER}), ${2:NAME}[1])"
  ]
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "created_at": "2018-05-05 13:49:33",
  "condition": [
   "class MnistInfoGANEvalTest(tf.test.${0:NAME}):"
  ],
  "consequent": [
   "class MnistInfoGANEvalTest(absltest.${0:NAME}):"
  ]
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "created_at": "2018-05-05 13:49:33",
  "condition": [
   "class TrainTest(${0:NAME}.${1:NAME}.${2:NAME}):"
  ],
  "consequent": [
   "class TrainTest(${0:NAME}.${1:NAME}.${2:NAME}, parameterized.${2:NAME}):"
  ]
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "created_at": "2018-05-05 13:49:33",
  "condition": [
   "${0:NAME} = ${1:NAME}.${2:NAME}.join(${3:NAME}._get_testdata_dir(), ${4:STRING})"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.${2:NAME}.join(${3:NAME}.testdata_dir, ${4:STRING})"
  ]
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "created_at": "2018-05-05 13:49:33",
  "condition": [
   "import tensorflow as tf"
  ],
  "consequent": [
   "from absl import flags"
  ]
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "created_at": "2018-05-05 13:49:33",
  "condition": [
   "def _test_build_graph_helper(${0:NAME}, ${1:NAME}):"
  ],
  "consequent": [
   "@parameterized.named_parameters(",
   "     ('Unconditional', 'unconditional'),",
   "     ('Conditional', 'conditional'),",
   "     ('InfoGAN', 'infogan'))",
   "def test_build_graph(${0:NAME}, ${1:NAME}):"
  ]
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "created_at": "2018-05-05 13:49:33",
  "condition": [
   "tf.test.main()"
  ],
  "consequent": [
   "absltest.main()"
  ]
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "created_at": "2018-05-05 13:49:33",
  "condition": [
   "class ConditionalEvalTest(tf.test.${0:NAME}):"
  ],
  "consequent": [
   "class ConditionalEvalTest(absltest.${0:NAME}):"
  ]
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "created_at": "2018-05-05 13:49:33",
  "condition": [
   "import tensorflow as tf"
  ],
  "consequent": [
   "from absl.testing import absltest"
  ]
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "created_at": "2018-05-05 13:49:33",
  "condition": [
   "tf.${0:NAME}.info('dir_path: {}'.format(${1:NAME}.listdir(${2:NAME}.${3:NAME})))"
  ],
  "consequent": [
   "${0:NAME}.info('dir_path: %s', ${1:NAME}.listdir(${2:NAME}.${3:NAME}))"
  ]
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "created_at": "2018-05-05 13:49:33",
  "condition": [
   "import numpy as np"
  ],
  "consequent": [
   "from absl import flags"
  ]
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "created_at": "2018-05-05 13:49:33",
  "condition": [
   "class EvalTest(tf.test.${0:NAME}):"
  ],
  "consequent": [
   "class EvalTest(parameterized.${0:NAME}):"
  ]
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "created_at": "2018-05-05 13:49:33",
  "condition": [
   "class EvalTest(${0:NAME}.${1:NAME}.${2:NAME}):"
  ],
  "consequent": [
   "class EvalTest(${0:NAME}.${1:NAME}.${2:NAME}, parameterized.${2:NAME}):"
  ]
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "created_at": "2018-05-05 13:49:33",
  "condition": [
   "def _test_build_graph_helper(${0:NAME}, ${1:NAME}):"
  ],
  "consequent": [
   "@parameterized.named_parameters(",
   "     ('NoAdversarialLoss', 0.0),",
   "     ('AdversarialLoss', 1.0))",
   "def test_build_graph(${0:NAME}, ${1:NAME}):"
  ]
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "created_at": "2018-05-05 13:49:33",
  "condition": [
   "tf.${0:NAME}.info('Testing {} for realism.'.format(${1:NAME}))"
  ],
  "consequent": [
   "${0:NAME}.info('Testing %s for realism.', ${1:NAME})"
  ]
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "created_at": "2018-05-05 13:49:33",
  "condition": [
   "def _test_build_graph_helper(${0:NAME}, ${1:NAME}, ${2:NAME}):"
  ],
  "consequent": [
   "@parameterized.named_parameters(",
   "     ('RealData', True, False),",
   "     ('GeneratedData', False, False),",
   "     ('GeneratedDataConditional', False, True))",
   "def test_build_graph(${0:NAME}, ${1:NAME}, ${2:NAME}):"
  ]
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "created_at": "2018-05-05 13:49:33",
  "condition": [
   "tf.${0:NAME}.run()"
  ],
  "consequent": [
   "${0:NAME}.run(main)"
  ]
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "created_at": "2018-05-05 13:49:33",
  "condition": [
   "def _test_data_provider_helper(${0:NAME}, ${1:NAME}):"
  ],
  "consequent": [
   "@parameterized.named_parameters(",
   "     ('train', 'train'),",
   "     ('validation', 'validation'))",
   "def test_data_provider(${0:NAME}, ${1:NAME}):"
  ]
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "created_at": "2018-05-05 13:49:33",
  "condition": [
   "class DataProviderTest(${0:NAME}.${1:NAME}.${2:NAME}):"
  ],
  "consequent": [
   "class DataProviderTest(${0:NAME}.${1:NAME}.${2:NAME}, parameterized.${2:NAME}):"
  ]
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "created_at": "2018-05-05 13:49:33",
  "condition": [
   "${0:NAME} = tf.${0:NAME}"
  ],
  "consequent": [
   "FLAGS = ${0:NAME}.FLAGS"
  ]
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "created_at": "2018-05-05 13:49:33",
  "condition": [
   "def _test_build_graph_helper(${0:NAME}, ${1:NAME}):"
  ],
  "consequent": [
   "@parameterized.named_parameters(",
   "     ('RealData', True),",
   "     ('GeneratedData', False))",
   "def test_build_graph(${0:NAME}, ${1:NAME}):"
  ]
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "created_at": "2018-05-05 13:49:33",
  "condition": [
   "${0:NAME}, ${1:NAME} = ${2:NAME}.cyclegan_generator_resnet(${3:NAME})"
  ],
  "consequent": [
   "${0:NAME}, ${1:NAME} = ${2:NAME}.cyclegan_generator_resnet(${3:NAME},",
   "                                                       num_outputs=channels)"
  ]
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "created_at": "2018-05-05 13:49:33",
  "condition": [
   "tf.${0:NAME}.info('gen x: {}'.format(${1:NAME}.listdir(${2:NAME}.${3:NAME})))"
  ],
  "consequent": [
   "${0:NAME}.info('gen x: %s', ${1:NAME}.listdir(${2:NAME}.${3:NAME}))"
  ]
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "created_at": "2018-05-05 13:49:33",
  "condition": [
   "def _test_build_graph_helper(${0:NAME}, ${1:NAME}, ${2:NAME}):"
  ],
  "consequent": [
   "@parameterized.named_parameters(",
   "     ('Unconditional', False, False),",
   "     ('Conditional', True, False),",
   "     ('SyncReplicas', False, True))",
   "def test_build_graph_helper(${0:NAME}, ${1:NAME}, ${2:NAME}):"
  ]
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "created_at": "2018-05-05 13:49:33",
  "condition": [
   "${0:NAME}.${1:NAME}.add_image_comparison_summaries(",
   "     ${2:NAME}, num_comparisons=3, display_diffs=False)"
  ],
  "consequent": [
   "${0:NAME}.${1:NAME}.add_cyclegan_image_summaries(${2:NAME})"
  ]
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "created_at": "2018-05-05 13:49:33",
  "condition": [
   "tf.${0:NAME}.set_verbosity(tf.${0:NAME}.${1:NAME})"
  ],
  "consequent": [
   "${0:NAME}.set_verbosity(${0:NAME}.${1:NAME})"
  ]
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "created_at": "2018-05-05 13:49:33",
  "condition": [
   "tf.${0:NAME}.run()"
  ],
  "consequent": [
   "${0:NAME}.run()"
  ]
 },
 {
  "number": 4084,
  "sha": "4cfb259f02135f6e5b5a8f965833f6a5ab7672d9",
  "author": "XinyueZ",
  "created_at": "2018-04-25 14:25:39",
  "condition": [
   "${0:NAME} = ${1:NAME}.evaluate(${2:NAME}=automobile_data.from_dataset(test))"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.evaluate(${2:NAME}=test_input_fn)"
  ]
 },
 {
  "number": 4084,
  "sha": "4cfb259f02135f6e5b5a8f965833f6a5ab7672d9",
  "author": "XinyueZ",
  "created_at": "2018-04-25 14:25:39",
  "condition": [
   "${0:NAME} = ${1:NAME}.predict(${2:NAME}=automobile_data.from_dataset(${3:NAME}))"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.${3:NAME}(${2:NAME}=predict_input_fn)"
  ]
 },
 {
  "number": 4084,
  "sha": "4cfb259f02135f6e5b5a8f965833f6a5ab7672d9",
  "author": "XinyueZ",
  "created_at": "2018-04-25 14:25:39",
  "condition": [
   "make_dataset"
  ],
  "consequent": [
   "train_input_fn"
  ]
 },
 {
  "number": 4084,
  "sha": "4cfb259f02135f6e5b5a8f965833f6a5ab7672d9",
  "author": "XinyueZ",
  "created_at": "2018-04-25 14:25:39",
  "condition": [
   "${0:NAME}.train(${1:NAME}=automobile_data.from_dataset(${2:NAME}), ${3:NAME}=${4:NAME}.${5:NAME})"
  ],
  "consequent": [
   "${0:NAME}.${2:NAME}(${1:NAME}=train_input_fn, ${3:NAME}=${4:NAME}.${5:NAME})"
  ]
 },
 {
  "number": 3853,
  "sha": "13c9de3965168b97cd78d30650efbbe5bd8edd02",
  "author": "walkerlala",
  "created_at": "2018-04-03 12:06:49",
  "condition": [
   "${0:NAME}: dataset split (${1:NAME}.${2:NAME}., ${3:NAME}, ${4:NAME})"
  ],
  "consequent": [
   "${0:NAME}: Dataset split (${1:NAME}.${2:NAME}., ${3:NAME}, ${4:NAME})."
  ]
 },
 {
  "number": 3853,
  "sha": "13c9de3965168b97cd78d30650efbbe5bd8edd02",
  "author": "walkerlala",
  "created_at": "2018-04-03 12:06:49",
  "condition": [
   "def get_extra_layer_scopes():"
  ],
  "consequent": [
   "def get_extra_layer_scopes(last_layers_contain_logits_only=False):"
  ]
 },
 {
  "number": 3853,
  "sha": "13c9de3965168b97cd78d30650efbbe5bd8edd02",
  "author": "walkerlala",
  "created_at": "2018-04-03 12:06:49",
  "condition": [
   "${0:NAME} = glob.glob(${1:NAME}.${2:NAME}.join(${3:NAME}, ${4:STRING}))"
  ],
  "consequent": [
   "${0:NAME} = tf.gfile.Glob(${1:NAME}.${2:NAME}.join(${3:NAME}, ${4:STRING}))"
  ]
 },
 {
  "number": 3853,
  "sha": "13c9de3965168b97cd78d30650efbbe5bd8edd02",
  "author": "walkerlala",
  "created_at": "2018-04-03 12:06:49",
  "condition": [
   "${0:NAME} = glob.glob(${1:NAME}.${2:NAME}.join(${3:NAME}.${4:NAME}, ${5:STRING}))"
  ],
  "consequent": [
   "${0:NAME} = tf.gfile.Glob(${1:NAME}.${2:NAME}.join(${3:NAME}.${4:NAME}, ${5:STRING}))"
  ]
 },
 {
  "number": 3853,
  "sha": "13c9de3965168b97cd78d30650efbbe5bd8edd02",
  "author": "walkerlala",
  "created_at": "2018-04-03 12:06:49",
  "condition": [
   "${0:NAME} = ${1:NAME}.get_extra_layer_scopes()"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.get_extra_layer_scopes(FLAGS.last_layers_contain_logits_only)"
  ]
 },
 {
  "number": 3853,
  "sha": "13c9de3965168b97cd78d30650efbbe5bd8edd02",
  "author": "walkerlala",
  "created_at": "2018-04-03 12:06:49",
  "condition": [
   "${0:NAME} = int(${1:NAME}.ceil(${2:NAME}) / float(${3:NAME}))"
  ],
  "consequent": [
   "${0:NAME} = int(${1:NAME}.ceil(${2:NAME} / float(${3:NAME})))"
  ]
 },
 {
  "number": 3853,
  "sha": "13c9de3965168b97cd78d30650efbbe5bd8edd02",
  "author": "walkerlala",
  "created_at": "2018-04-03 12:06:49",
  "condition": [
   "Convert"
  ],
  "consequent": [
   "Converts"
  ]
 },
 {
  "number": 3853,
  "sha": "13c9de3965168b97cd78d30650efbbe5bd8edd02",
  "author": "walkerlala",
  "created_at": "2018-04-03 12:06:49",
  "condition": [
   "${0:NAME}: dir in ${1:NAME} ${2:NAME} ${3:NAME} ${4:NAME}"
  ],
  "consequent": [
   "${0:NAME}: Dir in ${1:NAME} ${2:NAME} ${3:NAME} ${4:NAME}."
  ]
 },
 {
  "number": 3852,
  "sha": "279aa927d0160a7f08e48f17b83250ebbf7b866d",
  "author": "DefineFC",
  "created_at": "2018-04-03 08:32:41",
  "condition": [
   "for ${0:NAME}, ${1:NAME} in ${2:NAME}.iteritems():"
  ],
  "consequent": [
   "for ${0:NAME}, ${1:NAME} in six.iteritems(${2:NAME}):"
  ]
 },
 {
  "number": 3852,
  "sha": "279aa927d0160a7f08e48f17b83250ebbf7b866d",
  "author": "DefineFC",
  "created_at": "2018-04-03 08:32:41",
  "condition": [
   "${0:NAME} = ${1:NAME}.${2:NAME}.FastGFile(${3:NAME}[${4:NAME}], 'r').read()"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.${2:NAME}.FastGFile(${3:NAME}[${4:NAME}], 'rb').read()"
  ]
 },
 {
  "number": 3852,
  "sha": "279aa927d0160a7f08e48f17b83250ebbf7b866d",
  "author": "DefineFC",
  "created_at": "2018-04-03 08:32:41",
  "condition": [
   "${0:NAME} = ${1:NAME}.${2:NAME}.FastGFile(${3:NAME}, 'r').read()"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.${2:NAME}.FastGFile(${3:NAME}, 'rb').read()"
  ]
 },
 {
  "number": 3852,
  "sha": "279aa927d0160a7f08e48f17b83250ebbf7b866d",
  "author": "DefineFC",
  "created_at": "2018-04-03 08:32:41",
  "condition": [
   "${0:NAME}=${1:NAME}.values(),"
  ],
  "consequent": [
   "${0:NAME}=list(${1:NAME}.values()),"
  ]
 },
 {
  "number": 3712,
  "sha": "a305455e16cc481d9705ead496d7109d5114d6fc",
  "author": "rzumer",
  "created_at": "2018-03-23 03:57:02",
  "condition": [
   "${0:NAME} = ${1:NAME}.read()"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.read('rb')"
  ]
 },
 {
  "number": 3712,
  "sha": "a305455e16cc481d9705ead496d7109d5114d6fc",
  "author": "rzumer",
  "created_at": "2018-03-23 03:57:02",
  "condition": [
   "with ${0:NAME}.${1:NAME}.FastGFile(${2:NAME}.${3:NAME}, 'r') as ${4:NAME}:"
  ],
  "consequent": [
   "with ${0:NAME}.${1:NAME}.FastGFile(${2:NAME}.${3:NAME}, 'rb') as ${4:NAME}:"
  ]
 },
 {
  "number": 3622,
  "sha": "14b8bf2521fa7fc0bd8ff631b808a418cb75f930",
  "author": "cshallue",
  "created_at": "2018-03-16 00:51:10",
  "condition": [
   "for ${0:NAME}, ${1:NAME}, ${2:NAME} in itertools.izip("
  ],
  "consequent": [
   "for ${0:NAME}, ${1:NAME}, ${2:NAME} in zip("
  ]
 },
 {
  "number": 3622,
  "sha": "14b8bf2521fa7fc0bd8ff631b808a418cb75f930",
  "author": "cshallue",
  "created_at": "2018-03-16 00:51:10",
  "condition": [
   "for ${0:NAME}, ${1:NAME} in itertools.izip(${2:NAME}, ${3:NAME}):"
  ],
  "consequent": [
   "for ${0:NAME}, ${1:NAME} in zip(${2:NAME}, ${3:NAME}):"
  ]
 },
 {
  "number": 3622,
  "sha": "14b8bf2521fa7fc0bd8ff631b808a418cb75f930",
  "author": "cshallue",
  "created_at": "2018-03-16 00:51:10",
  "condition": [
   "iteritems"
  ],
  "consequent": [
   "items"
  ]
 },
 {
  "number": 3622,
  "sha": "14b8bf2521fa7fc0bd8ff631b808a418cb75f930",
  "author": "cshallue",
  "created_at": "2018-03-16 00:51:10",
  "condition": [
   "with ${0:NAME}.open(open(${1:NAME}, \"r\")) as ${2:NAME}:"
  ],
  "consequent": [
   "with ${0:NAME}.open(open(${1:NAME}, \"rb\")) as ${2:NAME}:"
  ]
 },
 {
  "number": 3622,
  "sha": "14b8bf2521fa7fc0bd8ff631b808a418cb75f930",
  "author": "cshallue",
  "created_at": "2018-03-16 00:51:10",
  "condition": [
   "_set_bytes_feature(${0:NAME}, ${1:NAME}, [str(${2:NAME})])"
  ],
  "consequent": [
   "_set_bytes_feature(${0:NAME}, ${1:NAME}, [${2:NAME}])"
  ]
 },
 {
  "number": 3622,
  "sha": "14b8bf2521fa7fc0bd8ff631b808a418cb75f930",
  "author": "cshallue",
  "created_at": "2018-03-16 00:51:10",
  "condition": [
   "${0:NAME}.${1:NAME}.${2:NAME}[${3:NAME}].${4:NAME}.${5:NAME}.extend([str(${6:NAME}) for ${6:NAME} in ${5:NAME}])"
  ],
  "consequent": [
   "${0:NAME}.${1:NAME}.${2:NAME}[${3:NAME}].${4:NAME}.${5:NAME}.extend([",
   "     str(${6:NAME}).encode(\"latin-1\") for ${6:NAME} in ${5:NAME}])"
  ]
 },
 {
  "number": 3619,
  "sha": "0308e7e1799cac46b7211d6dda158d9842a02222",
  "author": "qlzh727",
  "created_at": "2018-03-15 20:39:50",
  "condition": [
   "def ptb_raw_data(${0:NAME}):"
  ],
  "consequent": [
   "def ptb_raw_data(${0:NAME}=None):"
  ]
 },
 {
  "number": 3534,
  "sha": "c173bd9bfe614f79638aa3b244ecb91205017064",
  "author": "MTDzi",
  "created_at": "2018-03-06 20:36:37",
  "condition": [
   "iteritems"
  ],
  "consequent": [
   "len"
  ]
 },
 {
  "number": 3534,
  "sha": "c173bd9bfe614f79638aa3b244ecb91205017064",
  "author": "MTDzi",
  "created_at": "2018-03-06 20:36:37",
  "condition": [
   "with ${0:NAME}.${1:NAME}.GFile(${2:NAME} % ${3:STRING}) as ${4:NAME}:"
  ],
  "consequent": [
   "with ${0:NAME}.${1:NAME}.GFile(${2:NAME} % ${3:STRING}, 'rb') as ${4:NAME}:"
  ]
 },
 {
  "number": 3534,
  "sha": "c173bd9bfe614f79638aa3b244ecb91205017064",
  "author": "MTDzi",
  "created_at": "2018-03-06 20:36:37",
  "condition": [
   "itervalues"
  ],
  "consequent": [
   "values"
  ]
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "created_at": "2018-02-28 19:29:50",
  "condition": [
   "${0:NAME} = ${1:NAME}.array([${2:NUMBER}, ${2:NUMBER}, ${3:NUMBER}])"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.array([${2:NUMBER}, ${2:NUMBER}, ${3:NUMBER}], dtype=${1:NAME}.int32)"
  ]
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "created_at": "2018-02-28 19:29:50",
  "condition": [
   "${0:NAME} = config_util.create_pipeline_proto_from_configs("
  ],
  "consequent": [
   "${0:NAME} = create_pipeline_proto_from_configs("
  ]
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "created_at": "2018-02-28 19:29:50",
  "condition": [
   "'area': float((${0:NAME}[${1:NAME}, ${2:NUMBER}] - ${0:NAME}[${1:NAME}, ${3:NUMBER}]) *"
  ],
  "consequent": [
   "float((${0:NAME}[${1:NAME}, ${2:NUMBER}] - ${0:NAME}[${1:NAME}, ${3:NUMBER}]) *"
  ]
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "created_at": "2018-02-28 19:29:50",
  "condition": [
   "nms = box_list_ops.non_max_suppression(",
   "     boxes, iou_thresh, max_output_size)"
  ],
  "consequent": [
   "with self.assertRaisesWithPredicateMatch(ValueError,"
  ]
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "created_at": "2018-02-28 19:29:50",
  "condition": [
   "${0:NAME} = ${1:NAME}.SyncReplicasOptimizer("
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.train.SyncReplicasOptimizer("
  ]
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "created_at": "2018-02-28 19:29:50",
  "condition": [
   "${0:NAME} = inputs.create_train_input_fn("
  ],
  "consequent": [
   "${0:NAME} = create_train_input_fn("
  ]
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "created_at": "2018-02-28 19:29:50",
  "condition": [
   "${0:NAME} = ${1:NAME}.array([${2:NUMBER}, ${2:NUMBER}, ${2:NUMBER}, ${2:NUMBER}, ${2:NUMBER}, ${2:NUMBER}])"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.array([${2:NUMBER}, ${2:NUMBER}, ${2:NUMBER}, ${2:NUMBER}, ${2:NUMBER}, ${2:NUMBER}], dtype=${1:NAME}.int32)"
  ]
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "created_at": "2018-02-28 19:29:50",
  "condition": [
   "if len(${0:NAME}) == ${1:NUMBER}:"
  ],
  "consequent": [
   "if (len(${0:NAME}) == ${1:NUMBER}",
   "     and (isinstance(${0:NAME}, list)",
   "          or isinstance(${0:NAME}, tuple))):"
  ]
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "created_at": "2018-02-28 19:29:50",
  "condition": [
   "${0:NAME}.",
   "ExportSingleImageGroundtruthToCoco("
  ],
  "consequent": [
   "${0:NAME}.ExportSingleImageGroundtruthToCoco("
  ]
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "created_at": "2018-02-28 19:29:50",
  "condition": [
   "tf_op_output"
  ],
  "consequent": [
   "assertAllClose"
  ]
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "created_at": "2018-02-28 19:29:50",
  "condition": [
   "${0:NAME}, ${1:NAME} = ${2:NAME}.build_nasnet_large("
  ],
  "consequent": [
   "with arg_scope([slim.conv2d,",
   "                 slim.batch_norm,",
   "                 slim.separable_conv2d],",
   "                reuse=self._reuse_weights):",
   "\t${0:NAME}, ${1:NAME} = ${2:NAME}.build_nasnet_large("
  ]
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "created_at": "2018-02-28 19:29:50",
  "condition": [
   "output_dict[detection_fields.${0:NAME}] = (",
   "     ${1:NAME}.get())"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.get()"
  ]
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "created_at": "2018-02-28 19:29:50",
  "condition": [
   "${0:NAME}=inputs.create_predict_input_fn("
  ],
  "consequent": [
   "${0:NAME}=create_predict_input_fn("
  ]
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "created_at": "2018-02-28 19:29:50",
  "condition": [
   "aspect_ratio_range = [(${0:NAME}.${1:NAME}, ${0:NAME}.${2:NAME})"
  ],
  "consequent": [
   "kwargs['aspect_ratio_range'] = [(${0:NAME}.${1:NAME}, ${0:NAME}.${2:NAME})",
   "                                 for ${0:NAME} in config.operations]"
  ]
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "created_at": "2018-02-28 19:29:50",
  "condition": [
   "area_range = [(${0:NAME}.min_area, ${0:NAME}.max_area) for ${0:NAME} in ${1:NAME}.${2:NAME}]"
  ],
  "consequent": [
   "kwargs['overlap_thresh'] = [${0:NAME}.overlap_thresh for ${0:NAME} in ${1:NAME}.${2:NAME}]"
  ]
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "created_at": "2018-02-28 19:29:50",
  "condition": [
   "${0:NAME} = ${1:NAME}.array([${2:NUMBER}, ${3:NUMBER}, ${4:NUMBER}])"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.array([${2:NUMBER}, ${3:NUMBER}, ${4:NUMBER}], dtype=${1:NAME}.int32)"
  ]
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "created_at": "2018-02-28 19:29:50",
  "condition": [
   "${0:NAME} = ${1:NAME}.reshape(${1:NAME}.arange(${2:NUMBER}**${3:NUMBER}), [${2:NUMBER}, ${2:NUMBER}, ${2:NUMBER}, ${2:NUMBER}])"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.reshape(${1:NAME}.arange(${3:NUMBER}).astype(${1:NAME}.float32), [1, ${2:NUMBER}, ${2:NUMBER}, 1])"
  ]
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "created_at": "2018-02-28 19:29:50",
  "condition": [
   "tf_op_output = tf.image.resize_images(",
   "     inputs, [4, 4], method=tf.image.ResizeMethod.NEAREST_NEIGHBOR)"
  ],
  "consequent": [
   "return custom_op_output"
  ]
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "created_at": "2018-02-28 19:29:50",
  "condition": [
   "${0:NAME}: if ${1:NAME} `${2:NAME}` or `${3:NAME}` are not of ${1:NAME}"
  ],
  "consequent": [
   "${0:NAME}: if ${1:NAME} `${2:NAME}`, `${3:NAME}` or `model_config`"
  ]
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "created_at": "2018-02-28 19:29:50",
  "condition": [
   "${0:NAME} = inputs.create_eval_input_fn("
  ],
  "consequent": [
   "${0:NAME} = create_eval_input_fn("
  ]
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "created_at": "2018-02-28 19:29:50",
  "condition": [
   "${0:NAME} = config_util.merge_external_params_with_configs("
  ],
  "consequent": [
   "${0:NAME} = merge_external_params_with_configs("
  ]
 },
 {
  "number": 3474,
  "sha": "36f803298c1ac60997841dd2b0df00dc704a8c7f",
  "author": "suharshs",
  "created_at": "2018-02-26 22:05:46",
  "condition": [
   "${0:NAME}.DEFINE_string('logdir', ${1:STRING}, 'Directory for writing training event logs')"
  ],
  "consequent": [
   "${0:NAME}.DEFINE_string('checkpoint_dir', ${1:STRING},",
   "                     'Directory for writing training checkpoints and logs')"
  ]
 },
 {
  "number": 3474,
  "sha": "36f803298c1ac60997841dd2b0df00dc704a8c7f",
  "author": "suharshs",
  "created_at": "2018-02-26 22:05:46",
  "condition": [
   "logdir"
  ],
  "consequent": [
   "checkpoint_dir"
  ]
 },
 {
  "number": 3402,
  "sha": "9a9e42288490bbfb4146489b1a817e4eefd6bca8",
  "author": "a-dai",
  "created_at": "2018-02-17 02:46:08",
  "condition": [
   "${0:NAME} = ${1:NAME}.squeeze(${0:NAME})"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.squeeze(${0:NAME}, 2)"
  ]
 },
 {
  "number": 3402,
  "sha": "9a9e42288490bbfb4146489b1a817e4eefd6bca8",
  "author": "a-dai",
  "created_at": "2018-02-17 02:46:08",
  "condition": [
   "x"
  ],
  "consequent": [
   "inputs_reshaped"
  ]
 },
 {
  "number": 3402,
  "sha": "9a9e42288490bbfb4146489b1a817e4eefd6bca8",
  "author": "a-dai",
  "created_at": "2018-02-17 02:46:08",
  "condition": [
   "${0:NAME} = ${1:NAME}.argmax(${2:NAME}, 1)"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.argmax(${2:NAME}, 2)"
  ]
 },
 {
  "number": 3402,
  "sha": "9a9e42288490bbfb4146489b1a817e4eefd6bca8",
  "author": "a-dai",
  "created_at": "2018-02-17 02:46:08",
  "condition": [
   "${0:NAME} = tf.matmul(${1:NAME}, ${2:NAME}.lin_w) + ${2:NAME}.lin_b"
  ],
  "consequent": [
   "${0:NAME} = ${2:NAME}.multiclass_dense_layer(${1:NAME})"
  ]
 },
 {
  "number": 3402,
  "sha": "9a9e42288490bbfb4146489b1a817e4eefd6bca8",
  "author": "a-dai",
  "created_at": "2018-02-17 02:46:08",
  "condition": [
   "${0:NAME} * (${1:NAME}.${2:NAME}.log_softmax(${3:NAME}) - ${1:NAME}.${2:NAME}.log_softmax(${4:NAME})), ${5:NUMBER})"
  ],
  "consequent": [
   "${0:NAME} * (${1:NAME}.${2:NAME}.log_softmax(${3:NAME}) - ${1:NAME}.${2:NAME}.log_softmax(${4:NAME})), -${5:NUMBER})"
  ]
 },
 {
  "number": 3402,
  "sha": "9a9e42288490bbfb4146489b1a817e4eefd6bca8",
  "author": "a-dai",
  "created_at": "2018-02-17 02:46:08",
  "condition": [
   "${0:NAME} = ${1:NAME}.cast(${1:NAME}.greater(${1:NAME}.squeeze(${2:NAME}), ${3:NUMBER}), ${1:NAME}.${4:NAME})"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.cast(${1:NAME}.greater(${1:NAME}.squeeze(${2:NAME}, -1), ${3:NUMBER}), ${1:NAME}.${4:NAME})"
  ]
 },
 {
  "number": 3402,
  "sha": "9a9e42288490bbfb4146489b1a817e4eefd6bca8",
  "author": "a-dai",
  "created_at": "2018-02-17 02:46:08",
  "condition": [
   "labels"
  ],
  "consequent": [
   "labels_reshaped"
  ]
 },
 {
  "number": 3402,
  "sha": "9a9e42288490bbfb4146489b1a817e4eefd6bca8",
  "author": "a-dai",
  "created_at": "2018-02-17 02:46:08",
  "condition": [
   "${0:NAME} = ${1:NAME}.classification_loss(${2:NAME}, inputs.${3:NAME}, inputs.${4:NAME})"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.classification_loss(${2:NAME}, ${3:NAME}, ${4:NAME})"
  ]
 },
 {
  "number": 3402,
  "sha": "9a9e42288490bbfb4146489b1a817e4eefd6bca8",
  "author": "a-dai",
  "created_at": "2018-02-17 02:46:08",
  "condition": [
   "${0:NAME}: bool."
  ],
  "consequent": [
   "${0:NAME}: integer, starting from 0."
  ]
 },
 {
  "number": 3402,
  "sha": "9a9e42288490bbfb4146489b1a817e4eefd6bca8",
  "author": "a-dai",
  "created_at": "2018-02-17 02:46:08",
  "condition": [
   "${0:NAME}=int(${1:NAME}[${2:NUMBER}]),"
  ],
  "consequent": [
   "${0:NAME}=int(${1:NAME}[${2:NUMBER}]) - 1,",
   "                              "
  ]
 },
 {
  "number": 3402,
  "sha": "9a9e42288490bbfb4146489b1a817e4eefd6bca8",
  "author": "a-dai",
  "created_at": "2018-02-17 02:46:08",
  "condition": [
   "${0:NAME}.predictions(${1:NAME}), inputs.${2:NAME}, inputs.${3:NAME})"
  ],
  "consequent": [
   "${0:NAME}.predictions(${1:NAME}), ${2:NAME}, ${3:NAME})"
  ]
 },
 {
  "number": 3402,
  "sha": "9a9e42288490bbfb4146489b1a817e4eefd6bca8",
  "author": "a-dai",
  "created_at": "2018-02-17 02:46:08",
  "condition": [
   "${0:NAME}.${1:NAME} = ${2:NAME}.contrib.framework.get_or_create_global_step()"
  ],
  "consequent": [
   "${0:NAME}.${1:NAME} = ${2:NAME}.train.get_or_create_global_step()"
  ]
 },
 {
  "number": 3402,
  "sha": "9a9e42288490bbfb4146489b1a817e4eefd6bca8",
  "author": "a-dai",
  "created_at": "2018-02-17 02:46:08",
  "condition": [
   "static_rnn"
  ],
  "consequent": [
   "dynamic_rnn"
  ]
 },
 {
  "number": 3402,
  "sha": "9a9e42288490bbfb4146489b1a817e4eefd6bca8",
  "author": "a-dai",
  "created_at": "2018-02-17 02:46:08",
  "condition": [
   "${0:NAME}=${1:NAME}.squeeze(${0:NAME}), ${2:NAME}=${1:NAME}.cast(${2:NAME}, ${1:NAME}.${3:NAME}))"
  ],
  "consequent": [
   "${0:NAME}=${1:NAME}.squeeze(${0:NAME}, -1), ${2:NAME}=${1:NAME}.cast(${2:NAME}, ${1:NAME}.${3:NAME}))"
  ]
 },
 {
  "number": 3402,
  "sha": "9a9e42288490bbfb4146489b1a817e4eefd6bca8",
  "author": "a-dai",
  "created_at": "2018-02-17 02:46:08",
  "condition": [
   "${0:NAME} = ${1:NAME}.expand_dims(${0:NAME}, -${2:NUMBER})"
  ],
  "consequent": [
   "labels_reshaped = ${1:NAME}.reshape(${0:NAME}, [-${2:NUMBER}])"
  ]
 },
 {
  "number": 3402,
  "sha": "9a9e42288490bbfb4146489b1a817e4eefd6bca8",
  "author": "a-dai",
  "created_at": "2018-02-17 02:46:08",
  "condition": [
   "${0:NAME}, ${1:NAME} = ${2:NAME}.contrib.rnn.static_rnn("
  ],
  "consequent": [
   "${0:NAME}, ${1:NAME} = ${2:NAME}.nn.dynamic_rnn("
  ]
 },
 {
  "number": 3402,
  "sha": "9a9e42288490bbfb4146489b1a817e4eefd6bca8",
  "author": "a-dai",
  "created_at": "2018-02-17 02:46:08",
  "condition": [
   "with ${0:NAME}.control_dependencies([${1:NAME}, variables_averages_op]):"
  ],
  "consequent": [
   "with ${0:NAME}.control_dependencies([${1:NAME}]):"
  ]
 },
 {
  "number": 3402,
  "sha": "9a9e42288490bbfb4146489b1a817e4eefd6bca8",
  "author": "a-dai",
  "created_at": "2018-02-17 02:46:08",
  "condition": [
   "${0:NAME}.get_shape().assert_has_rank(1)"
  ],
  "consequent": [
   "${0:NAME}.get_shape().assert_has_rank(2)"
  ]
 },
 {
  "number": 3402,
  "sha": "9a9e42288490bbfb4146489b1a817e4eefd6bca8",
  "author": "a-dai",
  "created_at": "2018-02-17 02:46:08",
  "condition": [
   "${0:NAME} = tf.no_op(name='train_op')"
  ],
  "consequent": [
   "${0:NAME} = variable_averages.apply(tvars)"
  ]
 },
 {
  "number": 3402,
  "sha": "9a9e42288490bbfb4146489b1a817e4eefd6bca8",
  "author": "a-dai",
  "created_at": "2018-02-17 02:46:08",
  "condition": [
   "${0:NAME} = ${1:NAME}.accuracy(${2:NAME}, ${3:NAME}.${4:NAME}, ${3:NAME}.${5:NAME})"
  ],
  "consequent": [
   "if FLAGS.single_label:",
   "\tindices = tf.stack([tf.range(FLAGS.batch_size), ${3:NAME}.length - 1], 1)",
   "  ${4:NAME} = tf.expand_dims(tf.gather_nd(${3:NAME}.${4:NAME}, indices), 1)",
   "  ${5:NAME} = tf.expand_dims(tf.gather_nd(${3:NAME}.${5:NAME}, indices), 1)",
   "else:",
   "\t${4:NAME} = ${3:NAME}.${4:NAME}",
   "  ${5:NAME} = ${3:NAME}.${5:NAME}",
   "${0:NAME} = ${1:NAME}.accuracy(${2:NAME}, ${4:NAME}, ${5:NAME})"
  ]
 },
 {
  "number": 3400,
  "sha": "2b56ede527955ae6ca582520c9a91a440e112c46",
  "author": "asimshankar",
  "created_at": "2018-02-16 23:25:43",
  "condition": [
   "${0:NAME} ${1:NAME} as ${2:NAME} ${3:NAME}.${4:NAME} and ${3:NAME}.${5:NAME} APIs."
  ],
  "consequent": [
   "${0:NAME} ${1:NAME} as ${2:NAME} ${3:NAME}.${4:NAME}.Model using the ${3:NAME}.${5:NAME} API."
  ]
 },
 {
  "number": 3400,
  "sha": "2b56ede527955ae6ca582520c9a91a440e112c46",
  "author": "asimshankar",
  "created_at": "2018-02-16 23:25:43",
  "condition": [
   "${0:NAME} = ${1:NAME}.test(${2:NAME}.${3:NAME}).batch(10000)"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.test(${2:NAME}.${3:NAME}).batch(${2:NAME}.batch_size)"
  ]
 },
 {
  "number": 3400,
  "sha": "2b56ede527955ae6ca582520c9a91a440e112c46",
  "author": "asimshankar",
  "created_at": "2018-02-16 23:25:43",
  "condition": [
   "${0:STRING}\"Class that defines a graph ${1:NAME} ${2:NAME} ${3:NAME} in ${4:NAME} ${5:NAME} ${6:NAME}."
  ],
  "consequent": [
   "${0:STRING}\"Model ${1:NAME} ${2:NAME} ${3:NAME} in ${4:NAME} ${5:NAME} ${6:NAME}."
  ]
 },
 {
  "number": 3376,
  "sha": "982a5504d5879b3cfdb051f452f4573e35623fc3",
  "author": "plakal",
  "created_at": "2018-02-13 20:58:10",
  "condition": [
   "if upper_edge_hertz > nyquist_hertz:",
   "\traise ValueError(\"upper_edge_hertz %.1f is greater than Nyquist %.1f\" %",
   "                    (upper_edge_hertz, nyquist_hertz))"
  ],
  "consequent": [
   "if lower_edge_hertz < 0.0:",
   "\traise ValueError(\"lower_edge_hertz %.1f must be >= 0\" % lower_edge_hertz)"
  ]
 },
 {
  "number": 3343,
  "sha": "75c042575c8a4fed4239d419d0d463ca5bb5f80b",
  "author": "nealwu",
  "created_at": "2018-02-08 07:11:18",
  "condition": [
   "for ${0:NAME} in range(1024):"
  ],
  "consequent": [
   "for ${0:NAME} in range(_HEIGHT * _WIDTH):"
  ]
 },
 {
  "number": 3343,
  "sha": "75c042575c8a4fed4239d419d0d463ca5bb5f80b",
  "author": "nealwu",
  "created_at": "2018-02-08 07:11:18",
  "condition": [
   "${0:NAME}.assertEqual(${1:NAME}.get_shape().as_list(), [${2:NUMBER}])"
  ],
  "consequent": [
   "${0:NAME}.assertAllEqual(${1:NAME}.shape, (${2:NUMBER},))"
  ]
 },
 {
  "number": 3343,
  "sha": "75c042575c8a4fed4239d419d0d463ca5bb5f80b",
  "author": "nealwu",
  "created_at": "2018-02-08 07:11:18",
  "condition": [
   "${0:NAME} = ${1:NAME}.random_uniform([${2:NAME}, 32, 32, 3])"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.random_uniform([${2:NAME}, _HEIGHT, _WIDTH, _NUM_CHANNELS])"
  ]
 },
 {
  "number": 3343,
  "sha": "75c042575c8a4fed4239d419d0d463ca5bb5f80b",
  "author": "nealwu",
  "created_at": "2018-02-08 07:11:18",
  "condition": [
   "for ${0:NAME} in range(3):"
  ],
  "consequent": [
   "for ${0:NAME} in range(_NUM_CHANNELS):"
  ]
 },
 {
  "number": 3339,
  "sha": "fd087884c2d5f2fccd50c1c1432aa1547742644e",
  "author": "newcoder",
  "created_at": "2018-02-07 08:34:26",
  "condition": [
   "${0:NAME} = ${1:NAME}.load(${2:NAME}, encoding='latin1')"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.load(${2:NAME})"
  ]
 },
 {
  "number": 3314,
  "sha": "4070fa635b0964f4279e63b62d92903ac14c2899",
  "author": "djoshea",
  "created_at": "2018-02-03 00:34:12",
  "condition": [
   "print(${0:STRING}, ${1:NAME}.${2:NAME}, ${3:STRING})"
  ],
  "consequent": [
   "print(${0:STRING}, ${1:NAME}.${2:NAME},",
   "       ${3:STRING})"
  ]
 },
 {
  "number": 3314,
  "sha": "4070fa635b0964f4279e63b62d92903ac14c2899",
  "author": "djoshea",
  "created_at": "2018-02-03 00:34:12",
  "condition": [
   "print(\"Initializing trainable readin matrix with alignment matrix provided for dataset:\", ${0:NAME})"
  ],
  "consequent": [
   "print(\"Initializing trainable readin matrix with alignment matrix\"",
   "         \" provided for dataset:\", ${0:NAME})"
  ]
 },
 {
  "number": 3314,
  "sha": "4070fa635b0964f4279e63b62d92903ac14c2899",
  "author": "djoshea",
  "created_at": "2018-02-03 00:34:12",
  "condition": [
   "${0:NAME} = ${1:NAME}.Variable(${2:NAME}, ${3:NAME}=${4:NAME}, ${5:NAME}=${6:NAME}, ${7:NAME}=${7:NAME})"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.Variable(${2:NAME}, ${3:NAME}=${4:NAME}, ${5:NAME}=${6:NAME},",
   "                 ${7:NAME}=${7:NAME})"
  ]
 },
 {
  "number": 3314,
  "sha": "4070fa635b0964f4279e63b62d92903ac14c2899",
  "author": "djoshea",
  "created_at": "2018-02-03 00:34:12",
  "condition": [
   "print(\"Setting non-trainable readin matrix to alignment matrix provided for dataset:\", ${0:NAME})"
  ],
  "consequent": [
   "print(\"Setting non-trainable readin matrix to alignment matrix\"",
   "         \" provided for dataset:\", ${0:NAME})"
  ]
 },
 {
  "number": 3314,
  "sha": "4070fa635b0964f4279e63b62d92903ac14c2899",
  "author": "djoshea",
  "created_at": "2018-02-03 00:34:12",
  "condition": [
   "print(\"Setting non-trainable readin bias to alignment bias provided for dataset:\", ${0:NAME})"
  ],
  "consequent": [
   "print(\"Setting non-trainable readin bias to alignment bias \"",
   "         \"provided for dataset:\", ${0:NAME})"
  ]
 },
 {
  "number": 3314,
  "sha": "4070fa635b0964f4279e63b62d92903ac14c2899",
  "author": "djoshea",
  "created_at": "2018-02-03 00:34:12",
  "condition": [
   "do_bias (${0:NAME}): ${1:NAME} a (${2:NAME}) ${3:NAME} ${4:NAME} ${5:NAME} ${6:NAME} ${7:NAME}, "
  ],
  "consequent": [
   "do_bias (${0:NAME}): ${1:NAME} a (${2:NAME}) ${3:NAME} ${4:NAME} ${5:NAME} ${6:NAME} ${7:NAME},"
  ]
 },
 {
  "number": 3314,
  "sha": "4070fa635b0964f4279e63b62d92903ac14c2899",
  "author": "djoshea",
  "created_at": "2018-02-03 00:34:12",
  "condition": [
   "print(\"Initializing trainable readin bias with alignment bias provided for dataset:\", ${0:NAME})"
  ],
  "consequent": [
   "print(\"Initializing trainable readin bias with alignment bias \"",
   "         \"provided for dataset:\", ${0:NAME})"
  ]
 },
 {
  "number": 3220,
  "sha": "7431515fddad576a2f614e90c14e1af022017311",
  "author": "cclauss",
  "created_at": "2018-01-22 23:18:59",
  "condition": [
   "long"
  ],
  "consequent": [
   "int"
  ]
 },
 {
  "number": 3113,
  "sha": "6daaec16e98329961473076ff81c13a553abaadd",
  "author": "asimshankar",
  "created_at": "2018-01-06 01:47:58",
  "condition": [
   "${0:NAME}.${1:NAME}.DEFINE_integer(${2:STRING}, 128,"
  ],
  "consequent": [
   "${0:NAME}.${1:NAME}.DEFINE_integer(${2:STRING}, 1024,"
  ]
 },
 {
  "number": 3093,
  "sha": "4a36e31baf9c98130bee1d40e779a959755d8652",
  "author": "asimshankar",
  "created_at": "2018-01-02 22:04:45",
  "condition": [
   "maybe_download"
  ],
  "consequent": [
   "download"
  ]
 },
 {
  "number": 3093,
  "sha": "4a36e31baf9c98130bee1d40e779a959755d8652",
  "author": "asimshankar",
  "created_at": "2018-01-02 22:04:45",
  "condition": [
   "zipped_filename = filename + ${0:STRING}"
  ],
  "consequent": [
   "zipped_filepath = filepath + ${0:STRING}"
  ]
 },
 {
  "number": 3024,
  "sha": "4d79fee396e789b1c2fb53d391ea792907c59c95",
  "author": "asimshankar",
  "created_at": "2017-12-19 01:15:43",
  "condition": [
   "${0:NAME}.${1:NAME} = ${2:NAME}.${3:NAME}.Dropout(0.5)"
  ],
  "consequent": [
   "${0:NAME}.${1:NAME} = ${2:NAME}.${3:NAME}.Dropout(0.4)"
  ]
 },
 {
  "number": 3024,
  "sha": "4d79fee396e789b1c2fb53d391ea792907c59c95",
  "author": "asimshankar",
  "created_at": "2017-12-19 01:15:43",
  "condition": [
   "return predict_spec(${0:NAME}, features)"
  ],
  "consequent": [
   "logits = ${0:NAME}(image, training=False)"
  ]
 },
 {
  "number": 3024,
  "sha": "4d79fee396e789b1c2fb53d391ea792907c59c95",
  "author": "asimshankar",
  "created_at": "2017-12-19 01:15:43",
  "condition": [
   "${0:STRING}: tf.placeholder(tf.float32, [None, 28, 28])"
  ],
  "consequent": [
   "${0:STRING}: image,"
  ]
 },
 {
  "number": 3024,
  "sha": "4d79fee396e789b1c2fb53d391ea792907c59c95",
  "author": "asimshankar",
  "created_at": "2017-12-19 01:15:43",
  "condition": [
   "return train_spec(model, features, labels)"
  ],
  "consequent": [
   "optimizer = tf.train.AdamOptimizer(learning_rate=1e-4)"
  ]
 },
 {
  "number": 3024,
  "sha": "4d79fee396e789b1c2fb53d391ea792907c59c95",
  "author": "asimshankar",
  "created_at": "2017-12-19 01:15:43",
  "condition": [
   "return eval_spec(${0:NAME}, features, labels)"
  ],
  "consequent": [
   "logits = ${0:NAME}(image, training=False)"
  ]
 },
 {
  "number": 3023,
  "sha": "c8ed619afb0af0cd597e8e1c5ed8db0aa6cc70de",
  "author": "mhyttsten",
  "created_at": "2017-12-18 23:36:59",
  "condition": [
   "${0:NAME} = urlopen(${1:NAME}).read()"
  ],
  "consequent": [
   "${0:NAME} = request.urlopen(${1:NAME}).read()"
  ]
 },
 {
  "number": 3023,
  "sha": "c8ed619afb0af0cd597e8e1c5ed8db0aa6cc70de",
  "author": "mhyttsten",
  "created_at": "2017-12-18 23:36:59",
  "condition": [
   "if sys.version_info < (3, 0, 0):",
   "\tfrom ${0:NAME} import urlopen",
   "else:",
   "\tfrom ${0:NAME}.${1:NAME} import urlopen"
  ],
  "consequent": [
   "import six.moves.${0:NAME}.${1:NAME} as ${1:NAME}"
  ]
 },
 {
  "number": 2849,
  "sha": "eff8d09d853d7b6b2716e652ab6baa96322208f2",
  "author": "cclauss",
  "created_at": "2017-11-21 05:46:03",
  "condition": [
   "iteritems"
  ],
  "consequent": [
   "items"
  ]
 },
 {
  "number": 2727,
  "sha": "3543f02d214cdd9798b4603fa8783652d222a73f",
  "author": "tombstone",
  "created_at": "2017-11-07 19:31:26",
  "condition": [
   "reduce_boxes_in_lowest_layer=(${0:NAME}",
   "                               .reduce_boxes_in_lowest_layer))"
  ],
  "consequent": [
   "interpolated_scale_aspect_ratio=(",
   "     ${0:NAME}.interpolated_scale_aspect_ratio),"
  ]
 },
 {
  "number": 2727,
  "sha": "3543f02d214cdd9798b4603fa8783652d222a73f",
  "author": "tombstone",
  "created_at": "2017-11-07 19:31:26",
  "condition": [
   "${0:NAME}.assert_almost_list_equal(expected_aspect_ratio, actual_aspect_ratio)"
  ],
  "consequent": [
   "${0:NAME}.assert_almost_list_equal(expected_offsets, actual_offsets)"
  ]
 },
 {
  "number": 2690,
  "sha": "ae5adb595834aceb09e6b434ad73cfb0f5f58cdb",
  "author": "k-w-w",
  "created_at": "2017-11-02 19:14:22",
  "condition": [
   "def dataset_parser(value):",
   "\t\"\"\"Parse a CIFAR-10 record from value.\"\"\""
  ],
  "consequent": [
   "def parse_record(raw_record):",
   "\t\"\"\"Parse CIFAR-10 image and label from a raw record.\"\"\""
  ]
 },
 {
  "number": 2690,
  "sha": "ae5adb595834aceb09e6b434ad73cfb0f5f58cdb",
  "author": "k-w-w",
  "created_at": "2017-11-02 19:14:22",
  "condition": [
   "raw_record"
  ],
  "consequent": [
   "record_vector"
  ]
 },
 {
  "number": 2690,
  "sha": "ae5adb595834aceb09e6b434ad73cfb0f5f58cdb",
  "author": "k-w-w",
  "created_at": "2017-11-02 19:14:22",
  "condition": [
   "${0:NAME} = ${0:NAME}.map(",
   "     ${1:NAME}, num_threads=1, output_buffer_size=${2:NAME})"
  ],
  "consequent": [
   "${0:NAME} = ${0:NAME}.map(${1:NAME}).prefetch(${2:NAME})"
  ]
 },
 {
  "number": 2690,
  "sha": "ae5adb595834aceb09e6b434ad73cfb0f5f58cdb",
  "author": "k-w-w",
  "created_at": "2017-11-02 19:14:22",
  "condition": [
   "${0:NAME} = ${1:NAME}.reshape(raw_record[${2:NAME}:${3:NAME}],",
   "                          [${4:NAME}, ${5:NAME}, ${6:NAME}])"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.reshape(",
   "     record_vector[${2:NAME}:${3:NAME}], [${4:NAME}, ${5:NAME}, ${6:NAME}])"
  ]
 },
 {
  "number": 2690,
  "sha": "ae5adb595834aceb09e6b434ad73cfb0f5f58cdb",
  "author": "k-w-w",
  "created_at": "2017-11-02 19:14:22",
  "condition": [
   "${0:NAME} = ${1:NAME}.decode_raw(value, ${1:NAME}.${2:NAME})"
  ],
  "consequent": [
   "record_vector = ${1:NAME}.decode_raw(${0:NAME}, ${1:NAME}.${2:NAME})"
  ]
 },
 {
  "number": 2631,
  "sha": "3237c08023d9667a3b4f30420b5c2ebe71e11cad",
  "author": "tombstone",
  "created_at": "2017-10-28 20:37:34",
  "condition": [
   "test_create_faster_rcnn_inception_resnet_v2_model_from_config"
  ],
  "consequent": [
   "test_create_faster_rcnn_nas_model_from_config"
  ]
 },
 {
  "number": 2620,
  "sha": "0a49aee83d52d41c2426984b9ace0be2ce3650c6",
  "author": "tombstone",
  "created_at": "2017-10-27 22:17:29",
  "condition": [
   "interpolated_scale_aspect_ratio=(",
   "     ${0:NAME}.interpolated_scale_aspect_ratio),"
  ],
  "consequent": [
   "reduce_boxes_in_lowest_layer=(${0:NAME}",
   "                               .reduce_boxes_in_lowest_layer))"
  ]
 },
 {
  "number": 2522,
  "sha": "745a4481c5cbab8f7e7740802474cf4f34bbffee",
  "author": "crizCraig",
  "created_at": "2017-10-11 22:30:49",
  "condition": [
   "${0:NAME}.DEFINE_string(${1:STRING}, ${2:STRING}, 'DNS name of the TensorFlow master to use.')"
  ],
  "consequent": [
   "${0:NAME}.DEFINE_string(${1:STRING}, ${2:STRING}, 'Name of the TensorFlow master to use.')"
  ]
 },
 {
  "number": 2443,
  "sha": "8815a8606c45e7c6c01549179903329af2b2d442",
  "author": "itsmeolivia",
  "created_at": "2017-09-22 22:04:53",
  "condition": [
   "${0:NAME}.add_argument(${1:STRING}, ${2:NAME}=${3:NAME}, ${4:NAME}=${5:STRING}, ${6:NAME}=${7:STRING})"
  ],
  "consequent": [
   "${0:NAME}.add_argument(${1:STRING}, ${2:NAME}=${3:NAME}, ${4:NAME}=${5:STRING},",
   "                     ${6:NAME}=${7:STRING})"
  ]
 },
 {
  "number": 2443,
  "sha": "8815a8606c45e7c6c01549179903329af2b2d442",
  "author": "itsmeolivia",
  "created_at": "2017-09-22 22:04:53",
  "condition": [
   "tf.app.flags.DEFINE_integer('batch_size', ${0:NUMBER},"
  ],
  "consequent": [
   "parser.add_argument('--batch_size', type=int, default=${0:NUMBER},"
  ]
 },
 {
  "number": 2443,
  "sha": "8815a8606c45e7c6c01549179903329af2b2d442",
  "author": "itsmeolivia",
  "created_at": "2017-09-22 22:04:53",
  "condition": [
   "FLAGS = tf.app.flags.FLAGS"
  ],
  "consequent": [
   "parser = cifar10.parser"
  ]
 },
 {
  "number": 2443,
  "sha": "8815a8606c45e7c6c01549179903329af2b2d442",
  "author": "itsmeolivia",
  "created_at": "2017-09-22 22:04:53",
  "condition": [
   "${0:NAME}.add_argument(${1:STRING}, ${2:NAME}=${3:NAME}, ${4:NAME}=${5:NUMBER}*${6:NUMBER}, ${7:NAME}=${8:STRING})"
  ],
  "consequent": [
   "${0:NAME}.add_argument(${1:STRING}, ${2:NAME}=${3:NAME}, ${4:NAME}=${5:NUMBER}*${6:NUMBER},",
   "                     ${7:NAME}=${8:STRING})"
  ]
 },
 {
  "number": 2443,
  "sha": "8815a8606c45e7c6c01549179903329af2b2d442",
  "author": "itsmeolivia",
  "created_at": "2017-09-22 22:04:53",
  "condition": [
   "${0:NAME}.add_argument(${1:STRING}, ${2:NAME}=${3:NAME}, ${4:NAME}=False, ${5:NAME}=${6:STRING})"
  ],
  "consequent": [
   "${0:NAME}.add_argument(${1:STRING}, ${2:NAME}=${3:NAME}, ${4:NAME}=False,",
   "                     ${5:NAME}=${6:STRING})"
  ]
 },
 {
  "number": 2443,
  "sha": "8815a8606c45e7c6c01549179903329af2b2d442",
  "author": "itsmeolivia",
  "created_at": "2017-09-22 22:04:53",
  "condition": [
   "${0:NAME} = argparse.ArgumentParser()"
  ],
  "consequent": [
   "${0:NAME} = cifar10.${0:NAME}"
  ]
 },
 {
  "number": 2443,
  "sha": "8815a8606c45e7c6c01549179903329af2b2d442",
  "author": "itsmeolivia",
  "created_at": "2017-09-22 22:04:53",
  "condition": [
   "tf.app.flags.DEFINE_string('train_dir', ${0:STRING},"
  ],
  "consequent": [
   "parser.add_argument('--train_dir', type=str, default=${0:STRING},"
  ]
 },
 {
  "number": 2443,
  "sha": "8815a8606c45e7c6c01549179903329af2b2d442",
  "author": "itsmeolivia",
  "created_at": "2017-09-22 22:04:53",
  "condition": [
   "FLAGS = tf.app.flags.FLAGS"
  ],
  "consequent": [
   "parser = argparse.ArgumentParser()"
  ]
 },
 {
  "number": 2443,
  "sha": "8815a8606c45e7c6c01549179903329af2b2d442",
  "author": "itsmeolivia",
  "created_at": "2017-09-22 22:04:53",
  "condition": [
   "${0:NAME}.add_argument(${1:STRING}, ${2:NAME}=${3:NAME}, ${4:NAME}=${5:NUMBER}, ${6:NAME}=${7:STRING})"
  ],
  "consequent": [
   "${0:NAME}.add_argument(${1:STRING}, ${2:NAME}=${3:NAME}, ${4:NAME}=${5:NUMBER},",
   "                     ${6:NAME}=${7:STRING})"
  ]
 },
 {
  "number": 2343,
  "sha": "28d37e7a6f9af003823571972f0815b5e7a88169",
  "author": "elibixby",
  "created_at": "2017-09-06 01:04:41",
  "condition": [
   "${0:NAME}=get_model_fn(${1:NAME}, ${2:NAME}, num_workers),"
  ],
  "consequent": [
   "${0:NAME}=get_model_fn(${1:NAME}, ${2:NAME},",
   "                       run_config.num_worker_replicas or 1),"
  ]
 },
 {
  "number": 2254,
  "sha": "289a2f99a7df528f6193a5ab3ee284ff3112b731",
  "author": "alanyee",
  "created_at": "2017-08-18 21:41:19",
  "condition": [
   "${0:NAME} = ${1:NAME}.${2:NAME}.AdamOptimizer(${3:NAME} = ${4:NUMBER}))"
  ],
  "consequent": [
   "${0:NAME}=${1:NAME}.${2:NAME}.AdamOptimizer(${3:NAME}=${4:NUMBER}))"
  ]
 },
 {
  "number": 2254,
  "sha": "289a2f99a7df528f6193a5ab3ee284ff3112b731",
  "author": "alanyee",
  "created_at": "2017-08-18 21:41:19",
  "condition": [
   "${0:NAME} = MaskingNoiseAutoencoder(n_input = 784,"
  ],
  "consequent": [
   "${0:NAME} = MaskingNoiseAutoencoder("
  ]
 },
 {
  "number": 2254,
  "sha": "289a2f99a7df528f6193a5ab3ee284ff3112b731",
  "author": "alanyee",
  "created_at": "2017-08-18 21:41:19",
  "condition": [
   "print(\"Epoch: \", ${0:STRING} % (${1:NAME} + ${2:NUMBER}), \"Cost: \", ${3:STRING}.format(${4:NAME}))"
  ],
  "consequent": [
   "print(\"Epoch:\", ${0:STRING} % (${1:NAME} + ${2:NUMBER}),",
   "       \"Cost:\", ${3:STRING}.format(${4:NAME}))"
  ]
 },
 {
  "number": 2254,
  "sha": "289a2f99a7df528f6193a5ab3ee284ff3112b731",
  "author": "alanyee",
  "created_at": "2017-08-18 21:41:19",
  "condition": [
   "${0:NAME} = Autoencoder(n_input = 784,"
  ],
  "consequent": [
   "${0:NAME} = Autoencoder("
  ]
 },
 {
  "number": 2254,
  "sha": "289a2f99a7df528f6193a5ab3ee284ff3112b731",
  "author": "alanyee",
  "created_at": "2017-08-18 21:41:19",
  "condition": [
   "print(${0:STRING}, '%04d' % (${1:NAME} + ${2:NUMBER}), \"cost=\", ${3:STRING}.format(${4:NAME}))"
  ],
  "consequent": [
   "print(${0:STRING}, '%d,' % (${1:NAME} + ${2:NUMBER}),",
   "       \"Cost:\", ${3:STRING}.format(${4:NAME}))"
  ]
 },
 {
  "number": 2254,
  "sha": "289a2f99a7df528f6193a5ab3ee284ff3112b731",
  "author": "alanyee",
  "created_at": "2017-08-18 21:41:19",
  "condition": [
   "${0:NAME} = AdditiveGaussianNoiseAutoencoder(n_input = 784,"
  ],
  "consequent": [
   "${0:NAME} = AdditiveGaussianNoiseAutoencoder("
  ]
 },
 {
  "number": 2254,
  "sha": "289a2f99a7df528f6193a5ab3ee284ff3112b731",
  "author": "alanyee",
  "created_at": "2017-08-18 21:41:19",
  "condition": [
   "n_hidden = 200,"
  ],
  "consequent": [
   "n_input=784,"
  ]
 },
 {
  "number": 2254,
  "sha": "289a2f99a7df528f6193a5ab3ee284ff3112b731",
  "author": "alanyee",
  "created_at": "2017-08-18 21:41:19",
  "condition": [
   "${0:NAME} = ${1:NAME}.read_data_sets(${2:STRING}, ${3:NAME} = True)"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.read_data_sets(${2:STRING}, ${3:NAME}=True)"
  ]
 },
 {
  "number": 2254,
  "sha": "289a2f99a7df528f6193a5ab3ee284ff3112b731",
  "author": "alanyee",
  "created_at": "2017-08-18 21:41:19",
  "condition": [
   "${0:NAME} = ${1:NAME}.${2:NAME}.AdamOptimizer(${3:NAME} = ${4:NUMBER}))"
  ],
  "consequent": [
   "${0:NAME}=${1:NAME}.${2:NAME}.AdamOptimizer(${3:NAME} = ${4:NUMBER}))"
  ]
 },
 {
  "number": 2254,
  "sha": "289a2f99a7df528f6193a5ab3ee284ff3112b731",
  "author": "alanyee",
  "created_at": "2017-08-18 21:41:19",
  "condition": [
   "${0:NAME} = ${1:NAME}.read_data_sets(${2:STRING}, ${3:NAME} = True)"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.read_data_sets(${2:STRING}, ${3:NAME}=True) "
  ]
 },
 {
  "number": 2254,
  "sha": "289a2f99a7df528f6193a5ab3ee284ff3112b731",
  "author": "alanyee",
  "created_at": "2017-08-18 21:41:19",
  "condition": [
   "${0:NAME} = ${1:NAME}.${2:NAME}.AdamOptimizer(${3:NAME} = ${4:NUMBER}),"
  ],
  "consequent": [
   "${0:NAME}=${1:NAME}.${2:NAME}.AdamOptimizer(${3:NAME}=${4:NUMBER}),"
  ]
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "created_at": "2017-08-08 00:13:44",
  "condition": [
   "${0:NAME}.${1:NAME}.join(FLAGS.${2:NAME}, ${3:NAME}) for ${3:NAME} in ${4:NAME}]"
  ],
  "consequent": [
   "${0:NAME}.${1:NAME}.join(${2:NAME}, ${3:NAME}) for ${3:NAME} in ${4:NAME}]"
  ]
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "created_at": "2017-08-08 00:13:44",
  "condition": [
   "tf.flags.DEFINE_boolean('is_cpu_ps', True,",
   "                         'If using CPU as the parameter server.') "
  ],
  "consequent": [
   "Args:"
  ]
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "created_at": "2017-08-08 00:13:44",
  "condition": [
   "${0:NAME}=FLAGS.batch_norm_epsilon,"
  ],
  "consequent": [
   "${0:NAME}=self._batch_norm_epsilon,"
  ]
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "created_at": "2017-08-08 00:13:44",
  "condition": [
   "def __init__(${0:NAME}, ${1:NAME}, ${2:NAME}):"
  ],
  "consequent": [
   "def __init__(${0:NAME}, ${1:NAME}, ${2:NAME}, batch_norm_decay, batch_norm_epsilon):"
  ]
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "created_at": "2017-08-08 00:13:44",
  "condition": [
   "def __init__(${0:NAME}, ${1:NAME}, ${2:NAME}, ${3:NAME}=${4:STRING}):"
  ],
  "consequent": [
   "def __init__(${0:NAME},",
   "              ${1:NAME},",
   "              ${2:NAME},",
   "              batch_norm_decay,",
   "              batch_norm_epsilon,",
   "              ${3:NAME}=${4:STRING}):"
  ]
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "created_at": "2017-08-08 00:13:44",
  "condition": [
   "${0:NAME} = ${1:NAME}.${2:NAME}.join(FLAGS.${3:NAME}, ${4:NAME} + ${5:STRING})"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.${2:NAME}.join(${3:NAME}, ${4:NAME} + ${5:STRING})"
  ]
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "created_at": "2017-08-08 00:13:44",
  "condition": [
   "is_cpu_ps = FLAGS.is_cpu_ps"
  ],
  "consequent": [
   "weight_decay = params.weight_decay"
  ]
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "created_at": "2017-08-08 00:13:44",
  "condition": [
   "tf.flags.DEFINE_string('model_dir', '',",
   "                        'The directory where the model will be stored.')"
  ],
  "consequent": [
   "Support single host, one or more GPU training. Parameter distribution can"
  ]
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "created_at": "2017-08-08 00:13:44",
  "condition": [
   "def _tower_fn(${0:NAME}, ${1:NAME}, ${2:NAME}, ${3:NAME}, tower_losses,",
   "               tower_gradvars, tower_preds, ${4:NAME}):"
  ],
  "consequent": [
   "def _tower_fn(${0:NAME},",
   "               ${1:NAME},",
   "               ${2:NAME},",
   "               ${3:NAME},",
   "               ${4:NAME},",
   "               num_layers,",
   "               batch_norm_decay,",
   "               batch_norm_epsilon):"
  ]
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "created_at": "2017-08-08 00:13:44",
  "condition": [
   "raise ValueError('Invalid num_layers parameter.')"
  ],
  "consequent": [
   "raise ValueError('Invalid --num-layers parameter.')"
  ]
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "created_at": "2017-08-08 00:13:44",
  "condition": [
   "def main(unused_argv):"
  ],
  "consequent": [
   "def main(input_dir, output_dir):"
  ]
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "created_at": "2017-08-08 00:13:44",
  "condition": [
   "FLAGS"
  ],
  "consequent": [
   "params"
  ]
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "created_at": "2017-08-08 00:13:44",
  "condition": [
   "${0:NAME} = ${1:NAME}.Cifar10DataSet(FLAGS.${2:NAME}, ${3:NAME}, ${4:NAME})"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.Cifar10DataSet(${2:NAME}, ${3:NAME}, ${4:NAME})"
  ]
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "created_at": "2017-08-08 00:13:44",
  "condition": [
   "${0:NAME}=FLAGS.batch_norm_decay,"
  ],
  "consequent": [
   "${0:NAME}=self._batch_norm_decay,"
  ]
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "created_at": "2017-08-08 00:13:44",
  "condition": [
   "raise ValueError('eval_batch_size must be multiple of num_gpus.')"
  ],
  "consequent": [
   "raise ValueError('--eval-batch-size must be multiple of --num-gpus.')"
  ]
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "created_at": "2017-08-08 00:13:44",
  "condition": [
   "for zipped_gradvars in zip(*${0:NAME}):"
  ],
  "consequent": [
   "for grad, var in itertools.chain(*${0:NAME}):"
  ]
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "created_at": "2017-08-08 00:13:44",
  "condition": [
   "${0:NAME}.extend_train_hooks(train_hooks)"
  ],
  "consequent": [
   "${0:NAME}.extend_train_hooks(hooks)"
  ]
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "created_at": "2017-08-08 00:13:44",
  "condition": [
   "${0:STRING}) // (FLAGS.${1:NAME} * FLAGS.${2:NAME})"
  ],
  "consequent": [
   "${0:STRING}) // (params.${1:NAME} * ${2:NAME})"
  ]
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "created_at": "2017-08-08 00:13:44",
  "condition": [
   "super(${0:NAME}, ${1:NAME}).__init__(${2:NAME}, ${3:NAME})"
  ],
  "consequent": [
   "super(${0:NAME}, ${1:NAME}).__init__(",
   "     ${2:NAME},",
   "     ${3:NAME},",
   "     batch_norm_decay,",
   "     batch_norm_epsilon )"
  ]
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "created_at": "2017-08-08 00:13:44",
  "condition": [
   "if FLAGS.${0:NAME} == ${1:NUMBER} and not FLAGS.is_cpu_ps:"
  ],
  "consequent": [
   "if args.${0:NAME} == ${1:NUMBER} and args.variable_strategy == 'GPU':"
  ]
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "created_at": "2017-08-08 00:13:44",
  "condition": [
   "_tower_fn(${0:NAME}, ${1:NAME}, ${2:NAME}[${3:NAME}],",
   "           ${4:NAME}[${3:NAME}], tower_losses, tower_gradvars,",
   "           tower_preds, False)"
  ],
  "consequent": [
   "loss, gradvars, preds = _tower_fn(",
   "     ${0:NAME},",
   "     ${1:NAME},",
   "     ${2:NAME}[${3:NAME}],",
   "     ${4:NAME}[${3:NAME}],",
   "     (device_type == 'cpu'),",
   "     params.num_layers,",
   "     params.batch_norm_decay,",
   "     params.batch_norm_epsilon)"
  ]
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "created_at": "2017-08-08 00:13:44",
  "condition": [
   "loss = tf.reduce_mean(tower_losses, name='loss')"
  ],
  "consequent": [
   "all_grads = {}"
  ]
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "created_at": "2017-08-08 00:13:44",
  "condition": [
   "def main(unused_argv):"
  ],
  "consequent": [
   "def main(job_dir,",
   "          data_dir,",
   "          num_gpus,",
   "          variable_strategy,",
   "          use_distortion_for_training,",
   "          log_device_placement,",
   "          num_intra_threads,",
   "          sync,",
   "          **hparams):"
  ]
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "created_at": "2017-08-08 00:13:44",
  "condition": [
   "tf.flags.DEFINE_string('data_dir', '',",
   "                        'The directory where the CIFAR-10 input data is stored.')"
  ],
  "consequent": [
   "def get_model_fn(num_gpus, variable_strategy, num_workers, sync):",
   "\tdef _resnet_model_fn(features, labels, mode, params):",
   "\t\"\"\"Resnet model body."
  ]
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "created_at": "2017-08-08 00:13:44",
  "condition": [
   "worker = '/gpu:%d' % ${0:NAME}"
  ],
  "consequent": [
   "worker_device = '/{}:{}'.format(device_type, ${0:NAME})"
  ]
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "created_at": "2017-08-08 00:13:44",
  "condition": [
   "operator"
  ],
  "consequent": [
   "itertools"
  ]
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "created_at": "2017-08-08 00:13:44",
  "condition": [
   "raise ValueError('train_batch_size must be multiple of num_gpus.')"
  ],
  "consequent": [
   "raise ValueError('--train-batch-size must be multiple of --num-gpus.')"
  ]
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "created_at": "2017-08-08 00:13:44",
  "condition": [
   "def get_experiment_fn(train_input_fn, eval_input_fn, train_steps, eval_steps,",
   "                       train_hooks):"
  ],
  "consequent": [
   "def get_experiment_fn(data_dir, num_gpus, is_gpu_ps,",
   "                       use_distortion_for_training=True,",
   "                       sync=True):"
  ]
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "created_at": "2017-08-08 00:13:44",
  "condition": [
   "FLAGS"
  ],
  "consequent": [
   "args"
  ]
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "created_at": "2017-08-08 00:13:44",
  "condition": [
   "tf.app.run(main)"
  ],
  "consequent": [
   "parser = argparse.ArgumentParser()"
  ]
 },
 {
  "number": 2090,
  "sha": "99cb3f707710e572ab48e107eb03b7bf5b8ae239",
  "author": "mari-linhares",
  "created_at": "2017-08-02 00:27:05",
  "condition": [
   "Paramters"
  ],
  "consequent": [
   "Parameters"
  ]
 },
 {
  "number": 2090,
  "sha": "99cb3f707710e572ab48e107eb03b7bf5b8ae239",
  "author": "mari-linhares",
  "created_at": "2017-08-02 00:27:05",
  "condition": [
   "${0:NAME}.${1:NAME}.DEFINE_integer(${2:STRING}, ${3:NUMBER}, 'Number of workers')"
  ],
  "consequent": [
   "${0:NAME}.${1:NAME}.DEFINE_integer(${2:STRING}, ${3:NUMBER}, 'Number of workers.')"
  ]
 },
 {
  "number": 2080,
  "sha": "6fe50699409f13834a9fd0a408dafccff0fd18e9",
  "author": "mari-linhares",
  "created_at": "2017-08-01 00:05:48",
  "condition": [
   "input_file"
  ],
  "consequent": [
   "input_files"
  ]
 },
 {
  "number": 2080,
  "sha": "6fe50699409f13834a9fd0a408dafccff0fd18e9",
  "author": "mari-linhares",
  "created_at": "2017-08-01 00:05:48",
  "condition": [
   "${0:NAME} = [${1:STRING} % ${2:NAME} for ${2:NAME} in xrange(${3:NUMBER}, 6)]"
  ],
  "consequent": [
   "${0:NAME}['train'] = [${1:STRING} % ${2:NAME} for ${2:NAME} in xrange(${3:NUMBER}, 5)]"
  ]
 },
 {
  "number": 2080,
  "sha": "6fe50699409f13834a9fd0a408dafccff0fd18e9",
  "author": "mari-linhares",
  "created_at": "2017-08-01 00:05:48",
  "condition": [
   "${0:NAME} = ${1:NAME}.transpose(${1:NAME}.reshape(${0:NAME}, [${2:NAME}, ${3:NAME}, ${4:NAME}]), [${5:NUMBER}, ${6:NUMBER}, ${7:NUMBER}])"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.cast(",
   "     ${1:NAME}.transpose(${1:NAME}.reshape(${0:NAME}, [${2:NAME}, ${3:NAME}, ${4:NAME}]), [${5:NUMBER}, ${6:NUMBER}, ${7:NUMBER}]),",
   "     ${1:NAME}.float32)"
  ]
 },
 {
  "number": 2080,
  "sha": "6fe50699409f13834a9fd0a408dafccff0fd18e9",
  "author": "mari-linhares",
  "created_at": "2017-08-01 00:05:48",
  "condition": [
   "${0:NAME} = read_pickle_from_file(${1:NAME})"
  ],
  "consequent": [
   "for ${1:NAME} in input_files:",
   "\t${0:NAME} = read_pickle_from_file(${1:NAME})"
  ]
 },
 {
  "number": 2080,
  "sha": "6fe50699409f13834a9fd0a408dafccff0fd18e9",
  "author": "mari-linhares",
  "created_at": "2017-08-01 00:05:48",
  "condition": [
   "file_name"
  ],
  "consequent": [
   "join"
  ]
 },
 {
  "number": 2080,
  "sha": "6fe50699409f13834a9fd0a408dafccff0fd18e9",
  "author": "mari-linhares",
  "created_at": "2017-08-01 00:05:48",
  "condition": [
   "def convert_to_tfrecord(input_file, name):"
  ],
  "consequent": [
   "def convert_to_tfrecord(input_files, output_file):"
  ]
 },
 {
  "number": 2080,
  "sha": "6fe50699409f13834a9fd0a408dafccff0fd18e9",
  "author": "mari-linhares",
  "created_at": "2017-08-01 00:05:48",
  "condition": [
   "for file_name in ${0:NAME}:",
   "\tinput_file = ${1:NAME}.${2:NAME}.join(${3:NAME}.${4:NAME}, file_name)"
  ],
  "consequent": [
   "for mode, files in ${0:NAME}.items():",
   "\tinput_files = [",
   "       ${1:NAME}.${2:NAME}.join(${3:NAME}.${4:NAME}, f) for f in files]"
  ]
 },
 {
  "number": 2080,
  "sha": "6fe50699409f13834a9fd0a408dafccff0fd18e9",
  "author": "mari-linhares",
  "created_at": "2017-08-01 00:05:48",
  "condition": [
   "if ${0:NAME}.${1:NAME} == ${2:STRING}:",
   "\treturn [",
   "       ${3:NAME}.${4:NAME}.join(${0:NAME}.${5:NAME}, 'data_batch_%d.tfrecords' % i)",
   "       for i in xrange(1, 5)",
   "   ]",
   "elif ${0:NAME}.${1:NAME} == ${6:STRING}:",
   "\treturn [${3:NAME}.${4:NAME}.join(${0:NAME}.${5:NAME}, 'data_batch_5.tfrecords')]",
   "elif ${0:NAME}.${1:NAME} == ${7:STRING}:",
   "\treturn [${3:NAME}.${4:NAME}.join(${0:NAME}.${5:NAME}, 'test_batch.tfrecords')]"
  ],
  "consequent": [
   "if ${0:NAME}.${1:NAME} in [${2:STRING}, ${6:STRING}, ${7:STRING}]:",
   "\treturn [${3:NAME}.${4:NAME}.join(${0:NAME}.${5:NAME}, ${0:NAME}.${1:NAME} + '.tfrecords')]"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME}.arange(32).reshape([${1:NUMBER}, ${2:NUMBER}, ${2:NUMBER}]), ${3:NAME}.${4:NAME})"
  ],
  "consequent": [
   "${0:NAME}.arange(64).reshape([${1:NUMBER}, ${1:NUMBER}, ${2:NUMBER}, ${2:NUMBER}]), ${3:NAME}.${4:NAME})"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME}.import_graph_def(checkpoint_graph_def)"
  ],
  "consequent": [
   "${0:NAME}.import_graph_def(frozen_graph_def, name='')"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME}.assertAllClose(num_detections, [${1:NUMBER}])"
  ],
  "consequent": [
   "${0:NAME}.assertAllClose(num_detections_np, [${1:NUMBER}, 1])"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME} = ${1:NAME}.${2:NAME}.resize_nearest_neighbor("
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.${2:NAME}.resize_nearest_neighbor(${0:NAME}, new_size,"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "test_graph = tf.Graph()"
  ],
  "consequent": [
   "batch_size = 2"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME}.assertAllClose(classes, [[${1:NUMBER}, ${2:NUMBER}]])"
  ],
  "consequent": [
   "${0:NAME}.assertAllClose(classes_np, [[${1:NUMBER}, ${2:NUMBER}],",
   "                                  [${2:NUMBER}, ${1:NUMBER}]])"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "checkpoint_path"
  ],
  "consequent": [
   "trained_checkpoint_prefix"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "inputs_shape = ${0:NAME}.get_shape().as_list()"
  ],
  "consequent": [
   "combined_shape = shape_utils.combined_static_and_dynamic_shape(${0:NAME})"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME}.${1:NAME} = FakeModel()"
  ],
  "consequent": [
   "${0:NAME}.${1:NAME} = FakeModel(add_detection_masks=True)"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME}.assertAllClose(${1:NAME}, [[${2:NUMBER}, ${3:NUMBER}]])"
  ],
  "consequent": [
   "${0:NAME}.assertAllClose(${1:NAME}, [[${2:NUMBER}, ${3:NUMBER}],",
   "                                  [${3:NUMBER}, ${2:NUMBER}]])"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME}.stack([num_valid_boxes, -${1:NUMBER}])), [-${1:NUMBER}, num_classes])"
  ],
  "consequent": [
   "${0:NAME}.stack([per_image_num_valid_boxes, -${1:NUMBER}])),"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME}.assertAllClose(scores, [[${1:NUMBER}, ${2:NUMBER}]])"
  ],
  "consequent": [
   "${0:NAME}.assertAllClose(scores_np, [[${1:NUMBER}, ${2:NUMBER}],",
   "                                 [0.9, 0.0]])"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME} = ${1:NAME}.run(${2:NAME})"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.run(${2:NAME},",
   "                           feed_dict={",
   "                               preprocessed_input_placeholder:",
   "                               np.random.uniform(",
   "                                   size=(batch_size, 2, 2, 3))})"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME} = ${1:NAME}.run(${2:NAME})"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.run(",
   "     ${2:NAME},",
   "     feed_dict={",
   "         refined_box_encodings_placeholder: refined_box_encodings,",
   "         class_predictions_with_background_placeholder:",
   "         class_predictions_with_background,",
   "         num_proposals_placeholder: num_proposals,",
   "         proposal_boxes_placeholder: proposal_boxes,",
   "         image_shape_placeholder: image_shape",
   "     })"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "if self._is_training:",
   "\tproposal_boxlist.set(${0:NAME}.stop_gradient(proposal_boxlist.get()))",
   "  if not self._hard_example_miner:"
  ],
  "consequent": [
   "single_image_proposal_scores = ${0:NAME}.slice(single_image_proposal_scores,",
   "                                         [0],",
   "                                         [single_image_num_proposals])"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "tiled_proposals_boxlist"
  ],
  "consequent": [
   "BoxList"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "checkpoint_path=None,"
  ],
  "consequent": [
   "trained_checkpoint_prefix=trained_checkpoint_prefix,"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME} = ${1:NAME}.get_tensor_by_name('import/detection_masks:0')"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.get_tensor_by_name('detection_masks:0')"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "testResizeToRangeWithNoInstanceMask"
  ],
  "consequent": [
   "testResizeToRangeWithMasksAndDynamicSpatialShape"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "image_str"
  ],
  "consequent": [
   "image_str_batch_np"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME} = bcoder.batch_decode(${1:NAME}, ${2:NAME}._box_coder,"
  ],
  "consequent": [
   "${0:NAME} = ${2:NAME}._batch_decode(${1:NAME})"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "proposal_boxlist = ${0:NAME}._sample_box_classifier_minibatch("
  ],
  "consequent": [
   "sampled_boxlist = ${0:NAME}._sample_box_classifier_minibatch(",
   "     single_image_boxlist,",
   "     single_image_groundtruth_boxlist,",
   "     single_image_groundtruth_classes_with_background)"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "_batch_decode_refined_boxes"
  ],
  "consequent": [
   "_batch_decode_boxes"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "with ${0:NAME}.test_session() as ${1:NAME}:"
  ],
  "consequent": [
   "with ${0:NAME}.test_session(graph=test_graph) as ${1:NAME}:"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME}.assertAllClose(${1:NAME}, [[${2:NUMBER}, ${3:NUMBER}]])"
  ],
  "consequent": [
   "${0:NAME}.assertAllClose(${1:NAME}, [[${2:NUMBER}, ${3:NUMBER}],",
   "                                 [0.9, 0.0]])"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME} = tf.constant([${1:NUMBER}, ${2:NUMBER}], ${3:NAME}=tf.${4:NAME})"
  ],
  "consequent": [
   "${0:NAME} = np.array([${1:NUMBER}, ${2:NUMBER}], ${3:NAME}=np.${4:NAME})"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME}.assertAllClose(boxes, [[${1:NUMBER}, ${1:NUMBER}, ${2:NUMBER}, ${2:NUMBER}],"
  ],
  "consequent": [
   "${0:NAME}.assertAllClose(boxes_np, [[[${1:NUMBER}, ${1:NUMBER}, ${2:NUMBER}, ${2:NUMBER}],"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "TODO(jonathanhuang,rathodv): ${0:NAME} ${1:NAME} ${2:NAME}'${3:NAME} ${4:NAME} ${5:NAME} ${6:NAME} ${7:NAME}"
  ],
  "consequent": [
   "TODO: ${0:NAME} ${1:NAME} ${2:NAME}'${3:NAME} ${4:NAME} ${5:NAME} ${6:NAME} ${7:NAME}"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:STRING}: (batch_size, height, width, ${1:NUMBER}),"
  ],
  "consequent": [
   "${0:STRING}:",
   "(2, image_size, image_size, ${1:NUMBER}),"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME}.export_inference_graph(${1:NAME}.${2:NAME}, ${3:NAME},",
   "                                 ${1:NAME}.checkpoint_path,",
   "                                 ${1:NAME}.inference_graph_path,",
   "                                 ${1:NAME}.export_as_saved_model)"
  ],
  "consequent": [
   "${0:NAME}.export_inference_graph(",
   "     ${1:NAME}.${2:NAME}, ${3:NAME}, ${1:NAME}.trained_checkpoint_prefix,",
   "     ${1:NAME}.output_directory)"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME}.ones([1, ${1:NUMBER}, 4, ${1:NUMBER}], ${0:NAME}.${2:NAME}))"
  ],
  "consequent": [
   "${0:NAME}.placeholder(${0:NAME}.${2:NAME}, shape=[None, None, None, ${1:NUMBER}]))"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "detections = ${0:NAME}._second_stage_nms_fn("
  ],
  "consequent": [
   "(nmsed_boxes, nmsed_scores, nmsed_classes, nmsed_masks,  num_detections) = ${0:NAME}._second_stage_nms_fn("
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:STRING}: ${1:NAME}.constant([${2:NUMBER}], ${1:NAME}.${3:NAME})"
  ],
  "consequent": [
   "${0:STRING}: ${1:NAME}.constant([${2:NUMBER}, 1], ${1:NAME}.${3:NAME})"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "testResizeToRangeWithMasks"
  ],
  "consequent": [
   "testResizeToRangeWithMasksPreservesStaticSpatialShape"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME} = ${1:NAME}.squeeze(${0:NAME}, axis=${2:NUMBER})"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.squeeze(${0:NAME}, ${2:NUMBER})"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME}.assertTrue(${1:STRING} in ${2:NAME})"
  ],
  "consequent": [
   "for input_shape in input_shapes:",
   "\ttf_graph = tf.Graph()",
   "  with tf_graph.as_default():",
   "\tpreprocessed_input_placeholder = tf.placeholder(tf.float32,",
   "                                                     shape=input_shape)",
   "",
   "    prediction_dict = ${0:NAME}._model.predict(preprocessed_input_placeholder)",
   "",
   "    ${2:NAME} = ${0:NAME}._model.postprocess(prediction_dict)",
   "",
   "    ${0:NAME}.assertTrue(${1:STRING} in ${2:NAME})"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "Note that currently `batch` is always 1, but we will support `batch` > 1 in"
  ],
  "consequent": [
   "Notes:"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "def test_export_frozen_graph(${0:NAME}):"
  ],
  "consequent": [
   "def test_export_graph_with_moving_averages(${0:NAME}):",
   "\ttmp_dir = ${0:NAME}.get_temp_dir()"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "tiled_proposal_boxes"
  ],
  "consequent": [
   "reshape"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "_ = importer.import_graph_def(${0:NAME}, ${1:NAME}=${2:STRING})"
  ],
  "consequent": [
   "with tf.Graph().as_default():",
   "\ttf.import_graph_def(${0:NAME}, ${1:NAME}=${2:STRING})"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME} dictionary containing the following entries:"
  ],
  "consequent": [
   "'nmsed_boxes': ${0:NAME} [batch_size, max_detections, 4] float32 tensor"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME}.get_field(${1:NAME}.${2:NAME}.${3:NAME}))"
  ],
  "consequent": [
   "nmsed_scores = ${0:NAME}.get_field(${1:NAME}.${2:NAME}.${3:NAME})"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "proposal_boxes"
  ],
  "consequent": [
   "proposal_boxes_placeholder"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "nms_output = ${0:NAME}.run(nms_dict)"
  ],
  "consequent": [
   "(nmsed_boxes, nmsed_scores, nmsed_classes,  num_detections) = ${0:NAME}.run([nmsed_boxes, nmsed_scores, nmsed_classes,",
   "                              num_detections])"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME} = ${1:NAME}.get_tensor_by_name('import/num_detections:0')"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.get_tensor_by_name('num_detections:0')"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:STRING}: ${1:NAME}.constant([[${2:NUMBER}, ${3:NUMBER}]], ${1:NAME}.${4:NAME}),"
  ],
  "consequent": [
   "${0:STRING}: ${1:NAME}.constant([[${2:NUMBER}, ${3:NUMBER}],",
   "                                  [0.9, 0.0]], ${1:NAME}.${4:NAME}),"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME}.slice(${1:NAME}, ${2:NUMBER}*[${3:NUMBER}],"
  ],
  "consequent": [
   "${0:NAME}.slice(${1:NAME}, ${2:NUMBER} * [${3:NUMBER}],"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "per_image_masks_list = ${0:NAME}.unstack(masks)"
  ],
  "consequent": [
   "masks_shape = ${0:NAME}.stack([batch_size, num_anchors, 1, 0, 0])"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "saver = ${0:NAME}.${1:NAME}.Saver(var_map)"
  ],
  "consequent": [
   "init_saver = ${0:NAME}.${1:NAME}.Saver(available_var_map)"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "total_num_padded_proposals = batch_size * model.max_num_proposals"
  ],
  "consequent": [
   "image_shape = np.array((2, 36, 48, 3), dtype=np.int32)"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "inference_graph_path = ${0:NAME}.${1:NAME}.join(self.get_temp_dir(),",
   "                                     'saved_model')"
  ],
  "consequent": [
   "output_directory = ${0:NAME}.${1:NAME}.join(tmp_dir, 'output')"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "batch_size = ${0:NAME}.get_shape().as_list()[0]"
  ],
  "consequent": [
   "combined_feature_shape = shape_utils.combined_static_and_dynamic_shape(",
   "     ${0:NAME})"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "detection_boxes_list.append(padded_boxlist.get())"
  ],
  "consequent": [
   "num_detections = nmsed_boxlist.num_boxes()"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:STRING}: (batch_size, height, width, ${1:NUMBER}),"
  ],
  "consequent": [
   "${0:STRING}: (2, image_size, image_size, ${1:NUMBER}),"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "test_predict_gives_correct_shapes_in_inference_mode_first_stage_only"
  ],
  "consequent": [
   "test_predict_correct_shapes_in_inference_mode_both_stages"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME}={${1:NAME}: self._create_tf_example("
  ],
  "consequent": [
   "${0:NAME}={${1:NAME}: tf_example_np})"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME} = ${1:NAME}.random_uniform(in_image_shape)"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.placeholder(${1:NAME}.float32, shape=(None, None, 3))"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME} = ${1:NAME}.get_tensor_by_name('import/detection_boxes:0')"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.get_tensor_by_name('detection_boxes:0')"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME} = ${1:NAME}.get_tensor_by_name('import/tf_example:0')"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.get_tensor_by_name('tf_example:0')"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "return detections"
  ],
  "consequent": [
   "return {'detection_boxes': nmsed_boxes,",
   "         'detection_scores': nmsed_scores,",
   "         'detection_classes': nmsed_classes,",
   "         'num_detections': tf.to_float(num_detections)}"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "'detection_scores': ${0:NAME} [bath_size, ${1:NAME}] ${2:NAME} ${3:NAME} ${4:NAME}"
  ],
  "consequent": [
   "'nmsed_scores': ${0:NAME} [batch_size, ${1:NAME}] ${2:NAME} ${3:NAME} ${4:NAME}"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME}.assertEqual(nms_output['num_detections'], [${1:NUMBER}])"
  ],
  "consequent": [
   "${0:NAME}.assertEqual(num_detections, [${1:NUMBER}])"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME}.DEFINE_string(${1:STRING}, '',"
  ],
  "consequent": [
   "${0:NAME}.DEFINE_string(${1:STRING}, None,"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "zeros"
  ],
  "consequent": [
   "np"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME} = ${1:NAME}.get_tensor_by_name('import/detection_scores:0')"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.get_tensor_by_name('detection_scores:0')"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:STRING}: ${1:NAME}.constant([[${2:NUMBER}, ${3:NUMBER}]], ${1:NAME}.${4:NAME}),"
  ],
  "consequent": [
   "${0:STRING}: ${1:NAME}.constant([[${2:NUMBER}, ${3:NUMBER}],",
   "                                   [${3:NUMBER}, ${2:NUMBER}]], ${1:NAME}.${4:NAME}),"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "(groundtruth_boxlists, groundtruth_classes_with_background_list"
  ],
  "consequent": [
   "proposal_boxes = tf.stop_gradient(proposal_boxes)"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "batch_size = static_shape.get_batch_size(${0:NAME}.get_shape())"
  ],
  "consequent": [
   "combined_feature_map_shape = shape_utils.combined_static_and_dynamic_shape(",
   "     ${0:NAME})"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME} = _add_output_tensor_nodes(${1:NAME})"
  ],
  "consequent": [
   "${0:NAME} = _add_output_tensor_nodes(${1:NAME},"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "var_map = ${0:NAME}.get_variables_available_in_checkpoint("
  ],
  "consequent": [
   "available_var_map = (${0:NAME}.",
   "                      get_variables_available_in_checkpoint("
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME} = ${1:NAME}.get_tensor_by_name('import/detection_classes:0')"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.get_tensor_by_name('detection_classes:0')"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "with session.Session() as sess:",
   "\tif input_saver_def:",
   "\tsaver = saver_lib.Saver(saver_def=input_saver_def)",
   "",
   "    saver.restore(sess, input_checkpoint)"
  ],
  "consequent": [
   "if optimize_graph:",
   "\tlogging.info('Graph Rewriter optimizations enabled')",
   "  rewrite_options = rewriter_config_pb2.RewriterConfig(",
   "       optimize_tensor_layout=True)",
   "  rewrite_options.optimizers.append('pruning')",
   "  rewrite_options.optimizers.append('constfold')",
   "  rewrite_options.optimizers.append('layout')",
   "  graph_options = tf.GraphOptions(",
   "       rewrite_options=rewrite_options, infer_shapes=True)"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "tiled_proposals_boxlist"
  ],
  "consequent": [
   "tiled_anchors_boxlist"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "checkpoint_path, inference_graph_path,"
  ],
  "consequent": [
   "trained_checkpoint_prefix, output_directory,"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "preprocessed_input = tf.random_uniform((batch_size, ${0:NUMBER}, ${0:NUMBER}, 3),",
   "                                        dtype=tf.float32)"
  ],
  "consequent": [
   "image_size = ${0:NUMBER}"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME} = tf.constant("
  ],
  "consequent": [
   "${0:NAME} = np.array("
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME}.get_shape().as_list() for ${0:NAME} in ${1:NAME}"
  ],
  "consequent": [
   "shape_utils.combined_static_and_dynamic_shape(",
   "     ${0:NAME}) for ${0:NAME} in ${1:NAME}"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "detection_classes_list.append(",
   "     ${0:NAME}.get_field(${1:NAME}.${2:NAME}.${3:NAME}))"
  ],
  "consequent": [
   "nmsed_classes = ${0:NAME}.get_field(${1:NAME}.${2:NAME}.${3:NAME})"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "tf"
  ],
  "consequent": [
   "np"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "checkpoint_path = ${0:NAME}.${1:NAME}.join(self.get_temp_dir(), 'model-ckpt')"
  ],
  "consequent": [
   "trained_checkpoint_prefix = ${0:NAME}.${1:NAME}.join(tmp_dir, 'model.ckpt')"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "detections = ${0:NAME}._non_max_suppression_fn(${1:NAME},"
  ],
  "consequent": [
   "(nmsed_boxes, nmsed_scores, nmsed_classes, _,  num_detections) = ${0:NAME}._non_max_suppression_fn(${1:NAME},"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME} = ${1:NAME}.run(${0:NAME})"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.run(${0:NAME},",
   "                            feed_dict={in_image:",
   "                                       np.random.randn(*in_shape)})"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "inference_graph_path = ${0:NAME}.${1:NAME}.join(self.get_temp_dir(),"
  ],
  "consequent": [
   "output_directory = ${0:NAME}.${1:NAME}.join(tmp_dir, 'output')"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "def _batch_decode_refined_boxes(${0:NAME}, refined_box_encodings, proposal_boxes):"
  ],
  "consequent": [
   "def _batch_decode_boxes(${0:NAME}, box_encodings, anchor_boxes):"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "inference_graph_path"
  ],
  "consequent": [
   "saved_model_path"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME}.assertAllClose(masks, ${1:NAME}.arange(32).reshape([${2:NUMBER}, ${3:NUMBER}, ${3:NUMBER}]))"
  ],
  "consequent": [
   "${0:NAME}.assertAllClose(masks_np, ${1:NAME}.arange(64).reshape([${2:NUMBER}, ${2:NUMBER}, ${3:NUMBER}, ${3:NUMBER}]))"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "proposal_boxes_list = []"
  ],
  "consequent": [
   "def _unpad_proposals_and_sample_box_classifier_batch(",
   "     self,",
   "     proposal_boxes,"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "inputs = tf.to_float(${0:NAME}[${1:NAME}]())"
  ],
  "consequent": [
   "placeholder_tensor, input_tensors = ${0:NAME}[${1:NAME}]()"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME}.assertAllClose(nms_output['detection_classes'], ${1:NAME})"
  ],
  "consequent": [
   "${0:NAME}.assertAllClose(nmsed_classes, ${1:NAME})"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME}.assertAllClose(nms_output['num_detections'], [${1:NUMBER}, ${2:NUMBER}])"
  ],
  "consequent": [
   "${0:NAME}.assertAllClose(num_detections, [${1:NUMBER}, ${2:NUMBER}])"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "(boxes, scores, classes, masks, num_detections) = ${0:NAME}.run("
  ],
  "consequent": [
   "(boxes_np, scores_np, classes_np, masks_np, num_detections_np) = ${0:NAME}.run("
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "if masks is not None:"
  ],
  "consequent": [
   "if original_masks is None:"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "checkpoint_path = os.path.join(${0:NAME}.get_temp_dir(), 'model-ckpt')"
  ],
  "consequent": [
   "tmp_dir = ${0:NAME}.get_temp_dir()"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "[-${0:NUMBER}, self.max_num_proposals, self.${1:NAME}, ${2:NUMBER}])"
  ],
  "consequent": [
   "tf.stack([combined_shape[0], combined_shape[${0:NUMBER}],",
   "           ${1:NAME}, ${2:NUMBER}]))"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "* `${0:NAME}`: ${1:NAME} ${2:NAME} scalar ${3:NAME} ${4:NAME} ${5:NAME} encoded PNG"
  ],
  "consequent": [
   "* `${0:NAME}`: ${1:NAME} ${2:NAME} 1-D ${3:NAME} ${4:NAME} ${5:NAME} shape [None]"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "if ${0:NAME} is not None:",
   "\tdetection_masks_list.append(",
   "       ${1:NAME}.get_field(${2:NAME}.${3:NAME}.${0:NAME}))"
  ],
  "consequent": [
   "nmsed_masks = ${1:NAME}.get_field(${2:NAME}.${3:NAME}.${0:NAME})"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "restore"
  ],
  "consequent": [
   "init_saver"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME} = ${1:NAME}.${2:NAME}.decode_image(image_str, ${3:NAME}=${4:NUMBER})"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.${2:NAME}.decode_image(encoded_image_string_tensor,",
   "                                      ${3:NAME}=${4:NUMBER})"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "def _add_output_tensor_nodes(${0:NAME}):"
  ],
  "consequent": [
   "def _add_output_tensor_nodes(${0:NAME},",
   "                              output_collection_name='inference_op'):"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "proposal_scores_list = []"
  ],
  "consequent": [
   "proposal_scores,"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "def _write_inference_graph(inference_graph_path,",
   "                            checkpoint_path=None,",
   "                            use_moving_averages=False,"
  ],
  "consequent": [
   "def _write_frozen_graph(frozen_graph_path, frozen_graph_def):",
   "\t\"\"\"Writes frozen graph to disk.",
   "",
   "  Args:",
   "    frozen_graph_path: Path to write inference graph.",
   "    frozen_graph_def: tf.GraphDef holding frozen graph.",
   "  \"\"\"",
   "  with gfile.GFile(frozen_graph_path, 'wb') as f:",
   "\tf.write(frozen_graph_def.SerializeToString())",
   "  logging.info('%d ops in the final graph.', len(frozen_graph_def.node))  ",
   "def _write_saved_model(saved_model_path,",
   "                        frozen_graph_def,",
   "                        inputs,"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME}.expand_dims(proposal_boxes, ${1:NUMBER}), [${2:NUMBER}, ${2:NUMBER}, self.${3:NAME}, ${2:NUMBER}])"
  ],
  "consequent": [
   "${0:NAME}.expand_dims(anchor_boxes, ${1:NUMBER}), [${2:NUMBER}, ${2:NUMBER}, ${3:NAME}, ${2:NUMBER}])"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "'num_detections': A [batchsize] float32 tensor indicating the number of"
  ],
  "consequent": [
   "'nmsed_masks': (optional) a"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME}.assertAllClose(${1:NAME}, [[${2:NUMBER}, ${2:NUMBER}, ${3:NUMBER}, ${3:NUMBER}],"
  ],
  "consequent": [
   "${0:NAME}.assertAllClose(${1:NAME}, [[[${2:NUMBER}, ${2:NUMBER}, ${3:NUMBER}, ${3:NUMBER}],"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME}.assertAllClose(nms_output['num_detections'], [${1:NUMBER}, ${1:NUMBER}])"
  ],
  "consequent": [
   "${0:NAME}.assertAllClose(num_detections, [${1:NUMBER}, ${1:NUMBER}])"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "export_as_saved_model=False):"
  ],
  "consequent": [
   "output_collection_name='inference_op'):"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "refined_box_encodings"
  ],
  "consequent": [
   "refined_box_encodings_placeholder"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "checkpoint_path: ${0:NAME} ${1:NAME} ${2:NAME} ${3:NAME} ${4:NAME} ${1:NAME} freeze.",
   "inference_graph_path: ${0:NAME} ${1:NAME} ${5:NAME} inference ${6:NAME} ${1:NAME}.",
   "export_as_saved_model: ${7:NAME} ${2:NAME} model should be exported as ${8:NAME} SavedModel. ${7:NAME}",
   "\tfalse, it is saved as an inference ${6:NAME}."
  ],
  "consequent": [
   "trained_checkpoint_prefix: ${0:NAME} ${1:NAME} ${2:NAME} trained ${3:NAME} ${4:NAME}.",
   "output_directory: ${0:NAME} ${1:NAME} ${5:NAME} outputs.",
   "optimize_graph: Whether ${1:NAME} optimize ${6:NAME} using Grappler.",
   "output_collection_name: Name of collection ${1:NAME} add output tensors ${1:NAME}.",
   "\t${7:NAME} None, does not add output tensors ${1:NAME} ${8:NAME} collection."
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "inference_graph_path,"
  ],
  "consequent": [
   "optimize_graph=False,"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME} = bcoder.batch_decode(${1:NAME}[${2:STRING}],"
  ],
  "consequent": [
   "${0:NAME} = self._batch_decode(${1:NAME}[${2:STRING}])"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "nms_dict = ${0:NAME}.batch_multiclass_non_max_suppression("
  ],
  "consequent": [
   "(nmsed_boxes, nmsed_scores, nmsed_classes, nmsed_masks,  num_detections) = ${0:NAME}.batch_multiclass_non_max_suppression("
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "[-${0:NUMBER}, ${1:NAME}, masks.${2:NAME}[${3:NUMBER}].${4:NAME}, masks.${2:NAME}[4].${4:NAME}])"
  ],
  "consequent": [
   "[-${0:NUMBER}, ${1:NAME}, per_image_masks.${2:NAME}[2].${4:NAME},  per_image_masks.${2:NAME}[${3:NUMBER}].${4:NAME}])"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME}: if iou_thresh is not in [0, ${1:NUMBER}] or if input boxlist does not have",
   "\ta valid scores field."
  ],
  "consequent": [
   "${0:NAME}: if `q` in boxes.shape is not ${1:NUMBER} or not equal to number of"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME}.DEFINE_string('checkpoint_path', '', 'Optional path to checkpoint file. '",
   "                     'If provided, bakes the weights from the checkpoint into '",
   "                     'the graph.')"
  ],
  "consequent": [
   "${0:NAME}.DEFINE_string('trained_checkpoint_prefix', None,",
   "                     'Path to trained checkpoint, typically of the form '",
   "                     'path/to/model.ckpt')"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "detection_boxes_list = []"
  ],
  "consequent": [
   "def single_image_nms_fn(args):",
   "\t\"\"\"Runs NMS on a single image and returns padded output.\"\"\"",
   "  (per_image_boxes, per_image_scores, per_image_masks,",
   "    per_image_num_valid_boxes) = args"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "nms_output = ${0:NAME}.run(nms_dict)"
  ],
  "consequent": [
   "(nmsed_boxes, nmsed_scores, nmsed_classes, nmsed_masks,  num_detections) = ${0:NAME}.run([nmsed_boxes, nmsed_scores, nmsed_classes,",
   "                              nmsed_masks, num_detections])"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "testResizeToRange"
  ],
  "consequent": [
   "testResizeToRangePreservesStaticSpatialShape"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME} = ${1:NAME}.${2:NAME}.join(self.get_temp_dir(),"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.${2:NAME}.join(output_directory,"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "with ${0:NAME}.test_session() as ${1:NAME}:"
  ],
  "consequent": [
   "with ${0:NAME}.test_session(graph=tf_graph) as ${1:NAME}:"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME}.assertAllClose(nms_output['detection_scores'], ${1:NAME})"
  ],
  "consequent": [
   "${0:NAME}.assertAllClose(nmsed_scores, ${1:NAME})"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME}.assertAllClose(nms_output['detection_masks'], ${1:NAME})"
  ],
  "consequent": [
   "${0:NAME}.assertAllClose(nmsed_masks, ${1:NAME})"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "tf_example_placeholder"
  ],
  "consequent": [
   "tf_example_string_tensor"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:STRING}: image_shape"
  ],
  "consequent": [
   "${0:STRING}: image_shape_placeholder,"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "num_valid_boxes"
  ],
  "consequent": [
   "stack"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "(boxes, scores, classes, masks, num_detections) = ${0:NAME}.run("
  ],
  "consequent": [
   "(boxes_np, scores_np, classes_np, masks_np,  num_detections_np) = ${0:NAME}.run("
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME}.assertAllClose(nms_output['detection_boxes'], ${1:NAME})"
  ],
  "consequent": [
   "${0:NAME}.assertAllClose(nmsed_boxes, ${1:NAME})"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "def test_export_frozen_graph_with_moving_averages(${0:NAME}):"
  ],
  "consequent": [
   "def test_export_model_with_all_output_nodes(${0:NAME}):",
   "\ttmp_dir = ${0:NAME}.get_temp_dir()"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:STRING}: class_predictions_with_background,"
  ],
  "consequent": [
   "${0:STRING}:",
   "class_predictions_with_background_placeholder,"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "graph or a SavedModel (${0:NAME}://${1:NAME}.${2:NAME}.${3:NAME}/${4:NAME}/${5:NAME}.${6:NAME})."
  ],
  "consequent": [
   "SavedModel (${0:NAME}://${1:NAME}.${2:NAME}.${3:NAME}/${4:NAME}/${5:NAME}.${6:NAME})."
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME}={${1:NAME}: ${2:NAME}.ones((1, ${3:NUMBER}, ${3:NUMBER}, ${4:NUMBER})).astype(${2:NAME}.${5:NAME})})"
  ],
  "consequent": [
   "${0:NAME}={${1:NAME}: ${2:NAME}.ones((2, ${3:NUMBER}, ${3:NUMBER}, ${4:NUMBER})).astype(${2:NAME}.${5:NAME})})"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "--checkpoint_path ${0:NAME}/${1:NAME}/${2:NAME}-ckpt"
  ],
  "consequent": [
   "--trained_checkpoint_prefix ${0:NAME}/${1:NAME}/${2:NAME}.ckpt"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "inference_graph_path = ${0:NAME}.${1:NAME}.join(self.get_temp_dir(),",
   "                                     'exported_graph.pbtxt')"
  ],
  "consequent": [
   "output_directory = ${0:NAME}.${1:NAME}.join(tmp_dir, 'output')"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "num_proposals"
  ],
  "consequent": [
   "num_proposals_placeholder"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:NAME}.assertAllClose(${1:NAME}, ${2:NAME}.arange(32).reshape([${3:NUMBER}, ${4:NUMBER}, ${4:NUMBER}]))"
  ],
  "consequent": [
   "${0:NAME}.assertAllClose(${1:NAME}, ${2:NAME}.arange(64).reshape([${3:NUMBER}, ${3:NUMBER}, ${4:NUMBER}, ${4:NUMBER}]))"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "frozen_graph_def = freeze_graph_with_def_protos(",
   "     input_graph_def=inference_graph_def,",
   "     input_saver_def=saver.as_saver_def(),",
   "     input_checkpoint=input_checkpoint,",
   "     output_node_names=output_node_names,",
   "     restore_op_name='save/restore_all',",
   "     filename_tensor_name='save/Const:0',",
   "     clear_devices=True,",
   "     initializer_nodes='')"
  ],
  "consequent": [
   "def _image_tensor_input_placeholder():",
   "\t\"\"\"Returns placeholder and input node that accepts a batch of uint8 images.\"\"\"",
   "  input_tensor = tf.placeholder(dtype=tf.uint8,",
   "                                 shape=(None, None, None, 3),",
   "                                 name='image_tensor')",
   "  return input_tensor, input_tensor"
  ]
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "created_at": "2017-07-27 22:07:21",
  "condition": [
   "${0:STRING}: ${1:NAME}.constant([[${2:NUMBER}, ${2:NUMBER}, ${3:NUMBER}, ${3:NUMBER}],"
  ],
  "consequent": [
   "${0:STRING}: ${1:NAME}.constant([[[${2:NUMBER}, ${2:NUMBER}, ${3:NUMBER}, ${3:NUMBER}],",
   "                                  [${3:NUMBER}, ${3:NUMBER}, 0.8, 0.8]],",
   "                                 [[${3:NUMBER}, ${3:NUMBER}, 1.0, 1.0],"
  ]
 },
 {
  "number": 2044,
  "sha": "2e960eb1ed234c94917e1cee55d915b57d6be336",
  "author": "tfboyd",
  "created_at": "2017-07-26 15:21:36",
  "condition": [
   "ParamServerDeviceSetter"
  ],
  "consequent": [
   "GpuParamServerDeviceSetter"
  ]
 },
 {
  "number": 2044,
  "sha": "2e960eb1ed234c94917e1cee55d915b57d6be336",
  "author": "tfboyd",
  "created_at": "2017-07-26 15:21:36",
  "condition": [
   "${0:NAME}: ${1:NAME} ${2:NAME} ${3:NAME} ${4:NAME} for computer ops."
  ],
  "consequent": [
   "${0:NAME}: ${1:NAME} ${2:NAME} ${3:NAME} ${4:NAME} for computation Ops."
  ]
 },
 {
  "number": 2044,
  "sha": "2e960eb1ed234c94917e1cee55d915b57d6be336",
  "author": "tfboyd",
  "created_at": "2017-07-26 15:21:36",
  "condition": [
   "ops"
  ],
  "consequent": [
   "Ops"
  ]
 },
 {
  "number": 2044,
  "sha": "2e960eb1ed234c94917e1cee55d915b57d6be336",
  "author": "tfboyd",
  "created_at": "2017-07-26 15:21:36",
  "condition": [
   "${0:NAME} = [${1:STRING} % ${2:NAME} for ${2:NAME} in range(FLAGS.${3:NAME})]"
  ],
  "consequent": [
   "${0:NAME} = [${1:STRING} % ${2:NAME} for ${2:NAME} in range(${3:NAME})]"
  ]
 },
 {
  "number": 2044,
  "sha": "2e960eb1ed234c94917e1cee55d915b57d6be336",
  "author": "tfboyd",
  "created_at": "2017-07-26 15:21:36",
  "condition": [
   "${0:NAME} = _create_device_setter(${1:NAME}, ${2:NAME})"
  ],
  "consequent": [
   "${0:NAME} = _create_device_setter(${1:NAME}, ${2:NAME}, FLAGS.num_gpus)"
  ]
 },
 {
  "number": 2012,
  "sha": "dac7db72dd5b9514801fa13d54f84817372e224c",
  "author": "sussillo",
  "created_at": "2017-07-21 21:09:26",
  "condition": [
   "spikified_data_e: ${0:NAME} ${1:NAME} ${2:NAME} ${3:NAME} ${4:NAME} ${2:NAME} ${5:NAME} ${6:NAME} represented as spikes,",
   "sampled from ${5:NAME} underlying poisson process."
  ],
  "consequent": [
   "gauss_e: ${0:NAME} ${1:NAME} ${2:NAME} ${3:NAME} ${4:NAME} ${2:NAME} ${5:NAME} ${6:NAME} with noise."
  ]
 },
 {
  "number": 2012,
  "sha": "dac7db72dd5b9514801fa13d54f84817372e224c",
  "author": "sussillo",
  "created_at": "2017-07-21 21:09:26",
  "condition": [
   "spikified_data_e"
  ],
  "consequent": [
   "spikified_e"
  ]
 },
 {
  "number": 1869,
  "sha": "545b75f9e221d84f4470df657493dd63c92f6c6a",
  "author": "tmattio",
  "created_at": "2017-07-06 06:38:12",
  "condition": [
   "for ${0:NAME}, ${1:NAME} in six.iteritems(${2:NAME}):"
  ],
  "consequent": [
   "for ${0:NAME}, ${1:NAME} in ${2:NAME}.items():"
  ]
 },
 {
  "number": 1538,
  "sha": "b5acc005968d37495f0e7d83d2dd2ef3d3674211",
  "author": "tfboyd",
  "created_at": "2017-06-08 17:14:00",
  "condition": [
   "${0:NAME} = tower_loss(${1:NAME})"
  ],
  "consequent": [
   "${0:NAME} = tower_loss(${1:NAME}, images, labels)"
  ]
 },
 {
  "number": 1538,
  "sha": "b5acc005968d37495f0e7d83d2dd2ef3d3674211",
  "author": "tfboyd",
  "created_at": "2017-06-08 17:14:00",
  "condition": [
   "def tower_loss(${0:NAME}):"
  ],
  "consequent": [
   "def tower_loss(${0:NAME}, images, labels):"
  ]
 },
 {
  "number": 1536,
  "sha": "11733fcafdb148878052c47dda0e4b9e76736700",
  "author": "awilliamson",
  "created_at": "2017-06-07 18:13:27",
  "condition": [
   "${0:NAME} = ${1:NAME}.${2:NAME}.local_response_normalization("
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.${2:NAME}.local_response_normalization(conv1,",
   "                                           alpha=1e-4,",
   "                                           beta=0.75,",
   "                                           depth_radius=2,",
   "                                           bias=2.0)"
  ]
 },
 {
  "number": 1536,
  "sha": "11733fcafdb148878052c47dda0e4b9e76736700",
  "author": "awilliamson",
  "created_at": "2017-06-07 18:13:27",
  "condition": [
   "${0:NAME} = ${1:NAME}.${2:NAME}.local_response_normalization("
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.${2:NAME}.local_response_normalization(conv2,",
   "                                           alpha=1e-4,",
   "                                           beta=0.75,",
   "                                           depth_radius=2,",
   "                                           bias=2.0)"
  ]
 },
 {
  "number": 1532,
  "sha": "76cf35de36b3d5a10255c54b2e54500048c79b47",
  "author": "andrewgilbert12",
  "created_at": "2017-06-06 09:49:02",
  "condition": [
   "${0:NAME} = ${1:NAME}.concat([${2:NAME}, ${3:NAME}], ${4:NUMBER})"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.concat(axis=${4:NUMBER}, values=[${2:NAME}, ${3:NAME}])"
  ]
 },
 {
  "number": 1532,
  "sha": "76cf35de36b3d5a10255c54b2e54500048c79b47",
  "author": "andrewgilbert12",
  "created_at": "2017-06-06 09:49:02",
  "condition": [
   "convolution2d"
  ],
  "consequent": [
   "conv2d"
  ]
 },
 {
  "number": 1487,
  "sha": "99f9442b0f1f5225c7ef725c32e55afb41186e66",
  "author": "nealwu",
  "created_at": "2017-05-18 23:58:45",
  "condition": [
   "barrier = ${0:NAME}.no_op(name='gradient_barrier')"
  ],
  "consequent": [
   "output = ${0:NAME}.identity(output)"
  ]
 },
 {
  "number": 1487,
  "sha": "99f9442b0f1f5225c7ef725c32e55afb41186e66",
  "author": "nealwu",
  "created_at": "2017-05-18 23:58:45",
  "condition": [
   "${0:NAME}.assertEquals(${1:NAME}.${2:NAME}.${3:NAME}, 'Dropout/dropout/mul_1')"
  ],
  "consequent": [
   "${0:NAME}.assertEquals(${1:NAME}.${2:NAME}.${3:NAME}, 'Dropout/dropout/mul')"
  ]
 },
 {
  "number": 1447,
  "sha": "cb4a4853e821bea8cda500b1759cf2e7ab6a1ed5",
  "author": "ahundt",
  "created_at": "2017-05-05 23:14:37",
  "condition": [
   "${0:NAME}=True, reuse=reuse, scope=scope)"
  ],
  "consequent": [
   "${0:NAME}=True, spatial_squeeze=spatial_squeeze,"
  ]
 },
 {
  "number": 1425,
  "sha": "b2fc63b3fcd1cd7732b732d07b108cec64bf75de",
  "author": "edouardfouche",
  "created_at": "2017-04-28 17:39:08",
  "condition": [
   "for ${0:NAME} in range(${1:NAME}.${2:NAME}):"
  ],
  "consequent": [
   "for ${0:NAME} in six.moves.range(${1:NAME}.${2:NAME}):"
  ]
 },
 {
  "number": 1425,
  "sha": "b2fc63b3fcd1cd7732b732d07b108cec64bf75de",
  "author": "edouardfouche",
  "created_at": "2017-04-28 17:39:08",
  "condition": [
   "for ${0:NAME} in range(len(${1:NAME})):"
  ],
  "consequent": [
   "for ${0:NAME} in six.moves.range(len(${1:NAME})):"
  ]
 },
 {
  "number": 1127,
  "sha": "74ad728e9ec024be1182fc7e4f8b881440d9c274",
  "author": "AsterAI",
  "created_at": "2017-03-08 13:19:42",
  "condition": [
   "log_steps = ${0:NAME}.log_steps_count"
  ],
  "consequent": [
   "if self._step % ${0:NAME}.log_frequency == 0:",
   "\tcurrent_time = time.time()"
  ]
 },
 {
  "number": 1127,
  "sha": "74ad728e9ec024be1182fc7e4f8b881440d9c274",
  "author": "AsterAI",
  "created_at": "2017-03-08 13:19:42",
  "condition": [
   "${0:NAME} = time.time() - ${1:NAME}.${2:NAME}"
  ],
  "consequent": [
   "${0:NAME} = current_time - ${1:NAME}.${2:NAME}"
  ]
 },
 {
  "number": 1127,
  "sha": "74ad728e9ec024be1182fc7e4f8b881440d9c274",
  "author": "AsterAI",
  "created_at": "2017-03-08 13:19:42",
  "condition": [
   "${0:NAME}.${1:NAME} = time.time()"
  ],
  "consequent": [
   "${0:NAME}.${1:NAME} = current_time"
  ]
 },
 {
  "number": 1073,
  "sha": "d6787c0fdd0011d61860f849767e40d9d45e87e3",
  "author": "knathanieltucker",
  "created_at": "2017-02-26 07:51:14",
  "condition": [
   "${0:NAME} = ${1:NAME}.${2:NAME}.${3:NAME}.MultiRNNCell([lstm_cell] * config.num_layers)"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.${2:NAME}.${3:NAME}.MultiRNNCell(lstm_cells)"
  ]
 },
 {
  "number": 1073,
  "sha": "d6787c0fdd0011d61860f849767e40d9d45e87e3",
  "author": "knathanieltucker",
  "created_at": "2017-02-26 07:51:14",
  "condition": [
   "lstm_cell = tf.contrib.rnn.BasicLSTMCell(size, forget_bias=0.0)"
  ],
  "consequent": [
   "lstm_cells = []"
  ]
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "created_at": "2017-02-23 22:32:21",
  "condition": [
   "${0:NAME}.${1:NAME}.scalar(${2:STRING}, ${3:NAME}.${4:NAME}, name=${2:STRING})"
  ],
  "consequent": [
   "${0:NAME}.${1:NAME}.scalar(${2:STRING}, ${3:NAME}.${4:NAME})"
  ]
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "created_at": "2017-02-23 22:32:21",
  "condition": [
   "${0:NAME} = ${1:NAME}.concat(${2:NAME}=[${0:NAME}] * ${3:NAME}, ${4:NAME}=${5:NUMBER})"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.concat(${2:NAME}=${5:NUMBER}, ${4:NAME}=[${0:NAME}] * ${3:NAME})"
  ]
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "created_at": "2017-02-23 22:32:21",
  "condition": [
   "return ${0:NAME}.concat(${1:NAME}=[${2:NAME}, ${3:NAME}, ${4:NAME}], ${5:NAME}=${6:NUMBER})"
  ],
  "consequent": [
   "return ${0:NAME}.concat(${1:NAME}=${6:NUMBER}, ${5:NAME}=[${2:NAME}, ${3:NAME}, ${4:NAME}])"
  ]
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "created_at": "2017-02-23 22:32:21",
  "condition": [
   "${0:NAME}.concat(${1:NAME}=${2:NAME}, ${3:NAME}=${4:NUMBER}, ${5:NAME}=${6:STRING})"
  ],
  "consequent": [
   "${0:NAME}.concat(${1:NAME}=${4:NUMBER}, ${3:NAME}=${2:NAME}, ${5:NAME}=${6:STRING})"
  ]
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "created_at": "2017-02-23 22:32:21",
  "condition": [
   "${0:NAME} = ${1:NAME}.concat(${2:NAME}=${0:NAME}, ${3:NAME}=${4:NUMBER})"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.concat(${2:NAME}=${4:NUMBER}, ${3:NAME}=${0:NAME})"
  ]
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "created_at": "2017-02-23 22:32:21",
  "condition": [
   "${0:NAME} = ${1:NAME}.reshape(${1:NAME}.transpose(${1:NAME}.concat(${2:NAME}=${0:NAME}, ${3:NAME}=${4:NUMBER}), [${4:NUMBER}, ${5:NUMBER}]),"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.reshape(${1:NAME}.transpose(${1:NAME}.concat(${2:NAME}=${4:NUMBER}, ${3:NAME}=${0:NAME}), [${4:NUMBER}, ${5:NUMBER}]),"
  ]
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "created_at": "2017-02-23 22:32:21",
  "condition": [
   "${0:NAME}, ${1:NAME} = ${2:NAME}.split(${3:NAME}=${1:NAME}, ${4:NAME}=${5:NUMBER}, ${6:NAME}=${7:NUMBER})"
  ],
  "consequent": [
   "${0:NAME}, ${1:NAME} = ${2:NAME}.split(${3:NAME}=${7:NUMBER}, ${4:NAME}=${5:NUMBER}, ${6:NAME}=${1:NAME})"
  ]
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "created_at": "2017-02-23 22:32:21",
  "condition": [
   "${0:NAME}.conv2d(${1:NAME}, ${2:NUMBER}, [${3:NUMBER}, ${4:NUMBER}])], values=${3:NUMBER})"
  ],
  "consequent": [
   "${0:NAME}.conv2d(${1:NAME}, ${2:NUMBER}, [${3:NUMBER}, ${4:NUMBER}])])"
  ]
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "created_at": "2017-02-23 22:32:21",
  "condition": [
   "${0:NAME} = ${1:NAME}.concat(${2:NAME}=[${3:NAME}.conv2d(${0:NAME}, ${4:NUMBER}, [${5:NUMBER}, ${6:NUMBER}]),"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.concat(${2:NAME}=${6:NUMBER}, values=[${3:NAME}.conv2d(${0:NAME}, ${4:NUMBER}, [${5:NUMBER}, ${6:NUMBER}]),"
  ]
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "created_at": "2017-02-23 22:32:21",
  "condition": [
   "${0:NAME} = ${1:NAME}.concat(${2:NAME}=[${3:NAME}, ${4:NAME}, ${5:NAME}], ${6:NAME}=${7:NUMBER})"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.concat(${2:NAME}=${7:NUMBER}, ${6:NAME}=[${3:NAME}, ${4:NAME}, ${5:NAME}])"
  ]
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "created_at": "2017-02-23 22:32:21",
  "condition": [
   "${0:NAME} = ${1:NAME}.split(${2:NAME}=${1:NAME}.${3:NAME}.log_softmax(${4:NAME}), ${5:NAME}=${6:NAME}, ${7:NAME}=${8:NUMBER})"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.split(${2:NAME}=${8:NUMBER}, ${5:NAME}=${6:NAME}, ${7:NAME}=${1:NAME}.${3:NAME}.log_softmax(${4:NAME}))"
  ]
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "created_at": "2017-02-23 22:32:21",
  "condition": [
   "${0:NAME} = ${1:NAME}.reshape(${1:NAME}.concat(${2:NAME}=[${3:NAME}, ${4:NAME}], ${5:NAME}=${6:NUMBER}),"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.reshape(${1:NAME}.concat(${2:NAME}=${6:NUMBER}, ${5:NAME}=[${3:NAME}, ${4:NAME}]),"
  ]
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "created_at": "2017-02-23 22:32:21",
  "condition": [
   "${0:NAME}.${1:NAME} = ${2:NAME}.concat(${3:NAME}=${0:NAME}.${1:NAME}, ${4:NAME}=${5:NUMBER})",
   "                "
  ],
  "consequent": [
   "${0:NAME}.${1:NAME} = ${2:NAME}.concat(${3:NAME}=${5:NUMBER}, ${4:NAME}=${0:NAME}.${1:NAME})",
   "                "
  ]
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "created_at": "2017-02-23 22:32:21",
  "condition": [
   "${0:NAME} = ${1:NAME}.concat(${2:NAME}=[${3:NAME}] * ${4:NAME}, ${5:NAME}=${6:NUMBER})"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.concat(${2:NAME}=${6:NUMBER}, ${5:NAME}=[${3:NAME}] * ${4:NAME})"
  ]
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "created_at": "2017-02-23 22:32:21",
  "condition": [
   "${0:NAME} = [${1:NAME}.concat(${2:NAME}=${3:NAME}, ${4:NAME}=${5:NUMBER}) for ${3:NAME} in ${6:NAME}]"
  ],
  "consequent": [
   "${0:NAME} = [${1:NAME}.concat(${2:NAME}=${5:NUMBER}, ${4:NAME}=${3:NAME}) for ${3:NAME} in ${6:NAME}]"
  ]
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "created_at": "2017-02-23 22:32:21",
  "condition": [
   "${0:NAME}, ${1:NAME} = ${2:NAME}.split(${3:NAME}=${0:NAME}, ${4:NAME}=${5:NUMBER}, ${6:NAME}=${7:NUMBER})"
  ],
  "consequent": [
   "${0:NAME}, ${1:NAME} = ${2:NAME}.split(${3:NAME}=${7:NUMBER}, ${4:NAME}=${5:NUMBER}, ${6:NAME}=${0:NAME})"
  ]
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "created_at": "2017-02-23 22:32:21",
  "condition": [
   "${0:NAME} = ${1:NAME}.concat(${2:NAME}=[${3:NAME}, ${4:NAME}], ${5:NAME}=${6:NUMBER})"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.concat(${2:NAME}=${6:NUMBER}, ${5:NAME}=[${3:NAME}, ${4:NAME}])"
  ]
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "created_at": "2017-02-23 22:32:21",
  "condition": [
   "${0:NAME}.${1:NAME} = [${2:NAME}.concat(${3:NAME}=[${4:NAME}[${5:NAME}] for ${5:NAME} in xrange(${6:NAME})], ${7:NAME}=${8:NUMBER})]"
  ],
  "consequent": [
   "${0:NAME}.${1:NAME} = [${2:NAME}.concat(${3:NAME}=${8:NUMBER}, ${7:NAME}=[${4:NAME}[${5:NAME}] for ${5:NAME} in xrange(${6:NAME})])]"
  ]
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "created_at": "2017-02-23 22:32:21",
  "condition": [
   "${0:NAME}, ${1:NAME} = ${2:NAME}.split(${3:NAME}=${4:NAME}, ${5:NAME}=${6:NUMBER}, ${7:NAME}=${8:NUMBER})"
  ],
  "consequent": [
   "${0:NAME}, ${1:NAME} = ${2:NAME}.split(${3:NAME}=${8:NUMBER}, ${5:NAME}=${6:NUMBER}, ${7:NAME}=${4:NAME})"
  ]
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "created_at": "2017-02-23 22:32:21",
  "condition": [
   "${0:NAME} = ${1:NAME}.split(${2:NAME}=${3:NAME}.${4:NAME}, ${5:NAME}=${6:NAME}, ${7:NAME}=${8:NUMBER})"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.split(${2:NAME}=${8:NUMBER}, ${5:NAME}=${6:NAME}, ${7:NAME}=${3:NAME}.${4:NAME})"
  ]
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "created_at": "2017-02-23 22:32:21",
  "condition": [
   "${0:NAME}.${1:NAME} = ${2:NAME}.concat(${3:NAME}=${4:NAME}, ${5:NAME}=${6:NUMBER})"
  ],
  "consequent": [
   "${0:NAME}.${1:NAME} = ${2:NAME}.concat(${3:NAME}=${6:NUMBER}, ${5:NAME}=${4:NAME})"
  ]
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "created_at": "2017-02-23 22:32:21",
  "condition": [
   "${0:NAME}.expand_dims(${1:NAME}, ${2:NUMBER})], values=${2:NUMBER})"
  ],
  "consequent": [
   "${0:NAME}.expand_dims(${1:NAME}, ${2:NUMBER})])"
  ]
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "created_at": "2017-02-23 22:32:21",
  "condition": [
   "${0:NAME}.${1:NAME}.scalar(${2:NAME}.${3:NAME} + ${4:STRING}, ${5:NAME},"
  ],
  "consequent": [
   "${0:NAME}.${1:NAME}.scalar(${2:NAME}.${3:NAME} + ${4:STRING}, ${5:NAME})"
  ]
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "created_at": "2017-02-23 22:32:21",
  "condition": [
   "${0:NAME}.add(${1:NAME}.${2:NAME}.scalar(${3:STRING}, ${4:NAME},"
  ],
  "consequent": [
   "${0:NAME}.add(${1:NAME}.${2:NAME}.scalar(${3:STRING}, ${4:NAME}))"
  ]
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "created_at": "2017-02-23 22:32:21",
  "condition": [
   "${0:NAME} = ${1:NAME}.concat(${2:NAME}=[${3:NAME}, ${4:NAME}, ${5:NAME}, ${6:NAME}], ${7:NAME}=${8:NUMBER})"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.concat(${2:NAME}=${8:NUMBER}, ${7:NAME}=[${3:NAME}, ${4:NAME}, ${5:NAME}, ${6:NAME}])"
  ]
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "created_at": "2017-02-23 22:32:21",
  "condition": [
   "${0:NAME}.${1:NAME}.scalar(${2:STRING}, ${3:NAME},"
  ],
  "consequent": [
   "${0:NAME}.${1:NAME}.scalar(${2:STRING}, ${3:NAME})"
  ]
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "created_at": "2017-02-23 22:32:21",
  "condition": [
   "${0:NAME} = ${1:NAME}.split(${2:NAME}=${0:NAME}, ${3:NAME}=${4:NUMBER}, ${5:NAME}=${6:NUMBER})"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.split(${2:NAME}=${6:NUMBER}, ${3:NAME}=${4:NUMBER}, ${5:NAME}=${0:NAME})"
  ]
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "created_at": "2017-02-23 22:32:21",
  "condition": [
   "${0:NAME}.${1:NAME}.scalar(${2:STRING}, ${3:NAME}, name='lr_summ')"
  ],
  "consequent": [
   "${0:NAME}.${1:NAME}.scalar(${2:STRING}, ${3:NAME})"
  ]
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "created_at": "2017-02-23 22:32:21",
  "condition": [
   "${0:NAME}.concat(${1:NAME}=[${2:NAME}, ${3:NAME}], ${4:NAME}=${5:NUMBER}), ${6:NAME} * ${7:NAME}, ${8:NAME}=${9:STRING})"
  ],
  "consequent": [
   "${0:NAME}.concat(${1:NAME}=${5:NUMBER}, ${4:NAME}=[${2:NAME}, ${3:NAME}]), ${6:NAME} * ${7:NAME}, ${8:NAME}=${9:STRING})"
  ]
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "created_at": "2017-02-23 22:32:21",
  "condition": [
   "${0:NAME} = ${1:NAME}.reshape(${1:NAME}.concat(${2:NAME}=${3:NAME}, ${4:NAME}=${5:NUMBER}), [-${5:NUMBER}, ${6:NAME}])"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.reshape(${1:NAME}.concat(${2:NAME}=${5:NUMBER}, ${4:NAME}=${3:NAME}), [-${5:NUMBER}, ${6:NAME}])"
  ]
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "created_at": "2017-02-23 22:32:21",
  "condition": [
   "${0:NAME} = ${1:NAME}.concat(${2:NAME}=${3:NAME}, ${4:NAME}=${5:NUMBER})"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.concat(${2:NAME}=${5:NUMBER}, ${4:NAME}=${3:NAME})"
  ]
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "created_at": "2017-02-23 22:32:21",
  "condition": [
   "${0:NAME} = ${1:NAME}.concat(${2:NAME}=[${1:NAME}.expand_dims(${3:NAME}, ${4:NUMBER}),"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.concat(${2:NAME}=${4:NUMBER}, values=[${1:NAME}.expand_dims(${3:NAME}, ${4:NUMBER}),"
  ]
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "created_at": "2017-02-23 22:32:21",
  "condition": [
   "${0:NAME}, ${1:NAME} = ${2:NAME}.${3:NAME}.top_k(${2:NAME}.concat(${4:NAME}=${5:NAME}, ${6:NAME}=${7:NUMBER}), ${8:NAME}=${9:NAME})"
  ],
  "consequent": [
   "${0:NAME}, ${1:NAME} = ${2:NAME}.${3:NAME}.top_k(${2:NAME}.concat(${4:NAME}=${7:NUMBER}, ${6:NAME}=${5:NAME}), ${8:NAME}=${9:NAME})"
  ]
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "created_at": "2017-02-23 22:32:21",
  "condition": [
   "${0:NAME} = ${1:NAME}.concat(${2:NAME}=[${1:NAME}.shape(${3:NAME}), [${4:NUMBER}]], ${5:NAME}=${6:NUMBER})"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.concat(${2:NAME}=${6:NUMBER}, ${5:NAME}=[${1:NAME}.shape(${3:NAME}), [${4:NUMBER}]])"
  ]
 },
 {
  "number": 1053,
  "sha": "289b439308be829db258d5b1bb33a6de03769e57",
  "author": "nealwu",
  "created_at": "2017-02-22 02:24:55",
  "condition": [
   "tf.squeeze(${0:NAME}), ${1:NAME}, label_smoothing=FLAGS.label_smoothing, weights=1.0)"
  ],
  "consequent": [
   "${0:NAME}=${0:NAME}, onehot_labels=${1:NAME},"
  ]
 },
 {
  "number": 1053,
  "sha": "289b439308be829db258d5b1bb33a6de03769e57",
  "author": "nealwu",
  "created_at": "2017-02-22 02:24:55",
  "condition": [
   "'Recall@5': ${0:NAME}.${1:NAME}.streaming_recall_at_k("
  ],
  "consequent": [
   "'Recall_5': ${0:NAME}.${1:NAME}.streaming_recall_at_k("
  ]
 },
 {
  "number": 1053,
  "sha": "289b439308be829db258d5b1bb33a6de03769e57",
  "author": "nealwu",
  "created_at": "2017-02-22 02:24:55",
  "condition": [
   "${0:NAME}.${1:NAME}.scalar('clone_loss', ${2:NAME})"
  ],
  "consequent": [
   "${0:NAME}.${1:NAME}.scalar(clone.scope + '/clone_loss', ${2:NAME})"
  ]
 },
 {
  "number": 1053,
  "sha": "289b439308be829db258d5b1bb33a6de03769e57",
  "author": "nealwu",
  "created_at": "2017-02-22 02:24:55",
  "condition": [
   "net"
  ],
  "consequent": [
   "logits"
  ]
 },
 {
  "number": 1031,
  "sha": "64254ad355f9ea72531ae305c2db2a737c47c9a9",
  "author": "nealwu",
  "created_at": "2017-02-18 01:43:59",
  "condition": [
   "${0:NAME}.${1:NAME}.info('loss: %.3f, precision: %.3f, best precision: %.3f\\n' %"
  ],
  "consequent": [
   "${0:NAME}.${1:NAME}.info('loss: %.3f, precision: %.3f, best precision: %.3f' %"
  ]
 },
 {
  "number": 982,
  "sha": "0d8916f4b84e8687eb46696883b50b84ac6aa420",
  "author": "arvind385801",
  "created_at": "2017-02-05 15:05:57",
  "condition": [
   "def sampled_loss(${0:NAME},${1:NAME}):"
  ],
  "consequent": [
   "def sampled_loss(${0:NAME}, ${1:NAME}):"
  ]
 },
 {
  "number": 982,
  "sha": "0d8916f4b84e8687eb46696883b50b84ac6aa420",
  "author": "arvind385801",
  "created_at": "2017-02-05 15:05:57",
  "condition": [
   "return ${0:NAME}.nn.rnn_cell.GRUCell(${1:NAME})"
  ],
  "consequent": [
   "return ${0:NAME}.contrib.rnn.GRUCell(${1:NAME})"
  ]
 },
 {
  "number": 982,
  "sha": "0d8916f4b84e8687eb46696883b50b84ac6aa420",
  "author": "arvind385801",
  "created_at": "2017-02-05 15:05:57",
  "condition": [
   "${0:NAME}.${1:NAME}, ${0:NAME}.${2:NAME} = ${3:NAME}.nn.seq2seq.model_with_buckets("
  ],
  "consequent": [
   "${0:NAME}.${1:NAME}, ${0:NAME}.${2:NAME} = ${3:NAME}.contrib.legacy_seq2seq.model_with_buckets("
  ]
 },
 {
  "number": 982,
  "sha": "0d8916f4b84e8687eb46696883b50b84ac6aa420",
  "author": "arvind385801",
  "created_at": "2017-02-05 15:05:57",
  "condition": [
   "return ${0:NAME}.nn.rnn_cell.BasicLSTMCell(${1:NAME})"
  ],
  "consequent": [
   "return ${0:NAME}.contrib.rnn.BasicLSTMCell(${1:NAME})"
  ]
 },
 {
  "number": 982,
  "sha": "0d8916f4b84e8687eb46696883b50b84ac6aa420",
  "author": "arvind385801",
  "created_at": "2017-02-05 15:05:57",
  "condition": [
   "${0:NAME} = ${1:NAME}.nn.rnn_cell.MultiRNNCell([single_cell() for ${2:NAME} in range(${3:NAME})])"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.contrib.rnn.MultiRNNCell([single_cell() for ${2:NAME} in range(${3:NAME})])"
  ]
 },
 {
  "number": 982,
  "sha": "0d8916f4b84e8687eb46696883b50b84ac6aa420",
  "author": "arvind385801",
  "created_at": "2017-02-05 15:05:57",
  "condition": [
   "return ${0:NAME}.nn.seq2seq.embedding_attention_seq2seq("
  ],
  "consequent": [
   "return ${0:NAME}.contrib.legacy_seq2seq.embedding_attention_seq2seq("
  ]
 },
 {
  "number": 959,
  "sha": "4ec3452d9524726297c0aeb92933a79296345e7e",
  "author": "yaroslavvb",
  "created_at": "2017-01-26 22:07:26",
  "condition": [
   "for ${0:NAME} in xrange(${1:NAME}.${2:NAME}):"
  ],
  "consequent": [
   "for ${0:NAME} in six.moves.range(${1:NAME}.${2:NAME}):"
  ]
 },
 {
  "number": 959,
  "sha": "4ec3452d9524726297c0aeb92933a79296345e7e",
  "author": "yaroslavvb",
  "created_at": "2017-01-26 22:07:26",
  "condition": [
   "concat"
  ],
  "consequent": [
   "concat_v2"
  ]
 },
 {
  "number": 881,
  "sha": "a46f826f5e3f063dc39cce339d4f836a167ce6b1",
  "author": "cshallue",
  "created_at": "2017-01-10 18:56:31",
  "condition": [
   "mul"
  ],
  "consequent": [
   "div"
  ]
 },
 {
  "number": 881,
  "sha": "a46f826f5e3f063dc39cce339d4f836a167ce6b1",
  "author": "cshallue",
  "created_at": "2017-01-10 18:56:31",
  "condition": [
   "${0:NAME} = ${1:NAME}.nn.rnn_cell.DropoutWrapper("
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.contrib.rnn.DropoutWrapper("
  ]
 },
 {
  "number": 881,
  "sha": "a46f826f5e3f063dc39cce339d4f836a167ce6b1",
  "author": "cshallue",
  "created_at": "2017-01-10 18:56:31",
  "condition": [
   "VARIABLES"
  ],
  "consequent": [
   "GLOBAL_VARIABLES"
  ]
 },
 {
  "number": 881,
  "sha": "a46f826f5e3f063dc39cce339d4f836a167ce6b1",
  "author": "cshallue",
  "created_at": "2017-01-10 18:56:31",
  "condition": [
   "expand_dims"
  ],
  "consequent": [
   "subtract"
  ]
 },
 {
  "number": 881,
  "sha": "a46f826f5e3f063dc39cce339d4f836a167ce6b1",
  "author": "cshallue",
  "created_at": "2017-01-10 18:56:31",
  "condition": [
   "sub"
  ],
  "consequent": [
   "subtract"
  ]
 },
 {
  "number": 881,
  "sha": "a46f826f5e3f063dc39cce339d4f836a167ce6b1",
  "author": "cshallue",
  "created_at": "2017-01-10 18:56:31",
  "condition": [
   "all_variables"
  ],
  "consequent": [
   "global_variables"
  ]
 },
 {
  "number": 881,
  "sha": "a46f826f5e3f063dc39cce339d4f836a167ce6b1",
  "author": "cshallue",
  "created_at": "2017-01-10 18:56:31",
  "condition": [
   "${0:NAME} = ${1:NAME}.${2:NAME}.sparse_softmax_cross_entropy_with_logits(${3:NAME}, ${4:NAME})"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.${2:NAME}.sparse_softmax_cross_entropy_with_logits(labels=${4:NAME},",
   "                                                         ${3:NAME}=${3:NAME})"
  ]
 },
 {
  "number": 881,
  "sha": "a46f826f5e3f063dc39cce339d4f836a167ce6b1",
  "author": "cshallue",
  "created_at": "2017-01-10 18:56:31",
  "condition": [
   "mul"
  ],
  "consequent": [
   "multiply"
  ]
 },
 {
  "number": 881,
  "sha": "a46f826f5e3f063dc39cce339d4f836a167ce6b1",
  "author": "cshallue",
  "created_at": "2017-01-10 18:56:31",
  "condition": [
   "${0:NAME} = ${1:NAME}.split(${2:NUMBER}, ${3:NUMBER}, ${4:NAME})"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.split(value=${4:NAME}, num_or_size_splits=${3:NUMBER}, axis=${2:NUMBER})"
  ]
 },
 {
  "number": 881,
  "sha": "a46f826f5e3f063dc39cce339d4f836a167ce6b1",
  "author": "cshallue",
  "created_at": "2017-01-10 18:56:31",
  "condition": [
   "${0:NAME} = ${1:NAME}.nn.rnn_cell.BasicLSTMCell("
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.contrib.rnn.BasicLSTMCell("
  ]
 },
 {
  "number": 881,
  "sha": "a46f826f5e3f063dc39cce339d4f836a167ce6b1",
  "author": "cshallue",
  "created_at": "2017-01-10 18:56:31",
  "condition": [
   "${0:NAME}.concat(${1:NUMBER}, ${2:NAME}, ${3:NAME}=${4:STRING})"
  ],
  "consequent": [
   "${0:NAME}.concat_v2(${2:NAME}, ${1:NUMBER}, ${3:NAME}=${4:STRING})"
  ]
 },
 {
  "number": 864,
  "sha": "f4161b6fc15caa519a275afea14a6c6173a80abe",
  "author": "martinwicke",
  "created_at": "2017-01-08 09:25:56",
  "condition": [
   "${0:NAME}.${1:NAME}.softmax_cross_entropy_with_logits(${2:NAME}, ${3:NAME}))"
  ],
  "consequent": [
   "${0:NAME}.${1:NAME}.softmax_cross_entropy_with_logits(logits=${2:NAME}, targets=${3:NAME}))"
  ]
 },
 {
  "number": 864,
  "sha": "f4161b6fc15caa519a275afea14a6c6173a80abe",
  "author": "martinwicke",
  "created_at": "2017-01-08 09:25:56",
  "condition": [
   "${0:NAME} = ${1:NAME}.${2:NAME}.softmax_cross_entropy_with_logits(${3:NAME},"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.${2:NAME}.softmax_cross_entropy_with_logits(${3:NAME}=${3:NAME},"
  ]
 },
 {
  "number": 852,
  "sha": "97e391dd868abcf833c8273866b34aa69a0d4d17",
  "author": "tae-jun",
  "created_at": "2017-01-05 07:28:54",
  "condition": [
   "${0:NAME}/${1:NAME}/${2:NAME}/data/create_mnist_dataset.${3:NAME}"
  ],
  "consequent": [
   "${0:NAME}/${1:NAME}/${2:NAME}/datasets/download_and_convert_mnist.${3:NAME}"
  ]
 },
 {
  "number": 785,
  "sha": "ba98bc479cb6bf06eb886e885fd5cd730082f670",
  "author": "mrphoenix13",
  "created_at": "2016-12-21 08:05:05",
  "condition": [
   "${0:NAME}.contrib.deprecated.scalar_summary(${1:STRING}, ${2:NAME})"
  ],
  "consequent": [
   "${0:NAME}.scalar_summary(${1:STRING}, ${2:NAME})"
  ]
 },
 {
  "number": 785,
  "sha": "ba98bc479cb6bf06eb886e885fd5cd730082f670",
  "author": "mrphoenix13",
  "created_at": "2016-12-21 08:05:05",
  "condition": [
   "${0:NAME}.contrib.deprecated.histogram_summary(${1:NAME}.${2:NAME}.${3:NAME} + ${4:STRING},"
  ],
  "consequent": [
   "${0:NAME}.histogram_summary(${1:NAME}.${2:NAME}.${3:NAME} + ${4:STRING},"
  ]
 },
 {
  "number": 785,
  "sha": "ba98bc479cb6bf06eb886e885fd5cd730082f670",
  "author": "mrphoenix13",
  "created_at": "2016-12-21 08:05:05",
  "condition": [
   "${0:NAME}.contrib.deprecated.scalar_summary(${1:NAME}, ${2:NAME})"
  ],
  "consequent": [
   "${0:NAME}.scalar_summary(${1:NAME}, ${2:NAME})"
  ]
 },
 {
  "number": 785,
  "sha": "ba98bc479cb6bf06eb886e885fd5cd730082f670",
  "author": "mrphoenix13",
  "created_at": "2016-12-21 08:05:05",
  "condition": [
   "${0:NAME}.contrib.deprecated.image_summary(${1:STRING}, ${2:NAME})"
  ],
  "consequent": [
   "${0:NAME}.image_summary(${1:STRING}, ${2:NAME})"
  ]
 },
 {
  "number": 785,
  "sha": "ba98bc479cb6bf06eb886e885fd5cd730082f670",
  "author": "mrphoenix13",
  "created_at": "2016-12-21 08:05:05",
  "condition": [
   "${0:NAME}.contrib.deprecated.histogram_summary(${1:NAME}.${2:NAME}.${3:NAME}, ${1:NAME}))"
  ],
  "consequent": [
   "${0:NAME}.histogram_summary(${1:NAME}.${2:NAME}.${3:NAME}, ${1:NAME}))"
  ]
 },
 {
  "number": 785,
  "sha": "ba98bc479cb6bf06eb886e885fd5cd730082f670",
  "author": "mrphoenix13",
  "created_at": "2016-12-21 08:05:05",
  "condition": [
   "${0:NAME}.contrib.deprecated.scalar_summary(${1:STRING}, ${2:NAME}.${3:NAME})"
  ],
  "consequent": [
   "${0:NAME}.scalar_summary(${1:STRING}, ${2:NAME}.${3:NAME})"
  ]
 },
 {
  "number": 785,
  "sha": "ba98bc479cb6bf06eb886e885fd5cd730082f670",
  "author": "mrphoenix13",
  "created_at": "2016-12-21 08:05:05",
  "condition": [
   "${0:NAME}.append(${1:NAME}.contrib.deprecated.scalar_summary(${2:STRING}, ${3:NAME}))"
  ],
  "consequent": [
   "${0:NAME}.append(${1:NAME}.scalar_summary(${2:STRING}, ${3:NAME}))"
  ]
 },
 {
  "number": 785,
  "sha": "ba98bc479cb6bf06eb886e885fd5cd730082f670",
  "author": "mrphoenix13",
  "created_at": "2016-12-21 08:05:05",
  "condition": [
   "${0:NAME} = ${1:NAME}.contrib.deprecated.merge_summary(${2:NAME})"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.merge_summary(${2:NAME})"
  ]
 },
 {
  "number": 783,
  "sha": "48f5b4dab71dc1874d3a052c67450dc8e443b510",
  "author": "dweekly",
  "created_at": "2016-12-21 05:00:58",
  "condition": [
   "${0:NAME}.image_summary(${1:NAME}, ${0:NAME}.expand_dims(${2:NAME}, ${3:NUMBER}))"
  ],
  "consequent": [
   "${0:NAME}.summary.${2:NAME}(${1:NAME}, ${0:NAME}.expand_dims(${2:NAME}, ${3:NUMBER}))"
  ]
 },
 {
  "number": 377,
  "sha": "a0de5ca9364f98aa36241c5ea7e891e2f1e1d80b",
  "author": "kaiix",
  "created_at": "2016-08-31 09:07:08",
  "condition": [
   "${0:NAME} = ${1:NAME}.prepare_or_wait_for_session()"
  ],
  "consequent": [
   "${0:NAME} = ${1:NAME}.prepare_or_wait_for_session(config=tf.ConfigProto(",
   "     allow_soft_placement=True))"
  ]
 }
]