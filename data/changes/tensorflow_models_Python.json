[
 {
  "number": 377,
  "sha": "a0de5ca9364f98aa36241c5ea7e891e2f1e1d80b",
  "author": "kaiix",
  "participant": "googlebot",
  "created_at": "2016-08-31 09:07:08",
  "merged_at": "2016-10-17 23:09:45",
  "merged_by": "panyx0718",
  "file_path": "textsum/seq2seq_attention.py",
  "condition": [
   "$0 = $1.prepare_or_wait_for_session()"
  ],
  "consequent": [
   "$0 = $1.prepare_or_wait_for_session(config=tf.ConfigProto(         allow_soft_placement=True))"
  ],
  "identifiers": {
   "condition": [
    "prepare_or_wait_for_session"
   ],
   "consequent": [
    "ConfigProto",
    "allow_soft_placement",
    "prepare_or_wait_for_session",
    "config",
    "tf"
   ]
  }
 },
 {
  "number": 783,
  "sha": "48f5b4dab71dc1874d3a052c67450dc8e443b510",
  "author": "dweekly",
  "participant": "nealwu",
  "created_at": "2016-12-21 05:00:58",
  "merged_at": "2017-03-16 04:37:51",
  "merged_by": "nealwu",
  "file_path": "im2txt/im2txt/ops/image_processing.py",
  "condition": [
   "$0.image_summary($1, $0.expand_dims($2, 0))"
  ],
  "consequent": [
   "$0.summary.$2($1, $0.expand_dims($2, 0))"
  ],
  "identifiers": {
   "condition": [
    "expand_dims",
    "image_summary"
   ],
   "consequent": [
    "expand_dims",
    "summary"
   ]
  }
 },
 {
  "number": 785,
  "sha": "ba98bc479cb6bf06eb886e885fd5cd730082f670",
  "author": "mrphoenix13",
  "participant": "YuMS",
  "created_at": "2016-12-21 08:05:05",
  "merged_at": "2017-01-18 19:14:21",
  "merged_by": "itsmeolivia",
  "file_path": "tutorials/embedding/word2vec.py",
  "condition": [
   "$0.contrib.deprecated.scalar_summary(\"NCE loss\", $1)"
  ],
  "consequent": [
   "$0.scalar_summary(\"NCE loss\", $1)"
  ],
  "identifiers": {
   "condition": [
    "deprecated",
    "contrib",
    "scalar_summary"
   ],
   "consequent": [
    "scalar_summary"
   ]
  }
 },
 {
  "number": 785,
  "sha": "ba98bc479cb6bf06eb886e885fd5cd730082f670",
  "author": "mrphoenix13",
  "participant": "YuMS",
  "created_at": "2016-12-21 08:05:05",
  "merged_at": "2017-01-18 19:14:21",
  "merged_by": "itsmeolivia",
  "file_path": "tutorials/image/cifar10/cifar10_input.py",
  "condition": [
   "$0.contrib.deprecated.image_summary('images', $1)"
  ],
  "consequent": [
   "$0.image_summary('images', $1)"
  ],
  "identifiers": {
   "condition": [
    "deprecated",
    "contrib",
    "image_summary"
   ],
   "consequent": [
    "image_summary"
   ]
  }
 },
 {
  "number": 785,
  "sha": "ba98bc479cb6bf06eb886e885fd5cd730082f670",
  "author": "mrphoenix13",
  "participant": "YuMS",
  "created_at": "2016-12-21 08:05:05",
  "merged_at": "2017-01-18 19:14:21",
  "merged_by": "itsmeolivia",
  "file_path": "tutorials/image/cifar10/cifar10_multi_gpu_train.py",
  "condition": [
   "$0.contrib.deprecated.scalar_summary($1, $2)"
  ],
  "consequent": [
   "$0.scalar_summary($1, $2)"
  ],
  "identifiers": {
   "condition": [
    "deprecated",
    "contrib",
    "scalar_summary"
   ],
   "consequent": [
    "scalar_summary"
   ]
  }
 },
 {
  "number": 785,
  "sha": "ba98bc479cb6bf06eb886e885fd5cd730082f670",
  "author": "mrphoenix13",
  "participant": "YuMS",
  "created_at": "2016-12-21 08:05:05",
  "merged_at": "2017-01-18 19:14:21",
  "merged_by": "itsmeolivia",
  "file_path": "tutorials/image/cifar10/cifar10_multi_gpu_train.py",
  "condition": [
   "$0.append($1.contrib.deprecated.scalar_summary('learning_rate', $2))"
  ],
  "consequent": [
   "$0.append($1.scalar_summary('learning_rate', $2))"
  ],
  "identifiers": {
   "condition": [
    "append",
    "deprecated",
    "contrib",
    "scalar_summary"
   ],
   "consequent": [
    "append",
    "scalar_summary"
   ]
  }
 },
 {
  "number": 785,
  "sha": "ba98bc479cb6bf06eb886e885fd5cd730082f670",
  "author": "mrphoenix13",
  "participant": "YuMS",
  "created_at": "2016-12-21 08:05:05",
  "merged_at": "2017-01-18 19:14:21",
  "merged_by": "itsmeolivia",
  "file_path": "tutorials/image/cifar10/cifar10_multi_gpu_train.py",
  "condition": [
   "$0.contrib.deprecated.histogram_summary($1.$2.$3 + '/gradients',"
  ],
  "consequent": [
   "$0.histogram_summary($1.$2.$3 + '/gradients',"
  ],
  "identifiers": {
   "condition": [
    "histogram_summary",
    "deprecated",
    "contrib"
   ],
   "consequent": [
    "histogram_summary"
   ]
  }
 },
 {
  "number": 785,
  "sha": "ba98bc479cb6bf06eb886e885fd5cd730082f670",
  "author": "mrphoenix13",
  "participant": "YuMS",
  "created_at": "2016-12-21 08:05:05",
  "merged_at": "2017-01-18 19:14:21",
  "merged_by": "itsmeolivia",
  "file_path": "tutorials/image/cifar10/cifar10_multi_gpu_train.py",
  "condition": [
   "$0.contrib.deprecated.histogram_summary($1.$2.$3, $1))"
  ],
  "consequent": [
   "$0.histogram_summary($1.$2.$3, $1))"
  ],
  "identifiers": {
   "condition": [
    "histogram_summary",
    "deprecated",
    "contrib"
   ],
   "consequent": [
    "histogram_summary"
   ]
  }
 },
 {
  "number": 785,
  "sha": "ba98bc479cb6bf06eb886e885fd5cd730082f670",
  "author": "mrphoenix13",
  "participant": "YuMS",
  "created_at": "2016-12-21 08:05:05",
  "merged_at": "2017-01-18 19:14:21",
  "merged_by": "itsmeolivia",
  "file_path": "tutorials/image/cifar10/cifar10_multi_gpu_train.py",
  "condition": [
   "$0 = $1.contrib.deprecated.merge_summary($2)"
  ],
  "consequent": [
   "$0 = $1.merge_summary($2)"
  ],
  "identifiers": {
   "condition": [
    "merge_summary",
    "deprecated",
    "contrib"
   ],
   "consequent": [
    "merge_summary"
   ]
  }
 },
 {
  "number": 785,
  "sha": "ba98bc479cb6bf06eb886e885fd5cd730082f670",
  "author": "mrphoenix13",
  "participant": "YuMS",
  "created_at": "2016-12-21 08:05:05",
  "merged_at": "2017-01-18 19:14:21",
  "merged_by": "itsmeolivia",
  "file_path": "tutorials/rnn/ptb/ptb_word_lm.py",
  "condition": [
   "$0.contrib.deprecated.scalar_summary(\"Training Loss\", $1.$2)"
  ],
  "consequent": [
   "$0.scalar_summary(\"Training Loss\", $1.$2)"
  ],
  "identifiers": {
   "condition": [
    "deprecated",
    "contrib",
    "scalar_summary"
   ],
   "consequent": [
    "scalar_summary"
   ]
  }
 },
 {
  "number": 785,
  "sha": "ba98bc479cb6bf06eb886e885fd5cd730082f670",
  "author": "mrphoenix13",
  "participant": "YuMS",
  "created_at": "2016-12-21 08:05:05",
  "merged_at": "2017-01-18 19:14:21",
  "merged_by": "itsmeolivia",
  "file_path": "tutorials/rnn/ptb/ptb_word_lm.py",
  "condition": [
   "$0.contrib.deprecated.scalar_summary(\"Learning Rate\", $1.$2)"
  ],
  "consequent": [
   "$0.scalar_summary(\"Learning Rate\", $1.$2)"
  ],
  "identifiers": {
   "condition": [
    "deprecated",
    "contrib",
    "scalar_summary"
   ],
   "consequent": [
    "scalar_summary"
   ]
  }
 },
 {
  "number": 785,
  "sha": "ba98bc479cb6bf06eb886e885fd5cd730082f670",
  "author": "mrphoenix13",
  "participant": "YuMS",
  "created_at": "2016-12-21 08:05:05",
  "merged_at": "2017-01-18 19:14:21",
  "merged_by": "itsmeolivia",
  "file_path": "tutorials/rnn/ptb/ptb_word_lm.py",
  "condition": [
   "$0.contrib.deprecated.scalar_summary(\"Validation Loss\", $1.$2)"
  ],
  "consequent": [
   "$0.scalar_summary(\"Validation Loss\", $1.$2)"
  ],
  "identifiers": {
   "condition": [
    "deprecated",
    "contrib",
    "scalar_summary"
   ],
   "consequent": [
    "scalar_summary"
   ]
  }
 },
 {
  "number": 852,
  "sha": "97e391dd868abcf833c8273866b34aa69a0d4d17",
  "author": "tae-jun",
  "participant": "nealwu",
  "created_at": "2017-01-05 07:28:54",
  "merged_at": "2017-03-15 01:51:59",
  "merged_by": "nealwu",
  "file_path": "slim/datasets/mnist.py",
  "condition": [
   "$0/$1/$2/data/create_mnist_dataset.py"
  ],
  "consequent": [
   "$0/$1/$2/datasets/download_and_convert_mnist.py"
  ],
  "identifiers": {
   "condition": [
    "py",
    "data",
    "create_mnist_dataset"
   ],
   "consequent": [
    "download_and_convert_mnist",
    "py",
    "datasets"
   ]
  }
 },
 {
  "number": 864,
  "sha": "f4161b6fc15caa519a275afea14a6c6173a80abe",
  "author": "martinwicke",
  "participant": "zlj9155",
  "created_at": "2017-01-08 09:25:56",
  "merged_at": "2017-01-08 09:27:05",
  "merged_by": "martinwicke",
  "file_path": "inception/inception/slim/losses.py",
  "condition": [
   "$0,"
  ],
  "consequent": [
   "labels=$0,"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "labels"
   ]
  }
 },
 {
  "number": 864,
  "sha": "f4161b6fc15caa519a275afea14a6c6173a80abe",
  "author": "martinwicke",
  "participant": "zlj9155",
  "created_at": "2017-01-08 09:25:56",
  "merged_at": "2017-01-08 09:27:05",
  "merged_by": "martinwicke",
  "file_path": "transformer/cluttered_mnist.py",
  "condition": [
   "$0.$1.softmax_cross_entropy_with_logits($2, $3))"
  ],
  "consequent": [
   "$0.$1.softmax_cross_entropy_with_logits(logits=$2, targets=$3))"
  ],
  "identifiers": {
   "condition": [
    "softmax_cross_entropy_with_logits"
   ],
   "consequent": [
    "logits",
    "targets",
    "softmax_cross_entropy_with_logits"
   ]
  }
 },
 {
  "number": 881,
  "sha": "a46f826f5e3f063dc39cce339d4f836a167ce6b1",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2017-01-10 18:56:31",
  "merged_at": "2017-01-10 18:56:41",
  "merged_by": "cshallue",
  "file_path": "im2txt/im2txt/ops/image_embedding_test.py",
  "condition": [
   "for $0 in $1.all_variables():"
  ],
  "consequent": [
   "for $0 in $1.global_variables():"
  ],
  "identifiers": {
   "condition": [
    "all_variables"
   ],
   "consequent": [
    "global_variables"
   ]
  }
 },
 {
  "number": 881,
  "sha": "a46f826f5e3f063dc39cce339d4f836a167ce6b1",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2017-01-10 18:56:31",
  "merged_at": "2017-01-10 18:56:41",
  "merged_by": "cshallue",
  "file_path": "im2txt/im2txt/ops/image_embedding_test.py",
  "condition": [
   "$0._assertCollectionSize(376, $1.$2.VARIABLES)"
  ],
  "consequent": [
   "$0._assertCollectionSize(376, $1.$2.GLOBAL_VARIABLES)"
  ],
  "identifiers": {
   "condition": [
    "_assertCollectionSize",
    "VARIABLES"
   ],
   "consequent": [
    "_assertCollectionSize",
    "GLOBAL_VARIABLES"
   ]
  }
 },
 {
  "number": 881,
  "sha": "a46f826f5e3f063dc39cce339d4f836a167ce6b1",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2017-01-10 18:56:31",
  "merged_at": "2017-01-10 18:56:41",
  "merged_by": "cshallue",
  "file_path": "im2txt/im2txt/ops/image_embedding_test.py",
  "condition": [
   "$0._assertCollectionSize(376, $1.$2.VARIABLES)"
  ],
  "consequent": [
   "$0._assertCollectionSize(376, $1.$2.GLOBAL_VARIABLES)"
  ],
  "identifiers": {
   "condition": [
    "_assertCollectionSize",
    "VARIABLES"
   ],
   "consequent": [
    "_assertCollectionSize",
    "GLOBAL_VARIABLES"
   ]
  }
 },
 {
  "number": 881,
  "sha": "a46f826f5e3f063dc39cce339d4f836a167ce6b1",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2017-01-10 18:56:31",
  "merged_at": "2017-01-10 18:56:41",
  "merged_by": "cshallue",
  "file_path": "im2txt/im2txt/ops/image_embedding_test.py",
  "condition": [
   "$0._assertCollectionSize(376, $1.$2.VARIABLES)"
  ],
  "consequent": [
   "$0._assertCollectionSize(376, $1.$2.GLOBAL_VARIABLES)"
  ],
  "identifiers": {
   "condition": [
    "_assertCollectionSize",
    "VARIABLES"
   ],
   "consequent": [
    "_assertCollectionSize",
    "GLOBAL_VARIABLES"
   ]
  }
 },
 {
  "number": 881,
  "sha": "a46f826f5e3f063dc39cce339d4f836a167ce6b1",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2017-01-10 18:56:31",
  "merged_at": "2017-01-10 18:56:41",
  "merged_by": "cshallue",
  "file_path": "im2txt/im2txt/ops/image_embedding_test.py",
  "condition": [
   "$0._assertCollectionSize(376, $1.$2.VARIABLES)"
  ],
  "consequent": [
   "$0._assertCollectionSize(376, $1.$2.GLOBAL_VARIABLES)"
  ],
  "identifiers": {
   "condition": [
    "_assertCollectionSize",
    "VARIABLES"
   ],
   "consequent": [
    "_assertCollectionSize",
    "GLOBAL_VARIABLES"
   ]
  }
 },
 {
  "number": 881,
  "sha": "a46f826f5e3f063dc39cce339d4f836a167ce6b1",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2017-01-10 18:56:31",
  "merged_at": "2017-01-10 18:56:41",
  "merged_by": "cshallue",
  "file_path": "im2txt/im2txt/ops/image_processing.py",
  "condition": [
   "$0 = $1.sub($0, 0.5)"
  ],
  "consequent": [
   "$0 = $1.subtract($0, 0.5)"
  ],
  "identifiers": {
   "condition": [
    "sub"
   ],
   "consequent": [
    "subtract"
   ]
  }
 },
 {
  "number": 881,
  "sha": "a46f826f5e3f063dc39cce339d4f836a167ce6b1",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2017-01-10 18:56:31",
  "merged_at": "2017-01-10 18:56:41",
  "merged_by": "cshallue",
  "file_path": "im2txt/im2txt/ops/image_processing.py",
  "condition": [
   "$0 = $1.mul($0, 2.0)"
  ],
  "consequent": [
   "$0 = $1.multiply($0, 2.0)"
  ],
  "identifiers": {
   "condition": [
    "mul"
   ],
   "consequent": [
    "multiply"
   ]
  }
 },
 {
  "number": 881,
  "sha": "a46f826f5e3f063dc39cce339d4f836a167ce6b1",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2017-01-10 18:56:31",
  "merged_at": "2017-01-10 18:56:41",
  "merged_by": "cshallue",
  "file_path": "im2txt/im2txt/ops/inputs.py",
  "condition": [
   "$0 = $1.expand_dims($1.sub($2, 1), 0)"
  ],
  "consequent": [
   "$0 = $1.expand_dims($1.subtract($2, 1), 0)"
  ],
  "identifiers": {
   "condition": [
    "expand_dims",
    "sub"
   ],
   "consequent": [
    "expand_dims",
    "subtract"
   ]
  }
 },
 {
  "number": 881,
  "sha": "a46f826f5e3f063dc39cce339d4f836a167ce6b1",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2017-01-10 18:56:31",
  "merged_at": "2017-01-10 18:56:41",
  "merged_by": "cshallue",
  "file_path": "im2txt/im2txt/show_and_tell_model.py",
  "condition": [
   "$0 = $1.nn.rnn_cell.BasicLSTMCell("
  ],
  "consequent": [
   "$0 = $1.contrib.rnn.BasicLSTMCell("
  ],
  "identifiers": {
   "condition": [
    "rnn_cell",
    "nn",
    "BasicLSTMCell"
   ],
   "consequent": [
    "rnn",
    "BasicLSTMCell",
    "contrib"
   ]
  }
 },
 {
  "number": 881,
  "sha": "a46f826f5e3f063dc39cce339d4f836a167ce6b1",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2017-01-10 18:56:31",
  "merged_at": "2017-01-10 18:56:41",
  "merged_by": "cshallue",
  "file_path": "im2txt/im2txt/show_and_tell_model.py",
  "condition": [
   "$0 = $1.nn.rnn_cell.DropoutWrapper("
  ],
  "consequent": [
   "$0 = $1.contrib.rnn.DropoutWrapper("
  ],
  "identifiers": {
   "condition": [
    "rnn_cell",
    "nn",
    "DropoutWrapper"
   ],
   "consequent": [
    "rnn",
    "contrib",
    "DropoutWrapper"
   ]
  }
 },
 {
  "number": 881,
  "sha": "a46f826f5e3f063dc39cce339d4f836a167ce6b1",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2017-01-10 18:56:31",
  "merged_at": "2017-01-10 18:56:41",
  "merged_by": "cshallue",
  "file_path": "im2txt/im2txt/show_and_tell_model.py",
  "condition": [
   "$0.concat(1, $1, $2=\"initial_state\")"
  ],
  "consequent": [
   "$0.concat_v2($1, 1, $2=\"initial_state\")"
  ],
  "identifiers": {
   "condition": [
    "concat"
   ],
   "consequent": [
    "concat_v2"
   ]
  }
 },
 {
  "number": 881,
  "sha": "a46f826f5e3f063dc39cce339d4f836a167ce6b1",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2017-01-10 18:56:31",
  "merged_at": "2017-01-10 18:56:41",
  "merged_by": "cshallue",
  "file_path": "im2txt/im2txt/show_and_tell_model.py",
  "condition": [
   "$0 = $1.split(1, 2, $2)"
  ],
  "consequent": [
   "$0 = $1.split(value=$2, num_or_size_splits=2, axis=1)"
  ],
  "identifiers": {
   "condition": [
    "split"
   ],
   "consequent": [
    "split",
    "num_or_size_splits",
    "value",
    "axis"
   ]
  }
 },
 {
  "number": 881,
  "sha": "a46f826f5e3f063dc39cce339d4f836a167ce6b1",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2017-01-10 18:56:31",
  "merged_at": "2017-01-10 18:56:41",
  "merged_by": "cshallue",
  "file_path": "im2txt/im2txt/show_and_tell_model.py",
  "condition": [
   "$0.concat(1, $1, $2=\"state\")"
  ],
  "consequent": [
   "$0.concat_v2($1, 1, $2=\"state\")"
  ],
  "identifiers": {
   "condition": [
    "concat"
   ],
   "consequent": [
    "concat_v2"
   ]
  }
 },
 {
  "number": 881,
  "sha": "a46f826f5e3f063dc39cce339d4f836a167ce6b1",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2017-01-10 18:56:31",
  "merged_at": "2017-01-10 18:56:41",
  "merged_by": "cshallue",
  "file_path": "im2txt/im2txt/show_and_tell_model.py",
  "condition": [
   "$0 = $1.$2.sparse_softmax_cross_entropy_with_logits($3, $4)"
  ],
  "consequent": [
   "$0 = $1.$2.sparse_softmax_cross_entropy_with_logits(labels=$4,                                                               $3=$3)"
  ],
  "identifiers": {
   "condition": [
    "sparse_softmax_cross_entropy_with_logits"
   ],
   "consequent": [
    "labels",
    "sparse_softmax_cross_entropy_with_logits"
   ]
  }
 },
 {
  "number": 881,
  "sha": "a46f826f5e3f063dc39cce339d4f836a167ce6b1",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2017-01-10 18:56:31",
  "merged_at": "2017-01-10 18:56:41",
  "merged_by": "cshallue",
  "file_path": "im2txt/im2txt/show_and_tell_model.py",
  "condition": [
   "$0 = $1.div($1.reduce_sum($1.mul($2, $3)),"
  ],
  "consequent": [
   "$0 = $1.div($1.reduce_sum($1.multiply($2, $3)),"
  ],
  "identifiers": {
   "condition": [
    "mul",
    "reduce_sum",
    "div"
   ],
   "consequent": [
    "reduce_sum",
    "multiply",
    "div"
   ]
  }
 },
 {
  "number": 959,
  "sha": "4ec3452d9524726297c0aeb92933a79296345e7e",
  "author": "yaroslavvb",
  "participant": "panyx0718",
  "created_at": "2017-01-26 22:07:26",
  "merged_at": "2017-01-26 22:22:58",
  "merged_by": "panyx0718",
  "file_path": "resnet/cifar_input.py",
  "condition": [
   "                                                        ",
   "import inspect",
   "def concat($0, $1):",
   "\tif 'axis' in inspect.signature($2.concat).parameters.keys():",
   "\treturn $2.concat($0=$0, $1=$1)",
   "    else:",
   "\tassert 'concat_dim' in inspect.signature($2.concat).parameters.keys()",
   "        return $2.concat(concat_dim=$1, $0=$0)",
   "      $2.concat($0=[$3, $4], $1=1),"
  ],
  "consequent": [
   "$2.concat_v2($0=[$3, $4], $1=1),"
  ],
  "identifiers": {
   "condition": [
    "concat",
    "parameters",
    "concat_dim",
    "keys",
    "inspect",
    "signature"
   ],
   "consequent": [
    "concat_v2"
   ]
  }
 },
 {
  "number": 959,
  "sha": "4ec3452d9524726297c0aeb92933a79296345e7e",
  "author": "yaroslavvb",
  "participant": "panyx0718",
  "created_at": "2017-01-26 22:07:26",
  "merged_at": "2017-01-26 22:22:58",
  "merged_by": "panyx0718",
  "file_path": "resnet/resnet_main.py",
  "condition": [
   "for $0 in xrange($1.$2):"
  ],
  "consequent": [
   "import six",
   "\tfor $0 in six.moves.range($1.$2):"
  ],
  "identifiers": {
   "condition": [
    "xrange"
   ],
   "consequent": [
    "six",
    "range",
    "moves"
   ]
  }
 },
 {
  "number": 982,
  "sha": "0d8916f4b84e8687eb46696883b50b84ac6aa420",
  "author": "arvind385801",
  "participant": "googlebot",
  "created_at": "2017-02-05 15:05:57",
  "merged_at": "2017-03-16 00:13:40",
  "merged_by": "nealwu",
  "file_path": "tutorials/rnn/translate/seq2seq_model.py",
  "condition": [
   "return $0.nn.rnn_cell.GRUCell($1)"
  ],
  "consequent": [
   "return $0.contrib.rnn.GRUCell($1)"
  ],
  "identifiers": {
   "condition": [
    "rnn_cell",
    "nn",
    "GRUCell"
   ],
   "consequent": [
    "rnn",
    "GRUCell",
    "contrib"
   ]
  }
 },
 {
  "number": 982,
  "sha": "0d8916f4b84e8687eb46696883b50b84ac6aa420",
  "author": "arvind385801",
  "participant": "googlebot",
  "created_at": "2017-02-05 15:05:57",
  "merged_at": "2017-03-16 00:13:40",
  "merged_by": "nealwu",
  "file_path": "tutorials/rnn/translate/seq2seq_model.py",
  "condition": [
   "return $0.nn.rnn_cell.BasicLSTMCell($1)"
  ],
  "consequent": [
   "return $0.contrib.rnn.BasicLSTMCell($1)"
  ],
  "identifiers": {
   "condition": [
    "rnn_cell",
    "nn",
    "BasicLSTMCell"
   ],
   "consequent": [
    "rnn",
    "BasicLSTMCell",
    "contrib"
   ]
  }
 },
 {
  "number": 982,
  "sha": "0d8916f4b84e8687eb46696883b50b84ac6aa420",
  "author": "arvind385801",
  "participant": "googlebot",
  "created_at": "2017-02-05 15:05:57",
  "merged_at": "2017-03-16 00:13:40",
  "merged_by": "nealwu",
  "file_path": "tutorials/rnn/translate/seq2seq_model.py",
  "condition": [
   "$0 = $1.nn.rnn_cell.MultiRNNCell([single_cell() for $2 in range($3)])"
  ],
  "consequent": [
   "$0 = $1.contrib.rnn.MultiRNNCell([single_cell() for $2 in range($3)])"
  ],
  "identifiers": {
   "condition": [
    "rnn_cell",
    "range",
    "single_cell",
    "nn",
    "MultiRNNCell"
   ],
   "consequent": [
    "rnn",
    "range",
    "contrib",
    "single_cell",
    "MultiRNNCell"
   ]
  }
 },
 {
  "number": 982,
  "sha": "0d8916f4b84e8687eb46696883b50b84ac6aa420",
  "author": "arvind385801",
  "participant": "googlebot",
  "created_at": "2017-02-05 15:05:57",
  "merged_at": "2017-03-16 00:13:40",
  "merged_by": "nealwu",
  "file_path": "tutorials/rnn/translate/seq2seq_model.py",
  "condition": [
   "return $0.nn.seq2seq.embedding_attention_seq2seq("
  ],
  "consequent": [
   "return $0.contrib.legacy_seq2seq.embedding_attention_seq2seq("
  ],
  "identifiers": {
   "condition": [
    "nn",
    "embedding_attention_seq2seq",
    "seq2seq"
   ],
   "consequent": [
    "legacy_seq2seq",
    "contrib",
    "embedding_attention_seq2seq"
   ]
  }
 },
 {
  "number": 982,
  "sha": "0d8916f4b84e8687eb46696883b50b84ac6aa420",
  "author": "arvind385801",
  "participant": "googlebot",
  "created_at": "2017-02-05 15:05:57",
  "merged_at": "2017-03-16 00:13:40",
  "merged_by": "nealwu",
  "file_path": "tutorials/rnn/translate/seq2seq_model.py",
  "condition": [
   "$0.$1, $0.$2 = $3.nn.seq2seq.model_with_buckets("
  ],
  "consequent": [
   "$0.$1, $0.$2 = $3.contrib.legacy_seq2seq.model_with_buckets("
  ],
  "identifiers": {
   "condition": [
    "nn",
    "seq2seq",
    "model_with_buckets"
   ],
   "consequent": [
    "legacy_seq2seq",
    "contrib",
    "model_with_buckets"
   ]
  }
 },
 {
  "number": 982,
  "sha": "0d8916f4b84e8687eb46696883b50b84ac6aa420",
  "author": "arvind385801",
  "participant": "googlebot",
  "created_at": "2017-02-05 15:05:57",
  "merged_at": "2017-03-16 00:13:40",
  "merged_by": "nealwu",
  "file_path": "tutorials/rnn/translate/seq2seq_model.py",
  "condition": [
   "$0.$1, $0.$2 = $3.nn.seq2seq.model_with_buckets("
  ],
  "consequent": [
   "$0.$1, $0.$2 = $3.contrib.legacy_seq2seq.model_with_buckets("
  ],
  "identifiers": {
   "condition": [
    "nn",
    "seq2seq",
    "model_with_buckets"
   ],
   "consequent": [
    "legacy_seq2seq",
    "contrib",
    "model_with_buckets"
   ]
  }
 },
 {
  "number": 1031,
  "sha": "64254ad355f9ea72531ae305c2db2a737c47c9a9",
  "author": "nealwu",
  "participant": "panyx0718",
  "created_at": "2017-02-18 01:43:59",
  "merged_at": "2017-02-23 02:44:17",
  "merged_by": "panyx0718",
  "file_path": "resnet/resnet_main.py",
  "condition": [
   "time.sleep(60)",
   "\t$0.$1.info('loss: %.3f, precision: %.3f, best precision: %.3f\\n' %"
  ],
  "consequent": [
   "$0.$1.info('loss: %.3f, precision: %.3f, best precision: %.3f' %"
  ],
  "identifiers": {
   "condition": [
    "info",
    "time",
    "sleep"
   ],
   "consequent": [
    "info"
   ]
  }
 },
 {
  "number": 1031,
  "sha": "64254ad355f9ea72531ae305c2db2a737c47c9a9",
  "author": "nealwu",
  "participant": "panyx0718",
  "created_at": "2017-02-18 01:43:59",
  "merged_at": "2017-02-23 02:44:17",
  "merged_by": "panyx0718",
  "file_path": "resnet/resnet_model.py",
  "condition": [
   "$0.$1.info('image after unit %s', $2.get_shape())"
  ],
  "consequent": [
   "$0.$1.debug('image after unit %s', $2.get_shape())"
  ],
  "identifiers": {
   "condition": [
    "info",
    "get_shape"
   ],
   "consequent": [
    "debug",
    "get_shape"
   ]
  }
 },
 {
  "number": 1053,
  "sha": "289b439308be829db258d5b1bb33a6de03769e57",
  "author": "nealwu",
  "participant": "jhseu",
  "created_at": "2017-02-22 02:24:55",
  "merged_at": "2017-03-14 02:14:26",
  "merged_by": "nealwu",
  "file_path": "slim/deployment/model_deploy.py",
  "condition": [
   "$0.$1.scalar('clone_loss', $2)"
  ],
  "consequent": [
   "$0.$1.scalar(clone.scope + '/clone_loss', $2)"
  ],
  "identifiers": {
   "condition": [
    "scalar"
   ],
   "consequent": [
    "scalar",
    "scope",
    "clone"
   ]
  }
 },
 {
  "number": 1053,
  "sha": "289b439308be829db258d5b1bb33a6de03769e57",
  "author": "nealwu",
  "participant": "jhseu",
  "created_at": "2017-02-22 02:24:55",
  "merged_at": "2017-03-14 02:14:26",
  "merged_by": "nealwu",
  "file_path": "slim/nets/resnet_v2.py",
  "condition": [
   "return $0, end_points"
  ],
  "consequent": [
   "logits = tf.squeeze($0, [1, 2], name='SpatialSqueeze')",
   "\treturn logits, end_points"
  ],
  "identifiers": {
   "condition": [
    "end_points"
   ],
   "consequent": [
    "squeeze",
    "name",
    "logits",
    "tf",
    "end_points"
   ]
  }
 },
 {
  "number": 1053,
  "sha": "289b439308be829db258d5b1bb33a6de03769e57",
  "author": "nealwu",
  "participant": "jhseu",
  "created_at": "2017-02-22 02:24:55",
  "merged_at": "2017-03-14 02:14:26",
  "merged_by": "nealwu",
  "file_path": "slim/train_image_classifier.py",
  "condition": [
   "$0['AuxLogits'], $1,"
  ],
  "consequent": [
   "logits=$0['AuxLogits'], onehot_labels=$1,"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "logits",
    "onehot_labels"
   ]
  }
 },
 {
  "number": 1053,
  "sha": "289b439308be829db258d5b1bb33a6de03769e57",
  "author": "nealwu",
  "participant": "jhseu",
  "created_at": "2017-02-22 02:24:55",
  "merged_at": "2017-03-14 02:14:26",
  "merged_by": "nealwu",
  "file_path": "slim/train_image_classifier.py",
  "condition": [
   "tf.squeeze($0), $1, $2=$3.$2, $4=1.0)"
  ],
  "consequent": [
   "$0=$0, onehot_labels=$1,",
   "\t$2=$3.$2, $4=1.0)"
  ],
  "identifiers": {
   "condition": [
    "tf",
    "squeeze"
   ],
   "consequent": [
    "onehot_labels"
   ]
  }
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "participant": "TheodoreGalanos",
  "created_at": "2017-02-23 22:32:21",
  "merged_at": "2017-03-14 02:14:41",
  "merged_by": "nealwu",
  "file_path": "inception/inception/slim/inception_model.py",
  "condition": [
   "$0 = $1.concat($2=[$3.conv2d($0, 384, [1, 3]),"
  ],
  "consequent": [
   "$0 = $1.concat($2=3, values=[$3.conv2d($0, 384, [1, 3]),"
  ],
  "identifiers": {
   "condition": [
    "concat",
    "conv2d"
   ],
   "consequent": [
    "conv2d",
    "concat",
    "values"
   ]
  }
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "participant": "TheodoreGalanos",
  "created_at": "2017-02-23 22:32:21",
  "merged_at": "2017-03-14 02:14:41",
  "merged_by": "nealwu",
  "file_path": "inception/inception/slim/inception_model.py",
  "condition": [
   "$0.conv2d($1, 384, [3, 1])], values=3)"
  ],
  "consequent": [
   "$0.conv2d($1, 384, [3, 1])])"
  ],
  "identifiers": {
   "condition": [
    "values",
    "conv2d"
   ],
   "consequent": [
    "conv2d"
   ]
  }
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "participant": "TheodoreGalanos",
  "created_at": "2017-02-23 22:32:21",
  "merged_at": "2017-03-14 02:14:41",
  "merged_by": "nealwu",
  "file_path": "inception/inception/slim/inception_model.py",
  "condition": [
   "$0 = $1.concat($2=[$3.conv2d($0, 384, [1, 3]),"
  ],
  "consequent": [
   "$0 = $1.concat($2=3, values=[$3.conv2d($0, 384, [1, 3]),"
  ],
  "identifiers": {
   "condition": [
    "concat",
    "conv2d"
   ],
   "consequent": [
    "conv2d",
    "concat",
    "values"
   ]
  }
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "participant": "TheodoreGalanos",
  "created_at": "2017-02-23 22:32:21",
  "merged_at": "2017-03-14 02:14:41",
  "merged_by": "nealwu",
  "file_path": "inception/inception/slim/inception_model.py",
  "condition": [
   "$0.conv2d($1, 384, [3, 1])], values=3)"
  ],
  "consequent": [
   "$0.conv2d($1, 384, [3, 1])])"
  ],
  "identifiers": {
   "condition": [
    "values",
    "conv2d"
   ],
   "consequent": [
    "conv2d"
   ]
  }
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "participant": "TheodoreGalanos",
  "created_at": "2017-02-23 22:32:21",
  "merged_at": "2017-03-14 02:14:41",
  "merged_by": "nealwu",
  "file_path": "inception/inception/slim/inception_model.py",
  "condition": [
   "$0 = $1.avg_pool($2, [3, 3])"
  ],
  "consequent": [
   "$0 = $1.avg_pool($2, [3, 3])",
   "\t$0 = $1.conv2d($0, 192, [1, 1])"
  ],
  "identifiers": {
   "condition": [
    "avg_pool"
   ],
   "consequent": [
    "avg_pool",
    "conv2d"
   ]
  }
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "participant": "TheodoreGalanos",
  "created_at": "2017-02-23 22:32:21",
  "merged_at": "2017-03-14 02:14:41",
  "merged_by": "nealwu",
  "file_path": "inception/inception/slim/inception_model.py",
  "condition": [
   "$0 = ops.conv2d($0, 192, [1, 1])",
   "\t$1 = $2.concat($3=[$4, $5, $6, $0], $7=3)"
  ],
  "consequent": [
   "$1 = $2.concat($3=3, $7=[$4, $5, $6, $0])"
  ],
  "identifiers": {
   "condition": [
    "concat",
    "conv2d",
    "ops"
   ],
   "consequent": [
    "concat"
   ]
  }
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "participant": "TheodoreGalanos",
  "created_at": "2017-02-23 22:32:21",
  "merged_at": "2017-03-14 02:14:41",
  "merged_by": "nealwu",
  "file_path": "inception/inception/slim/inception_model.py",
  "condition": [
   "$0 = $1.concat($2=[$3.conv2d($0, 384, [1, 3]),"
  ],
  "consequent": [
   "$0 = $1.concat($2=3, values=[$3.conv2d($0, 384, [1, 3]),"
  ],
  "identifiers": {
   "condition": [
    "concat",
    "conv2d"
   ],
   "consequent": [
    "conv2d",
    "concat",
    "values"
   ]
  }
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "participant": "TheodoreGalanos",
  "created_at": "2017-02-23 22:32:21",
  "merged_at": "2017-03-14 02:14:41",
  "merged_by": "nealwu",
  "file_path": "inception/inception/slim/inception_model.py",
  "condition": [
   "$0.conv2d($1, 384, [3, 1])], values=3)"
  ],
  "consequent": [
   "$0.conv2d($1, 384, [3, 1])])"
  ],
  "identifiers": {
   "condition": [
    "values",
    "conv2d"
   ],
   "consequent": [
    "conv2d"
   ]
  }
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "participant": "TheodoreGalanos",
  "created_at": "2017-02-23 22:32:21",
  "merged_at": "2017-03-14 02:14:41",
  "merged_by": "nealwu",
  "file_path": "inception/inception/slim/inception_model.py",
  "condition": [
   "$0 = $1.concat($2=[$3.conv2d($0, 384, [1, 3]),"
  ],
  "consequent": [
   "$0 = $1.concat($2=3, values=[$3.conv2d($0, 384, [1, 3]),"
  ],
  "identifiers": {
   "condition": [
    "concat",
    "conv2d"
   ],
   "consequent": [
    "conv2d",
    "concat",
    "values"
   ]
  }
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "participant": "TheodoreGalanos",
  "created_at": "2017-02-23 22:32:21",
  "merged_at": "2017-03-14 02:14:41",
  "merged_by": "nealwu",
  "file_path": "inception/inception/slim/inception_model.py",
  "condition": [
   "$0.conv2d($1, 384, [3, 1])], values=3)"
  ],
  "consequent": [
   "$0.conv2d($1, 384, [3, 1])])"
  ],
  "identifiers": {
   "condition": [
    "values",
    "conv2d"
   ],
   "consequent": [
    "conv2d"
   ]
  }
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "participant": "TheodoreGalanos",
  "created_at": "2017-02-23 22:32:21",
  "merged_at": "2017-03-14 02:14:41",
  "merged_by": "nealwu",
  "file_path": "inception/inception/slim/inception_model.py",
  "condition": [
   "$0 = $1.avg_pool($2, [3, 3])"
  ],
  "consequent": [
   "$0 = $1.avg_pool($2, [3, 3])",
   "\t$0 = $1.conv2d($0, 192, [1, 1])"
  ],
  "identifiers": {
   "condition": [
    "avg_pool"
   ],
   "consequent": [
    "avg_pool",
    "conv2d"
   ]
  }
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "participant": "TheodoreGalanos",
  "created_at": "2017-02-23 22:32:21",
  "merged_at": "2017-03-14 02:14:41",
  "merged_by": "nealwu",
  "file_path": "inception/inception/slim/inception_model.py",
  "condition": [
   "$0 = ops.conv2d($0, 192, [1, 1])",
   "\t$1 = $2.concat($3=[$4, $5, $6, $0], $7=3)"
  ],
  "consequent": [
   "$1 = $2.concat($3=3, $7=[$4, $5, $6, $0])"
  ],
  "identifiers": {
   "condition": [
    "concat",
    "conv2d",
    "ops"
   ],
   "consequent": [
    "concat"
   ]
  }
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "participant": "TheodoreGalanos",
  "created_at": "2017-02-23 22:32:21",
  "merged_at": "2017-03-14 02:14:41",
  "merged_by": "nealwu",
  "file_path": "slim/deployment/model_deploy.py",
  "condition": [
   "name='clone_loss')",
   "\t$0.$1.scalar('regularization_loss', $2,"
  ],
  "consequent": [
   "$0.$1.scalar('regularization_loss', $2)"
  ],
  "identifiers": {
   "condition": [
    "scalar",
    "name"
   ],
   "consequent": [
    "scalar"
   ]
  }
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "participant": "TheodoreGalanos",
  "created_at": "2017-02-23 22:32:21",
  "merged_at": "2017-03-14 02:14:41",
  "merged_by": "nealwu",
  "file_path": "slim/deployment/model_deploy.py",
  "condition": [
   "name='regularization_loss')",
   "\t$0.add($1.$2.scalar('total_loss', $3,"
  ],
  "consequent": [
   "$0.add($1.$2.scalar('total_loss', $3))"
  ],
  "identifiers": {
   "condition": [
    "scalar",
    "add",
    "name"
   ],
   "consequent": [
    "scalar",
    "add"
   ]
  }
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "participant": "TheodoreGalanos",
  "created_at": "2017-02-23 22:32:21",
  "merged_at": "2017-03-14 02:14:41",
  "merged_by": "nealwu",
  "file_path": "slim/train_image_classifier.py",
  "condition": [
   "name='learning_rate'))",
   "\t$0.add($1.$2.scalar('total_loss', $3,"
  ],
  "consequent": [
   "$0.add($1.$2.scalar('total_loss', $3))"
  ],
  "identifiers": {
   "condition": [
    "scalar",
    "add",
    "name"
   ],
   "consequent": [
    "scalar",
    "add"
   ]
  }
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "participant": "TheodoreGalanos",
  "created_at": "2017-02-23 22:32:21",
  "merged_at": "2017-03-14 02:14:41",
  "merged_by": "nealwu",
  "file_path": "street/python/vgsl_model.py",
  "condition": [
   "$0.$1.scalar('loss', $2.$3, name='loss')"
  ],
  "consequent": [
   "$0.$1.scalar('loss', $2.$3)"
  ],
  "identifiers": {
   "condition": [
    "scalar",
    "name"
   ],
   "consequent": [
    "scalar"
   ]
  }
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "participant": "TheodoreGalanos",
  "created_at": "2017-02-23 22:32:21",
  "merged_at": "2017-03-14 02:14:41",
  "merged_by": "nealwu",
  "file_path": "street/python/vgsl_model.py",
  "condition": [
   "$0.$1.scalar('learn_rate', $2, name='lr_summ')"
  ],
  "consequent": [
   "$0.$1.scalar('learn_rate', $2)"
  ],
  "identifiers": {
   "condition": [
    "scalar",
    "name"
   ],
   "consequent": [
    "scalar"
   ]
  }
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "participant": "TheodoreGalanos",
  "created_at": "2017-02-23 22:32:21",
  "merged_at": "2017-03-14 02:14:41",
  "merged_by": "nealwu",
  "file_path": "swivel/swivel.py",
  "condition": [
   "$0 = $1.concat($2=[$1.expand_dims($3, 1),"
  ],
  "consequent": [
   "$0 = $1.concat($2=1, values=[$1.expand_dims($3, 1),"
  ],
  "identifiers": {
   "condition": [
    "concat",
    "expand_dims"
   ],
   "consequent": [
    "concat",
    "values",
    "expand_dims"
   ]
  }
 },
 {
  "number": 1063,
  "sha": "b41ff7f1bfc7cca6727ce96d40e6400f66575286",
  "author": "nealwu",
  "participant": "TheodoreGalanos",
  "created_at": "2017-02-23 22:32:21",
  "merged_at": "2017-03-14 02:14:41",
  "merged_by": "nealwu",
  "file_path": "swivel/swivel.py",
  "condition": [
   "$0.expand_dims($1, 1)], values=1)"
  ],
  "consequent": [
   "$0.expand_dims($1, 1)])"
  ],
  "identifiers": {
   "condition": [
    "expand_dims",
    "values"
   ],
   "consequent": [
    "expand_dims"
   ]
  }
 },
 {
  "number": 1073,
  "sha": "d6787c0fdd0011d61860f849767e40d9d45e87e3",
  "author": "knathanieltucker",
  "participant": "martinwicke",
  "created_at": "2017-02-26 07:51:14",
  "merged_at": "2017-03-08 20:37:01",
  "merged_by": "martinwicke",
  "file_path": "namignizer/model.py",
  "condition": [
   "$0 = $1.$2.$3.BasicLSTMCell($4, $5=0.0)"
  ],
  "consequent": [
   "lstm_cells = []",
   "\tfor layer in range(config.num_layers):",
   "\t$0 = $1.$2.$3.BasicLSTMCell($4, $5=0.0)"
  ],
  "identifiers": {
   "condition": [
    "BasicLSTMCell"
   ],
   "consequent": [
    "BasicLSTMCell",
    "num_layers",
    "range",
    "config",
    "lstm_cells",
    "layer"
   ]
  }
 },
 {
  "number": 1073,
  "sha": "d6787c0fdd0011d61860f849767e40d9d45e87e3",
  "author": "knathanieltucker",
  "participant": "martinwicke",
  "created_at": "2017-02-26 07:51:14",
  "merged_at": "2017-03-08 20:37:01",
  "merged_by": "martinwicke",
  "file_path": "namignizer/model.py",
  "condition": [
   "$0, $1=$2.$3)"
  ],
  "consequent": [
   "$0, $1=$2.$3)",
   "\tlstm_cells.append($0)"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "append",
    "lstm_cells"
   ]
  }
 },
 {
  "number": 1073,
  "sha": "d6787c0fdd0011d61860f849767e40d9d45e87e3",
  "author": "knathanieltucker",
  "participant": "martinwicke",
  "created_at": "2017-02-26 07:51:14",
  "merged_at": "2017-03-08 20:37:01",
  "merged_by": "martinwicke",
  "file_path": "namignizer/model.py",
  "condition": [
   "$0 = $1.$2.$3.MultiRNNCell([lstm_cell] * config.num_layers)"
  ],
  "consequent": [
   "$0 = $1.$2.$3.MultiRNNCell(lstm_cells)"
  ],
  "identifiers": {
   "condition": [
    "lstm_cell",
    "MultiRNNCell",
    "num_layers",
    "config"
   ],
   "consequent": [
    "MultiRNNCell",
    "lstm_cells"
   ]
  }
 },
 {
  "number": 1127,
  "sha": "74ad728e9ec024be1182fc7e4f8b881440d9c274",
  "author": "AsterAI",
  "participant": "googlebot",
  "created_at": "2017-03-08 13:19:42",
  "merged_at": "2017-03-16 01:23:05",
  "merged_by": "nealwu",
  "file_path": "tutorials/image/cifar10/cifar10_train.py",
  "condition": [
   "log_steps = $0.log_steps_count",
   "\tif $1.$2 % log_steps == 0:"
  ],
  "consequent": [
   "if $1.$2 % $0.log_frequency == 0:",
   "\tcurrent_time = time.time()"
  ],
  "identifiers": {
   "condition": [
    "log_steps",
    "log_steps_count"
   ],
   "consequent": [
    "current_time",
    "log_frequency",
    "time"
   ]
  }
 },
 {
  "number": 1127,
  "sha": "74ad728e9ec024be1182fc7e4f8b881440d9c274",
  "author": "AsterAI",
  "participant": "googlebot",
  "created_at": "2017-03-08 13:19:42",
  "merged_at": "2017-03-16 01:23:05",
  "merged_by": "nealwu",
  "file_path": "tutorials/image/cifar10/cifar10_train.py",
  "condition": [
   "$0 = time.time() - $1._start_time"
  ],
  "consequent": [
   "$0 = current_time - $1._start_time"
  ],
  "identifiers": {
   "condition": [
    "time",
    "_start_time"
   ],
   "consequent": [
    "current_time",
    "_start_time"
   ]
  }
 },
 {
  "number": 1127,
  "sha": "74ad728e9ec024be1182fc7e4f8b881440d9c274",
  "author": "AsterAI",
  "participant": "googlebot",
  "created_at": "2017-03-08 13:19:42",
  "merged_at": "2017-03-16 01:23:05",
  "merged_by": "nealwu",
  "file_path": "tutorials/image/cifar10/cifar10_train.py",
  "condition": [
   "$0.$1 = time.time()"
  ],
  "consequent": [
   "$0.$1 = current_time"
  ],
  "identifiers": {
   "condition": [
    "time"
   ],
   "consequent": [
    "current_time"
   ]
  }
 },
 {
  "number": 1127,
  "sha": "74ad728e9ec024be1182fc7e4f8b881440d9c274",
  "author": "AsterAI",
  "participant": "googlebot",
  "created_at": "2017-03-08 13:19:42",
  "merged_at": "2017-03-16 01:23:05",
  "merged_by": "nealwu",
  "file_path": "tutorials/image/cifar10/cifar10_train.py",
  "condition": [
   "num_examples_per_step = $0.$1",
   "\t$2 = num_examples_per_step * $0.log_steps_count / $3",
   "          $4 = float($3 / log_steps)"
  ],
  "consequent": [
   "$2 = $0.log_frequency * $0.$1 / $3",
   "\t$4 = float($3 / $0.log_frequency)"
  ],
  "identifiers": {
   "condition": [
    "num_examples_per_step",
    "float",
    "log_steps",
    "log_steps_count"
   ],
   "consequent": [
    "float",
    "log_frequency"
   ]
  }
 },
 {
  "number": 1177,
  "sha": "241881995e4f0f9734481fdaf1fe4246c5036b4a",
  "author": "bogatyy",
  "participant": "calberti",
  "created_at": "2017-03-15 20:25:24",
  "merged_at": "2017-03-15 20:28:33",
  "merged_by": "calberti",
  "file_path": "syntaxnet/dragnn/tools/evaluator.py",
  "condition": [
   "print 'POS %.2f UAS %.2f LAS %.2f' % (pos, uas, las)"
  ],
  "consequent": [
   "tf.logging.set_verbosity(tf.logging.INFO)"
  ],
  "identifiers": {
   "condition": [
    "las",
    "pos",
    "print",
    "uas"
   ],
   "consequent": [
    "tf",
    "set_verbosity",
    "INFO",
    "logging"
   ]
  }
 },
 {
  "number": 1425,
  "sha": "b2fc63b3fcd1cd7732b732d07b108cec64bf75de",
  "author": "edouardfouche",
  "participant": "googlebot",
  "created_at": "2017-04-28 17:39:08",
  "merged_at": "2017-05-10 02:22:32",
  "merged_by": "panyx0718",
  "file_path": "lm_1b/lm_1b_eval.py",
  "condition": [
   "for $0 in range($1.$2):"
  ],
  "consequent": [
   "import six",
   "\tfor $0 in six.moves.range($1.$2):"
  ],
  "identifiers": {
   "condition": [
    "range"
   ],
   "consequent": [
    "six",
    "range",
    "moves"
   ]
  }
 },
 {
  "number": 1425,
  "sha": "b2fc63b3fcd1cd7732b732d07b108cec64bf75de",
  "author": "edouardfouche",
  "participant": "googlebot",
  "created_at": "2017-04-28 17:39:08",
  "merged_at": "2017-05-10 02:22:32",
  "merged_by": "panyx0718",
  "file_path": "lm_1b/lm_1b_eval.py",
  "condition": [
   "for $0 in range($1.$2):"
  ],
  "consequent": [
   "for $0 in six.moves.range($1.$2):"
  ],
  "identifiers": {
   "condition": [
    "range"
   ],
   "consequent": [
    "six",
    "range",
    "moves"
   ]
  }
 },
 {
  "number": 1425,
  "sha": "b2fc63b3fcd1cd7732b732d07b108cec64bf75de",
  "author": "edouardfouche",
  "participant": "googlebot",
  "created_at": "2017-04-28 17:39:08",
  "merged_at": "2017-05-10 02:22:32",
  "merged_by": "panyx0718",
  "file_path": "lm_1b/lm_1b_eval.py",
  "condition": [
   "for $0 in range(len($1)):"
  ],
  "consequent": [
   "for $0 in six.moves.range(len($1)):"
  ],
  "identifiers": {
   "condition": [
    "len",
    "range"
   ],
   "consequent": [
    "len",
    "six",
    "range",
    "moves"
   ]
  }
 },
 {
  "number": 1447,
  "sha": "cb4a4853e821bea8cda500b1759cf2e7ab6a1ed5",
  "author": "ahundt",
  "participant": "nealwu",
  "created_at": "2017-05-05 23:14:37",
  "merged_at": "2017-05-06 00:06:52",
  "merged_by": "nealwu",
  "file_path": "slim/nets/resnet_v2.py",
  "condition": [
   "$0=True, $1=$1, $2=$2)"
  ],
  "consequent": [
   "else:",
   "\tlogits = net",
   "\tspatial_squeeze=True,",
   "\t$0=True, spatial_squeeze=spatial_squeeze,",
   "                   $1=$1, $2=$2)"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "spatial_squeeze",
    "logits",
    "net"
   ]
  }
 },
 {
  "number": 1447,
  "sha": "cb4a4853e821bea8cda500b1759cf2e7ab6a1ed5",
  "author": "ahundt",
  "participant": "nealwu",
  "created_at": "2017-05-05 23:14:37",
  "merged_at": "2017-05-06 00:06:52",
  "merged_by": "nealwu",
  "file_path": "slim/nets/resnet_v2.py",
  "condition": [
   "$0=True, $1=$1, $2=$2)"
  ],
  "consequent": [
   "spatial_squeeze=True,",
   "\t$0=True, spatial_squeeze=spatial_squeeze,",
   "                   $1=$1, $2=$2)"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "spatial_squeeze"
   ]
  }
 },
 {
  "number": 1447,
  "sha": "cb4a4853e821bea8cda500b1759cf2e7ab6a1ed5",
  "author": "ahundt",
  "participant": "nealwu",
  "created_at": "2017-05-05 23:14:37",
  "merged_at": "2017-05-06 00:06:52",
  "merged_by": "nealwu",
  "file_path": "slim/nets/resnet_v2.py",
  "condition": [
   "$0=True, $1=$1, $2=$2)"
  ],
  "consequent": [
   "spatial_squeeze=True,",
   "\t$0=True, spatial_squeeze=spatial_squeeze,",
   "                   $1=$1, $2=$2)"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "spatial_squeeze"
   ]
  }
 },
 {
  "number": 1447,
  "sha": "cb4a4853e821bea8cda500b1759cf2e7ab6a1ed5",
  "author": "ahundt",
  "participant": "nealwu",
  "created_at": "2017-05-05 23:14:37",
  "merged_at": "2017-05-06 00:06:52",
  "merged_by": "nealwu",
  "file_path": "slim/nets/resnet_v2.py",
  "condition": [
   "$0=True, $1=$1, $2=$2)"
  ],
  "consequent": [
   "spatial_squeeze=True,",
   "\t$0=True, spatial_squeeze=spatial_squeeze,",
   "                   $1=$1, $2=$2)"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "spatial_squeeze"
   ]
  }
 },
 {
  "number": 1487,
  "sha": "99f9442b0f1f5225c7ef725c32e55afb41186e66",
  "author": "nealwu",
  "participant": "jhseu",
  "created_at": "2017-05-18 23:58:45",
  "merged_at": "2017-05-23 01:06:30",
  "merged_by": "nealwu",
  "file_path": "inception/inception/slim/ops_test.py",
  "condition": [
   "barrier = $0.no_op(name='gradient_barrier')",
   "\twith $0.control_dependencies([barrier]):",
   "\t$1 = $1"
  ],
  "consequent": [
   "$1 = $0.identity($1)"
  ],
  "identifiers": {
   "condition": [
    "barrier",
    "control_dependencies",
    "no_op",
    "name"
   ],
   "consequent": [
    "identity"
   ]
  }
 },
 {
  "number": 1487,
  "sha": "99f9442b0f1f5225c7ef725c32e55afb41186e66",
  "author": "nealwu",
  "participant": "jhseu",
  "created_at": "2017-05-18 23:58:45",
  "merged_at": "2017-05-23 01:06:30",
  "merged_by": "nealwu",
  "file_path": "inception/inception/slim/ops_test.py",
  "condition": [
   "barrier = $0.no_op(name='gradient_barrier')",
   "\twith $0.control_dependencies([barrier]):",
   "\t$1 = $1"
  ],
  "consequent": [
   "$1 = $0.identity($1)"
  ],
  "identifiers": {
   "condition": [
    "barrier",
    "control_dependencies",
    "no_op",
    "name"
   ],
   "consequent": [
    "identity"
   ]
  }
 },
 {
  "number": 1487,
  "sha": "99f9442b0f1f5225c7ef725c32e55afb41186e66",
  "author": "nealwu",
  "participant": "jhseu",
  "created_at": "2017-05-18 23:58:45",
  "merged_at": "2017-05-23 01:06:30",
  "merged_by": "nealwu",
  "file_path": "inception/inception/slim/ops_test.py",
  "condition": [
   "barrier = $0.no_op(name='gradient_barrier')",
   "\twith $0.control_dependencies([barrier]):",
   "\t$1 = $1"
  ],
  "consequent": [
   "$1 = $0.identity($1)"
  ],
  "identifiers": {
   "condition": [
    "barrier",
    "control_dependencies",
    "no_op",
    "name"
   ],
   "consequent": [
    "identity"
   ]
  }
 },
 {
  "number": 1487,
  "sha": "99f9442b0f1f5225c7ef725c32e55afb41186e66",
  "author": "nealwu",
  "participant": "jhseu",
  "created_at": "2017-05-18 23:58:45",
  "merged_at": "2017-05-23 01:06:30",
  "merged_by": "nealwu",
  "file_path": "slim/deployment/model_deploy.py",
  "condition": [
   "$0 = total_loss"
  ],
  "consequent": [
   "$0 = tf.identity(total_loss, name='train_op')"
  ],
  "identifiers": {
   "condition": [
    "total_loss"
   ],
   "consequent": [
    "tf",
    "total_loss",
    "identity",
    "name"
   ]
  }
 },
 {
  "number": 1487,
  "sha": "99f9442b0f1f5225c7ef725c32e55afb41186e66",
  "author": "nealwu",
  "participant": "jhseu",
  "created_at": "2017-05-18 23:58:45",
  "merged_at": "2017-05-23 01:06:30",
  "merged_by": "nealwu",
  "file_path": "slim/train_image_classifier.py",
  "condition": [
   "$0 = total_loss"
  ],
  "consequent": [
   "$0 = tf.identity(total_loss, name='train_op')"
  ],
  "identifiers": {
   "condition": [
    "total_loss"
   ],
   "consequent": [
    "tf",
    "total_loss",
    "identity",
    "name"
   ]
  }
 },
 {
  "number": 1532,
  "sha": "76cf35de36b3d5a10255c54b2e54500048c79b47",
  "author": "andrewgilbert12",
  "participant": "nealwu",
  "created_at": "2017-06-06 09:49:02",
  "merged_at": "2017-06-06 19:40:32",
  "merged_by": "nealwu",
  "file_path": "adversarial_crypto/train_eval.py",
  "condition": [
   "$0 = $1.concat([$2, $3], 1)"
  ],
  "consequent": [
   "$0 = $1.concat(axis=1, values=[$2, $3])"
  ],
  "identifiers": {
   "condition": [
    "concat"
   ],
   "consequent": [
    "concat",
    "values",
    "axis"
   ]
  }
 },
 {
  "number": 1532,
  "sha": "76cf35de36b3d5a10255c54b2e54500048c79b47",
  "author": "andrewgilbert12",
  "participant": "nealwu",
  "created_at": "2017-06-06 09:49:02",
  "merged_at": "2017-06-06 19:40:32",
  "merged_by": "nealwu",
  "file_path": "adversarial_crypto/train_eval.py",
  "condition": [
   "[$0.$1.$2.$3, $0.$1.$2.convolution2d],"
  ],
  "consequent": [
   "[$0.$1.$2.$3, $0.$1.$2.conv2d],"
  ],
  "identifiers": {
   "condition": [
    "convolution2d"
   ],
   "consequent": [
    "conv2d"
   ]
  }
 },
 {
  "number": 1532,
  "sha": "76cf35de36b3d5a10255c54b2e54500048c79b47",
  "author": "andrewgilbert12",
  "participant": "nealwu",
  "created_at": "2017-06-06 09:49:02",
  "merged_at": "2017-06-06 19:40:32",
  "merged_by": "nealwu",
  "file_path": "adversarial_crypto/train_eval.py",
  "condition": [
   "$0 = $1.$2.$3.convolution2d("
  ],
  "consequent": [
   "$0 = $1.$2.$3.conv2d("
  ],
  "identifiers": {
   "condition": [
    "convolution2d"
   ],
   "consequent": [
    "conv2d"
   ]
  }
 },
 {
  "number": 1532,
  "sha": "76cf35de36b3d5a10255c54b2e54500048c79b47",
  "author": "andrewgilbert12",
  "participant": "nealwu",
  "created_at": "2017-06-06 09:49:02",
  "merged_at": "2017-06-06 19:40:32",
  "merged_by": "nealwu",
  "file_path": "adversarial_crypto/train_eval.py",
  "condition": [
   "$0 = $1.$2.$3.convolution2d("
  ],
  "consequent": [
   "$0 = $1.$2.$3.conv2d("
  ],
  "identifiers": {
   "condition": [
    "convolution2d"
   ],
   "consequent": [
    "conv2d"
   ]
  }
 },
 {
  "number": 1532,
  "sha": "76cf35de36b3d5a10255c54b2e54500048c79b47",
  "author": "andrewgilbert12",
  "participant": "nealwu",
  "created_at": "2017-06-06 09:49:02",
  "merged_at": "2017-06-06 19:40:32",
  "merged_by": "nealwu",
  "file_path": "adversarial_crypto/train_eval.py",
  "condition": [
   "$0 = $1.$2.$3.convolution2d("
  ],
  "consequent": [
   "$0 = $1.$2.$3.conv2d("
  ],
  "identifiers": {
   "condition": [
    "convolution2d"
   ],
   "consequent": [
    "conv2d"
   ]
  }
 },
 {
  "number": 1536,
  "sha": "11733fcafdb148878052c47dda0e4b9e76736700",
  "author": "awilliamson",
  "participant": "nealwu",
  "created_at": "2017-06-07 18:13:27",
  "merged_at": "2017-06-15 21:51:36",
  "merged_by": "nealwu",
  "file_path": "tutorials/image/alexnet/alexnet_benchmark.py",
  "condition": [
   "$0 = $1.$2.local_response_normalization("
  ],
  "consequent": [
   "$0 = $1.$2.local_response_normalization(conv1,                                               alpha=1e-4,                                               beta=0.75,                                               depth_radius=2,                                               bias=2.0)"
  ],
  "identifiers": {
   "condition": [
    "local_response_normalization"
   ],
   "consequent": [
    "alpha",
    "bias",
    "depth_radius",
    "conv1",
    "local_response_normalization",
    "beta"
   ]
  }
 },
 {
  "number": 1536,
  "sha": "11733fcafdb148878052c47dda0e4b9e76736700",
  "author": "awilliamson",
  "participant": "nealwu",
  "created_at": "2017-06-07 18:13:27",
  "merged_at": "2017-06-15 21:51:36",
  "merged_by": "nealwu",
  "file_path": "tutorials/image/alexnet/alexnet_benchmark.py",
  "condition": [
   "conv1,",
   "\talpha=1e-04,",
   "      beta=0.75,",
   "      depth_radius=5,",
   "      bias=2.0",
   "    )"
  ],
  "consequent": [],
  "identifiers": {
   "condition": [
    "alpha",
    "bias",
    "depth_radius",
    "conv1",
    "beta"
   ],
   "consequent": []
  }
 },
 {
  "number": 1536,
  "sha": "11733fcafdb148878052c47dda0e4b9e76736700",
  "author": "awilliamson",
  "participant": "nealwu",
  "created_at": "2017-06-07 18:13:27",
  "merged_at": "2017-06-15 21:51:36",
  "merged_by": "nealwu",
  "file_path": "tutorials/image/alexnet/alexnet_benchmark.py",
  "condition": [
   "$0 = $1.$2.local_response_normalization("
  ],
  "consequent": [
   "$0 = $1.$2.local_response_normalization(conv2,                                               alpha=1e-4,                                               beta=0.75,                                               depth_radius=2,                                               bias=2.0)"
  ],
  "identifiers": {
   "condition": [
    "local_response_normalization"
   ],
   "consequent": [
    "conv2",
    "alpha",
    "bias",
    "depth_radius",
    "local_response_normalization",
    "beta"
   ]
  }
 },
 {
  "number": 1538,
  "sha": "b5acc005968d37495f0e7d83d2dd2ef3d3674211",
  "author": "tfboyd",
  "participant": "nealwu",
  "created_at": "2017-06-08 17:14:00",
  "merged_at": "2017-06-09 07:48:58",
  "merged_by": "nealwu",
  "file_path": "tutorials/image/cifar10/cifar10_multi_gpu_train.py",
  "condition": [
   "def tower_loss($0):"
  ],
  "consequent": [
   "def tower_loss($0, images, labels):"
  ],
  "identifiers": {
   "condition": [
    "tower_loss"
   ],
   "consequent": [
    "labels",
    "tower_loss",
    "images"
   ]
  }
 },
 {
  "number": 1538,
  "sha": "b5acc005968d37495f0e7d83d2dd2ef3d3674211",
  "author": "tfboyd",
  "participant": "nealwu",
  "created_at": "2017-06-08 17:14:00",
  "merged_at": "2017-06-09 07:48:58",
  "merged_by": "nealwu",
  "file_path": "tutorials/image/cifar10/cifar10_multi_gpu_train.py",
  "condition": [
   "                                     ",
   "\t$0, $1 = cifar10.distorted_inputs()"
  ],
  "consequent": [
   "$0: Images. 4D tensor of shape [batch_size, height, width, 3].",
   "\t$1: Labels. 1D tensor of shape [batch_size]."
  ],
  "identifiers": {
   "condition": [
    "cifar10",
    "distorted_inputs"
   ],
   "consequent": [
    "of",
    "D",
    "shape",
    "batch_size",
    "Images",
    "height",
    "tensor",
    "Labels",
    "width"
   ]
  }
 },
 {
  "number": 1538,
  "sha": "b5acc005968d37495f0e7d83d2dd2ef3d3674211",
  "author": "tfboyd",
  "participant": "nealwu",
  "created_at": "2017-06-08 17:14:00",
  "merged_at": "2017-06-09 07:48:58",
  "merged_by": "nealwu",
  "file_path": "tutorials/image/cifar10/cifar10_multi_gpu_train.py",
  "condition": [
   "$0 = tower_loss($1)"
  ],
  "consequent": [
   "                                     ",
   "\timages, labels = cifar10.distorted_inputs()",
   "    batch_queue = tf.contrib.slim.prefetch_queue.prefetch_queue(           [images, labels], capacity=2 * FLAGS.num_gpus)                                             ",
   "\timages, labels = batch_queue.dequeue()",
   "            $0 = tower_loss($1, images, labels)"
  ],
  "identifiers": {
   "condition": [
    "tower_loss"
   ],
   "consequent": [
    "distorted_inputs",
    "FLAGS",
    "tower_loss",
    "tf",
    "num_gpus",
    "dequeue",
    "contrib",
    "slim",
    "capacity",
    "images",
    "prefetch_queue",
    "batch_queue",
    "labels",
    "cifar10"
   ]
  }
 },
 {
  "number": 1538,
  "sha": "b5acc005968d37495f0e7d83d2dd2ef3d3674211",
  "author": "tfboyd",
  "participant": "nealwu",
  "created_at": "2017-06-08 17:14:00",
  "merged_at": "2017-06-09 07:48:58",
  "merged_by": "nealwu",
  "file_path": "tutorials/image/cifar10/cifar10_train.py",
  "condition": [
   "$0, $1 = $2.distorted_inputs()"
  ],
  "consequent": [
   "                                                                                                                  ",
   "\twith tf.device('/cpu:0'):",
   "\t$0, $1 = $2.distorted_inputs()"
  ],
  "identifiers": {
   "condition": [
    "distorted_inputs"
   ],
   "consequent": [
    "tf",
    "device",
    "distorted_inputs"
   ]
  }
 },
 {
  "number": 1869,
  "sha": "545b75f9e221d84f4470df657493dd63c92f6c6a",
  "author": "tmattio",
  "participant": "derekjchow",
  "created_at": "2017-07-06 06:38:12",
  "merged_at": "2017-07-07 22:40:21",
  "merged_by": "derekjchow",
  "file_path": "object_detection/utils/visualization_utils.py",
  "condition": [
   "import six",
   "\tfor $0, $1 in six.iteritems($2):"
  ],
  "consequent": [
   "for $0, $1 in $2.items():"
  ],
  "identifiers": {
   "condition": [
    "iteritems",
    "six"
   ],
   "consequent": [
    "items"
   ]
  }
 },
 {
  "number": 1965,
  "sha": "8f52c68137767220837e96bc9cb415ee5aac4c89",
  "author": "korrawat",
  "participant": "derekjchow",
  "created_at": "2017-07-15 14:49:05",
  "merged_at": "2017-07-17 16:28:42",
  "merged_by": "derekjchow",
  "file_path": "object_detection/utils/label_map_util.py",
  "condition": [
   "as $0 $1.  $2 False of if $3 $4 $5 $6 not $7,"
  ],
  "consequent": [
   "as $0 $1.  $2 False or if $3 $4 $5 $6 not $7,"
  ],
  "identifiers": {
   "condition": [
    "of"
   ],
   "consequent": []
  }
 },
 {
  "number": 2012,
  "sha": "dac7db72dd5b9514801fa13d54f84817372e224c",
  "author": "sussillo",
  "participant": "googlebot",
  "created_at": "2017-07-21 21:09:26",
  "merged_at": "2017-07-21 21:25:52",
  "merged_by": "sussillo",
  "file_path": "lfads/synth_data/synthetic_data_utils.py",
  "condition": [
   "spikified_data_e: $0 $1 $2 $3 $4 $2 $5 $6 $7 as $8,"
  ],
  "consequent": [
   "spikified_e: $0 $1 $2 $3 $4 $2 $5 $6 $7 as $8,"
  ],
  "identifiers": {
   "condition": [
    "spikified_data_e"
   ],
   "consequent": [
    "spikified_e"
   ]
  }
 },
 {
  "number": 2012,
  "sha": "dac7db72dd5b9514801fa13d54f84817372e224c",
  "author": "sussillo",
  "participant": "googlebot",
  "created_at": "2017-07-21 21:09:26",
  "merged_at": "2017-07-21 21:25:52",
  "merged_by": "sussillo",
  "file_path": "lfads/synth_data/synthetic_data_utils.py",
  "condition": [
   "spikified_data_e: $0 $1 $2 $3 $4 $2 $5 $6 represented as spikes,",
   "\tsampled from $5 underlying poisson process."
  ],
  "consequent": [
   "gauss_e: $0 $1 $2 $3 $4 $2 $5 $6 with noise."
  ],
  "identifiers": {
   "condition": [
    "sampled",
    "process",
    "represented",
    "underlying",
    "spikified_data_e",
    "poisson",
    "spikes"
   ],
   "consequent": [
    "gauss_e",
    "noise"
   ]
  }
 },
 {
  "number": 2044,
  "sha": "2e960eb1ed234c94917e1cee55d915b57d6be336",
  "author": "tfboyd",
  "participant": "protoget",
  "created_at": "2017-07-26 15:21:36",
  "merged_at": "2017-07-27 16:44:44",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/cifar10_main.py",
  "condition": [
   "                                                ",
   "class ParamServerDeviceSetter($0):"
  ],
  "consequent": [
   "class GpuParamServerDeviceSetter($0):"
  ],
  "identifiers": {
   "condition": [
    "ParamServerDeviceSetter"
   ],
   "consequent": [
    "GpuParamServerDeviceSetter"
   ]
  }
 },
 {
  "number": 2044,
  "sha": "2e960eb1ed234c94917e1cee55d915b57d6be336",
  "author": "tfboyd",
  "participant": "protoget",
  "created_at": "2017-07-26 15:21:36",
  "merged_at": "2017-07-27 16:44:44",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/cifar10_main.py",
  "condition": [
   "\"\"\"$0 for ParamServerDeviceSetter."
  ],
  "consequent": [
   "\"\"\"$0 for GpuParamServerDeviceSetter."
  ],
  "identifiers": {
   "condition": [
    "ParamServerDeviceSetter"
   ],
   "consequent": [
    "GpuParamServerDeviceSetter"
   ]
  }
 },
 {
  "number": 2044,
  "sha": "2e960eb1ed234c94917e1cee55d915b57d6be336",
  "author": "tfboyd",
  "participant": "protoget",
  "created_at": "2017-07-26 15:21:36",
  "merged_at": "2017-07-27 16:44:44",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/cifar10_main.py",
  "condition": [
   "$0: $1 $2 $3 $4 for computer ops."
  ],
  "consequent": [
   "$0: $1 $2 $3 $4 for computation Ops."
  ],
  "identifiers": {
   "condition": [
    "computer",
    "ops"
   ],
   "consequent": [
    "computation",
    "Ops"
   ]
  }
 },
 {
  "number": 2044,
  "sha": "2e960eb1ed234c94917e1cee55d915b57d6be336",
  "author": "tfboyd",
  "participant": "protoget",
  "created_at": "2017-07-26 15:21:36",
  "merged_at": "2017-07-27 16:44:44",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/cifar10_main.py",
  "condition": [
   "$0: $1 $2 $3 $4 $5 $6 for $7 ops. $8 $9 is"
  ],
  "consequent": [
   "$0: $1 $2 $3 $4 $5 $6 for $7 Ops. $8 $9 is"
  ],
  "identifiers": {
   "condition": [
    "ops"
   ],
   "consequent": [
    "Ops"
   ]
  }
 },
 {
  "number": 2044,
  "sha": "2e960eb1ed234c94917e1cee55d915b57d6be336",
  "author": "tfboyd",
  "participant": "protoget",
  "created_at": "2017-07-26 15:21:36",
  "merged_at": "2017-07-27 16:44:44",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/cifar10_main.py",
  "condition": [
   "def _create_device_setter($0, $1):"
  ],
  "consequent": [
   "def _create_device_setter($0, $1, num_gpus):"
  ],
  "identifiers": {
   "condition": [
    "_create_device_setter"
   ],
   "consequent": [
    "num_gpus",
    "_create_device_setter"
   ]
  }
 },
 {
  "number": 2044,
  "sha": "2e960eb1ed234c94917e1cee55d915b57d6be336",
  "author": "tfboyd",
  "participant": "protoget",
  "created_at": "2017-07-26 15:21:36",
  "merged_at": "2017-07-27 16:44:44",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/cifar10_main.py",
  "condition": [
   "$0 = ['/gpu:%d' % $1 for $1 in range(FLAGS.$2)]"
  ],
  "consequent": [
   "                                                                                                                                         ",
   "\t$0 = ['/gpu:%d' % $1 for $1 in range($2)]"
  ],
  "identifiers": {
   "condition": [
    "FLAGS",
    "range"
   ],
   "consequent": [
    "range"
   ]
  }
 },
 {
  "number": 2044,
  "sha": "2e960eb1ed234c94917e1cee55d915b57d6be336",
  "author": "tfboyd",
  "participant": "protoget",
  "created_at": "2017-07-26 15:21:36",
  "merged_at": "2017-07-27 16:44:44",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/cifar10_main.py",
  "condition": [
   "return ParamServerDeviceSetter($0, $1)"
  ],
  "consequent": [
   "return GpuParamServerDeviceSetter($0, $1)"
  ],
  "identifiers": {
   "condition": [
    "ParamServerDeviceSetter"
   ],
   "consequent": [
    "GpuParamServerDeviceSetter"
   ]
  }
 },
 {
  "number": 2044,
  "sha": "2e960eb1ed234c94917e1cee55d915b57d6be336",
  "author": "tfboyd",
  "participant": "protoget",
  "created_at": "2017-07-26 15:21:36",
  "merged_at": "2017-07-27 16:44:44",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/cifar10_main.py",
  "condition": [
   "$0 = _create_device_setter($1, $2)"
  ],
  "consequent": [
   "$0 = _create_device_setter($1, $2, FLAGS.num_gpus)"
  ],
  "identifiers": {
   "condition": [
    "_create_device_setter"
   ],
   "consequent": [
    "num_gpus",
    "FLAGS",
    "_create_device_setter"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/box_predictor.py",
  "condition": [
   "batch_size = static_shape.get_batch_size($0.get_shape())",
   "\tif batch_size is None:",
   "\tfeatures_height = static_shape.get_height($0.get_shape())",
   "      features_width = static_shape.get_width($0.get_shape())",
   "      flattened_predictions_size = (features_height * features_width *                                     num_predictions_per_location)",
   "      $1 = $2.reshape("
  ],
  "consequent": [
   "from object_detection.utils import shape_utils",
   "\tif self._predict_instance_masks:",
   "\traise ValueError('Mask prediction is unimplemented.')",
   "    combined_feature_map_shape = shape_utils.combined_static_and_dynamic_shape(         $0)",
   "    $1 = $2.reshape("
  ],
  "identifiers": {
   "condition": [
    "flattened_predictions_size",
    "features_height",
    "batch_size",
    "get_width",
    "features_width",
    "get_batch_size",
    "num_predictions_per_location",
    "static_shape",
    "get_height",
    "reshape",
    "get_shape"
   ],
   "consequent": [
    "object_detection",
    "shape_utils",
    "combined_static_and_dynamic_shape",
    "combined_feature_map_shape",
    "self",
    "_predict_instance_masks",
    "ValueError",
    "utils",
    "reshape"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/box_predictor.py",
  "condition": [
   "$0,",
   "\t[-1, flattened_predictions_size, 1, $1.$2])"
  ],
  "consequent": [
   "$0, tf.stack([combined_feature_map_shape[0],                                  combined_feature_map_shape[1] *                                  combined_feature_map_shape[2] *                                  num_predictions_per_location,                                  1, $1.$2]))"
  ],
  "identifiers": {
   "condition": [
    "flattened_predictions_size"
   ],
   "consequent": [
    "tf",
    "stack",
    "num_predictions_per_location",
    "combined_feature_map_shape"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/box_predictor.py",
  "condition": [
   "$0,"
  ],
  "consequent": [
   "$0,",
   "\ttf.stack([combined_feature_map_shape[0],                   combined_feature_map_shape[1] *                   combined_feature_map_shape[2] *                   num_predictions_per_location,                   num_class_slots]))"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "combined_feature_map_shape",
    "tf",
    "num_predictions_per_location",
    "stack",
    "num_class_slots"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/post_processing.py",
  "condition": [
   "$0=None):"
  ],
  "consequent": [
   "$0=None,",
   "\tparallel_iterations=32):"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "parallel_iterations"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/post_processing.py",
  "condition": [
   "$0 dictionary containing the following entries:",
   "\t'detection_boxes': $0 [$1, $2, 4] $3 $4"
  ],
  "consequent": [
   "parallel_iterations: (optional) number of batch items to process in",
   "\tparallel.",
   "    'nmsed_boxes': $0 [$1, $2, 4] $3 $4"
  ],
  "identifiers": {
   "condition": [
    "dictionary",
    "entries",
    "following",
    "containing",
    "the"
   ],
   "consequent": [
    "number",
    "parallel_iterations",
    "of",
    "optional",
    "process",
    "parallel",
    "to",
    "batch",
    "items"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/post_processing.py",
  "condition": [
   "'detection_scores': $0 [bath_size, $1] $2 $3 containing"
  ],
  "consequent": [
   "'nmsed_scores': $0 [batch_size, $1] $2 $3 containing"
  ],
  "identifiers": {
   "condition": [
    "bath_size",
    "containing"
   ],
   "consequent": [
    "batch_size",
    "containing"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/post_processing.py",
  "condition": [
   "'num_detections': $0 [batchsize] $1 $2 $3 $4 $5 of"
  ],
  "consequent": [
   "'nmsed_masks': (optional) a",
   "\t[batch_size, max_detections, mask_height, mask_width] $1 $2",
   "      containing masks for each selected box. This is set to None if input",
   "      `masks` is None.",
   "    'num_detections': $0 [batch_size] int32 $2 $3 $4 $5 of"
  ],
  "identifiers": {
   "condition": [
    "of",
    "batchsize"
   ],
   "consequent": [
    "int32",
    "set",
    "optional",
    "of",
    "mask_height",
    "batch_size",
    "max_detections",
    "This",
    "each",
    "a",
    "selected",
    "to",
    "box",
    "containing",
    "input",
    "mask_width",
    "masks"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/post_processing.py",
  "condition": [
   "'detection_masks': (optional) a",
   "\t[batch_size, max_detections, mask_height, mask_width] float32 tensor",
   "      containing masks for each selected box.",
   "    $0: if iou_thresh is not in [0, 1] or if input boxlist does not have",
   "\ta valid $1 field."
  ],
  "consequent": [
   "$0: if `q` in boxes.shape is not 1 or not equal to number of",
   "\tclasses as inferred from $1.shape."
  ],
  "identifiers": {
   "condition": [
    "mask_height",
    "does",
    "tensor",
    "field",
    "containing",
    "masks",
    "batch_size",
    "max_detections",
    "each",
    "a",
    "iou_thresh",
    "mask_width",
    "input",
    "have",
    "valid",
    "optional",
    "box",
    "selected",
    "boxlist",
    "float32"
   ],
   "consequent": [
    "boxes",
    "number",
    "of",
    "shape",
    "classes",
    "to",
    "equal",
    "inferred",
    "q"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/post_processing.py",
  "condition": [
   "per_image_boxes_list = $0.unstack($1)",
   "\tper_image_scores_list = $0.unstack(scores)",
   "    num_valid_boxes_list = len(per_image_boxes_list) * [None]",
   "    per_image_masks_list = len(per_image_boxes_list) * [None]"
  ],
  "consequent": [
   "original_masks = masks",
   "\tboxes_shape = $1.shape",
   "    batch_size = boxes_shape[0].value",
   "    num_anchors = boxes_shape[1].value ",
   "    if batch_size is None:",
   "\tbatch_size = $0.shape($1)[0]",
   "    if num_anchors is None:",
   "\tnum_anchors = $0.shape($1)[1]                                                                                        "
  ],
  "identifiers": {
   "condition": [
    "unstack",
    "num_valid_boxes_list",
    "len",
    "per_image_masks_list",
    "per_image_scores_list",
    "per_image_boxes_list",
    "scores"
   ],
   "consequent": [
    "batch_size",
    "shape",
    "original_masks",
    "value",
    "num_anchors",
    "masks",
    "boxes_shape"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/post_processing.py",
  "condition": [
   "num_valid_boxes_list = $0.unstack($1)"
  ],
  "consequent": [
   "$1 = $0.ones([batch_size], dtype=$0.int32) * num_anchors"
  ],
  "identifiers": {
   "condition": [
    "num_valid_boxes_list",
    "unstack"
   ],
   "consequent": [
    "int32",
    "batch_size",
    "dtype",
    "ones",
    "num_anchors"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/post_processing.py",
  "condition": [
   "per_image_masks_list = $0.unstack($1)"
  ],
  "consequent": [
   "masks_shape = $0.stack([batch_size, num_anchors, 1, 0, 0])",
   "\t$1 = $0.zeros(masks_shape)"
  ],
  "identifiers": {
   "condition": [
    "unstack",
    "per_image_masks_list"
   ],
   "consequent": [
    "batch_size",
    "zeros",
    "masks_shape",
    "num_anchors",
    "stack"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/post_processing.py",
  "condition": [
   "detection_boxes_list = []",
   "\tdetection_scores_list = []",
   "    detection_classes_list = []",
   "    num_detections_list = []",
   "    detection_masks_list = []",
   "    for ($0, $1, $2, num_valid_boxes"
  ],
  "consequent": [
   "def single_image_nms_fn(args):",
   "\t\"\"\"Runs NMS on a single image and returns padded output.\"\"\"",
   "      ($0, $1, $2,        per_image_num_valid_boxes) = args"
  ],
  "identifiers": {
   "condition": [
    "detection_masks_list",
    "detection_scores_list",
    "detection_classes_list",
    "num_valid_boxes",
    "num_detections_list",
    "detection_boxes_list"
   ],
   "consequent": [
    "args",
    "single_image_nms_fn",
    "per_image_num_valid_boxes"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/post_processing.py",
  "condition": [
   ") in zip(per_image_boxes_list, per_image_scores_list,",
   "\tper_image_masks_list, num_valid_boxes_list):",
   "      if num_valid_boxes is not None:",
   "\t$0 = $1.reshape("
  ],
  "consequent": [
   "$0 = $1.reshape("
  ],
  "identifiers": {
   "condition": [
    "num_valid_boxes_list",
    "zip",
    "per_image_masks_list",
    "per_image_scores_list",
    "num_valid_boxes",
    "per_image_boxes_list",
    "reshape"
   ],
   "consequent": [
    "reshape"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/post_processing.py",
  "condition": [
   "$0.stack([num_valid_boxes, -1, -1])), [-1, $1, 4])"
  ],
  "consequent": [
   "$0.stack([per_image_num_valid_boxes, -1, -1])), [-1, $1, 4])"
  ],
  "identifiers": {
   "condition": [
    "stack",
    "num_valid_boxes"
   ],
   "consequent": [
    "stack",
    "per_image_num_valid_boxes"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/post_processing.py",
  "condition": [
   "$0.stack([num_valid_boxes, -1])), [-1, num_classes])"
  ],
  "consequent": [
   "$0.stack([per_image_num_valid_boxes, -1])),"
  ],
  "identifiers": {
   "condition": [
    "stack",
    "num_classes",
    "num_valid_boxes"
   ],
   "consequent": [
    "stack",
    "per_image_num_valid_boxes"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/post_processing.py",
  "condition": [
   "if masks is not None:"
  ],
  "consequent": [
   "[-1, num_classes])"
  ],
  "identifiers": {
   "condition": [
    "masks"
   ],
   "consequent": [
    "num_classes"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/post_processing.py",
  "condition": [
   "$0.stack([num_valid_boxes, -1, -1, -1])),"
  ],
  "consequent": [
   "$0.stack([per_image_num_valid_boxes, -1, -1, -1])),"
  ],
  "identifiers": {
   "condition": [
    "stack",
    "num_valid_boxes"
   ],
   "consequent": [
    "stack",
    "per_image_num_valid_boxes"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/post_processing.py",
  "condition": [
   "[-1, $0, masks.$1[3].$2, masks.$1[4].$2])"
  ],
  "consequent": [
   "[-1, $0, per_image_masks.$1[2].$2,            per_image_masks.$1[3].$2])"
  ],
  "identifiers": {
   "condition": [
    "masks"
   ],
   "consequent": [
    "per_image_masks"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/post_processing.py",
  "condition": [
   "num_detections_list.append(tf.to_float($0.num_boxes()))",
   "\tdetection_boxes_list.append($1.get())",
   "      detection_scores_list.append("
  ],
  "consequent": [
   "num_detections = $0.num_boxes()",
   "\tnmsed_boxes = $1.get()"
  ],
  "identifiers": {
   "condition": [
    "get",
    "append",
    "detection_scores_list",
    "tf",
    "to_float",
    "num_boxes",
    "num_detections_list",
    "detection_boxes_list"
   ],
   "consequent": [
    "num_boxes",
    "get",
    "nmsed_boxes",
    "num_detections"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/post_processing.py",
  "condition": [
   "$0.get_field($1.$2.$3))"
  ],
  "consequent": [
   "nmsed_scores = $0.get_field($1.$2.$3)"
  ],
  "identifiers": {
   "condition": [
    "get_field"
   ],
   "consequent": [
    "get_field",
    "nmsed_scores"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/post_processing.py",
  "condition": [
   "detection_classes_list.append(           $0.get_field($1.$2.$3))"
  ],
  "consequent": [
   "nmsed_classes = $0.get_field($1.$2.$3)"
  ],
  "identifiers": {
   "condition": [
    "append",
    "detection_classes_list",
    "get_field"
   ],
   "consequent": [
    "nmsed_classes",
    "get_field"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/post_processing.py",
  "condition": [
   "if $0 is not None:",
   "\tdetection_masks_list.append(             $1.get_field($2.$3.$0))"
  ],
  "consequent": [
   "nmsed_masks = $1.get_field($2.$3.$0)",
   "\treturn [nmsed_boxes, nmsed_scores, nmsed_classes, nmsed_masks,               num_detections]"
  ],
  "identifiers": {
   "condition": [
    "detection_masks_list",
    "append",
    "get_field"
   ],
   "consequent": [
    "nmsed_boxes",
    "nmsed_classes",
    "nmsed_scores",
    "nmsed_masks",
    "get_field",
    "num_detections"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/post_processing.py",
  "condition": [
   "nms_dict = {         'detection_boxes': $0.stack(detection_boxes_list),         'detection_scores': $0.stack(detection_scores_list),         'detection_classes': $0.stack(detection_classes_list),         'num_detections': $0.stack(num_detections_list)     }"
  ],
  "consequent": [
   "(batch_nmsed_boxes, batch_nmsed_scores,      batch_nmsed_classes, batch_nmsed_masks,      batch_num_detections) = $0.map_fn(          single_image_nms_fn,          elems=[boxes, scores, masks, num_valid_boxes],          dtype=[$0.float32, $0.float32, $0.float32, $0.float32, $0.int32],          parallel_iterations=parallel_iterations)"
  ],
  "identifiers": {
   "condition": [
    "detection_scores_list",
    "nms_dict",
    "detection_classes_list",
    "num_detections_list",
    "stack",
    "detection_boxes_list"
   ],
   "consequent": [
    "int32",
    "boxes",
    "elems",
    "batch_nmsed_scores",
    "parallel_iterations",
    "batch_nmsed_boxes",
    "batch_nmsed_masks",
    "map_fn",
    "dtype",
    "batch_num_detections",
    "batch_nmsed_classes",
    "num_valid_boxes",
    "scores",
    "masks",
    "single_image_nms_fn",
    "float32"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/post_processing.py",
  "condition": [
   "if masks is not None:"
  ],
  "consequent": [
   "if original_masks is None:"
  ],
  "identifiers": {
   "condition": [
    "masks"
   ],
   "consequent": [
    "original_masks"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/post_processing.py",
  "condition": [
   "nms_dict['detection_masks'] = tf.stack(detection_masks_list)",
   "\treturn nms_dict"
  ],
  "consequent": [
   "batch_nmsed_masks = None ",
   "\treturn (batch_nmsed_boxes, batch_nmsed_scores, batch_nmsed_classes,             batch_nmsed_masks, batch_num_detections)"
  ],
  "identifiers": {
   "condition": [
    "detection_masks_list",
    "tf",
    "stack",
    "nms_dict"
   ],
   "consequent": [
    "batch_nmsed_scores",
    "batch_nmsed_boxes",
    "batch_nmsed_masks",
    "batch_num_detections",
    "batch_nmsed_classes"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/post_processing_test.py",
  "condition": [
   "nms_dict = $0.batch_multiclass_non_max_suppression("
  ],
  "consequent": [
   "(nmsed_boxes, nmsed_scores, nmsed_classes, nmsed_masks,      num_detections) = $0.batch_multiclass_non_max_suppression("
  ],
  "identifiers": {
   "condition": [
    "nms_dict",
    "batch_multiclass_non_max_suppression"
   ],
   "consequent": [
    "nmsed_boxes",
    "nmsed_classes",
    "nmsed_scores",
    "nmsed_masks",
    "batch_multiclass_non_max_suppression",
    "num_detections"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/post_processing_test.py",
  "condition": [
   "$0=$1, $2=$1)"
  ],
  "consequent": [
   "$0=$1, $2=$1) ",
   "\tself.assertIsNone(nmsed_masks)"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "assertIsNone",
    "nmsed_masks",
    "self"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/post_processing_test.py",
  "condition": [
   "nms_output = $0.run(nms_dict)"
  ],
  "consequent": [
   "(nmsed_boxes, nmsed_scores, nmsed_classes,        num_detections) = $0.run([nmsed_boxes, nmsed_scores, nmsed_classes,                                    num_detections])"
  ],
  "identifiers": {
   "condition": [
    "nms_output",
    "nms_dict",
    "run"
   ],
   "consequent": [
    "nmsed_boxes",
    "nmsed_classes",
    "nmsed_scores",
    "run",
    "num_detections"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/post_processing_test.py",
  "condition": [
   "$0.assertAllClose(nms_output['detection_boxes'], $1)"
  ],
  "consequent": [
   "$0.assertAllClose(nmsed_boxes, $1)"
  ],
  "identifiers": {
   "condition": [
    "nms_output",
    "assertAllClose"
   ],
   "consequent": [
    "nmsed_boxes",
    "assertAllClose"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/post_processing_test.py",
  "condition": [
   "$0.assertAllClose(nms_output['detection_scores'], $1)"
  ],
  "consequent": [
   "$0.assertAllClose(nmsed_scores, $1)"
  ],
  "identifiers": {
   "condition": [
    "nms_output",
    "assertAllClose"
   ],
   "consequent": [
    "assertAllClose",
    "nmsed_scores"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/post_processing_test.py",
  "condition": [
   "$0.assertAllClose(nms_output['detection_classes'], $1)"
  ],
  "consequent": [
   "$0.assertAllClose(nmsed_classes, $1)"
  ],
  "identifiers": {
   "condition": [
    "nms_output",
    "assertAllClose"
   ],
   "consequent": [
    "assertAllClose",
    "nmsed_classes"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/post_processing_test.py",
  "condition": [
   "$0.assertEqual(nms_output['num_detections'], [4])"
  ],
  "consequent": [
   "$0.assertEqual(num_detections, [4])"
  ],
  "identifiers": {
   "condition": [
    "nms_output",
    "assertEqual"
   ],
   "consequent": [
    "assertEqual",
    "num_detections"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/post_processing_test.py",
  "condition": [
   "$0 = [[[0, 10, 1, 11],"
  ],
  "consequent": [
   "$0 = np.array([[[0, 10, 1, 11],"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "array",
    "np"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/post_processing_test.py",
  "condition": [
   "$0 = [[.95, .9, 0, 0],"
  ],
  "consequent": [
   "$0 = np.array([[.95, .9, 0, 0],"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "array",
    "np"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/post_processing_test.py",
  "condition": [
   "$0 = [[0, 0, 0, 0],"
  ],
  "consequent": [
   "$0 = np.array([[0, 0, 0, 0],"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "array",
    "np"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/post_processing_test.py",
  "condition": [
   "nms_dict = $0.batch_multiclass_non_max_suppression("
  ],
  "consequent": [
   "(nmsed_boxes, nmsed_scores, nmsed_classes, nmsed_masks,      num_detections) = $0.batch_multiclass_non_max_suppression("
  ],
  "identifiers": {
   "condition": [
    "nms_dict",
    "batch_multiclass_non_max_suppression"
   ],
   "consequent": [
    "nmsed_boxes",
    "nmsed_classes",
    "nmsed_scores",
    "nmsed_masks",
    "batch_multiclass_non_max_suppression",
    "num_detections"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/post_processing_test.py",
  "condition": [
   "$0=$1, $2=$1)"
  ],
  "consequent": [
   "$0=$1, $2=$1) ",
   "\tself.assertIsNone(nmsed_masks)                          ",
   "    self.assertAllEqual(nmsed_boxes.shape.as_list(),",
   "\texp_nms_corners.shape)",
   "    self.assertAllEqual(nmsed_scores.shape.as_list(),",
   "\texp_nms_scores.shape)",
   "    self.assertAllEqual(nmsed_classes.shape.as_list(),",
   "\texp_nms_classes.shape)",
   "    self.assertEqual(num_detections.shape.as_list(), [2])"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "as_list",
    "nmsed_boxes",
    "shape",
    "assertAllEqual",
    "nmsed_classes",
    "self",
    "nmsed_scores",
    "exp_nms_scores",
    "nmsed_masks",
    "exp_nms_classes",
    "assertIsNone",
    "exp_nms_corners",
    "assertEqual",
    "num_detections"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/post_processing_test.py",
  "condition": [
   "nms_output = $0.run(nms_dict)"
  ],
  "consequent": [
   "(nmsed_boxes, nmsed_scores, nmsed_classes,        num_detections) = $0.run([nmsed_boxes, nmsed_scores, nmsed_classes,                                    num_detections])"
  ],
  "identifiers": {
   "condition": [
    "nms_output",
    "nms_dict",
    "run"
   ],
   "consequent": [
    "nmsed_boxes",
    "nmsed_classes",
    "nmsed_scores",
    "run",
    "num_detections"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/post_processing_test.py",
  "condition": [
   "$0.assertAllClose(nms_output['detection_boxes'], $1)"
  ],
  "consequent": [
   "$0.assertAllClose(nmsed_boxes, $1)"
  ],
  "identifiers": {
   "condition": [
    "nms_output",
    "assertAllClose"
   ],
   "consequent": [
    "nmsed_boxes",
    "assertAllClose"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/post_processing_test.py",
  "condition": [
   "$0.assertAllClose(nms_output['detection_scores'], $1)"
  ],
  "consequent": [
   "$0.assertAllClose(nmsed_scores, $1)"
  ],
  "identifiers": {
   "condition": [
    "nms_output",
    "assertAllClose"
   ],
   "consequent": [
    "assertAllClose",
    "nmsed_scores"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/post_processing_test.py",
  "condition": [
   "$0.assertAllClose(nms_output['detection_classes'], $1)"
  ],
  "consequent": [
   "$0.assertAllClose(nmsed_classes, $1)"
  ],
  "identifiers": {
   "condition": [
    "nms_output",
    "assertAllClose"
   ],
   "consequent": [
    "assertAllClose",
    "nmsed_classes"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/post_processing_test.py",
  "condition": [
   "$0.assertAllClose(nms_output['num_detections'], [2, 3])"
  ],
  "consequent": [
   "$0.assertAllClose(num_detections, [2, 3])"
  ],
  "identifiers": {
   "condition": [
    "nms_output",
    "assertAllClose"
   ],
   "consequent": [
    "num_detections",
    "assertAllClose"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/post_processing_test.py",
  "condition": [
   "$0 = [[[0, 10, 1, 11],"
  ],
  "consequent": [
   "$0 = np.array([[[0, 10, 1, 11],"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "array",
    "np"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/post_processing_test.py",
  "condition": [
   "$0 = [[.95, .9, 0, 0],"
  ],
  "consequent": [
   "$0 = np.array([[.95, .9, 0, 0],"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "array",
    "np"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/post_processing_test.py",
  "condition": [
   "$0 = [[0, 0, 0, 0],"
  ],
  "consequent": [
   "$0 = np.array([[0, 0, 0, 0],"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "array",
    "np"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/post_processing_test.py",
  "condition": [
   "$0 = [[[[6, 7], [8, 9]],"
  ],
  "consequent": [
   "$0 = np.array([[[[6, 7], [8, 9]],"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "array",
    "np"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/post_processing_test.py",
  "condition": [
   "nms_dict = $0.batch_multiclass_non_max_suppression("
  ],
  "consequent": [
   "(nmsed_boxes, nmsed_scores, nmsed_classes, nmsed_masks,      num_detections) = $0.batch_multiclass_non_max_suppression("
  ],
  "identifiers": {
   "condition": [
    "nms_dict",
    "batch_multiclass_non_max_suppression"
   ],
   "consequent": [
    "nmsed_boxes",
    "nmsed_classes",
    "nmsed_scores",
    "nmsed_masks",
    "batch_multiclass_non_max_suppression",
    "num_detections"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/post_processing_test.py",
  "condition": [
   "$0=$0)"
  ],
  "consequent": [
   "$0=$0)                           ",
   "\tself.assertAllEqual(nmsed_boxes.shape.as_list(), exp_nms_corners.shape)",
   "    self.assertAllEqual(nmsed_scores.shape.as_list(), exp_nms_scores.shape)",
   "    self.assertAllEqual(nmsed_classes.shape.as_list(), exp_nms_classes.shape)",
   "    self.assertAllEqual(nmsed_masks.shape.as_list(), exp_nms_masks.shape)",
   "    self.assertEqual(num_detections.shape.as_list(), [2])"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "as_list",
    "shape",
    "nmsed_boxes",
    "assertAllEqual",
    "nmsed_classes",
    "self",
    "nmsed_scores",
    "exp_nms_masks",
    "exp_nms_scores",
    "nmsed_masks",
    "exp_nms_corners",
    "exp_nms_classes",
    "assertEqual",
    "num_detections"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/post_processing_test.py",
  "condition": [
   "nms_output = $0.run(nms_dict)"
  ],
  "consequent": [
   "(nmsed_boxes, nmsed_scores, nmsed_classes, nmsed_masks,        num_detections) = $0.run([nmsed_boxes, nmsed_scores, nmsed_classes,                                    nmsed_masks, num_detections])"
  ],
  "identifiers": {
   "condition": [
    "nms_output",
    "nms_dict",
    "run"
   ],
   "consequent": [
    "nmsed_boxes",
    "nmsed_classes",
    "nmsed_scores",
    "nmsed_masks",
    "run",
    "num_detections"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/post_processing_test.py",
  "condition": [
   "$0.assertAllClose(nms_output['detection_boxes'], $1)"
  ],
  "consequent": [
   "$0.assertAllClose(nmsed_boxes, $1)"
  ],
  "identifiers": {
   "condition": [
    "nms_output",
    "assertAllClose"
   ],
   "consequent": [
    "nmsed_boxes",
    "assertAllClose"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/post_processing_test.py",
  "condition": [
   "$0.assertAllClose(nms_output['detection_scores'], $1)"
  ],
  "consequent": [
   "$0.assertAllClose(nmsed_scores, $1)"
  ],
  "identifiers": {
   "condition": [
    "nms_output",
    "assertAllClose"
   ],
   "consequent": [
    "assertAllClose",
    "nmsed_scores"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/post_processing_test.py",
  "condition": [
   "$0.assertAllClose(nms_output['detection_classes'], $1)"
  ],
  "consequent": [
   "$0.assertAllClose(nmsed_classes, $1)"
  ],
  "identifiers": {
   "condition": [
    "nms_output",
    "assertAllClose"
   ],
   "consequent": [
    "assertAllClose",
    "nmsed_classes"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/post_processing_test.py",
  "condition": [
   "$0.assertAllClose(nms_output['num_detections'], [2, 3])"
  ],
  "consequent": [
   "$0.assertAllClose(num_detections, [2, 3])"
  ],
  "identifiers": {
   "condition": [
    "nms_output",
    "assertAllClose"
   ],
   "consequent": [
    "num_detections",
    "assertAllClose"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/post_processing_test.py",
  "condition": [
   "$0.assertAllClose(nms_output['detection_masks'], $1)"
  ],
  "consequent": [
   "$0.assertAllClose(nmsed_masks, $1) ",
   "\tdef test_batch_multiclass_nms_with_dynamic_batch_size($0):",
   "\tboxes_placeholder = tf.placeholder(tf.float32, shape=(None, None, 2, 4))",
   "    scores_placeholder = tf.placeholder(tf.float32, shape=(None, None, 2))",
   "    masks_placeholder = tf.placeholder(tf.float32, shape=(None, None, 2, 2, 2)) ",
   "    boxes = np.array([[[[0, 0, 1, 1], [0, 0, 4, 5]],                        [[0, 0.1, 1, 1.1], [0, 0.1, 2, 1.1]],                        [[0, -0.1, 1, 0.9], [0, -0.1, 1, 0.9]],                        [[0, 10, 1, 11], [0, 10, 1, 11]]],                       [[[0, 10.1, 1, 11.1], [0, 10.1, 1, 11.1]],                        [[0, 100, 1, 101], [0, 100, 1, 101]],                        [[0, 1000, 1, 1002], [0, 999, 2, 1004]],                        [[0, 1000, 1, 1002.1], [0, 999, 2, 1002.7]]]])",
   "    scores = np.array([[[.9, 0.01], [.75, 0.05],                         [.6, 0.01], [.95, 0]],                        [[.5, 0.01], [.3, 0.01],                         [.01, .85], [.01, .5]]])",
   "    masks = np.array([[[[[0, 1], [2, 3]], [[1, 2], [3, 4]]],                        [[[2, 3], [4, 5]], [[3, 4], [5, 6]]],                        [[[4, 5], [6, 7]], [[5, 6], [7, 8]]],                        [[[6, 7], [8, 9]], [[7, 8], [9, 10]]]],                       [[[[8, 9], [10, 11]], [[9, 10], [11, 12]]],                        [[[10, 11], [12, 13]], [[11, 12], [13, 14]]],                        [[[12, 13], [14, 15]], [[13, 14], [15, 16]]],                        [[[14, 15], [16, 17]], [[15, 16], [17, 18]]]]])",
   "    score_thresh = 0.1",
   "    iou_thresh = .5",
   "    max_output_size = 4 ",
   "    exp_nms_corners = np.array([[[0, 10, 1, 11],                                  [0, 0, 1, 1],                                  [0, 0, 0, 0],                                  [0, 0, 0, 0]],                                 [[0, 999, 2, 1004],                                  [0, 10.1, 1, 11.1],                                  [0, 100, 1, 101],                                  [0, 0, 0, 0]]])",
   "    exp_nms_scores = np.array([[.95, .9, 0, 0],                                [.85, .5, .3, 0]])",
   "    exp_nms_classes = np.array([[0, 0, 0, 0],                                 [1, 0, 0, 0]])",
   "    $1 = np.array([[[[6, 7], [8, 9]],                                [[0, 1], [2, 3]],                                [[0, 0], [0, 0]],                                [[0, 0], [0, 0]]],                               [[[13, 14], [15, 16]],                                [[8, 9], [10, 11]],                                [[10, 11], [12, 13]],                                [[0, 0], [0, 0]]]]) ",
   "    (nmsed_boxes, nmsed_scores, nmsed_classes, nmsed_masks,      num_detections) = post_processing.batch_multiclass_non_max_suppression(          boxes_placeholder, scores_placeholder, score_thresh, iou_thresh,          max_size_per_class=max_output_size, max_total_size=max_output_size,          masks=masks_placeholder)                           ",
   "    $0.assertAllEqual(nmsed_boxes.shape.as_list(), [None, 4, 4])",
   "    $0.assertAllEqual(nmsed_scores.shape.as_list(), [None, 4])",
   "    $0.assertAllEqual(nmsed_classes.shape.as_list(), [None, 4])",
   "    $0.assertAllEqual(nmsed_masks.shape.as_list(), [None, 4, 2, 2])",
   "    $0.assertEqual(num_detections.shape.as_list(), [None]) ",
   "    with $0.test_session() as sess:",
   "\t(nmsed_boxes, nmsed_scores, nmsed_classes, nmsed_masks,        num_detections) = sess.run([nmsed_boxes, nmsed_scores, nmsed_classes,                                    nmsed_masks, num_detections],                                   feed_dict={boxes_placeholder: boxes,                                              scores_placeholder: scores,                                              masks_placeholder: masks})",
   "      $0.assertAllClose(nmsed_boxes, exp_nms_corners)",
   "      $0.assertAllClose(nmsed_scores, exp_nms_scores)",
   "      $0.assertAllClose(nmsed_classes, exp_nms_classes)",
   "      $0.assertAllClose(num_detections, [2, 3])",
   "      $0.assertAllClose(nmsed_masks, $1)"
  ],
  "identifiers": {
   "condition": [
    "nms_output",
    "assertAllClose"
   ],
   "consequent": [
    "boxes",
    "as_list",
    "assertAllEqual",
    "nmsed_classes",
    "exp_nms_corners",
    "exp_nms_classes",
    "masks",
    "batch_multiclass_non_max_suppression",
    "masks_placeholder",
    "test_batch_multiclass_nms_with_dynamic_batch_size",
    "nmsed_scores",
    "sess",
    "array",
    "test_session",
    "iou_thresh",
    "scores",
    "run",
    "feed_dict",
    "placeholder",
    "max_size_per_class",
    "shape",
    "nmsed_boxes",
    "tf",
    "nmsed_masks",
    "max_total_size",
    "assertEqual",
    "assertAllClose",
    "score_thresh",
    "post_processing",
    "max_output_size",
    "scores_placeholder",
    "boxes_placeholder",
    "exp_nms_scores",
    "np",
    "num_detections",
    "float32"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/post_processing_test.py",
  "condition": [
   "nms_dict = $0.batch_multiclass_non_max_suppression("
  ],
  "consequent": [
   "(nmsed_boxes, nmsed_scores, nmsed_classes, nmsed_masks,      num_detections) = $0.batch_multiclass_non_max_suppression("
  ],
  "identifiers": {
   "condition": [
    "nms_dict",
    "batch_multiclass_non_max_suppression"
   ],
   "consequent": [
    "nmsed_boxes",
    "nmsed_classes",
    "nmsed_scores",
    "nmsed_masks",
    "batch_multiclass_non_max_suppression",
    "num_detections"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/post_processing_test.py",
  "condition": [
   "nms_output = $0.run(nms_dict)"
  ],
  "consequent": [
   "(nmsed_boxes, nmsed_scores, nmsed_classes, nmsed_masks,        num_detections) = $0.run([nmsed_boxes, nmsed_scores, nmsed_classes,                                    nmsed_masks, num_detections])"
  ],
  "identifiers": {
   "condition": [
    "nms_output",
    "nms_dict",
    "run"
   ],
   "consequent": [
    "nmsed_boxes",
    "nmsed_classes",
    "nmsed_scores",
    "nmsed_masks",
    "run",
    "num_detections"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/post_processing_test.py",
  "condition": [
   "$0.assertAllClose(nms_output['detection_boxes'], $1)"
  ],
  "consequent": [
   "$0.assertAllClose(nmsed_boxes, $1)"
  ],
  "identifiers": {
   "condition": [
    "nms_output",
    "assertAllClose"
   ],
   "consequent": [
    "nmsed_boxes",
    "assertAllClose"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/post_processing_test.py",
  "condition": [
   "$0.assertAllClose(nms_output['detection_scores'], $1)"
  ],
  "consequent": [
   "$0.assertAllClose(nmsed_scores, $1)"
  ],
  "identifiers": {
   "condition": [
    "nms_output",
    "assertAllClose"
   ],
   "consequent": [
    "assertAllClose",
    "nmsed_scores"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/post_processing_test.py",
  "condition": [
   "$0.assertAllClose(nms_output['detection_classes'], $1)"
  ],
  "consequent": [
   "$0.assertAllClose(nmsed_classes, $1)"
  ],
  "identifiers": {
   "condition": [
    "nms_output",
    "assertAllClose"
   ],
   "consequent": [
    "assertAllClose",
    "nmsed_classes"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/post_processing_test.py",
  "condition": [
   "$0.assertAllClose(nms_output['num_detections'], [1, 1])"
  ],
  "consequent": [
   "$0.assertAllClose(num_detections, [1, 1])"
  ],
  "identifiers": {
   "condition": [
    "nms_output",
    "assertAllClose"
   ],
   "consequent": [
    "num_detections",
    "assertAllClose"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/post_processing_test.py",
  "condition": [
   "$0.assertAllClose(nms_output['detection_masks'], $1)"
  ],
  "consequent": [
   "$0.assertAllClose(nmsed_masks, $1)"
  ],
  "identifiers": {
   "condition": [
    "nms_output",
    "assertAllClose"
   ],
   "consequent": [
    "assertAllClose",
    "nmsed_masks"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/preprocessor.py",
  "condition": [
   "$0 = $1.shape($2)",
   "\t$3 = $1.to_float($0[0])",
   "    $4 = $1.to_float($0[1])",
   "    $5 = $1.minimum($3, $4)                                                   ",
   "    $6 = $1.constant($6, $7=$1.$8)",
   "    $9 = $6 / $5                                                                                                                                                                                                                                                                       ",
   "    $10 = $1.to_int32($1.round($3 * $9))",
   "    $11 = $1.to_int32($1.round($4 * $9))",
   "    $12 = $1.stack([$10, $11]) ",
   "    if $13:                                                                                                 ",
   "\t$14 = $1.maximum($3, $4)",
   "      $13 = $1.constant($13, $7=$1.$8)",
   "      $15 = $13 / $14                                                                                                                                                                                                                                                                              ",
   "      $16 = $1.to_int32($1.round($3 * $15))",
   "      $17 = $1.to_int32($1.round($4 * $15))",
   "      $18 = $1.stack([$16, $17]) ",
   "      $19 = $1.cond(           $1.to_float($1.reduce_max($12)) > $13,           lambda: $18, lambda: $12)"
  ],
  "consequent": [
   "def _compute_new_static_size($2,                              $6,                              $13):",
   "\t\"\"\"Compute new static shape for resize_to_range method.\"\"\"",
   "  $0 = $2.get_shape().as_list()",
   "  $3 = $0[0]",
   "  $4 = $0[1]",
   "  $5 = min($3, $4)                                                ",
   "  $9 = $6 / float($5)                                                                                                                                                                                                                                                               ",
   "  $10 = int(round($3 * $9))",
   "  $11 = int(round($4 * $9))",
   "  $12 = [$10, $11]",
   "  if $13:                                                                                             ",
   "\t$14 = max($3, $4)",
   "    $15 = $13 / float($14)                                                                                                                                                                                                                                                                      ",
   "    $16 = int(round($3 * $15))",
   "    $17 = int(round($4 * $15))",
   "    $18 = [$16, $17]",
   "    $19 = $12",
   "    if max($12) > $13:",
   "\t$19 = $18",
   "  else:",
   "\t$19 = $12",
   "  return $1.constant($19)  ",
   "def _compute_new_dynamic_size($2,                               $6,                               $13):",
   "\t\"\"\"Compute new dynamic shape for resize_to_range method.\"\"\"",
   "  $0 = $1.shape($2)",
   "  $3 = $1.to_float($0[0])",
   "  $4 = $1.to_float($0[1])",
   "  $5 = $1.minimum($3, $4)                                                ",
   "  $6 = $1.constant($6, $7=$1.$8)",
   "  $9 = $6 / $5                                                                                                                                                                                                                                                               ",
   "  $10 = $1.to_int32($1.round($3 * $9))",
   "  $11 = $1.to_int32($1.round($4 * $9))",
   "  $12 = $1.stack([$10, $11])",
   "  if $13:                                                                                             ",
   "\t$14 = $1.maximum($3, $4)",
   "    $13 = $1.constant($13, $7=$1.$8)",
   "    $15 = $13 / $14                                                                                                                                                                                                                                                                      ",
   "    $16 = $1.to_int32($1.round($3 * $15))",
   "    $17 = $1.to_int32($1.round($4 * $15))",
   "    $18 = $1.stack([$16, $17])",
   "    $19 = $1.cond(         $1.to_float($1.reduce_max($12)) > $13,         lambda: $18, lambda: $12)",
   "  else:",
   "\t$19 = $12",
   "  return $19  ",
   "\tif $2.get_shape().is_fully_defined():",
   "\t$19 = _compute_new_static_size($2, $6,                                           $13)"
  ],
  "identifiers": {
   "condition": [
    "round",
    "maximum",
    "shape",
    "minimum",
    "reduce_max",
    "to_int32",
    "to_float",
    "stack",
    "cond",
    "constant"
   ],
   "consequent": [
    "as_list",
    "maximum",
    "reduce_max",
    "_compute_new_static_size",
    "_compute_new_dynamic_size",
    "stack",
    "get_shape",
    "max",
    "to_float",
    "cond",
    "float",
    "round",
    "shape",
    "int",
    "constant",
    "is_fully_defined",
    "min",
    "minimum",
    "to_int32"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/preprocessor.py",
  "condition": [
   "$0 = large_size"
  ],
  "consequent": [
   "$0 = _compute_new_dynamic_size(image, min_dimension,                                            max_dimension)"
  ],
  "identifiers": {
   "condition": [
    "large_size"
   ],
   "consequent": [
    "image",
    "min_dimension",
    "_compute_new_dynamic_size",
    "max_dimension"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/preprocessor.py",
  "condition": [
   "num_instances = $0.shape($1)[0] ",
   "\tdef resize_masks_branch():",
   "\t$2 = $0.expand_dims($1, 3)"
  ],
  "consequent": [
   "$2 = $0.expand_dims($1, 3)"
  ],
  "identifiers": {
   "condition": [
    "shape",
    "num_instances",
    "resize_masks_branch",
    "expand_dims"
   ],
   "consequent": [
    "expand_dims"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/preprocessor.py",
  "condition": [
   "$0 = $1.$2.resize_nearest_neighbor("
  ],
  "consequent": [
   "$0 = $1.$2.resize_nearest_neighbor($0, new_size,"
  ],
  "identifiers": {
   "condition": [
    "resize_nearest_neighbor"
   ],
   "consequent": [
    "resize_nearest_neighbor",
    "new_size"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/preprocessor.py",
  "condition": [
   "new_masks, new_size, $0=$0)"
  ],
  "consequent": [
   "$0=$0)"
  ],
  "identifiers": {
   "condition": [
    "new_masks",
    "new_size"
   ],
   "consequent": []
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/preprocessor.py",
  "condition": [
   "$0 = $1.squeeze($0, axis=3)"
  ],
  "consequent": [
   "$0 = $1.squeeze($0, 3)"
  ],
  "identifiers": {
   "condition": [
    "squeeze",
    "axis"
   ],
   "consequent": [
    "squeeze"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/preprocessor.py",
  "condition": [
   "return $0 ",
   "\tdef reshape_masks_branch():",
   "\t$0 = tf.reshape(masks, [0, new_size[0], new_size[1]])",
   "        return $0 ",
   "      masks = tf.cond(num_instances > 0,                       resize_masks_branch,                       reshape_masks_branch)",
   "      $1 = [$2, masks]"
  ],
  "consequent": [
   "$1 = [$2, $0]"
  ],
  "identifiers": {
   "condition": [
    "cond",
    "resize_masks_branch",
    "new_size",
    "tf",
    "num_instances",
    "reshape_masks_branch",
    "reshape",
    "masks"
   ],
   "consequent": []
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/preprocessor_test.py",
  "condition": [
   "def testResizeToRange($0):"
  ],
  "consequent": [
   "def testResizeToRangePreservesStaticSpatialShape($0):"
  ],
  "identifiers": {
   "condition": [
    "testResizeToRange"
   ],
   "consequent": [
    "testResizeToRangePreservesStaticSpatialShape"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/preprocessor_test.py",
  "condition": [
   "$0 = $1.run($0)"
  ],
  "consequent": [
   "$0 = $1.run($0,                                    feed_dict={in_image:                                               np.random.randn(*in_shape)})"
  ],
  "identifiers": {
   "condition": [
    "run"
   ],
   "consequent": [
    "random",
    "in_image",
    "feed_dict",
    "randn",
    "np",
    "run",
    "in_shape"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/preprocessor_test.py",
  "condition": [
   "def testResizeToRangeWithMasks($0):"
  ],
  "consequent": [
   "def testResizeToRangeWithMasksPreservesStaticSpatialShape($0):"
  ],
  "identifiers": {
   "condition": [
    "testResizeToRangeWithMasks"
   ],
   "consequent": [
    "testResizeToRangeWithMasksPreservesStaticSpatialShape"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/preprocessor_test.py",
  "condition": [
   "out_image_shape = tf.shape($0)",
   "\tout_masks_shape = tf.shape($1) ",
   "      with $2.test_session() as sess:",
   "\tout_image_shape, out_masks_shape = sess.run(             [out_image_shape, out_masks_shape])",
   "        $2.assertAllEqual(out_image_shape, $3)"
  ],
  "consequent": [
   "$2.assertAllEqual($1.get_shape().as_list(), expected_mask_shape)",
   "\t$2.assertAllEqual($0.get_shape().as_list(), $3)"
  ],
  "identifiers": {
   "condition": [
    "out_image_shape",
    "shape",
    "assertAllEqual",
    "sess",
    "tf",
    "out_masks_shape",
    "test_session",
    "run"
   ],
   "consequent": [
    "expected_mask_shape",
    "as_list",
    "assertAllEqual",
    "get_shape"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/preprocessor_test.py",
  "condition": [
   "$0.assertAllEqual(out_masks_shape, expected_mask_shape)",
   "\tdef testResizeToRangeWithNoInstanceMask($0):"
  ],
  "consequent": [
   "def testResizeToRangeWithMasksAndDynamicSpatialShape($0):"
  ],
  "identifiers": {
   "condition": [
    "expected_mask_shape",
    "out_masks_shape",
    "testResizeToRangeWithNoInstanceMask",
    "assertAllEqual"
   ],
   "consequent": [
    "testResizeToRangeWithMasksAndDynamicSpatialShape"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/preprocessor_test.py",
  "condition": [
   "$0 = $1.random_uniform(in_image_shape)"
  ],
  "consequent": [
   "$0 = $1.placeholder($1.float32, shape=(None, None, 3))",
   "\tin_masks = $1.placeholder($1.float32, shape=(None, None, None))"
  ],
  "identifiers": {
   "condition": [
    "in_image_shape",
    "random_uniform"
   ],
   "consequent": [
    "shape",
    "float32",
    "in_masks",
    "placeholder"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/preprocessor_test.py",
  "condition": [
   "[$0, $1])"
  ],
  "consequent": [
   "[$0, $1],",
   "\tfeed_dict={                 in_image: np.random.randn(*in_image_shape),                 in_masks: np.random.randn(*in_masks_shape)             })"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "in_masks",
    "random",
    "in_image",
    "in_masks_shape",
    "randn",
    "in_image_shape",
    "np",
    "feed_dict"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/core/preprocessor_test.py",
  "condition": [
   "def testResizeImageWithMasks($0):",
   "\t\"\"\"Tests image resizing, checking output sizes.\"\"\"",
   "    in_image_shape_list = [[60, 40, 3], [15, 30, 3]]",
   "    in_masks_shape_list = [[15, 60, 40], [10, 15, 30]]",
   "    height = 50",
   "    width = 100",
   "    expected_image_shape_list = [[50, 100, 3], [50, 100, 3]]",
   "    expected_masks_shape_list = [[15, 50, 100], [10, 50, 100]] ",
   "    for (in_image_shape, expected_image_shape, in_masks_shape,          expected_mask_shape) in zip(in_image_shape_list,                                      expected_image_shape_list,                                      in_masks_shape_list,                                      expected_masks_shape_list):",
   "\tin_image = tf.random_uniform(in_image_shape)",
   "      in_masks = tf.random_uniform(in_masks_shape)",
   "      out_image, out_masks = preprocessor.resize_image(           in_image, in_masks, new_height=height, new_width=width)",
   "      out_image_shape = tf.shape(out_image)",
   "      out_masks_shape = tf.shape(out_masks) ",
   "      with $0.test_session() as sess:",
   "\tout_image_shape, out_masks_shape = sess.run(             [out_image_shape, out_masks_shape])",
   "        $0.assertAllEqual(out_image_shape, expected_image_shape)",
   "        $0.assertAllEqual(out_masks_shape, expected_mask_shape) ",
   "  def testResizeImageWithNoInstanceMask($0):"
  ],
  "consequent": [
   "def testResizeToRangeWithInstanceMasksTensorOfSizeZero($0):"
  ],
  "identifiers": {
   "condition": [
    "assertAllEqual",
    "preprocessor",
    "in_image_shape",
    "out_masks_shape",
    "width",
    "new_width",
    "out_image",
    "resize_image",
    "in_masks_shape_list",
    "in_masks_shape",
    "sess",
    "test_session",
    "out_masks",
    "new_height",
    "run",
    "expected_masks_shape_list",
    "zip",
    "in_masks",
    "shape",
    "testResizeImageWithNoInstanceMask",
    "height",
    "in_image",
    "tf",
    "in_image_shape_list",
    "expected_mask_shape",
    "expected_image_shape_list",
    "expected_image_shape",
    "out_image_shape",
    "testResizeImageWithMasks",
    "random_uniform"
   ],
   "consequent": [
    "testResizeToRangeWithInstanceMasksTensorOfSizeZero"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/export_inference_graph.py",
  "condition": [
   "$0 and $1 $2 $3 $4. $5 either $1 inference"
  ],
  "consequent": [
   "$0 and $1 $2 $3 $4. $5 inference",
   "graph, associated $4 files, a frozen inference graph and a"
  ],
  "identifiers": {
   "condition": [
    "inference",
    "either"
   ],
   "consequent": [
    "inference",
    "graph",
    "frozen",
    "a",
    "files",
    "associated"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/export_inference_graph.py",
  "condition": [
   "graph or a SavedModel ($0://$1.$2.$3/$4/$5.$6)."
  ],
  "consequent": [
   "SavedModel ($0://$1.$2.$3/$4/$5.$6)."
  ],
  "identifiers": {
   "condition": [
    "a",
    "graph",
    "SavedModel"
   ],
   "consequent": [
    "SavedModel"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/export_inference_graph.py",
  "condition": [
   "* `$0`: $1 $2 scalar $3 $4 $5 encoded PNG"
  ],
  "consequent": [
   "* `$0`: $1 $2 1-D $3 $4 $5 shape [None]"
  ],
  "identifiers": {
   "condition": [
    "scalar",
    "PNG",
    "encoded"
   ],
   "consequent": [
    "shape",
    "D"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/export_inference_graph.py",
  "condition": [
   "or $0 $1.",
   "\t* `$2`: $3 $4 $5 $6 proto. The batch size in this",
   "\tcase is always 1."
  ],
  "consequent": [
   "containing encoded PNG or $0 images. Image resolutions are expected to be",
   "\tthe same if more than 1 $1 is provided.",
   "  * `$2`: $3 $4 1-D string tensor of shape [None] containing",
   "\t$5 $6 protos. Image resolutions are expected to be the same",
   "    if more than 1 $1 is provided."
  ],
  "identifiers": {
   "condition": [
    "this",
    "case",
    "always",
    "proto",
    "batch",
    "size",
    "The"
   ],
   "consequent": [
    "D",
    "tensor",
    "PNG",
    "containing",
    "resolutions",
    "of",
    "same",
    "to",
    "are",
    "expected",
    "be",
    "protos",
    "shape",
    "string",
    "more",
    "than",
    "images",
    "Image",
    "provided",
    "encoded",
    "the"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/export_inference_graph.py",
  "condition": [
   "Note that currently `batch` is always 1, but we will support `batch` > 1 in",
   "the future. ",
   "Optionally, one can freeze the graph by converting the weights in the provided",
   "checkpoint as graph constants thereby eliminating the need $0 use a checkpoint",
   "file during inference. ",
   "Note that this $1 $2 `$3` from $4 $0 decide"
  ],
  "consequent": [
   "Notes:",
   "\t* This $1 $2 `$3` from $4 $0 decide which"
  ],
  "identifiers": {
   "condition": [
    "will",
    "use",
    "support",
    "eliminating",
    "checkpoint",
    "always",
    "that",
    "thereby",
    "need",
    "we",
    "future",
    "file",
    "a",
    "during",
    "but",
    "Note",
    "decide",
    "inference",
    "graph",
    "constants",
    "weights",
    "the",
    "can",
    "batch",
    "converting",
    "freeze",
    "provided",
    "by",
    "one",
    "this",
    "Optionally",
    "currently"
   ],
   "consequent": [
    "which",
    "This",
    "Notes",
    "decide"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/export_inference_graph.py",
  "condition": [
   "which $0 $1 $2."
  ],
  "consequent": [
   "$0 $1 $2."
  ],
  "identifiers": {
   "condition": [
    "which"
   ],
   "consequent": []
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/export_inference_graph.py",
  "condition": [
   "--checkpoint_path $0/$1/$2-$3 \\"
  ],
  "consequent": [
   "--trained_checkpoint_prefix $0/$1/$2.$3 \\"
  ],
  "identifiers": {
   "condition": [
    "checkpoint_path"
   ],
   "consequent": [
    "trained_checkpoint_prefix"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/export_inference_graph.py",
  "condition": [
   "--inference_graph_path $0/$1/inference_graph.pb"
  ],
  "consequent": [
   "--output_directory $0/$1/exported_model_directory ",
   "The expected output would be in the directory",
   "$0/$1/exported_model_directory (which is created if it does not exist)",
   "with contents:",
   "\t- graph.pbtxt",
   " - model.ckpt.data-00000-of-00001",
   " - model.ckpt.info",
   " - model.ckpt.meta",
   " - frozen_inference_graph.pb",
   " + saved_model (a directory)"
  ],
  "identifiers": {
   "condition": [
    "inference_graph_path",
    "inference_graph",
    "pb"
   ],
   "consequent": [
    "data",
    "output",
    "does",
    "meta",
    "frozen_inference_graph",
    "contents",
    "would",
    "exist",
    "of",
    "which",
    "info",
    "output_directory",
    "a",
    "exported_model_directory",
    "expected",
    "graph",
    "be",
    "pb",
    "directory",
    "pbtxt",
    "model",
    "it",
    "created",
    "saved_model",
    "ckpt",
    "the",
    "The"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/export_inference_graph.py",
  "condition": [
   "$0.DEFINE_string('checkpoint_path', '', 'Optional path to checkpoint file. '                     'If provided, bakes the weights from the checkpoint into '                     'the graph.')",
   "$0.DEFINE_string('inference_graph_path', '', 'Path to write the output '                     'inference graph.')",
   "$0.DEFINE_bool('export_as_saved_model', False, 'Whether the exported graph '                   'should be saved as a SavedModel')"
  ],
  "consequent": [
   "$0.DEFINE_string('trained_checkpoint_prefix', None,                     'Path to trained checkpoint, typically of the form '                     'path/to/model.ckpt')",
   "$0.DEFINE_string('output_directory', None, 'Path to write outputs.')"
  ],
  "identifiers": {
   "condition": [
    "DEFINE_bool",
    "DEFINE_string"
   ],
   "consequent": [
    "DEFINE_string"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/export_inference_graph.py",
  "condition": [
   "assert $0.inference_graph_path, 'Inference graph path missing.'",
   "\tassert $0.input_type, 'Input type missing.'"
  ],
  "consequent": [
   "assert $0.trained_checkpoint_prefix, (          '`trained_checkpoint_prefix` is missing')",
   "\tassert $0.output_directory, '`output_directory` is missing'"
  ],
  "identifiers": {
   "condition": [
    "inference_graph_path",
    "input_type"
   ],
   "consequent": [
    "trained_checkpoint_prefix",
    "output_directory"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/export_inference_graph.py",
  "condition": [
   "$0.export_inference_graph($1.$2, $3,                                   $1.checkpoint_path,                                   $1.inference_graph_path,                                   $1.export_as_saved_model)"
  ],
  "consequent": [
   "$0.export_inference_graph(       $1.$2, $3, $1.trained_checkpoint_prefix,       $1.output_directory)"
  ],
  "identifiers": {
   "condition": [
    "checkpoint_path",
    "inference_graph_path",
    "export_as_saved_model",
    "export_inference_graph"
   ],
   "consequent": [
    "trained_checkpoint_prefix",
    "output_directory",
    "export_inference_graph"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter.py",
  "condition": [
   "_ = importer.import_graph_def($0, $1='')"
  ],
  "consequent": [
   "from tensorflow.core.protobuf import rewriter_config_pb2",
   "\toptimize_graph=False,",
   "  with tf.Graph().as_default():",
   "\ttf.import_graph_def($0, $1='')"
  ],
  "identifiers": {
   "condition": [
    "_",
    "importer",
    "import_graph_def"
   ],
   "consequent": [
    "rewriter_config_pb2",
    "protobuf",
    "as_default",
    "optimize_graph",
    "tf",
    "tensorflow",
    "core",
    "import_graph_def",
    "Graph"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter.py",
  "condition": [
   "with session.Session() as sess:",
   "\tif input_saver_def:",
   "\tsaver = saver_lib.Saver(saver_def=input_saver_def)",
   "      saver.restore(sess, input_checkpoint)"
  ],
  "consequent": [
   "if optimize_graph:",
   "\tlogging.info('Graph Rewriter optimizations enabled')",
   "      rewrite_options = rewriter_config_pb2.RewriterConfig(           optimize_tensor_layout=True)",
   "      rewrite_options.optimizers.append('pruning')",
   "      rewrite_options.optimizers.append('constfold')",
   "      rewrite_options.optimizers.append('layout')",
   "      graph_options = tf.GraphOptions(           rewrite_options=rewrite_options, infer_shapes=True)"
  ],
  "identifiers": {
   "condition": [
    "Session",
    "Saver",
    "input_saver_def",
    "restore",
    "sess",
    "input_checkpoint",
    "saver_lib",
    "saver_def",
    "session",
    "saver"
   ],
   "consequent": [
    "optimize_tensor_layout",
    "rewrite_options",
    "GraphOptions",
    "optimizers",
    "rewriter_config_pb2",
    "append",
    "optimize_graph",
    "info",
    "tf",
    "graph_options",
    "logging",
    "RewriterConfig",
    "infer_shapes"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter.py",
  "condition": [
   "$0 = {}"
  ],
  "consequent": [
   "logging.info('Graph Rewriter optimizations disabled')",
   "\tgraph_options = tf.GraphOptions()",
   "    config = tf.ConfigProto(graph_options=graph_options)",
   "\twith session.Session(config=config) as sess:",
   "\tif input_saver_def:",
   "\tsaver = saver_lib.Saver(saver_def=input_saver_def)",
   "        saver.restore(sess, input_checkpoint)",
   "      else:",
   "\t$0 = {}"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "GraphOptions",
    "ConfigProto",
    "Session",
    "Saver",
    "input_saver_def",
    "config",
    "sess",
    "info",
    "tf",
    "saver_lib",
    "graph_options",
    "restore",
    "logging",
    "input_checkpoint",
    "saver_def",
    "session",
    "saver"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter.py",
  "condition": [
   "def get_frozen_graph_def(inference_graph_def, use_moving_averages,                          input_checkpoint, output_node_names):",
   "\t\"\"\"Freezes all variables in a graph definition.\"\"\"",
   "  saver = None",
   "  if use_moving_averages:",
   "\tvariable_averages = $0.train.ExponentialMovingAverage(0.0)",
   "    variables_to_restore = variable_averages.variables_to_restore()",
   "    saver = $0.train.Saver(variables_to_restore)",
   "  else:",
   "\tsaver = $0.train.Saver()"
  ],
  "consequent": [
   "def _image_tensor_input_placeholder():",
   "\t\"\"\"Returns placeholder and input node that accepts a batch of uint8 images.\"\"\"",
   "  input_tensor = $0.placeholder(dtype=$0.uint8,                                 shape=(None, None, None, 3),                                 name='image_tensor')",
   "  return input_tensor, input_tensor"
  ],
  "identifiers": {
   "condition": [
    "train",
    "inference_graph_def",
    "Saver",
    "ExponentialMovingAverage",
    "get_frozen_graph_def",
    "saver",
    "variable_averages",
    "output_node_names",
    "input_checkpoint",
    "variables_to_restore",
    "use_moving_averages"
   ],
   "consequent": [
    "input_tensor",
    "uint8",
    "shape",
    "dtype",
    "name",
    "_image_tensor_input_placeholder",
    "placeholder"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter.py",
  "condition": [
   "frozen_graph_def = freeze_graph_with_def_protos(       input_graph_def=inference_graph_def,       input_saver_def=saver.as_saver_def(),       input_checkpoint=input_checkpoint,       output_node_names=output_node_names,       restore_op_name='save/restore_all',       filename_tensor_name='save/Const:0',       clear_devices=True,       initializer_nodes='')",
   "\treturn frozen_graph_def                                        "
  ],
  "consequent": [
   "\"\"\"Returns input that accepts a batch of strings with tf examples.",
   "",
   "  Returns:",
   "    a tuple of placeholder and input nodes that output decoded images.",
   "  \"\"\""
  ],
  "identifiers": {
   "condition": [
    "inference_graph_def",
    "input_graph_def",
    "restore_op_name",
    "input_saver_def",
    "output_node_names",
    "input_checkpoint",
    "filename_tensor_name",
    "initializer_nodes",
    "freeze_graph_with_def_protos",
    "frozen_graph_def",
    "clear_devices",
    "as_saver_def",
    "saver"
   ],
   "consequent": []
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter.py",
  "condition": [
   "tf_example_placeholder = $0.placeholder("
  ],
  "consequent": [
   "batch_tf_example_placeholder = $0.placeholder("
  ],
  "identifiers": {
   "condition": [
    "tf_example_placeholder",
    "placeholder"
   ],
   "consequent": [
    "placeholder",
    "batch_tf_example_placeholder"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter.py",
  "condition": [
   "$0.$1, $2=[], $3='tf_example')"
  ],
  "consequent": [
   "$0.$1, $2=[None], $3='tf_example')",
   "\tdef decode(tf_example_string_tensor):"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "decode",
    "tf_example_string_tensor"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter.py",
  "condition": [
   "tf_example_placeholder)"
  ],
  "consequent": [
   "tf_example_string_tensor)"
  ],
  "identifiers": {
   "condition": [
    "tf_example_placeholder"
   ],
   "consequent": [
    "tf_example_string_tensor"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter.py",
  "condition": [
   "$0 = $1[$2.$3.$0]"
  ],
  "consequent": [
   "image_tensor = $1[$2.$3.$0]"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "image_tensor"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter.py",
  "condition": [
   "return $0.expand_dims(image, axis=0)  ",
   "def _image_tensor_input_placeholder():",
   "\treturn $0.placeholder($1=$0.$2,                         shape=(1, None, None, 3),                         name='image_tensor')"
  ],
  "consequent": [
   "return image_tensor",
   "\treturn (batch_tf_example_placeholder,           $0.map_fn(decode,                     elems=batch_tf_example_placeholder,                     $1=$0.$2,                     parallel_iterations=32,                     back_prop=False))"
  ],
  "identifiers": {
   "condition": [
    "axis",
    "shape",
    "name",
    "_image_tensor_input_placeholder",
    "expand_dims",
    "image",
    "placeholder"
   ],
   "consequent": [
    "elems",
    "parallel_iterations",
    "map_fn",
    "back_prop",
    "batch_tf_example_placeholder",
    "decode",
    "image_tensor"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter.py",
  "condition": [
   "image_str = $0.placeholder($1=$0.$2,                              $3=[],"
  ],
  "consequent": [
   "\"\"\"Returns input that accepts a batch of PNG or JPEG strings.",
   "",
   "  Returns:",
   "    a tuple of placeholder and input nodes that output decoded images.",
   "  \"\"\"",
   "\tbatch_image_str_placeholder = $0.placeholder(       $1=$0.$2,       $3=[None],"
  ],
  "identifiers": {
   "condition": [
    "placeholder",
    "image_str"
   ],
   "consequent": [
    "batch_image_str_placeholder",
    "placeholder"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter.py",
  "condition": [
   "$0='encoded_image_string_tensor')"
  ],
  "consequent": [
   "$0='encoded_image_string_tensor')",
   "\tdef decode(encoded_image_string_tensor):"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "decode",
    "encoded_image_string_tensor"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter.py",
  "condition": [
   "$0 = $1.$2.decode_image(image_str, $3=3)"
  ],
  "consequent": [
   "$0 = $1.$2.decode_image(encoded_image_string_tensor,                                          $3=3)"
  ],
  "identifiers": {
   "condition": [
    "decode_image",
    "image_str"
   ],
   "consequent": [
    "encoded_image_string_tensor",
    "decode_image"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter.py",
  "condition": [
   "return $0.expand_dims($1, axis=0)"
  ],
  "consequent": [
   "return $1",
   "\treturn (batch_image_str_placeholder,           $0.map_fn(               decode,               elems=batch_image_str_placeholder,               dtype=$0.uint8,               parallel_iterations=32,               back_prop=False))"
  ],
  "identifiers": {
   "condition": [
    "expand_dims",
    "axis"
   ],
   "consequent": [
    "elems",
    "parallel_iterations",
    "uint8",
    "map_fn",
    "batch_image_str_placeholder",
    "dtype",
    "back_prop",
    "decode"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter.py",
  "condition": [
   "def _add_output_tensor_nodes($0):"
  ],
  "consequent": [
   "def _add_output_tensor_nodes($0,                              output_collection_name='inference_op'):"
  ],
  "identifiers": {
   "condition": [
    "_add_output_tensor_nodes"
   ],
   "consequent": [
    "output_collection_name",
    "_add_output_tensor_nodes"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter.py",
  "condition": [
   "def _write_inference_graph(inference_graph_path,                            checkpoint_path=None,                            use_moving_averages=False,"
  ],
  "consequent": [
   "output_collection_name: Name of collection to add output tensors to.",
   "\tfor output_key in outputs:",
   "\ttf.add_to_collection(output_collection_name, outputs[output_key])",
   "  if masks is not None:",
   "\ttf.add_to_collection(output_collection_name, outputs['detection_masks'])",
   "def _write_frozen_graph(frozen_graph_path, frozen_graph_def):",
   "\t\"\"\"Writes frozen graph to disk.",
   "",
   "  Args:",
   "    frozen_graph_path: Path to write inference graph.",
   "    frozen_graph_def: tf.GraphDef holding frozen graph.",
   "  \"\"\"",
   "  with gfile.GFile(frozen_graph_path, 'wb') as f:",
   "\tf.write(frozen_graph_def.SerializeToString())",
   "  logging.info('%d ops in the final graph.', len(frozen_graph_def.node))  ",
   "def _write_saved_model(saved_model_path,                        frozen_graph_def,                        inputs,"
  ],
  "identifiers": {
   "condition": [
    "inference_graph_path",
    "_write_inference_graph",
    "checkpoint_path",
    "use_moving_averages"
   ],
   "consequent": [
    "inputs",
    "tensors",
    "write",
    "output_collection_name",
    "f",
    "output",
    "_write_saved_model",
    "add",
    "node",
    "logging",
    "gfile",
    "frozen_graph_path",
    "add_to_collection",
    "masks",
    "outputs",
    "of",
    "SerializeToString",
    "len",
    "to",
    "info",
    "frozen_graph_def",
    "GFile",
    "collection",
    "_write_frozen_graph",
    "tf",
    "Name",
    "output_key",
    "saved_model_path"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter.py",
  "condition": [
   "output_node_names=("
  ],
  "consequent": [
   "outputs):",
   "\t\"\"\"Writes SavedModel to disk."
  ],
  "identifiers": {
   "condition": [
    "output_node_names"
   ],
   "consequent": [
    "outputs",
    "disk",
    "SavedModel",
    "to",
    "Writes"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter.py",
  "condition": [
   "'num_detections,detection_scores,'",
   "\t'detection_boxes,detection_classes')):",
   "  \"\"\"Writes inference $0 $1 disk with the option $1 bake in weights."
  ],
  "consequent": [
   "saved_model_path: Path $1 write SavedModel.",
   "\tfrozen_graph_def: tf.GraphDef holding frozen $0."
  ],
  "identifiers": {
   "condition": [
    "inference",
    "bake",
    "disk",
    "weights",
    "option",
    "Writes",
    "the"
   ],
   "consequent": [
    "saved_model_path",
    "SavedModel",
    "frozen",
    "write",
    "Path",
    "GraphDef",
    "tf",
    "holding",
    "frozen_graph_def"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter.py",
  "condition": [
   "inference_graph_path: Path to write inference graph.",
   "\tcheckpoint_path: Optional path to the checkpoint file.",
   "    use_moving_averages: Whether to export the original or the moving averages",
   "\tof the trainable variables from the checkpoint.",
   "    output_node_names: Output tensor names, defaults are: num_detections,",
   "\tdetection_scores, detection_boxes, detection_classes.",
   "  \"\"\"",
   "  inference_graph_def = tf.get_default_graph().as_graph_def()",
   "  if checkpoint_path:",
   "    output_graph_def = get_frozen_graph_def(",
   "        inference_graph_def=inference_graph_def,",
   "        use_moving_averages=use_moving_averages,",
   "        input_checkpoint=checkpoint_path,",
   "        output_node_names=output_node_names,",
   "    )",
   "",
   "    with gfile.GFile(inference_graph_path, 'wb') as f:",
   "      f.write(output_graph_def.SerializeToString())",
   "    logging.info('%d ops in the final graph.', len(output_graph_def.node))",
   "",
   "    return",
   "  tf.train.write_graph(inference_graph_def,",
   "                       os.path.dirname(inference_graph_path),",
   "                       os.path.basename(inference_graph_path),",
   "                       as_text=False)",
   "",
   "",
   "def _write_saved_model(inference_graph_path, inputs, outputs,",
   "                       checkpoint_path=None, use_moving_averages=False):",
   "  \"\"\"Writes SavedModel to disk. ",
   "\tIf checkpoint_path is not None bakes the weights into the graph thereby",
   "  eliminating the need of checkpoint files during inference. If the model",
   "  was trained with moving averages, setting use_moving_averages to true",
   "  restores the moving averages, otherwise the original set of variables",
   "  is restored. ",
   "  Args:",
   "\tinference_graph_path: Path to write inference graph.",
   "    checkpoint_path: Optional path to the checkpoint file.",
   "    use_moving_averages: Whether to export the original or the moving averages",
   "\tof the trainable variables from the checkpoint.",
   "  inference_graph_def = $0.get_default_graph().as_graph_def()",
   "  checkpoint_graph_def = None",
   "  if checkpoint_path:",
   "\toutput_node_names = ','.join(outputs.keys())",
   "    checkpoint_graph_def = get_frozen_graph_def(         inference_graph_def=inference_graph_def,         use_moving_averages=use_moving_averages,         input_checkpoint=checkpoint_path,         output_node_names=output_node_names     ) ",
   "\t$0.import_graph_def(checkpoint_graph_def)"
  ],
  "consequent": [
   "$0.import_graph_def(frozen_graph_def, name='')"
  ],
  "identifiers": {
   "condition": [
    "If",
    "Optional",
    "disk",
    "SavedModel",
    "set",
    "inference_graph_def",
    "get_frozen_graph_def",
    "write",
    "bakes",
    "output_node_names",
    "defaults",
    "tensor",
    "Whether",
    "eliminating",
    "trainable",
    "get_default_graph",
    "import_graph_def",
    "checkpoint_path",
    "checkpoint",
    "outputs",
    "of",
    "Writes",
    "setting",
    "thereby",
    "Path",
    "need",
    "file",
    "detection_boxes",
    "export",
    "to",
    "averages",
    "during",
    "true",
    "restores",
    "keys",
    "input_checkpoint",
    "are",
    "was",
    "inference",
    "graph",
    "variables",
    "names",
    "checkpoint_graph_def",
    "detection_scores",
    "path",
    "original",
    "weights",
    "into",
    "restored",
    "as_graph_def",
    "inference_graph_path",
    "model",
    "detection_classes",
    "trained",
    "moving",
    "Args",
    "join",
    "otherwise",
    "files",
    "Output",
    "the",
    "num_detections",
    "use_moving_averages"
   ],
   "consequent": [
    "name",
    "frozen_graph_def",
    "import_graph_def"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter.py",
  "condition": [
   "$0 = $1.$2.$0.SavedModelBuilder(inference_graph_path)"
  ],
  "consequent": [
   "$0 = $1.$2.$0.SavedModelBuilder(saved_model_path)"
  ],
  "identifiers": {
   "condition": [
    "inference_graph_path",
    "SavedModelBuilder"
   ],
   "consequent": [
    "saved_model_path",
    "SavedModelBuilder"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter.py",
  "condition": [
   "checkpoint_path,"
  ],
  "consequent": [
   "def _write_graph_and_checkpoint(inference_graph_def,                                 model_path,                                 input_saver_def,                                 trained_checkpoint_prefix):",
   "\tfor node in inference_graph_def.node:",
   "\tnode.device = ''",
   "  with tf.Graph().as_default():",
   "\ttf.import_graph_def(inference_graph_def, name='')",
   "    with session.Session() as sess:",
   "\tsaver = saver_lib.Saver(saver_def=input_saver_def,                               save_relative_paths=True)",
   "      saver.restore(sess, trained_checkpoint_prefix)",
   "      saver.save(sess, model_path)  ",
   "\ttrained_checkpoint_prefix,",
   "                            output_directory,"
  ],
  "identifiers": {
   "condition": [
    "checkpoint_path"
   ],
   "consequent": [
    "inference_graph_def",
    "save",
    "input_saver_def",
    "restore",
    "device",
    "node",
    "import_graph_def",
    "saver_def",
    "trained_checkpoint_prefix",
    "Saver",
    "as_default",
    "name",
    "sess",
    "output_directory",
    "Graph",
    "saver",
    "Session",
    "_write_graph_and_checkpoint",
    "save_relative_paths",
    "model_path",
    "tf",
    "saver_lib",
    "session"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter.py",
  "condition": [
   "inference_graph_path,"
  ],
  "consequent": [
   "optimize_graph=False,"
  ],
  "identifiers": {
   "condition": [
    "inference_graph_path"
   ],
   "consequent": [
    "optimize_graph"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter.py",
  "condition": [
   "export_as_saved_model=False):"
  ],
  "consequent": [
   "output_collection_name='inference_op'):"
  ],
  "identifiers": {
   "condition": [
    "export_as_saved_model"
   ],
   "consequent": [
    "output_collection_name"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter.py",
  "condition": [
   "$0 = $1.to_float($2[$3]())"
  ],
  "consequent": [
   "$1.gfile.MakeDirs(output_directory)",
   "\tfrozen_graph_path = os.path.join(output_directory,                                    'frozen_inference_graph.pb')",
   "  saved_model_path = os.path.join(output_directory, 'saved_model')",
   "  model_path = os.path.join(output_directory, 'model.ckpt') ",
   "  placeholder_tensor, input_tensors = $2[$3]()",
   "  $0 = $1.to_float(input_tensors)"
  ],
  "identifiers": {
   "condition": [
    "to_float"
   ],
   "consequent": [
    "os",
    "saved_model_path",
    "MakeDirs",
    "join",
    "model_path",
    "placeholder_tensor",
    "path",
    "frozen_graph_path",
    "output_directory",
    "input_tensors",
    "to_float",
    "gfile"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter.py",
  "condition": [
   "out_node_names = list(outputs.keys())",
   "\tif export_as_saved_model:",
   "\t_write_saved_model(inference_graph_path, inputs, outputs, checkpoint_path,                        $0)"
  ],
  "consequent": [
   "output_collection_name) ",
   "\tsaver = None",
   "  if $0:",
   "\tvariable_averages = tf.train.ExponentialMovingAverage(0.0)",
   "    variables_to_restore = variable_averages.variables_to_restore()",
   "    saver = tf.train.Saver(variables_to_restore)"
  ],
  "identifiers": {
   "condition": [
    "outputs",
    "inputs",
    "checkpoint_path",
    "out_node_names",
    "_write_saved_model",
    "list",
    "keys",
    "export_as_saved_model",
    "inference_graph_path"
   ],
   "consequent": [
    "train",
    "Saver",
    "ExponentialMovingAverage",
    "variable_averages",
    "output_collection_name",
    "tf",
    "variables_to_restore",
    "saver"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter.py",
  "condition": [
   "_write_inference_graph(inference_graph_path, checkpoint_path,                            use_moving_averages,                            output_node_names=','.join(out_node_names))"
  ],
  "consequent": [
   "saver = tf.train.Saver()",
   "\tinput_saver_def = saver.as_saver_def()"
  ],
  "identifiers": {
   "condition": [
    "checkpoint_path",
    "out_node_names",
    "_write_inference_graph",
    "join",
    "output_node_names",
    "inference_graph_path",
    "use_moving_averages"
   ],
   "consequent": [
    "train",
    "Saver",
    "input_saver_def",
    "tf",
    "as_saver_def",
    "saver"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter.py",
  "condition": [
   "def export_inference_graph($0, $1, checkpoint_path,                            inference_graph_path, export_as_saved_model=False):"
  ],
  "consequent": [
   "_write_graph_and_checkpoint(       inference_graph_def=tf.get_default_graph().as_graph_def(),       model_path=model_path,       input_saver_def=input_saver_def,       trained_checkpoint_prefix=trained_checkpoint_prefix)",
   "\tfrozen_graph_def = freeze_graph_with_def_protos(       input_graph_def=tf.get_default_graph().as_graph_def(),       input_saver_def=input_saver_def,       input_checkpoint=trained_checkpoint_prefix,       output_node_names=','.join(outputs.keys()),       restore_op_name='save/restore_all',       filename_tensor_name='save/Const:0',       clear_devices=True,       optimize_graph=optimize_graph,       initializer_nodes='')",
   "  _write_frozen_graph(frozen_graph_path, frozen_graph_def)",
   "  _write_saved_model(saved_model_path, frozen_graph_def, placeholder_tensor,                      outputs)  ",
   "def export_inference_graph($0,                            $1,                            trained_checkpoint_prefix,                            output_directory,                            optimize_graph=False,                            output_collection_name='inference_op'):"
  ],
  "identifiers": {
   "condition": [
    "checkpoint_path",
    "inference_graph_path",
    "export_as_saved_model",
    "export_inference_graph"
   ],
   "consequent": [
    "inference_graph_def",
    "input_graph_def",
    "_write_saved_model",
    "output_collection_name",
    "input_saver_def",
    "output_node_names",
    "get_default_graph",
    "freeze_graph_with_def_protos",
    "frozen_graph_path",
    "export_inference_graph",
    "outputs",
    "trained_checkpoint_prefix",
    "placeholder_tensor",
    "input_checkpoint",
    "filename_tensor_name",
    "keys",
    "output_directory",
    "initializer_nodes",
    "frozen_graph_def",
    "clear_devices",
    "_write_graph_and_checkpoint",
    "model_path",
    "_write_frozen_graph",
    "optimize_graph",
    "tf",
    "as_graph_def",
    "saved_model_path",
    "restore_op_name",
    "join"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter.py",
  "condition": [
   "checkpoint_path: $0 $1 $2 $3 $4 $1 freeze.",
   "\tinference_graph_path: $0 $1 $5 inference $6 $1.",
   "    export_as_saved_model: $7 $2 model should be exported as $8 SavedModel. $7",
   "\tfalse, it is saved as an inference $6."
  ],
  "consequent": [
   "trained_checkpoint_prefix: $0 $1 $2 trained $3 $4.",
   "\toutput_directory: $0 $1 $5 outputs.",
   "    optimize_graph: Whether $1 optimize $6 using Grappler.",
   "    output_collection_name: Name of collection $1 add output tensors $1.",
   "\t$7 None, does not add output tensors $1 $8 collection."
  ],
  "identifiers": {
   "condition": [
    "false",
    "inference",
    "it",
    "be",
    "SavedModel",
    "inference_graph_path",
    "exported",
    "saved",
    "export_as_saved_model",
    "model",
    "checkpoint_path",
    "an",
    "should",
    "freeze"
   ],
   "consequent": [
    "outputs",
    "optimize",
    "trained_checkpoint_prefix",
    "using",
    "of",
    "collection",
    "tensors",
    "output_collection_name",
    "output",
    "does",
    "optimize_graph",
    "output_directory",
    "Whether",
    "Grappler",
    "add",
    "trained",
    "Name"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter.py",
  "condition": [
   "checkpoint_path, inference_graph_path,",
   "\texport_as_saved_model)"
  ],
  "consequent": [
   "trained_checkpoint_prefix, output_directory,",
   "\toptimize_graph, output_collection_name)"
  ],
  "identifiers": {
   "condition": [
    "checkpoint_path",
    "inference_graph_path",
    "export_as_saved_model"
   ],
   "consequent": [
    "optimize_graph",
    "trained_checkpoint_prefix",
    "output_collection_name",
    "output_directory"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter_test.py",
  "condition": [
   "$0.ones([1, 3, 4, 3], $0.$1))"
  ],
  "consequent": [
   "$0.placeholder($0.$1, shape=[None, None, None, 3]))"
  ],
  "identifiers": {
   "condition": [
    "ones"
   ],
   "consequent": [
    "shape",
    "placeholder"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter_test.py",
  "condition": [
   "inference_graph_path = $0.$1.join($2.get_temp_dir(),                                           'exported_graph.pbtxt')"
  ],
  "consequent": [
   "tmp_dir = $2.get_temp_dir()",
   "\ttrained_checkpoint_prefix = $0.$1.join(tmp_dir, 'model.ckpt')",
   "    $2._save_checkpoint_from_mock_model(trained_checkpoint_prefix,                                           use_moving_averages=False)",
   "\toutput_directory = $0.$1.join(tmp_dir, 'output')"
  ],
  "identifiers": {
   "condition": [
    "inference_graph_path",
    "join",
    "get_temp_dir"
   ],
   "consequent": [
    "trained_checkpoint_prefix",
    "tmp_dir",
    "join",
    "output_directory",
    "get_temp_dir",
    "_save_checkpoint_from_mock_model",
    "use_moving_averages"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter_test.py",
  "condition": [
   "checkpoint_path=None,",
   "\tinference_graph_path=inference_graph_path)"
  ],
  "consequent": [
   "trained_checkpoint_prefix=trained_checkpoint_prefix,",
   "\toutput_directory=output_directory)"
  ],
  "identifiers": {
   "condition": [
    "checkpoint_path",
    "inference_graph_path"
   ],
   "consequent": [
    "trained_checkpoint_prefix",
    "output_directory"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter_test.py",
  "condition": [
   "inference_graph_path = $0.$1.join($2.get_temp_dir(),                                           'exported_graph.pbtxt')"
  ],
  "consequent": [
   "tmp_dir = $2.get_temp_dir()",
   "\ttrained_checkpoint_prefix = $0.$1.join(tmp_dir, 'model.ckpt')",
   "    $2._save_checkpoint_from_mock_model(trained_checkpoint_prefix,                                           use_moving_averages=False)",
   "\toutput_directory = $0.$1.join(tmp_dir, 'output')"
  ],
  "identifiers": {
   "condition": [
    "inference_graph_path",
    "join",
    "get_temp_dir"
   ],
   "consequent": [
    "trained_checkpoint_prefix",
    "tmp_dir",
    "join",
    "output_directory",
    "get_temp_dir",
    "_save_checkpoint_from_mock_model",
    "use_moving_averages"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter_test.py",
  "condition": [
   "checkpoint_path=None,",
   "\tinference_graph_path=inference_graph_path)"
  ],
  "consequent": [
   "trained_checkpoint_prefix=trained_checkpoint_prefix,",
   "\toutput_directory=output_directory)"
  ],
  "identifiers": {
   "condition": [
    "checkpoint_path",
    "inference_graph_path"
   ],
   "consequent": [
    "trained_checkpoint_prefix",
    "output_directory"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter_test.py",
  "condition": [
   "inference_graph_path = $0.$1.join($2.get_temp_dir(),                                           'exported_graph.pbtxt')"
  ],
  "consequent": [
   "tmp_dir = $2.get_temp_dir()",
   "\ttrained_checkpoint_prefix = $0.$1.join(tmp_dir, 'model.ckpt')",
   "    $2._save_checkpoint_from_mock_model(trained_checkpoint_prefix,                                           use_moving_averages=False)",
   "\toutput_directory = $0.$1.join(tmp_dir, 'output')"
  ],
  "identifiers": {
   "condition": [
    "inference_graph_path",
    "join",
    "get_temp_dir"
   ],
   "consequent": [
    "trained_checkpoint_prefix",
    "tmp_dir",
    "join",
    "output_directory",
    "get_temp_dir",
    "_save_checkpoint_from_mock_model",
    "use_moving_averages"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter_test.py",
  "condition": [
   "checkpoint_path=None,",
   "\tinference_graph_path=inference_graph_path)"
  ],
  "consequent": [
   "trained_checkpoint_prefix=trained_checkpoint_prefix,",
   "\toutput_directory=output_directory)"
  ],
  "identifiers": {
   "condition": [
    "checkpoint_path",
    "inference_graph_path"
   ],
   "consequent": [
    "trained_checkpoint_prefix",
    "output_directory"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter_test.py",
  "condition": [
   "def test_export_frozen_graph($0):"
  ],
  "consequent": [
   "def test_export_graph_with_moving_averages($0):",
   "\ttmp_dir = $0.get_temp_dir()"
  ],
  "identifiers": {
   "condition": [
    "test_export_frozen_graph"
   ],
   "consequent": [
    "test_export_graph_with_moving_averages",
    "tmp_dir",
    "get_temp_dir"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter_test.py",
  "condition": [
   "checkpoint_path = $0.$1.join(self.get_temp_dir(), 'model-ckpt')"
  ],
  "consequent": [
   "trained_checkpoint_prefix = $0.$1.join(tmp_dir, 'model.ckpt')"
  ],
  "identifiers": {
   "condition": [
    "checkpoint_path",
    "join",
    "get_temp_dir",
    "self"
   ],
   "consequent": [
    "trained_checkpoint_prefix",
    "tmp_dir",
    "join"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter_test.py",
  "condition": [
   "$0._save_checkpoint_from_mock_model(checkpoint_path,"
  ],
  "consequent": [
   "$0._save_checkpoint_from_mock_model(trained_checkpoint_prefix,"
  ],
  "identifiers": {
   "condition": [
    "checkpoint_path",
    "_save_checkpoint_from_mock_model"
   ],
   "consequent": [
    "_save_checkpoint_from_mock_model",
    "trained_checkpoint_prefix"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter_test.py",
  "condition": [
   "$0=False)"
  ],
  "consequent": [
   "$0=True)",
   "\toutput_directory = os.path.join(tmp_dir, 'output')"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "os",
    "tmp_dir",
    "join",
    "path",
    "output_directory"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter_test.py",
  "condition": [
   "inference_graph_path = os.path.join(self.get_temp_dir(),                                         'exported_graph.pb')",
   "\t$0.$1.$2 = False"
  ],
  "consequent": [
   "$0.$1.$2 = True"
  ],
  "identifiers": {
   "condition": [
    "os",
    "join",
    "path",
    "self",
    "get_temp_dir",
    "inference_graph_path"
   ],
   "consequent": []
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter_test.py",
  "condition": [
   "checkpoint_path=checkpoint_path,",
   "\tinference_graph_path=inference_graph_path)"
  ],
  "consequent": [
   "trained_checkpoint_prefix=trained_checkpoint_prefix,",
   "\toutput_directory=output_directory)"
  ],
  "identifiers": {
   "condition": [
    "checkpoint_path",
    "inference_graph_path"
   ],
   "consequent": [
    "trained_checkpoint_prefix",
    "output_directory"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter_test.py",
  "condition": [
   "def test_export_frozen_graph_with_moving_averages($0):"
  ],
  "consequent": [
   "def test_export_model_with_all_output_nodes($0):",
   "\ttmp_dir = $0.get_temp_dir()"
  ],
  "identifiers": {
   "condition": [
    "test_export_frozen_graph_with_moving_averages"
   ],
   "consequent": [
    "test_export_model_with_all_output_nodes",
    "tmp_dir",
    "get_temp_dir"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter_test.py",
  "condition": [
   "checkpoint_path = $0.$1.join(self.get_temp_dir(), 'model-ckpt')"
  ],
  "consequent": [
   "trained_checkpoint_prefix = $0.$1.join(tmp_dir, 'model.ckpt')"
  ],
  "identifiers": {
   "condition": [
    "checkpoint_path",
    "join",
    "get_temp_dir",
    "self"
   ],
   "consequent": [
    "trained_checkpoint_prefix",
    "tmp_dir",
    "join"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter_test.py",
  "condition": [
   "$0._save_checkpoint_from_mock_model(checkpoint_path,"
  ],
  "consequent": [
   "$0._save_checkpoint_from_mock_model(trained_checkpoint_prefix,"
  ],
  "identifiers": {
   "condition": [
    "checkpoint_path",
    "_save_checkpoint_from_mock_model"
   ],
   "consequent": [
    "_save_checkpoint_from_mock_model",
    "trained_checkpoint_prefix"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter_test.py",
  "condition": [
   "$0 = $1.$2.join(self.get_temp_dir(),"
  ],
  "consequent": [
   "output_directory = $1.$2.join(tmp_dir, 'output')",
   "\t$0 = $1.$2.join(output_directory,"
  ],
  "identifiers": {
   "condition": [
    "join",
    "get_temp_dir",
    "self"
   ],
   "consequent": [
    "output_directory",
    "tmp_dir",
    "join"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter_test.py",
  "condition": [
   "$0.$1 = FakeModel()"
  ],
  "consequent": [
   "$0.$1 = FakeModel(add_detection_masks=True)"
  ],
  "identifiers": {
   "condition": [
    "FakeModel"
   ],
   "consequent": [
    "add_detection_masks",
    "FakeModel"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter_test.py",
  "condition": [
   "pipeline_config.eval_config.use_moving_averages = True"
  ],
  "consequent": [
   "trained_checkpoint_prefix=trained_checkpoint_prefix,",
   "\toutput_directory=output_directory)"
  ],
  "identifiers": {
   "condition": [
    "pipeline_config",
    "eval_config",
    "use_moving_averages"
   ],
   "consequent": [
    "trained_checkpoint_prefix",
    "output_directory"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter_test.py",
  "condition": [
   "checkpoint_path=checkpoint_path,",
   "\tinference_graph_path=inference_graph_path) ",
   "  def test_export_model_with_all_output_nodes($0):",
   "\tcheckpoint_path = os.path.join($0.get_temp_dir(), 'model-ckpt')",
   "    $0._save_checkpoint_from_mock_model(checkpoint_path,",
   "\tuse_moving_averages=False)",
   "    inference_graph_path = os.path.join($0.get_temp_dir(),",
   "\t'exported_graph.pb')",
   "    with mock.patch.object(",
   "\tmodel_builder, 'build', autospec=True) as mock_builder:",
   "      mock_builder.return_value = FakeModel(add_detection_masks=True)",
   "\tpipeline_config = pipeline_pb2.TrainEvalPipelineConfig()",
   "      exporter.export_inference_graph(",
   "\tinput_type='image_tensor',",
   "          pipeline_config=pipeline_config,",
   "          checkpoint_path=checkpoint_path,",
   "          inference_graph_path=inference_graph_path)"
  ],
  "consequent": [
   "tmp_dir = $0.get_temp_dir()"
  ],
  "identifiers": {
   "condition": [
    "get_temp_dir",
    "checkpoint_path",
    "export_inference_graph",
    "FakeModel",
    "mock_builder",
    "pipeline_config",
    "pipeline_pb2",
    "TrainEvalPipelineConfig",
    "model_builder",
    "autospec",
    "path",
    "add_detection_masks",
    "inference_graph_path",
    "_save_checkpoint_from_mock_model",
    "object",
    "os",
    "return_value",
    "patch",
    "join",
    "input_type",
    "mock",
    "test_export_model_with_all_output_nodes",
    "exporter",
    "use_moving_averages"
   ],
   "consequent": [
    "tmp_dir",
    "get_temp_dir"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter_test.py",
  "condition": [
   "checkpoint_path = $0.$1.join(self.get_temp_dir(), 'model-ckpt')"
  ],
  "consequent": [
   "trained_checkpoint_prefix = $0.$1.join(tmp_dir, 'model.ckpt')"
  ],
  "identifiers": {
   "condition": [
    "checkpoint_path",
    "join",
    "get_temp_dir",
    "self"
   ],
   "consequent": [
    "trained_checkpoint_prefix",
    "tmp_dir",
    "join"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter_test.py",
  "condition": [
   "$0._save_checkpoint_from_mock_model(checkpoint_path,"
  ],
  "consequent": [
   "$0._save_checkpoint_from_mock_model(trained_checkpoint_prefix,"
  ],
  "identifiers": {
   "condition": [
    "checkpoint_path",
    "_save_checkpoint_from_mock_model"
   ],
   "consequent": [
    "_save_checkpoint_from_mock_model",
    "trained_checkpoint_prefix"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter_test.py",
  "condition": [
   "$0=False)"
  ],
  "consequent": [
   "$0=True)",
   "\toutput_directory = os.path.join(tmp_dir, 'output')"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "os",
    "tmp_dir",
    "join",
    "path",
    "output_directory"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter_test.py",
  "condition": [
   "$0 = $1.$2.join(self.get_temp_dir(),"
  ],
  "consequent": [
   "$0 = $1.$2.join(output_directory,"
  ],
  "identifiers": {
   "condition": [
    "join",
    "get_temp_dir",
    "self"
   ],
   "consequent": [
    "join",
    "output_directory"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter_test.py",
  "condition": [
   "checkpoint_path=checkpoint_path,",
   "\tinference_graph_path=inference_graph_path)"
  ],
  "consequent": [
   "trained_checkpoint_prefix=trained_checkpoint_prefix,",
   "\toutput_directory=output_directory)"
  ],
  "identifiers": {
   "condition": [
    "checkpoint_path",
    "inference_graph_path"
   ],
   "consequent": [
    "trained_checkpoint_prefix",
    "output_directory"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter_test.py",
  "condition": [
   "checkpoint_path = $0.$1.join($2.get_temp_dir(), 'model-ckpt')"
  ],
  "consequent": [
   "tmp_dir = $2.get_temp_dir()",
   "\ttrained_checkpoint_prefix = $0.$1.join(tmp_dir, 'model.ckpt')"
  ],
  "identifiers": {
   "condition": [
    "checkpoint_path",
    "join",
    "get_temp_dir"
   ],
   "consequent": [
    "trained_checkpoint_prefix",
    "tmp_dir",
    "get_temp_dir",
    "join"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter_test.py",
  "condition": [
   "$0._save_checkpoint_from_mock_model(checkpoint_path,"
  ],
  "consequent": [
   "$0._save_checkpoint_from_mock_model(trained_checkpoint_prefix,"
  ],
  "identifiers": {
   "condition": [
    "checkpoint_path",
    "_save_checkpoint_from_mock_model"
   ],
   "consequent": [
    "_save_checkpoint_from_mock_model",
    "trained_checkpoint_prefix"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter_test.py",
  "condition": [
   "$0=False)"
  ],
  "consequent": [
   "$0=True)",
   "\toutput_directory = os.path.join(tmp_dir, 'output')"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "os",
    "tmp_dir",
    "join",
    "path",
    "output_directory"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter_test.py",
  "condition": [
   "$0 = $1.$2.join(self.get_temp_dir(),"
  ],
  "consequent": [
   "$0 = $1.$2.join(output_directory,"
  ],
  "identifiers": {
   "condition": [
    "join",
    "get_temp_dir",
    "self"
   ],
   "consequent": [
    "join",
    "output_directory"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter_test.py",
  "condition": [
   "checkpoint_path=checkpoint_path,",
   "\tinference_graph_path=inference_graph_path)"
  ],
  "consequent": [
   "trained_checkpoint_prefix=trained_checkpoint_prefix,",
   "\toutput_directory=output_directory)"
  ],
  "identifiers": {
   "condition": [
    "checkpoint_path",
    "inference_graph_path"
   ],
   "consequent": [
    "trained_checkpoint_prefix",
    "output_directory"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter_test.py",
  "condition": [
   "(boxes, scores, classes, masks, num_detections) = $0.run("
  ],
  "consequent": [
   "(boxes_np, scores_np, classes_np, masks_np, num_detections_np) = $0.run("
  ],
  "identifiers": {
   "condition": [
    "boxes",
    "classes",
    "run",
    "scores",
    "masks",
    "num_detections"
   ],
   "consequent": [
    "num_detections_np",
    "scores_np",
    "boxes_np",
    "classes_np",
    "run",
    "masks_np"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter_test.py",
  "condition": [
   "$0.assertAllClose(boxes, [[0.0, 0.0, 0.5, 0.5],"
  ],
  "consequent": [
   "$0.assertAllClose(boxes_np, [[[0.0, 0.0, 0.5, 0.5],"
  ],
  "identifiers": {
   "condition": [
    "boxes",
    "assertAllClose"
   ],
   "consequent": [
    "boxes_np",
    "assertAllClose"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter_test.py",
  "condition": [
   "$0.assertAllClose(scores, [[0.7, 0.6]])"
  ],
  "consequent": [
   "$0.assertAllClose(scores_np, [[0.7, 0.6],                                       [0.9, 0.0]])"
  ],
  "identifiers": {
   "condition": [
    "scores",
    "assertAllClose"
   ],
   "consequent": [
    "scores_np",
    "assertAllClose"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter_test.py",
  "condition": [
   "$0.assertAllClose(classes, [[1, 2]])"
  ],
  "consequent": [
   "$0.assertAllClose(classes_np, [[1, 2],                                        [2, 1]])"
  ],
  "identifiers": {
   "condition": [
    "classes",
    "assertAllClose"
   ],
   "consequent": [
    "classes_np",
    "assertAllClose"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter_test.py",
  "condition": [
   "$0.assertAllClose(masks, $1.arange(32).reshape([2, 4, 4]))"
  ],
  "consequent": [
   "$0.assertAllClose(masks_np, $1.arange(64).reshape([2, 2, 4, 4]))"
  ],
  "identifiers": {
   "condition": [
    "arange",
    "masks",
    "assertAllClose",
    "reshape"
   ],
   "consequent": [
    "reshape",
    "arange",
    "assertAllClose",
    "masks_np"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter_test.py",
  "condition": [
   "$0.assertAllClose(num_detections, [2])"
  ],
  "consequent": [
   "$0.assertAllClose(num_detections_np, [2, 1])"
  ],
  "identifiers": {
   "condition": [
    "num_detections",
    "assertAllClose"
   ],
   "consequent": [
    "num_detections_np",
    "assertAllClose"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter_test.py",
  "condition": [
   "checkpoint_path = $0.$1.join($2.get_temp_dir(), 'model-ckpt')"
  ],
  "consequent": [
   "tmp_dir = $2.get_temp_dir()",
   "\ttrained_checkpoint_prefix = $0.$1.join(tmp_dir, 'model.ckpt')"
  ],
  "identifiers": {
   "condition": [
    "checkpoint_path",
    "join",
    "get_temp_dir"
   ],
   "consequent": [
    "trained_checkpoint_prefix",
    "tmp_dir",
    "get_temp_dir",
    "join"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter_test.py",
  "condition": [
   "$0._save_checkpoint_from_mock_model(checkpoint_path,"
  ],
  "consequent": [
   "$0._save_checkpoint_from_mock_model(trained_checkpoint_prefix,"
  ],
  "identifiers": {
   "condition": [
    "checkpoint_path",
    "_save_checkpoint_from_mock_model"
   ],
   "consequent": [
    "_save_checkpoint_from_mock_model",
    "trained_checkpoint_prefix"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter_test.py",
  "condition": [
   "$0=False)"
  ],
  "consequent": [
   "$0=True)",
   "\toutput_directory = os.path.join(tmp_dir, 'output')"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "os",
    "tmp_dir",
    "join",
    "path",
    "output_directory"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter_test.py",
  "condition": [
   "$0 = $1.$2.join(self.get_temp_dir(),"
  ],
  "consequent": [
   "$0 = $1.$2.join(output_directory,"
  ],
  "identifiers": {
   "condition": [
    "join",
    "get_temp_dir",
    "self"
   ],
   "consequent": [
    "join",
    "output_directory"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter_test.py",
  "condition": [
   "checkpoint_path=checkpoint_path,",
   "\tinference_graph_path=inference_graph_path)"
  ],
  "consequent": [
   "trained_checkpoint_prefix=trained_checkpoint_prefix,",
   "\toutput_directory=output_directory)"
  ],
  "identifiers": {
   "condition": [
    "checkpoint_path",
    "inference_graph_path"
   ],
   "consequent": [
    "trained_checkpoint_prefix",
    "output_directory"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter_test.py",
  "condition": [
   "$0={$1: $2})"
  ],
  "consequent": [
   "image_str_batch_np = np.hstack([$2]* 2)",
   "\t$0={$1: image_str_batch_np})"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "image_str_batch_np",
    "hstack",
    "np"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter_test.py",
  "condition": [
   "$0.assertAllClose($1, [2])"
  ],
  "consequent": [
   "$0.assertAllClose($1, [2, 1]) ",
   "\tdef test_raise_runtime_error_on_images_with_different_sizes($0):",
   "\ttmp_dir = $0.get_temp_dir()",
   "    trained_checkpoint_prefix = os.path.join(tmp_dir, 'model.ckpt')",
   "    $0._save_checkpoint_from_mock_model(trained_checkpoint_prefix,                                           use_moving_averages=True)",
   "    output_directory = os.path.join(tmp_dir, 'output')",
   "    inference_graph_path = os.path.join(output_directory,                                         'frozen_inference_graph.pb')",
   "    with mock.patch.object(         model_builder, 'build', autospec=True) as mock_builder:",
   "\tmock_builder.return_value = FakeModel(add_detection_masks=True)",
   "      pipeline_config = pipeline_pb2.TrainEvalPipelineConfig()",
   "      pipeline_config.eval_config.use_moving_averages = False",
   "      exporter.export_inference_graph(           input_type='encoded_image_string_tensor',           pipeline_config=pipeline_config,           trained_checkpoint_prefix=trained_checkpoint_prefix,           output_directory=output_directory) ",
   "    inference_graph = $0._load_inference_graph(inference_graph_path)",
   "    large_image = $0._create_encoded_image_string(         np.ones((4, 4, 3)).astype(np.uint8), 'jpg')",
   "    small_image = $0._create_encoded_image_string(         np.ones((2, 2, 3)).astype(np.uint8), 'jpg') ",
   "    image_str_batch_np = np.hstack([large_image, small_image])",
   "    with $0.test_session(graph=inference_graph) as sess:",
   "\timage_str_tensor = inference_graph.get_tensor_by_name(           'encoded_image_string_tensor:0')",
   "      boxes = inference_graph.get_tensor_by_name('detection_boxes:0')",
   "      scores = inference_graph.get_tensor_by_name('detection_scores:0')",
   "      classes = inference_graph.get_tensor_by_name('detection_classes:0')",
   "      masks = inference_graph.get_tensor_by_name('detection_masks:0')",
   "      num_detections = inference_graph.get_tensor_by_name('num_detections:0')",
   "      with $0.assertRaisesRegexp(tf.errors.InvalidArgumentError,                                    '^TensorArray has inconsistent shapes.'):",
   "\tsess.run([boxes, scores, classes, masks, num_detections],                  feed_dict={image_str_tensor: image_str_batch_np})"
  ],
  "identifiers": {
   "condition": [
    "assertAllClose"
   ],
   "consequent": [
    "image_str_tensor",
    "boxes",
    "InvalidArgumentError",
    "eval_config",
    "tmp_dir",
    "_create_encoded_image_string",
    "ones",
    "get_tensor_by_name",
    "get_temp_dir",
    "masks",
    "inference_graph",
    "export_inference_graph",
    "errors",
    "trained_checkpoint_prefix",
    "FakeModel",
    "small_image",
    "sess",
    "output_directory",
    "test_session",
    "mock_builder",
    "pipeline_config",
    "scores",
    "run",
    "feed_dict",
    "graph",
    "pipeline_pb2",
    "_load_inference_graph",
    "TrainEvalPipelineConfig",
    "model_builder",
    "autospec",
    "path",
    "tf",
    "inference_graph_path",
    "_save_checkpoint_from_mock_model",
    "add_detection_masks",
    "assertRaisesRegexp",
    "object",
    "os",
    "return_value",
    "assertAllClose",
    "patch",
    "large_image",
    "test_raise_runtime_error_on_images_with_different_sizes",
    "join",
    "input_type",
    "astype",
    "uint8",
    "classes",
    "mock",
    "np",
    "image_str_batch_np",
    "hstack",
    "exporter",
    "num_detections",
    "use_moving_averages"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter_test.py",
  "condition": [
   "checkpoint_path = $0.$1.join($2.get_temp_dir(), 'model-ckpt')"
  ],
  "consequent": [
   "tmp_dir = $2.get_temp_dir()",
   "\ttrained_checkpoint_prefix = $0.$1.join(tmp_dir, 'model.ckpt')"
  ],
  "identifiers": {
   "condition": [
    "checkpoint_path",
    "join",
    "get_temp_dir"
   ],
   "consequent": [
    "trained_checkpoint_prefix",
    "tmp_dir",
    "get_temp_dir",
    "join"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter_test.py",
  "condition": [
   "$0._save_checkpoint_from_mock_model(checkpoint_path,"
  ],
  "consequent": [
   "$0._save_checkpoint_from_mock_model(trained_checkpoint_prefix,"
  ],
  "identifiers": {
   "condition": [
    "checkpoint_path",
    "_save_checkpoint_from_mock_model"
   ],
   "consequent": [
    "_save_checkpoint_from_mock_model",
    "trained_checkpoint_prefix"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter_test.py",
  "condition": [
   "$0=False)"
  ],
  "consequent": [
   "$0=True)",
   "\toutput_directory = os.path.join(tmp_dir, 'output')"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "os",
    "tmp_dir",
    "join",
    "path",
    "output_directory"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter_test.py",
  "condition": [
   "$0 = $1.$2.join(self.get_temp_dir(),"
  ],
  "consequent": [
   "$0 = $1.$2.join(output_directory,"
  ],
  "identifiers": {
   "condition": [
    "join",
    "get_temp_dir",
    "self"
   ],
   "consequent": [
    "join",
    "output_directory"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter_test.py",
  "condition": [
   "checkpoint_path=checkpoint_path,",
   "\tinference_graph_path=inference_graph_path)"
  ],
  "consequent": [
   "trained_checkpoint_prefix=trained_checkpoint_prefix,",
   "\toutput_directory=output_directory)"
  ],
  "identifiers": {
   "condition": [
    "checkpoint_path",
    "inference_graph_path"
   ],
   "consequent": [
    "trained_checkpoint_prefix",
    "output_directory"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter_test.py",
  "condition": [
   "(boxes, scores, classes, masks, num_detections) = $0.run("
  ],
  "consequent": [
   "tf_example_np = np.expand_dims(self._create_tf_example(         np.ones((4, 4, 3)).astype(np.uint8)), axis=0)",
   "\t(boxes_np, scores_np, classes_np, masks_np, num_detections_np) = $0.run("
  ],
  "identifiers": {
   "condition": [
    "boxes",
    "classes",
    "run",
    "scores",
    "masks",
    "num_detections"
   ],
   "consequent": [
    "num_detections_np",
    "scores_np",
    "uint8",
    "axis",
    "astype",
    "boxes_np",
    "self",
    "tf_example_np",
    "ones",
    "expand_dims",
    "np",
    "classes_np",
    "_create_tf_example",
    "run",
    "masks_np"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter_test.py",
  "condition": [
   "$0={$1: self._create_tf_example("
  ],
  "consequent": [
   "$0={$1: tf_example_np})"
  ],
  "identifiers": {
   "condition": [
    "_create_tf_example",
    "self"
   ],
   "consequent": [
    "tf_example_np"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter_test.py",
  "condition": [
   "np.ones((4, 4, 3)).astype(np.uint8))})",
   "\t$0.assertAllClose(boxes, [[0.0, 0.0, 0.5, 0.5],"
  ],
  "consequent": [
   "$0.assertAllClose(boxes_np, [[[0.0, 0.0, 0.5, 0.5],"
  ],
  "identifiers": {
   "condition": [
    "boxes",
    "uint8",
    "assertAllClose",
    "astype",
    "ones",
    "np"
   ],
   "consequent": [
    "boxes_np",
    "assertAllClose"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter_test.py",
  "condition": [
   "$0.assertAllClose(scores, [[0.7, 0.6]])"
  ],
  "consequent": [
   "$0.assertAllClose(scores_np, [[0.7, 0.6],                                       [0.9, 0.0]])"
  ],
  "identifiers": {
   "condition": [
    "scores",
    "assertAllClose"
   ],
   "consequent": [
    "scores_np",
    "assertAllClose"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter_test.py",
  "condition": [
   "$0.assertAllClose(classes, [[1, 2]])"
  ],
  "consequent": [
   "$0.assertAllClose(classes_np, [[1, 2],                                        [2, 1]])"
  ],
  "identifiers": {
   "condition": [
    "classes",
    "assertAllClose"
   ],
   "consequent": [
    "classes_np",
    "assertAllClose"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter_test.py",
  "condition": [
   "$0.assertAllClose(masks, $1.arange(32).reshape([2, 4, 4]))"
  ],
  "consequent": [
   "$0.assertAllClose(masks_np, $1.arange(64).reshape([2, 2, 4, 4]))"
  ],
  "identifiers": {
   "condition": [
    "arange",
    "masks",
    "assertAllClose",
    "reshape"
   ],
   "consequent": [
    "reshape",
    "arange",
    "assertAllClose",
    "masks_np"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter_test.py",
  "condition": [
   "$0.assertAllClose(num_detections, [2])"
  ],
  "consequent": [
   "$0.assertAllClose(num_detections_np, [2, 1])"
  ],
  "identifiers": {
   "condition": [
    "num_detections",
    "assertAllClose"
   ],
   "consequent": [
    "num_detections_np",
    "assertAllClose"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter_test.py",
  "condition": [
   "checkpoint_path = $0.$1.join($2.get_temp_dir(), 'model-ckpt')"
  ],
  "consequent": [
   "tmp_dir = $2.get_temp_dir()",
   "\ttrained_checkpoint_prefix = $0.$1.join(tmp_dir, 'model.ckpt')"
  ],
  "identifiers": {
   "condition": [
    "checkpoint_path",
    "join",
    "get_temp_dir"
   ],
   "consequent": [
    "trained_checkpoint_prefix",
    "tmp_dir",
    "get_temp_dir",
    "join"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter_test.py",
  "condition": [
   "$0._save_checkpoint_from_mock_model(checkpoint_path,"
  ],
  "consequent": [
   "$0._save_checkpoint_from_mock_model(trained_checkpoint_prefix,"
  ],
  "identifiers": {
   "condition": [
    "checkpoint_path",
    "_save_checkpoint_from_mock_model"
   ],
   "consequent": [
    "_save_checkpoint_from_mock_model",
    "trained_checkpoint_prefix"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter_test.py",
  "condition": [
   "inference_graph_path = $0.$1.join(self.get_temp_dir(),                                         'saved_model')"
  ],
  "consequent": [
   "output_directory = $0.$1.join(tmp_dir, 'output')",
   "\tsaved_model_path = $0.$1.join(output_directory, 'saved_model')"
  ],
  "identifiers": {
   "condition": [
    "inference_graph_path",
    "join",
    "get_temp_dir",
    "self"
   ],
   "consequent": [
    "output_directory",
    "tmp_dir",
    "join",
    "saved_model_path"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter_test.py",
  "condition": [
   "checkpoint_path=checkpoint_path,",
   "\tinference_graph_path=inference_graph_path,",
   "          export_as_saved_model=True)"
  ],
  "consequent": [
   "trained_checkpoint_prefix=trained_checkpoint_prefix,",
   "\toutput_directory=output_directory)"
  ],
  "identifiers": {
   "condition": [
    "checkpoint_path",
    "inference_graph_path",
    "export_as_saved_model"
   ],
   "consequent": [
    "trained_checkpoint_prefix",
    "output_directory"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter_test.py",
  "condition": [
   "$0, [$1.$2.$3.$4], inference_graph_path)"
  ],
  "consequent": [
   "tf_example_np = np.hstack([self._create_tf_example(         np.ones((4, 4, 3)).astype(np.uint8))] * 2)",
   "\t$0, [$1.$2.$3.$4], saved_model_path)"
  ],
  "identifiers": {
   "condition": [
    "inference_graph_path"
   ],
   "consequent": [
    "saved_model_path",
    "_create_tf_example",
    "uint8",
    "astype",
    "self",
    "tf_example_np",
    "ones",
    "np",
    "hstack"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter_test.py",
  "condition": [
   "(boxes, scores, classes, masks, num_detections) = $0.run("
  ],
  "consequent": [
   "(boxes_np, scores_np, classes_np, masks_np,          num_detections_np) = $0.run("
  ],
  "identifiers": {
   "condition": [
    "boxes",
    "classes",
    "run",
    "scores",
    "masks",
    "num_detections"
   ],
   "consequent": [
    "num_detections_np",
    "scores_np",
    "boxes_np",
    "classes_np",
    "run",
    "masks_np"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter_test.py",
  "condition": [
   "$0={$1: self._create_tf_example("
  ],
  "consequent": [
   "$0={$1: tf_example_np})"
  ],
  "identifiers": {
   "condition": [
    "_create_tf_example",
    "self"
   ],
   "consequent": [
    "tf_example_np"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter_test.py",
  "condition": [
   "np.ones((4, 4, 3)).astype(np.uint8))})",
   "\t$0.assertAllClose(boxes, [[0.0, 0.0, 0.5, 0.5],"
  ],
  "consequent": [
   "$0.assertAllClose(boxes_np, [[[0.0, 0.0, 0.5, 0.5],"
  ],
  "identifiers": {
   "condition": [
    "boxes",
    "uint8",
    "assertAllClose",
    "astype",
    "ones",
    "np"
   ],
   "consequent": [
    "boxes_np",
    "assertAllClose"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter_test.py",
  "condition": [
   "$0.assertAllClose(scores, [[0.7, 0.6]])"
  ],
  "consequent": [
   "$0.assertAllClose(scores_np, [[0.7, 0.6],                                         [0.9, 0.0]])"
  ],
  "identifiers": {
   "condition": [
    "scores",
    "assertAllClose"
   ],
   "consequent": [
    "scores_np",
    "assertAllClose"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter_test.py",
  "condition": [
   "$0.assertAllClose(classes, [[1, 2]])"
  ],
  "consequent": [
   "$0.assertAllClose(classes_np, [[1, 2],                                          [2, 1]])"
  ],
  "identifiers": {
   "condition": [
    "classes",
    "assertAllClose"
   ],
   "consequent": [
    "classes_np",
    "assertAllClose"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter_test.py",
  "condition": [
   "$0.assertAllClose(masks, $1.arange(32).reshape([2, 4, 4]))"
  ],
  "consequent": [
   "$0.assertAllClose(masks_np, $1.arange(64).reshape([2, 2, 4, 4]))"
  ],
  "identifiers": {
   "condition": [
    "arange",
    "masks",
    "assertAllClose",
    "reshape"
   ],
   "consequent": [
    "reshape",
    "arange",
    "assertAllClose",
    "masks_np"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/exporter_test.py",
  "condition": [
   "$0.assertAllClose($1, [2])"
  ],
  "consequent": [
   "$0.assertAllClose(num_detections_np, [2, 1]) ",
   "\tdef test_export_checkpoint_and_run_inference($0):",
   "\ttmp_dir = $0.get_temp_dir()",
   "    trained_checkpoint_prefix = os.path.join(tmp_dir, 'model.ckpt')",
   "    $0._save_checkpoint_from_mock_model(trained_checkpoint_prefix,                                           use_moving_averages=False)",
   "    output_directory = os.path.join(tmp_dir, 'output')",
   "    model_path = os.path.join(output_directory, 'model.ckpt')",
   "    meta_graph_path = model_path + '.meta' ",
   "    with mock.patch.object(         model_builder, 'build', autospec=True) as mock_builder:",
   "\tmock_builder.return_value = FakeModel(add_detection_masks=True)",
   "      pipeline_config = pipeline_pb2.TrainEvalPipelineConfig()",
   "      pipeline_config.eval_config.use_moving_averages = False",
   "      exporter.export_inference_graph(           input_type='tf_example',           pipeline_config=pipeline_config,           trained_checkpoint_prefix=trained_checkpoint_prefix,           output_directory=output_directory) ",
   "    tf_example_np = np.hstack([$0._create_tf_example(         np.ones((4, 4, 3)).astype(np.uint8))] * 2)",
   "    with tf.Graph().as_default() as od_graph:",
   "\twith $0.test_session(graph=od_graph) as sess:",
   "\tnew_saver = tf.train.import_meta_graph(meta_graph_path)",
   "        new_saver.restore(sess, model_path) ",
   "        tf_example = od_graph.get_tensor_by_name('tf_example:0')",
   "        boxes = od_graph.get_tensor_by_name('detection_boxes:0')",
   "        scores = od_graph.get_tensor_by_name('detection_scores:0')",
   "        classes = od_graph.get_tensor_by_name('detection_classes:0')",
   "        masks = od_graph.get_tensor_by_name('detection_masks:0')",
   "        $1 = od_graph.get_tensor_by_name('num_detections:0')",
   "        (boxes_np, scores_np, classes_np, masks_np,          num_detections_np) = sess.run(              [boxes, scores, classes, masks, $1],              feed_dict={tf_example: tf_example_np})",
   "        $0.assertAllClose(boxes_np, [[[0.0, 0.0, 0.5, 0.5],                                         [0.5, 0.5, 0.8, 0.8]],                                        [[0.5, 0.5, 1.0, 1.0],                                         [0.0, 0.0, 0.0, 0.0]]])",
   "        $0.assertAllClose(scores_np, [[0.7, 0.6],                                         [0.9, 0.0]])",
   "        $0.assertAllClose(classes_np, [[1, 2],                                          [2, 1]])",
   "        $0.assertAllClose(masks_np, np.arange(64).reshape([2, 2, 4, 4]))",
   "        $0.assertAllClose(num_detections_np, [2, 1])"
  ],
  "identifiers": {
   "condition": [
    "assertAllClose"
   ],
   "consequent": [
    "boxes",
    "eval_config",
    "tmp_dir",
    "boxes_np",
    "restore",
    "ones",
    "get_tensor_by_name",
    "get_temp_dir",
    "od_graph",
    "masks",
    "export_inference_graph",
    "num_detections_np",
    "trained_checkpoint_prefix",
    "FakeModel",
    "as_default",
    "sess",
    "output_directory",
    "test_session",
    "mock_builder",
    "pipeline_config",
    "_create_tf_example",
    "Graph",
    "scores",
    "run",
    "feed_dict",
    "train",
    "import_meta_graph",
    "graph",
    "pipeline_pb2",
    "scores_np",
    "TrainEvalPipelineConfig",
    "model_path",
    "model_builder",
    "autospec",
    "path",
    "tf",
    "test_export_checkpoint_and_run_inference",
    "add_detection_masks",
    "_save_checkpoint_from_mock_model",
    "masks_np",
    "tf_example",
    "new_saver",
    "object",
    "reshape",
    "os",
    "return_value",
    "assertAllClose",
    "patch",
    "astype",
    "uint8",
    "join",
    "input_type",
    "classes",
    "arange",
    "mock",
    "tf_example_np",
    "np",
    "classes_np",
    "meta_graph_path",
    "hstack",
    "exporter",
    "use_moving_averages"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/meta_architectures/faster_rcnn_meta_arch.py",
  "condition": [
   "inputs_shape = $0.get_shape().as_list()",
   "\t$1 = $2.concat([         [inputs_shape[0]*inputs_shape[1]], $2.shape($0)[2:-1],         [inputs_shape[-1]]], 0)"
  ],
  "consequent": [
   "from object_detection.utils import shape_utils",
   "\tcombined_shape = shape_utils.combined_static_and_dynamic_shape($0)",
   "    $1 = $2.stack([combined_shape[0] * combined_shape[1]] +                                combined_shape[2:])"
  ],
  "identifiers": {
   "condition": [
    "concat",
    "as_list",
    "shape",
    "inputs_shape",
    "get_shape"
   ],
   "consequent": [
    "object_detection",
    "shape_utils",
    "combined_shape",
    "stack",
    "combined_static_and_dynamic_shape",
    "utils"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/meta_architectures/faster_rcnn_meta_arch.py",
  "condition": [
   "($0, groundtruth_classes_with_background_list"
  ],
  "consequent": [
   "rpn_box_encodings_batch = tf.expand_dims(rpn_box_encodings_batch, axis=2)",
   "\trpn_encodings_shape = shape_utils.combined_static_and_dynamic_shape(         rpn_box_encodings_batch)",
   "    tiled_anchor_boxes = tf.tile(         tf.expand_dims(anchors, 0), [rpn_encodings_shape[0], 1, 1])",
   "    proposal_boxes = self._batch_decode_boxes(rpn_box_encodings_batch,                                               tiled_anchor_boxes)",
   "    proposal_boxes = tf.squeeze(proposal_boxes, axis=2)",
   "    rpn_objectness_softmax_without_background = tf.nn.softmax(         rpn_objectness_predictions_with_background_batch)[:, :, 1]",
   "    (proposal_boxes, proposal_scores, _, _,      num_proposals) = post_processing.batch_multiclass_non_max_suppression(          tf.expand_dims(proposal_boxes, axis=2),          tf.expand_dims(rpn_objectness_softmax_without_background,                         axis=2),          self._first_stage_nms_score_threshold,          self._first_stage_nms_iou_threshold,          self._first_stage_max_proposals,          self._first_stage_max_proposals,          clip_window=clip_window)",
   "\tproposal_boxes = tf.stop_gradient(proposal_boxes)",
   "      if not self._hard_example_miner:",
   "\t($0, groundtruth_classes_with_background_list,"
  ],
  "identifiers": {
   "condition": [
    "groundtruth_classes_with_background_list"
   ],
   "consequent": [
    "shape_utils",
    "rpn_encodings_shape",
    "self",
    "num_proposals",
    "stop_gradient",
    "nn",
    "batch_multiclass_non_max_suppression",
    "_first_stage_nms_iou_threshold",
    "groundtruth_classes_with_background_list",
    "_",
    "_first_stage_max_proposals",
    "rpn_box_encodings_batch",
    "combined_static_and_dynamic_shape",
    "softmax",
    "_hard_example_miner",
    "expand_dims",
    "tile",
    "rpn_objectness_softmax_without_background",
    "squeeze",
    "proposal_boxes",
    "tf",
    "tiled_anchor_boxes",
    "anchors",
    "rpn_objectness_predictions_with_background_batch",
    "axis",
    "post_processing",
    "_batch_decode_boxes",
    "clip_window",
    "_first_stage_nms_score_threshold",
    "proposal_scores"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/meta_architectures/faster_rcnn_meta_arch.py",
  "condition": [
   ") = $0._format_groundtruth_data($1)"
  ],
  "consequent": [
   ") = $0._format_groundtruth_data($1)",
   "\t(proposal_boxes, proposal_scores,",
   "\tnum_proposals) = $0._unpad_proposals_and_sample_box_classifier_batch(",
   "\tproposal_boxes, proposal_scores, num_proposals,",
   "             groundtruth_boxlists, groundtruth_classes_with_background_list)                               ",
   "    proposal_boxes_reshaped = tf.reshape(proposal_boxes, [-1, 4])",
   "\tnormalized_proposal_boxes_reshaped = box_list_ops.to_normalized_coordinates(",
   "\tbox_list.BoxList(proposal_boxes_reshaped),",
   "        $1[1], $1[2], check_range=False).get()",
   "    proposal_boxes = tf.reshape(normalized_proposal_boxes_reshaped,",
   "\t[-1, proposal_boxes.shape[1].value, 4])",
   "    return proposal_boxes, proposal_scores, num_proposals"
  ],
  "identifiers": {
   "condition": [
    "_format_groundtruth_data"
   ],
   "consequent": [
    "BoxList",
    "num_proposals",
    "_unpad_proposals_and_sample_box_classifier_batch",
    "to_normalized_coordinates",
    "groundtruth_classes_with_background_list",
    "box_list",
    "check_range",
    "get",
    "shape",
    "box_list_ops",
    "proposal_boxes",
    "tf",
    "groundtruth_boxlists",
    "proposal_boxes_reshaped",
    "_format_groundtruth_data",
    "normalized_proposal_boxes_reshaped",
    "value",
    "reshape",
    "proposal_scores"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/meta_architectures/faster_rcnn_meta_arch.py",
  "condition": [
   "proposal_boxes_list = []"
  ],
  "consequent": [
   "def _unpad_proposals_and_sample_box_classifier_batch(       self,       proposal_boxes,"
  ],
  "identifiers": {
   "condition": [
    "proposal_boxes_list"
   ],
   "consequent": [
    "_unpad_proposals_and_sample_box_classifier_batch",
    "proposal_boxes",
    "self"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/meta_architectures/faster_rcnn_meta_arch.py",
  "condition": [
   "proposal_scores_list = []"
  ],
  "consequent": [
   "proposal_scores,"
  ],
  "identifiers": {
   "condition": [
    "proposal_scores_list"
   ],
   "consequent": [
    "proposal_scores"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/meta_architectures/faster_rcnn_meta_arch.py",
  "condition": [
   "num_proposals_list = []",
   "\tfor (batch_index,          (rpn_box_encodings,           rpn_objectness_predictions_with_background)) in enumerate(zip("
  ],
  "consequent": [
   "num_proposals,",
   "\tgroundtruth_boxlists,",
   "      groundtruth_classes_with_background_list):",
   "    \"\"\"Unpads proposals and samples a minibatch for second stage.",
   "",
   "    Args:",
   "      proposal_boxes: A float tensor with shape",
   "        [batch_size, num_proposals, 4] representing the (potentially zero",
   "        padded) proposal boxes for all images in the batch.  These boxes are",
   "        represented as normalized coordinates.",
   "      proposal_scores:  A float tensor with shape",
   "        [batch_size, num_proposals] representing the (potentially zero",
   "        padded) proposal objectness scores for all images in the batch.",
   "      num_proposals: A Tensor of type `int32`. A 1-D tensor of shape [batch]",
   "        representing the number of proposals predicted for each image in",
   "        the batch.",
   "      groundtruth_boxlists: A list of BoxLists containing (absolute) coordinates",
   "        of the groundtruth boxes.",
   "      groundtruth_classes_with_background_list: A list of 2-D one-hot",
   "        (or k-hot) tensors of shape [num_boxes, num_classes+1] containing the",
   "        class targets with the 0th index assumed to map to the background class.",
   "",
   "    Returns:",
   "      proposal_boxes: A float tensor with shape",
   "        [batch_size, second_stage_batch_size, 4] representing the (potentially",
   "        zero padded) proposal boxes for all images in the batch.  These boxes",
   "        are represented as normalized coordinates.",
   "      proposal_scores:  A float tensor with shape",
   "        [batch_size, second_stage_batch_size] representing the (potentially zero",
   "        padded) proposal objectness scores for all images in the batch.",
   "      num_proposals: A Tensor of type `int32`. A 1-D tensor of shape [batch]",
   "        representing the number of proposals predicted for each image in",
   "        the batch.",
   "    \"\"\"",
   "\tsingle_image_proposal_box_sample = []",
   "    single_image_proposal_score_sample = []",
   "    single_image_num_proposals_sample = []",
   "    for (single_image_proposal_boxes,",
   "\tsingle_image_proposal_scores,",
   "         single_image_num_proposals,",
   "         single_image_groundtruth_boxlist,",
   "         single_image_groundtruth_classes_with_background) in zip("
  ],
  "identifiers": {
   "condition": [
    "num_proposals_list",
    "zip",
    "rpn_box_encodings",
    "enumerate",
    "rpn_objectness_predictions_with_background",
    "batch_index"
   ],
   "consequent": [
    "single_image_proposal_box_sample",
    "groundtruth_classes_with_background_list",
    "single_image_num_proposals",
    "zip",
    "single_image_groundtruth_classes_with_background",
    "single_image_proposal_score_sample",
    "single_image_groundtruth_boxlist",
    "num_proposals",
    "single_image_proposal_boxes",
    "groundtruth_boxlists",
    "single_image_proposal_scores",
    "single_image_num_proposals_sample"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/meta_architectures/faster_rcnn_meta_arch.py",
  "condition": [
   "$0.unstack(rpn_box_encodings_batch),"
  ],
  "consequent": [
   "$0.unstack(proposal_boxes),"
  ],
  "identifiers": {
   "condition": [
    "unstack",
    "rpn_box_encodings_batch"
   ],
   "consequent": [
    "unstack",
    "proposal_boxes"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/meta_architectures/faster_rcnn_meta_arch.py",
  "condition": [
   "$0.unstack(rpn_objectness_predictions_with_background_batch))):",
   "\tdecoded_boxes = self._box_coder.decode(",
   "\trpn_box_encodings, box_list.BoxList(anchors))",
   "      objectness_scores = $0.unstack(",
   "\t$0.nn.softmax(rpn_objectness_predictions_with_background), axis=1)[1]",
   "      proposal_boxlist = post_processing.multiclass_non_max_suppression(",
   "\t$0.expand_dims(decoded_boxes.get(), 1),",
   "          $0.expand_dims(objectness_scores, 1),",
   "          self._first_stage_nms_score_threshold,",
   "          self._first_stage_nms_iou_threshold, self._first_stage_max_proposals,",
   "          clip_window=clip_window)"
  ],
  "consequent": [
   "$0.unstack(proposal_scores),",
   "\t$0.unstack(num_proposals),",
   "             groundtruth_boxlists,",
   "             groundtruth_classes_with_background_list):",
   "      static_shape = single_image_proposal_boxes.get_shape()",
   "\tsliced_static_shape = $0.TensorShape([$0.Dimension(None),                                             static_shape.dims[-1]])",
   "      single_image_proposal_boxes = $0.slice(",
   "\tsingle_image_proposal_boxes,",
   "          [0, 0],",
   "          [single_image_num_proposals, -1])",
   "      single_image_proposal_boxes.set_shape(sliced_static_shape)"
  ],
  "identifiers": {
   "condition": [
    "BoxList",
    "self",
    "multiclass_non_max_suppression",
    "nn",
    "_box_coder",
    "_first_stage_nms_iou_threshold",
    "_first_stage_max_proposals",
    "rpn_box_encodings",
    "objectness_scores",
    "softmax",
    "box_list",
    "rpn_objectness_predictions_with_background",
    "expand_dims",
    "proposal_boxlist",
    "get",
    "anchors",
    "unstack",
    "rpn_objectness_predictions_with_background_batch",
    "axis",
    "post_processing",
    "decoded_boxes",
    "clip_window",
    "decode",
    "_first_stage_nms_score_threshold"
   ],
   "consequent": [
    "unstack",
    "groundtruth_classes_with_background_list",
    "single_image_num_proposals",
    "set_shape",
    "Dimension",
    "num_proposals",
    "single_image_proposal_boxes",
    "groundtruth_boxlists",
    "static_shape",
    "slice",
    "sliced_static_shape",
    "dims",
    "TensorShape",
    "get_shape",
    "proposal_scores"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/meta_architectures/faster_rcnn_meta_arch.py",
  "condition": [
   "if self._is_training:",
   "\tproposal_boxlist.set($0.stop_gradient(proposal_boxlist.get()))",
   "        if not self._hard_example_miner:"
  ],
  "consequent": [
   "single_image_proposal_scores = $0.slice(single_image_proposal_scores,                                               [0],                                               [single_image_num_proposals])",
   "\tsingle_image_boxlist = box_list.BoxList(single_image_proposal_boxes)",
   "      single_image_boxlist.add_field(fields.BoxListFields.scores,                                      single_image_proposal_scores)"
  ],
  "identifiers": {
   "condition": [
    "_is_training",
    "set",
    "get",
    "self",
    "_hard_example_miner",
    "stop_gradient",
    "proposal_boxlist"
   ],
   "consequent": [
    "single_image_num_proposals",
    "single_image_boxlist",
    "BoxList",
    "single_image_proposal_boxes",
    "box_list",
    "add_field",
    "slice",
    "single_image_proposal_scores",
    "BoxListFields",
    "scores",
    "fields"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/meta_architectures/faster_rcnn_meta_arch.py",
  "condition": [
   "proposal_boxlist = $0._sample_box_classifier_minibatch("
  ],
  "consequent": [
   "sampled_boxlist = $0._sample_box_classifier_minibatch(           single_image_boxlist,           single_image_groundtruth_boxlist,           single_image_groundtruth_classes_with_background)"
  ],
  "identifiers": {
   "condition": [
    "proposal_boxlist",
    "_sample_box_classifier_minibatch"
   ],
   "consequent": [
    "single_image_boxlist",
    "single_image_groundtruth_classes_with_background",
    "sampled_boxlist",
    "single_image_groundtruth_boxlist",
    "_sample_box_classifier_minibatch"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/meta_architectures/faster_rcnn_meta_arch.py",
  "condition": [
   "proposal_boxlist, groundtruth_boxlists[batch_index],",
   "\tgroundtruth_classes_with_background_list[batch_index]) ",
   "      normalized_proposals = $0.to_normalized_coordinates(",
   "\tproposal_boxlist, image_shape[1], image_shape[2],",
   "          check_range=False)                                            ",
   "      padded_proposals = $0.pad_or_clip_box_list("
  ],
  "consequent": [
   "sampled_padded_boxlist = $0.pad_or_clip_box_list("
  ],
  "identifiers": {
   "condition": [
    "groundtruth_classes_with_background_list",
    "normalized_proposals",
    "image_shape",
    "to_normalized_coordinates",
    "check_range",
    "groundtruth_boxlists",
    "padded_proposals",
    "proposal_boxlist",
    "pad_or_clip_box_list",
    "batch_index"
   ],
   "consequent": [
    "pad_or_clip_box_list",
    "sampled_padded_boxlist"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/meta_architectures/faster_rcnn_meta_arch.py",
  "condition": [
   "normalized_proposals, $0=$1.max_num_proposals)",
   "\tproposal_boxes_list.append(padded_proposals.get())",
   "      proposal_scores_list.append("
  ],
  "consequent": [
   "sampled_boxlist,",
   "\t$0=$1._second_stage_batch_size)",
   "      single_image_num_proposals_sample.append(tf.minimum(           sampled_boxlist.$0(),           $1._second_stage_batch_size))",
   "\tbb = sampled_padded_boxlist.get()",
   "      single_image_proposal_box_sample.append(bb)",
   "      single_image_proposal_score_sample.append("
  ],
  "identifiers": {
   "condition": [
    "get",
    "normalized_proposals",
    "append",
    "proposal_scores_list",
    "max_num_proposals",
    "padded_proposals",
    "proposal_boxes_list"
   ],
   "consequent": [
    "single_image_proposal_box_sample",
    "get",
    "_second_stage_batch_size",
    "sampled_boxlist",
    "append",
    "minimum",
    "single_image_proposal_score_sample",
    "tf",
    "sampled_padded_boxlist",
    "bb",
    "single_image_num_proposals_sample"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/meta_architectures/faster_rcnn_meta_arch.py",
  "condition": [
   "padded_proposals.get_field($0.$1.$2))"
  ],
  "consequent": [
   "sampled_padded_boxlist.get_field($0.$1.$2))",
   "\treturn (tf.stack(single_image_proposal_box_sample),",
   "\ttf.stack(single_image_proposal_score_sample),"
  ],
  "identifiers": {
   "condition": [
    "padded_proposals",
    "get_field"
   ],
   "consequent": [
    "single_image_proposal_box_sample",
    "single_image_proposal_score_sample",
    "tf",
    "sampled_padded_boxlist",
    "get_field",
    "stack"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/meta_architectures/faster_rcnn_meta_arch.py",
  "condition": [
   "num_proposals_list.append($0.minimum(normalized_proposals.num_boxes(),                                            self.max_num_proposals)) ",
   "\treturn ($0.stack(proposal_boxes_list), $0.stack(proposal_scores_list),             $0.stack(num_proposals_list))"
  ],
  "consequent": [
   "$0.stack(single_image_num_proposals_sample))"
  ],
  "identifiers": {
   "condition": [
    "num_proposals_list",
    "normalized_proposals",
    "append",
    "minimum",
    "self",
    "proposal_scores_list",
    "max_num_proposals",
    "num_boxes",
    "stack",
    "proposal_boxes_list"
   ],
   "consequent": [
    "stack",
    "single_image_num_proposals_sample"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/meta_architectures/faster_rcnn_meta_arch.py",
  "condition": [
   "$0 = $1._batch_decode_refined_boxes("
  ],
  "consequent": [
   "$0 = $1._batch_decode_boxes("
  ],
  "identifiers": {
   "condition": [
    "_batch_decode_refined_boxes"
   ],
   "consequent": [
    "_batch_decode_boxes"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/meta_architectures/faster_rcnn_meta_arch.py",
  "condition": [
   "detections = $0._second_stage_nms_fn("
  ],
  "consequent": [
   "(nmsed_boxes, nmsed_scores, nmsed_classes, nmsed_masks,      num_detections) = $0._second_stage_nms_fn("
  ],
  "identifiers": {
   "condition": [
    "detections",
    "_second_stage_nms_fn"
   ],
   "consequent": [
    "_second_stage_nms_fn",
    "nmsed_boxes",
    "nmsed_classes",
    "nmsed_scores",
    "nmsed_masks",
    "num_detections"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/meta_architectures/faster_rcnn_meta_arch.py",
  "condition": [
   "$0=$1)"
  ],
  "consequent": [
   "$0=$1)",
   "\tdetections = {'detection_boxes': nmsed_boxes,",
   "\t'detection_scores': nmsed_scores,",
   "                  'detection_classes': nmsed_classes,",
   "                  'num_detections': tf.to_float(num_detections)}",
   "    if nmsed_masks is not None:",
   "\tdetections['detection_masks'] = nmsed_masks"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "nmsed_boxes",
    "nmsed_classes",
    "nmsed_scores",
    "tf",
    "to_float",
    "nmsed_masks",
    "detections",
    "num_detections"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/meta_architectures/faster_rcnn_meta_arch.py",
  "condition": [
   "def _batch_decode_refined_boxes($0, refined_box_encodings, proposal_boxes):"
  ],
  "consequent": [
   "def _batch_decode_boxes($0, box_encodings, anchor_boxes):"
  ],
  "identifiers": {
   "condition": [
    "_batch_decode_refined_boxes",
    "refined_box_encodings",
    "proposal_boxes"
   ],
   "consequent": [
    "box_encodings",
    "anchor_boxes",
    "_batch_decode_boxes"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/meta_architectures/faster_rcnn_meta_arch.py",
  "condition": [
   "tiled_proposal_boxes = $0.tile("
  ],
  "consequent": [
   "\"\"\"Decodes box encodings with respect to the anchor boxes.",
   "",
   "    Args:",
   "      box_encodings: a 4-D tensor with shape",
   "        [batch_size, num_anchors, num_classes, self._box_coder.code_size]",
   "        representing box encodings.",
   "      anchor_boxes: [batch_size, num_anchors, 4] representing",
   "        decoded bounding boxes.",
   "",
   "    Returns:",
   "      decoded_boxes: a [batch_size, num_anchors, num_classes, 4]",
   "        float tensor representing bounding box predictions",
   "        (for each image in batch, proposal and class).",
   "    \"\"\"",
   "\tcombined_shape = shape_utils.combined_static_and_dynamic_shape(         box_encodings)",
   "    num_classes = combined_shape[2]",
   "    tiled_anchor_boxes = $0.tile("
  ],
  "identifiers": {
   "condition": [
    "tile",
    "tiled_proposal_boxes"
   ],
   "consequent": [
    "shape_utils",
    "combined_shape",
    "combined_static_and_dynamic_shape",
    "tiled_anchor_boxes",
    "box_encodings",
    "num_classes",
    "tile"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/meta_architectures/faster_rcnn_meta_arch.py",
  "condition": [
   "$0.expand_dims(proposal_boxes, 2), [1, 1, self.$1, 1])"
  ],
  "consequent": [
   "$0.expand_dims(anchor_boxes, 2), [1, 1, $1, 1])"
  ],
  "identifiers": {
   "condition": [
    "expand_dims",
    "proposal_boxes",
    "self"
   ],
   "consequent": [
    "expand_dims",
    "anchor_boxes"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/meta_architectures/faster_rcnn_meta_arch.py",
  "condition": [
   "tiled_proposals_boxlist = $0.BoxList("
  ],
  "consequent": [
   "tiled_anchors_boxlist = $0.BoxList("
  ],
  "identifiers": {
   "condition": [
    "tiled_proposals_boxlist",
    "BoxList"
   ],
   "consequent": [
    "tiled_anchors_boxlist",
    "BoxList"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/meta_architectures/faster_rcnn_meta_arch.py",
  "condition": [
   "$0.reshape(tiled_proposal_boxes, [-1, 4]))"
  ],
  "consequent": [
   "$0.reshape(tiled_anchor_boxes, [-1, 4]))"
  ],
  "identifiers": {
   "condition": [
    "reshape",
    "tiled_proposal_boxes"
   ],
   "consequent": [
    "tiled_anchor_boxes",
    "reshape"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/meta_architectures/faster_rcnn_meta_arch.py",
  "condition": [
   "$0.reshape(refined_box_encodings, [-1, $1.$2.$3]),"
  ],
  "consequent": [
   "$0.reshape(box_encodings, [-1, $1.$2.$3]),"
  ],
  "identifiers": {
   "condition": [
    "reshape",
    "refined_box_encodings"
   ],
   "consequent": [
    "box_encodings",
    "reshape"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/meta_architectures/faster_rcnn_meta_arch.py",
  "condition": [
   "tiled_proposals_boxlist)"
  ],
  "consequent": [
   "tiled_anchors_boxlist)"
  ],
  "identifiers": {
   "condition": [
    "tiled_proposals_boxlist"
   ],
   "consequent": [
    "tiled_anchors_boxlist"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/meta_architectures/faster_rcnn_meta_arch.py",
  "condition": [
   "[-1, self.max_num_proposals, self.$0, 4])"
  ],
  "consequent": [
   "tf.stack([combined_shape[0], combined_shape[1],                                 $0, 4]))"
  ],
  "identifiers": {
   "condition": [
    "max_num_proposals",
    "self"
   ],
   "consequent": [
    "tf",
    "stack",
    "combined_shape"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/meta_architectures/faster_rcnn_meta_arch_test_lib.py",
  "condition": [
   "def test_predict_gives_correct_shapes_in_inference_mode_first_stage_only("
  ],
  "consequent": [
   "def test_predict_correct_shapes_in_inference_mode_both_stages("
  ],
  "identifiers": {
   "condition": [
    "test_predict_gives_correct_shapes_in_inference_mode_first_stage_only"
   ],
   "consequent": [
    "test_predict_correct_shapes_in_inference_mode_both_stages"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/meta_architectures/faster_rcnn_meta_arch_test_lib.py",
  "condition": [
   "test_graph = tf.Graph()",
   "\twith test_graph.as_default():",
   "\tmodel = self._build_model(           is_training=False, first_stage_only=True, second_stage_batch_size=2)",
   "      $0 = 2"
  ],
  "consequent": [
   "$0 = 2",
   "\timage_size = 10",
   "    input_shapes = [($0, image_size, image_size, 3),                     (None, image_size, image_size, 3),"
  ],
  "identifiers": {
   "condition": [
    "test_graph",
    "_build_model",
    "as_default",
    "self",
    "is_training",
    "tf",
    "first_stage_only",
    "model",
    "Graph",
    "second_stage_batch_size"
   ],
   "consequent": [
    "input_shapes",
    "image_size"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/meta_architectures/faster_rcnn_meta_arch_test_lib.py",
  "condition": [
   "height = 10",
   "\twidth = 12",
   "      input_image_shape = ($0, height, width, 3) ",
   "      preprocessed_inputs = tf.placeholder(dtype=tf.float32,                                            shape=($0, None, None, 3))"
  ],
  "consequent": [
   "($0, None, None, 3),",
   "\t(None, None, None, 3)]",
   "    expected_num_anchors = image_size * image_size * 3 * 3"
  ],
  "identifiers": {
   "condition": [
    "float32",
    "shape",
    "dtype",
    "preprocessed_inputs",
    "height",
    "tf",
    "input_image_shape",
    "width",
    "placeholder"
   ],
   "consequent": [
    "expected_num_anchors",
    "image_size"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/meta_architectures/faster_rcnn_meta_arch_test_lib.py",
  "condition": [
   "prediction_dict = model.predict(preprocessed_inputs)                                                                                                                                                                                                                                                                                                                  ",
   "\texpected_num_anchors = height * width * 3 * 3",
   "      expected_output_keys = set([           'rpn_box_predictor_features', 'rpn_features_to_crop', 'image_shape',           'rpn_box_encodings', 'rpn_objectness_predictions_with_background',           'anchors'])",
   "      expected_output_shapes = {"
  ],
  "consequent": [
   "expected_shapes = {"
  ],
  "identifiers": {
   "condition": [
    "set",
    "expected_output_shapes",
    "preprocessed_inputs",
    "height",
    "expected_num_anchors",
    "width",
    "model",
    "prediction_dict",
    "predict",
    "expected_output_keys"
   ],
   "consequent": [
    "expected_shapes"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/meta_architectures/faster_rcnn_meta_arch_test_lib.py",
  "condition": [
   "'rpn_box_predictor_features': (batch_size, height, width, 512),"
  ],
  "consequent": [
   "'rpn_box_predictor_features':",
   "\t(2, image_size, image_size, 512),"
  ],
  "identifiers": {
   "condition": [
    "batch_size",
    "width",
    "height"
   ],
   "consequent": [
    "image_size"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/meta_architectures/faster_rcnn_meta_arch_test_lib.py",
  "condition": [
   "'rpn_features_to_crop': (batch_size, height, width, 3),"
  ],
  "consequent": [
   "'rpn_features_to_crop': (2, image_size, image_size, 3),",
   "\t'image_shape': (4,),"
  ],
  "identifiers": {
   "condition": [
    "batch_size",
    "width",
    "height"
   ],
   "consequent": [
    "image_size"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/meta_architectures/faster_rcnn_meta_arch_test_lib.py",
  "condition": [
   "'rpn_box_encodings': (batch_size, $0, 4),"
  ],
  "consequent": [
   "'rpn_box_encodings': (2, $0, 4),"
  ],
  "identifiers": {
   "condition": [
    "batch_size"
   ],
   "consequent": []
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/meta_architectures/faster_rcnn_meta_arch_test_lib.py",
  "condition": [
   "(batch_size, $0, 2),"
  ],
  "consequent": [
   "(2, $0, 2),"
  ],
  "identifiers": {
   "condition": [
    "batch_size"
   ],
   "consequent": []
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/meta_architectures/faster_rcnn_meta_arch_test_lib.py",
  "condition": [
   "with $0.test_session() as $1:"
  ],
  "consequent": [
   "with $0.test_session(graph=test_graph) as $1:"
  ],
  "identifiers": {
   "condition": [
    "test_session"
   ],
   "consequent": [
    "graph",
    "test_session",
    "test_graph"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/meta_architectures/faster_rcnn_meta_arch_test_lib.py",
  "condition": [
   "prediction_out = $0.run(prediction_dict,                                   $1={                                       $2:                                       $3.zeros(input_image_shape)                                   }) ",
   "\t$4.assertEqual(set(prediction_out.keys()), expected_output_keys) ",
   "        $4.assertAllEqual(prediction_out['image_shape'], input_image_shape)",
   "        for output_key, expected_shape in expected_output_shapes.items():",
   "\t$4.assertAllEqual(prediction_out[output_key].$5, expected_shape)"
  ],
  "consequent": [
   "tensor_dict_out = $0.run(result_tensor_dict, $1={             $2:             $3.zeros((batch_size, image_size, image_size, 3))})",
   "\t$4.assertEqual(set(tensor_dict_out.keys()),                        set(expected_shapes.keys()))",
   "      for key in expected_shapes:",
   "\t$4.assertAllEqual(tensor_dict_out[key].$5, expected_shapes[key])"
  ],
  "identifiers": {
   "condition": [
    "prediction_out",
    "output_key",
    "set",
    "expected_shape",
    "expected_output_shapes",
    "assertAllEqual",
    "zeros",
    "keys",
    "input_image_shape",
    "prediction_dict",
    "items",
    "run",
    "assertEqual",
    "expected_output_keys"
   ],
   "consequent": [
    "expected_shapes",
    "image_size",
    "set",
    "batch_size",
    "assertAllEqual",
    "result_tensor_dict",
    "tensor_dict_out",
    "key",
    "zeros",
    "keys",
    "run",
    "assertEqual"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/meta_architectures/faster_rcnn_meta_arch_test_lib.py",
  "condition": [
   "                                           ",
   "\tanchors = prediction_out['anchors']",
   "        self.assertTrue(np.all(np.greater_equal(anchors, 0)))",
   "        self.assertTrue(np.all(np.less_equal(anchors[:, 0], height)))",
   "        self.assertTrue(np.all(np.less_equal(anchors[:, 1], width)))",
   "        self.assertTrue(np.all(np.less_equal(anchors[:, 2], height)))",
   "        self.assertTrue(np.all(np.less_equal(anchors[:, 3], width)))",
   "    model = self._build_model(         is_training=False, first_stage_only=False, second_stage_batch_size=6)"
  ],
  "consequent": [
   "num_proposals_shapes = [(2), (None)]",
   "\trefined_box_encodings_shapes = [(16, 2, 4), (None, 2, 4)]",
   "    class_predictions_with_background_shapes = [(16, 3), (None, 3)]",
   "    proposal_boxes_shapes = [(2, 8, 4), (None, 8, 4)]"
  ],
  "identifiers": {
   "condition": [
    "prediction_out",
    "model",
    "assertTrue",
    "_build_model",
    "height",
    "self",
    "all",
    "greater_equal",
    "is_training",
    "first_stage_only",
    "width",
    "np",
    "less_equal",
    "anchors",
    "second_stage_batch_size"
   ],
   "consequent": [
    "num_proposals_shapes",
    "proposal_boxes_shapes",
    "class_predictions_with_background_shapes",
    "refined_box_encodings_shapes"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/meta_architectures/faster_rcnn_meta_arch_test_lib.py",
  "condition": [
   "$0 = $1 * $2.max_num_proposals"
  ],
  "consequent": [
   "image_shape = np.array((2, 36, 48, 3), dtype=np.int32)",
   "\tfor (num_proposals_shape, refined_box_encoding_shape,          class_predictions_with_background_shape,          proposal_boxes_shape) in zip(num_proposals_shapes,                                       refined_box_encodings_shapes,                                       class_predictions_with_background_shapes,                                       proposal_boxes_shapes):",
   "\ttf_graph = tf.Graph()",
   "      with tf_graph.as_default():",
   "\t$2 = self._build_model(             is_training=False, first_stage_only=False,             second_stage_batch_size=6)",
   "        $0 = $1 * $2.max_num_proposals"
  ],
  "identifiers": {
   "condition": [
    "max_num_proposals"
   ],
   "consequent": [
    "dtype",
    "self",
    "class_predictions_with_background_shapes",
    "max_num_proposals",
    "second_stage_batch_size",
    "class_predictions_with_background_shape",
    "_build_model",
    "as_default",
    "array",
    "tf_graph",
    "Graph",
    "refined_box_encoding_shape",
    "int32",
    "zip",
    "image_shape",
    "proposal_boxes_shapes",
    "num_proposals_shape",
    "tf",
    "refined_box_encodings_shapes",
    "is_training",
    "first_stage_only",
    "np",
    "num_proposals_shapes",
    "proposal_boxes_shape"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/meta_architectures/faster_rcnn_meta_arch_test_lib.py",
  "condition": [
   "$0 = tf.constant("
  ],
  "consequent": [
   "$0 = np.array("
  ],
  "identifiers": {
   "condition": [
    "tf",
    "constant"
   ],
   "consequent": [
    "array",
    "np"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/meta_architectures/faster_rcnn_meta_arch_test_lib.py",
  "condition": [
   "4*[0], 4*[0], 4*[0], 4*[0], 4*[0], 4*[0]]], dtype=tf.float32)"
  ],
  "consequent": [
   "4*[0], 4*[0], 4*[0], 4*[0], 4*[0], 4*[0]]])"
  ],
  "identifiers": {
   "condition": [
    "tf",
    "dtype",
    "float32"
   ],
   "consequent": []
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/meta_architectures/faster_rcnn_meta_arch_test_lib.py",
  "condition": [
   "$0 = tf.constant([3, 2], $1=tf.$2)"
  ],
  "consequent": [
   "$0 = np.array([3, 2], $1=np.$2)"
  ],
  "identifiers": {
   "condition": [
    "tf",
    "constant"
   ],
   "consequent": [
    "array",
    "np"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/meta_architectures/faster_rcnn_meta_arch_test_lib.py",
  "condition": [
   "$0 = tf.zeros("
  ],
  "consequent": [
   "$0 = np.zeros("
  ],
  "identifiers": {
   "condition": [
    "tf",
    "zeros"
   ],
   "consequent": [
    "zeros",
    "np"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/meta_architectures/faster_rcnn_meta_arch_test_lib.py",
  "condition": [
   "[$0, $1.$2, 4], dtype=tf.float32)"
  ],
  "consequent": [
   "[$0, $1.$2, 4])"
  ],
  "identifiers": {
   "condition": [
    "tf",
    "dtype",
    "float32"
   ],
   "consequent": []
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/meta_architectures/faster_rcnn_meta_arch_test_lib.py",
  "condition": [
   "$0 = tf.ones("
  ],
  "consequent": [
   "$0 = np.ones("
  ],
  "identifiers": {
   "condition": [
    "tf",
    "ones"
   ],
   "consequent": [
    "ones",
    "np"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/meta_architectures/faster_rcnn_meta_arch_test_lib.py",
  "condition": [
   "[$0, $1.$2+1], dtype=tf.float32)"
  ],
  "consequent": [
   "[$0, $1.$2+1])"
  ],
  "identifiers": {
   "condition": [
    "tf",
    "dtype",
    "float32"
   ],
   "consequent": []
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/meta_architectures/faster_rcnn_meta_arch_test_lib.py",
  "condition": [
   "image_shape = $0.constant([batch_size, 36, 48, 3], dtype=$0.$1)"
  ],
  "consequent": [
   "num_proposals_placeholder = $0.placeholder($0.$1,                                                    shape=num_proposals_shape)",
   "\trefined_box_encodings_placeholder = $0.placeholder(             $0.float32, shape=refined_box_encoding_shape)",
   "        class_predictions_with_background_placeholder = $0.placeholder(             $0.float32, shape=class_predictions_with_background_shape)",
   "        proposal_boxes_placeholder = $0.placeholder(             $0.float32, shape=proposal_boxes_shape)",
   "        image_shape_placeholder = $0.placeholder($0.$1, shape=(4))"
  ],
  "identifiers": {
   "condition": [
    "batch_size",
    "dtype",
    "constant",
    "image_shape"
   ],
   "consequent": [
    "refined_box_encodings_placeholder",
    "class_predictions_with_background_placeholder",
    "float32",
    "num_proposals_placeholder",
    "class_predictions_with_background_shape",
    "proposal_boxes_placeholder",
    "shape",
    "num_proposals_shape",
    "image_shape_placeholder",
    "proposal_boxes_shape",
    "refined_box_encoding_shape",
    "placeholder"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/meta_architectures/faster_rcnn_meta_arch_test_lib.py",
  "condition": [
   "'refined_box_encodings': refined_box_encodings,"
  ],
  "consequent": [
   "'refined_box_encodings': refined_box_encodings_placeholder,"
  ],
  "identifiers": {
   "condition": [
    "refined_box_encodings"
   ],
   "consequent": [
    "refined_box_encodings_placeholder"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/meta_architectures/faster_rcnn_meta_arch_test_lib.py",
  "condition": [
   "'class_predictions_with_background': class_predictions_with_background,"
  ],
  "consequent": [
   "'class_predictions_with_background':",
   "\tclass_predictions_with_background_placeholder,"
  ],
  "identifiers": {
   "condition": [
    "class_predictions_with_background"
   ],
   "consequent": [
    "class_predictions_with_background_placeholder"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/meta_architectures/faster_rcnn_meta_arch_test_lib.py",
  "condition": [
   "'num_proposals': num_proposals,"
  ],
  "consequent": [
   "'num_proposals': num_proposals_placeholder,"
  ],
  "identifiers": {
   "condition": [
    "num_proposals"
   ],
   "consequent": [
    "num_proposals_placeholder"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/meta_architectures/faster_rcnn_meta_arch_test_lib.py",
  "condition": [
   "'proposal_boxes': proposal_boxes,"
  ],
  "consequent": [
   "'proposal_boxes': proposal_boxes_placeholder,"
  ],
  "identifiers": {
   "condition": [
    "proposal_boxes"
   ],
   "consequent": [
    "proposal_boxes_placeholder"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/meta_architectures/faster_rcnn_meta_arch_test_lib.py",
  "condition": [
   "'image_shape': image_shape"
  ],
  "consequent": [
   "'image_shape': image_shape_placeholder,"
  ],
  "identifiers": {
   "condition": [
    "image_shape"
   ],
   "consequent": [
    "image_shape_placeholder"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/meta_architectures/faster_rcnn_meta_arch_test_lib.py",
  "condition": [
   "with $0.test_session() as $1:"
  ],
  "consequent": [
   "with $0.test_session(graph=tf_graph) as $1:"
  ],
  "identifiers": {
   "condition": [
    "test_session"
   ],
   "consequent": [
    "tf_graph",
    "graph",
    "test_session"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/meta_architectures/faster_rcnn_meta_arch_test_lib.py",
  "condition": [
   "$0 = $1.run($2)"
  ],
  "consequent": [
   "$0 = $1.run(             $2,             feed_dict={                 refined_box_encodings_placeholder: refined_box_encodings,                 class_predictions_with_background_placeholder:                 class_predictions_with_background,                 num_proposals_placeholder: num_proposals,                 proposal_boxes_placeholder: proposal_boxes,                 image_shape_placeholder: image_shape             })"
  ],
  "identifiers": {
   "condition": [
    "run"
   ],
   "consequent": [
    "refined_box_encodings_placeholder",
    "class_predictions_with_background_placeholder",
    "class_predictions_with_background",
    "num_proposals_placeholder",
    "proposal_boxes_placeholder",
    "image_shape",
    "refined_box_encodings",
    "feed_dict",
    "proposal_boxes",
    "num_proposals",
    "image_shape_placeholder",
    "run"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/meta_architectures/ssd_meta_arch.py",
  "condition": [
   "from $0.core import box_coder as bcoder"
  ],
  "consequent": [
   "from $0.utils import shape_utils"
  ],
  "identifiers": {
   "condition": [
    "box_coder",
    "bcoder",
    "core"
   ],
   "consequent": [
    "utils",
    "shape_utils"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/meta_architectures/ssd_meta_arch.py",
  "condition": [
   "$0.get_shape().as_list() for $0 in feature_maps"
  ],
  "consequent": [
   "shape_utils.combined_static_and_dynamic_shape(             $0) for $0 in feature_maps"
  ],
  "identifiers": {
   "condition": [
    "feature_maps",
    "get_shape",
    "as_list"
   ],
   "consequent": [
    "combined_static_and_dynamic_shape",
    "shape_utils",
    "feature_maps"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/meta_architectures/ssd_meta_arch.py",
  "condition": [
   "$0 = bcoder.batch_decode($1, $2._box_coder,"
  ],
  "consequent": [
   "$0 = $2._batch_decode($1)"
  ],
  "identifiers": {
   "condition": [
    "batch_decode",
    "bcoder",
    "_box_coder"
   ],
   "consequent": [
    "_batch_decode"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/meta_architectures/ssd_meta_arch.py",
  "condition": [
   "self.anchors)"
  ],
  "consequent": [
   "(nmsed_boxes, nmsed_scores, nmsed_classes, _,"
  ],
  "identifiers": {
   "condition": [
    "anchors",
    "self"
   ],
   "consequent": [
    "nmsed_boxes",
    "_",
    "nmsed_classes",
    "nmsed_scores"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/meta_architectures/ssd_meta_arch.py",
  "condition": [
   "detections = $0._non_max_suppression_fn($1,"
  ],
  "consequent": [
   "num_detections) = $0._non_max_suppression_fn($1,"
  ],
  "identifiers": {
   "condition": [
    "detections",
    "_non_max_suppression_fn"
   ],
   "consequent": [
    "_non_max_suppression_fn",
    "num_detections"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/meta_architectures/ssd_meta_arch.py",
  "condition": [
   "return detections"
  ],
  "consequent": [
   "return {'detection_boxes': nmsed_boxes,               'detection_scores': nmsed_scores,               'detection_classes': nmsed_classes,               'num_detections': tf.to_float(num_detections)}"
  ],
  "identifiers": {
   "condition": [
    "detections"
   ],
   "consequent": [
    "nmsed_boxes",
    "nmsed_classes",
    "nmsed_scores",
    "tf",
    "to_float",
    "num_detections"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/meta_architectures/ssd_meta_arch.py",
  "condition": [
   "$0 = bcoder.batch_decode($1['box_encodings'],"
  ],
  "consequent": [
   "$0 = self._batch_decode($1['box_encodings'])"
  ],
  "identifiers": {
   "condition": [
    "batch_decode",
    "bcoder"
   ],
   "consequent": [
    "_batch_decode",
    "self"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/meta_architectures/ssd_meta_arch.py",
  "condition": [
   "$0.$1, $0.$2)"
  ],
  "consequent": [
   "def _batch_decode($0, box_encodings):",
   "\t\"\"\"Decodes a batch of box encodings with respect to the anchors.",
   "",
   "    Args:",
   "      box_encodings: A float32 tensor of shape",
   "        [batch_size, num_anchors, box_code_size] containing box encodings.",
   "",
   "    Returns:",
   "      decoded_boxes: A float32 tensor of shape",
   "        [batch_size, num_anchors, 4] containing the decoded boxes.",
   "    \"\"\"",
   "    combined_shape = shape_utils.combined_static_and_dynamic_shape(         box_encodings)",
   "    batch_size = combined_shape[0]",
   "    tiled_anchor_boxes = tf.tile(         tf.expand_dims($0.$2.get(), 0), [batch_size, 1, 1])",
   "    tiled_anchors_boxlist = box_list.BoxList(         tf.reshape(tiled_anchor_boxes, [-1, $0.$1.code_size]))",
   "    decoded_boxes = $0.$1.decode(         tf.reshape(box_encodings, [-1, $0.$1.code_size]),         tiled_anchors_boxlist)",
   "    return tf.reshape(decoded_boxes.get(),                       tf.stack([combined_shape[0], combined_shape[1],                                 4]))"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "shape_utils",
    "_batch_decode",
    "BoxList",
    "stack",
    "combined_static_and_dynamic_shape",
    "batch_size",
    "box_encodings",
    "expand_dims",
    "box_list",
    "tile",
    "tiled_anchors_boxlist",
    "get",
    "tiled_anchor_boxes",
    "tf",
    "combined_shape",
    "code_size",
    "decoded_boxes",
    "decode",
    "reshape"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/meta_architectures/ssd_meta_arch_test.py",
  "condition": [
   "preprocessed_input = $0.random_uniform(($1, 2, 2, 3),                                            dtype=$0.$2)",
   "\tprediction_dict = $3.$4.predict(preprocessed_input) ",
   "    $3.assertTrue('box_encodings' in prediction_dict)",
   "    $3.assertTrue('class_predictions_with_background' in prediction_dict)",
   "    $3.assertTrue('feature_maps' in prediction_dict)"
  ],
  "consequent": [
   "def test_preprocess_preserves_input_shapes($3):",
   "\timage_shapes = [(3, None, None, 3),                     (None, 10, 10, 3),                     (None, None, None, 3)]",
   "    for image_shape in image_shapes:",
   "\timage_placeholder = $0.placeholder($0.$2, shape=image_shape)",
   "      preprocessed_inputs = $3.$4.preprocess(image_placeholder)",
   "      $3.assertAllEqual(preprocessed_inputs.shape.as_list(), image_shape) ",
   "    image_size = 2",
   "    input_shapes = [($1, image_size, image_size, 3),                     (None, image_size, image_size, 3),                     ($1, None, None, 3),                     (None, None, None, 3)]"
  ],
  "identifiers": {
   "condition": [
    "assertTrue",
    "dtype",
    "preprocessed_input",
    "prediction_dict",
    "predict",
    "random_uniform"
   ],
   "consequent": [
    "image_size",
    "as_list",
    "image_shape",
    "image_placeholder",
    "shape",
    "preprocessed_inputs",
    "assertAllEqual",
    "test_preprocess_preserves_input_shapes",
    "input_shapes",
    "preprocess",
    "image_shapes",
    "placeholder"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/meta_architectures/ssd_meta_arch_test.py",
  "condition": [
   "$0 = $1.global_variables_initializer()"
  ],
  "consequent": [
   "for input_shape in input_shapes:",
   "\ttf_graph = $1.Graph()",
   "      with tf_graph.as_default():",
   "\tpreprocessed_input_placeholder = $1.placeholder($1.float32,                                                         shape=input_shape)",
   "        prediction_dict = self._model.predict(preprocessed_input_placeholder) ",
   "        self.assertTrue('box_encodings' in prediction_dict)",
   "        self.assertTrue('class_predictions_with_background' in prediction_dict)",
   "        self.assertTrue('feature_maps' in prediction_dict) ",
   "        $0 = $1.global_variables_initializer()"
  ],
  "identifiers": {
   "condition": [
    "global_variables_initializer"
   ],
   "consequent": [
    "float32",
    "predict",
    "assertTrue",
    "preprocessed_input_placeholder",
    "input_shape",
    "shape",
    "_model",
    "as_default",
    "self",
    "input_shapes",
    "global_variables_initializer",
    "prediction_dict",
    "tf_graph",
    "Graph",
    "placeholder"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/meta_architectures/ssd_meta_arch_test.py",
  "condition": [
   "with $0.test_session() as $1:"
  ],
  "consequent": [
   "with $0.test_session(graph=tf_graph) as $1:"
  ],
  "identifiers": {
   "condition": [
    "test_session"
   ],
   "consequent": [
    "tf_graph",
    "graph",
    "test_session"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/meta_architectures/ssd_meta_arch_test.py",
  "condition": [
   "$0 = $1.run($2)"
  ],
  "consequent": [
   "$0 = $1.run($2,                                   feed_dict={                                       preprocessed_input_placeholder:                                       np.random.uniform(                                           size=(batch_size, 2, 2, 3))})"
  ],
  "identifiers": {
   "condition": [
    "run"
   ],
   "consequent": [
    "preprocessed_input_placeholder",
    "random",
    "batch_size",
    "feed_dict",
    "size",
    "np",
    "run",
    "uniform"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/meta_architectures/ssd_meta_arch_test.py",
  "condition": [
   "preprocessed_input = tf.random_uniform(($0, 2, 2, 3),                                            dtype=tf.float32)",
   "\tprediction_dict = self._model.predict(preprocessed_input)",
   "    detections = self._model.postprocess(prediction_dict)"
  ],
  "consequent": [
   "image_size = 2",
   "\tinput_shapes = [($0, image_size, image_size, 3),                     (None, image_size, image_size, 3),                     ($0, None, None, 3),                     (None, None, None, 3)]"
  ],
  "identifiers": {
   "condition": [
    "dtype",
    "_model",
    "preprocessed_input",
    "self",
    "tf",
    "detections",
    "postprocess",
    "prediction_dict",
    "predict",
    "random_uniform",
    "float32"
   ],
   "consequent": [
    "input_shapes",
    "image_size"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/meta_architectures/ssd_meta_arch_test.py",
  "condition": [
   "$0.assertTrue('detection_boxes' in $1)"
  ],
  "consequent": [
   "for input_shape in input_shapes:",
   "\ttf_graph = tf.Graph()",
   "      with tf_graph.as_default():",
   "\tpreprocessed_input_placeholder = tf.placeholder(tf.float32,                                                         shape=input_shape)",
   "        prediction_dict = $0._model.predict(preprocessed_input_placeholder)",
   "        $1 = $0._model.postprocess(prediction_dict)",
   "        $0.assertTrue('detection_boxes' in $1)"
  ],
  "identifiers": {
   "condition": [
    "assertTrue"
   ],
   "consequent": [
    "float32",
    "predict",
    "assertTrue",
    "preprocessed_input_placeholder",
    "input_shape",
    "shape",
    "_model",
    "as_default",
    "input_shapes",
    "tf",
    "postprocess",
    "prediction_dict",
    "tf_graph",
    "Graph",
    "placeholder"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/meta_architectures/ssd_meta_arch_test.py",
  "condition": [
   "with $0.test_session() as $1:"
  ],
  "consequent": [
   "with $0.test_session(graph=tf_graph) as $1:"
  ],
  "identifiers": {
   "condition": [
    "test_session"
   ],
   "consequent": [
    "tf_graph",
    "graph",
    "test_session"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/meta_architectures/ssd_meta_arch_test.py",
  "condition": [
   "$0 = $1.run($2)"
  ],
  "consequent": [
   "$0 = $1.run($2,                                   feed_dict={                                       preprocessed_input_placeholder:                                       np.random.uniform(                                           size=(batch_size, 2, 2, 3))})"
  ],
  "identifiers": {
   "condition": [
    "run"
   ],
   "consequent": [
    "preprocessed_input_placeholder",
    "random",
    "batch_size",
    "feed_dict",
    "size",
    "np",
    "run",
    "uniform"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/models/faster_rcnn_inception_resnet_v2_feature_extractor.py",
  "condition": [
   "TODO(jonathanhuang,rathodv): $0 $1 $2'$3 $4 $5 $6 the"
  ],
  "consequent": [
   "TODO: $0 $1 $2'$3 $4 $5 $6 the"
  ],
  "identifiers": {
   "condition": [
    "rathodv",
    "TODO",
    "the",
    "jonathanhuang"
   ],
   "consequent": [
    "TODO",
    "the"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/trainer.py",
  "condition": [
   "var_map = $0.get_variables_available_in_checkpoint("
  ],
  "consequent": [
   "available_var_map = ($0.                            get_variables_available_in_checkpoint("
  ],
  "identifiers": {
   "condition": [
    "get_variables_available_in_checkpoint",
    "var_map"
   ],
   "consequent": [
    "available_var_map",
    "get_variables_available_in_checkpoint"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/trainer.py",
  "condition": [
   "saver = $0.$1.Saver(var_map)"
  ],
  "consequent": [
   "init_saver = $0.$1.Saver(available_var_map)"
  ],
  "identifiers": {
   "condition": [
    "Saver",
    "var_map",
    "saver"
   ],
   "consequent": [
    "Saver",
    "init_saver",
    "available_var_map"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/trainer.py",
  "condition": [
   "saver.restore($0, $1.$2)"
  ],
  "consequent": [
   "init_saver.restore($0, $1.$2)"
  ],
  "identifiers": {
   "condition": [
    "restore",
    "saver"
   ],
   "consequent": [
    "init_saver",
    "restore"
   ]
  }
 },
 {
  "number": 2053,
  "sha": "a2cb67c2cd063d2d79edadc6e34c420725b6e9ca",
  "author": "derekjchow",
  "participant": "jlertle",
  "created_at": "2017-07-27 22:07:21",
  "merged_at": "2017-07-28 06:13:34",
  "merged_by": "derekjchow",
  "file_path": "object_detection/utils/test_utils.py",
  "condition": [
   "$0 = $1.get_shape().as_list()[0]",
   "\t$2 = ($1.get_shape().as_list()[1]                    * $1.get_shape().as_list()[2])"
  ],
  "consequent": [
   "from object_detection.utils import shape_utils",
   "\tcombined_feature_shape = shape_utils.combined_static_and_dynamic_shape(         $1)",
   "    $0 = combined_feature_shape[0]",
   "    $2 = (combined_feature_shape[1] * combined_feature_shape[2])"
  ],
  "identifiers": {
   "condition": [
    "get_shape",
    "as_list"
   ],
   "consequent": [
    "combined_feature_shape",
    "object_detection",
    "shape_utils",
    "combined_static_and_dynamic_shape",
    "utils"
   ]
  }
 },
 {
  "number": 2080,
  "sha": "6fe50699409f13834a9fd0a408dafccff0fd18e9",
  "author": "mari-linhares",
  "participant": "tfboyd",
  "created_at": "2017-08-01 00:05:48",
  "merged_at": "2017-08-02 21:33:29",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/cifar10.py",
  "condition": [
   "if $0.$1 == 'train':",
   "\treturn [           $2.$3.join($0.$4, 'data_batch_%d.tfrecords' % i)           for i in xrange(1, 5)       ]",
   "    elif $0.$1 == 'validation':",
   "\treturn [$2.$3.join($0.$4, 'data_batch_5.tfrecords')]",
   "    elif $0.$1 == 'eval':",
   "\treturn [$2.$3.join($0.$4, 'test_batch.tfrecords')]"
  ],
  "consequent": [
   "if $0.$1 in ['train', 'validation', 'eval']:",
   "\treturn [$2.$3.join($0.$4, $0.$1 + '.tfrecords')]"
  ],
  "identifiers": {
   "condition": [
    "i",
    "join",
    "xrange"
   ],
   "consequent": [
    "join"
   ]
  }
 },
 {
  "number": 2080,
  "sha": "6fe50699409f13834a9fd0a408dafccff0fd18e9",
  "author": "mari-linhares",
  "participant": "tfboyd",
  "created_at": "2017-08-01 00:05:48",
  "merged_at": "2017-08-02 21:33:29",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/cifar10.py",
  "condition": [
   "$0 = $1.transpose($1.reshape($0, [$2, $3, $4]), [1, 2, 0])"
  ],
  "consequent": [
   "$0 = $1.cast(         $1.transpose($1.reshape($0, [$2, $3, $4]), [1, 2, 0]),         $1.float32)"
  ],
  "identifiers": {
   "condition": [
    "reshape",
    "transpose"
   ],
   "consequent": [
    "cast",
    "transpose",
    "float32",
    "reshape"
   ]
  }
 },
 {
  "number": 2080,
  "sha": "6fe50699409f13834a9fd0a408dafccff0fd18e9",
  "author": "mari-linhares",
  "participant": "tfboyd",
  "created_at": "2017-08-01 00:05:48",
  "merged_at": "2017-08-02 21:33:29",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/generate_cifar10_tfrecords.py",
  "condition": [
   "\"\"\"Returns the file names expected to exist in the input_dir.\"\"\""
  ],
  "consequent": [
   "\"\"\"Returns the file names expected to exist for training, validation",
   "  and evaluation in the input_dir.\"\"\"",
   "\tfile_names = {}"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "file_names"
   ]
  }
 },
 {
  "number": 2080,
  "sha": "6fe50699409f13834a9fd0a408dafccff0fd18e9",
  "author": "mari-linhares",
  "participant": "tfboyd",
  "created_at": "2017-08-01 00:05:48",
  "merged_at": "2017-08-02 21:33:29",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/generate_cifar10_tfrecords.py",
  "condition": [
   "$0.append('test_batch')"
  ],
  "consequent": [
   "$0['validation'] = ['data_batch_5']",
   "\t$0['eval'] = ['test_batch']"
  ],
  "identifiers": {
   "condition": [
    "append"
   ],
   "consequent": []
  }
 },
 {
  "number": 2080,
  "sha": "6fe50699409f13834a9fd0a408dafccff0fd18e9",
  "author": "mari-linhares",
  "participant": "tfboyd",
  "created_at": "2017-08-01 00:05:48",
  "merged_at": "2017-08-02 21:33:29",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/generate_cifar10_tfrecords.py",
  "condition": [
   "def convert_to_tfrecord(input_file, name):"
  ],
  "consequent": [
   "def convert_to_tfrecord(input_files, output_file):"
  ],
  "identifiers": {
   "condition": [
    "convert_to_tfrecord",
    "name",
    "input_file"
   ],
   "consequent": [
    "convert_to_tfrecord",
    "output_file",
    "input_files"
   ]
  }
 },
 {
  "number": 2080,
  "sha": "6fe50699409f13834a9fd0a408dafccff0fd18e9",
  "author": "mari-linhares",
  "participant": "tfboyd",
  "created_at": "2017-08-01 00:05:48",
  "merged_at": "2017-08-02 21:33:29",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/generate_cifar10_tfrecords.py",
  "condition": [
   "$0 = read_pickle_from_file($1)"
  ],
  "consequent": [
   "for $1 in input_files:",
   "\t$0 = read_pickle_from_file($1)"
  ],
  "identifiers": {
   "condition": [
    "read_pickle_from_file"
   ],
   "consequent": [
    "read_pickle_from_file",
    "input_files"
   ]
  }
 },
 {
  "number": 2080,
  "sha": "6fe50699409f13834a9fd0a408dafccff0fd18e9",
  "author": "mari-linhares",
  "participant": "tfboyd",
  "created_at": "2017-08-01 00:05:48",
  "merged_at": "2017-08-02 21:33:29",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/generate_cifar10_tfrecords.py",
  "condition": [
   "for file_name in $0:",
   "\tinput_file = $1.$2.join($3.$4, file_name)"
  ],
  "consequent": [
   "for mode, files in $0.items():",
   "\tinput_files = [         $1.$2.join($3.$4, f) for f in files]"
  ],
  "identifiers": {
   "condition": [
    "join",
    "file_name",
    "input_file"
   ],
   "consequent": [
    "mode",
    "join",
    "f",
    "files",
    "items",
    "input_files"
   ]
  }
 },
 {
  "number": 2080,
  "sha": "6fe50699409f13834a9fd0a408dafccff0fd18e9",
  "author": "mari-linhares",
  "participant": "tfboyd",
  "created_at": "2017-08-01 00:05:48",
  "merged_at": "2017-08-02 21:33:29",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/generate_cifar10_tfrecords.py",
  "condition": [
   "$0 = $1.$2.join($3.$4, file_name + '.tfrecords')"
  ],
  "consequent": [
   "$0 = $1.$2.join($3.$4, mode + '.tfrecords')"
  ],
  "identifiers": {
   "condition": [
    "join",
    "file_name"
   ],
   "consequent": [
    "mode",
    "join"
   ]
  }
 },
 {
  "number": 2080,
  "sha": "6fe50699409f13834a9fd0a408dafccff0fd18e9",
  "author": "mari-linhares",
  "participant": "tfboyd",
  "created_at": "2017-08-01 00:05:48",
  "merged_at": "2017-08-02 21:33:29",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/generate_cifar10_tfrecords.py",
  "condition": [
   "convert_to_tfrecord(input_file, $0)"
  ],
  "consequent": [
   "convert_to_tfrecord(input_files, $0)"
  ],
  "identifiers": {
   "condition": [
    "convert_to_tfrecord",
    "input_file"
   ],
   "consequent": [
    "convert_to_tfrecord",
    "input_files"
   ]
  }
 },
 {
  "number": 2090,
  "sha": "99cb3f707710e572ab48e107eb03b7bf5b8ae239",
  "author": "mari-linhares",
  "participant": "tfboyd",
  "created_at": "2017-08-02 00:27:05",
  "merged_at": "2017-08-02 23:33:54",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/cifar10_main.py",
  "condition": [
   "'If True will run an experiment,'"
  ],
  "consequent": [
   "tf.flags.DEFINE_float('learning_rate', 0.1,                       \"\"\"This is the inital learning rate value.",
   "                      The learning rate will decrease during training.",
   "                      For more details check the model_fn implementation",
   "                      in this file.",
   "                      \"\"\".) ",
   "\t\"\"\"If True will run an experiment,"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "If",
    "experiment",
    "will",
    "run",
    "DEFINE_float",
    "tf",
    "an",
    "flags"
   ]
  }
 },
 {
  "number": 2090,
  "sha": "99cb3f707710e572ab48e107eb03b7bf5b8ae239",
  "author": "mari-linhares",
  "participant": "tfboyd",
  "created_at": "2017-08-02 00:27:05",
  "merged_at": "2017-08-02 23:33:54",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/cifar10_main.py",
  "condition": [
   "'otherwise will run training and evaluation'"
  ],
  "consequent": [
   "otherwise will run training and evaluation"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "training",
    "will",
    "otherwise",
    "evaluation",
    "run"
   ]
  }
 },
 {
  "number": 2090,
  "sha": "99cb3f707710e572ab48e107eb03b7bf5b8ae239",
  "author": "mari-linhares",
  "participant": "tfboyd",
  "created_at": "2017-08-02 00:27:05",
  "merged_at": "2017-08-02 23:33:54",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/cifar10_main.py",
  "condition": [
   "'using the estimator interface.'"
  ],
  "consequent": [
   "using the estimator interface."
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "using",
    "estimator",
    "interface",
    "the"
   ]
  }
 },
 {
  "number": 2090,
  "sha": "99cb3f707710e572ab48e107eb03b7bf5b8ae239",
  "author": "mari-linhares",
  "participant": "tfboyd",
  "created_at": "2017-08-02 00:27:05",
  "merged_at": "2017-08-02 23:33:54",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/cifar10_main.py",
  "condition": [
   "'Experiments perform training on several workers in'"
  ],
  "consequent": [
   "Experiments perform training on several workers in"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "training",
    "perform",
    "Experiments",
    "on",
    "workers",
    "several"
   ]
  }
 },
 {
  "number": 2090,
  "sha": "99cb3f707710e572ab48e107eb03b7bf5b8ae239",
  "author": "mari-linhares",
  "participant": "tfboyd",
  "created_at": "2017-08-02 00:27:05",
  "merged_at": "2017-08-02 23:33:54",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/cifar10_main.py",
  "condition": [
   "'parallel, in other words experiments know how to'"
  ],
  "consequent": [
   "parallel, in other words experiments know how to"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "know",
    "parallel",
    "other",
    "how",
    "words",
    "to",
    "experiments"
   ]
  }
 },
 {
  "number": 2090,
  "sha": "99cb3f707710e572ab48e107eb03b7bf5b8ae239",
  "author": "mari-linhares",
  "participant": "tfboyd",
  "created_at": "2017-08-02 00:27:05",
  "merged_at": "2017-08-02 23:33:54",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/cifar10_main.py",
  "condition": [
   "' invoke train and eval in a sensible fashion for'"
  ],
  "consequent": [
   "invoke train and eval in a sensible fashion for"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "train",
    "sensible",
    "invoke",
    "eval",
    "a",
    "fashion"
   ]
  }
 },
 {
  "number": 2090,
  "sha": "99cb3f707710e572ab48e107eb03b7bf5b8ae239",
  "author": "mari-linhares",
  "participant": "tfboyd",
  "created_at": "2017-08-02 00:27:05",
  "merged_at": "2017-08-02 23:33:54",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/cifar10_main.py",
  "condition": [
   "' distributed training.')"
  ],
  "consequent": [
   "distributed training.",
   "\t\"\"\")"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "distributed",
    "training"
   ]
  }
 },
 {
  "number": 2090,
  "sha": "99cb3f707710e572ab48e107eb03b7bf5b8ae239",
  "author": "mari-linhares",
  "participant": "tfboyd",
  "created_at": "2017-08-02 00:27:05",
  "merged_at": "2017-08-02 23:33:54",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/cifar10_main.py",
  "condition": [
   "'If true when running in a distributed environment'"
  ],
  "consequent": [
   "\"\"\"If true when running in a distributed environment"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "If",
    "distributed",
    "running",
    "environment",
    "a",
    "true",
    "when"
   ]
  }
 },
 {
  "number": 2090,
  "sha": "99cb3f707710e572ab48e107eb03b7bf5b8ae239",
  "author": "mari-linhares",
  "participant": "tfboyd",
  "created_at": "2017-08-02 00:27:05",
  "merged_at": "2017-08-02 23:33:54",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/cifar10_main.py",
  "condition": [
   "'will run on sync mode')"
  ],
  "consequent": [
   "will run on sync mode.",
   "\t\"\"\")"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "will",
    "mode",
    "sync",
    "on",
    "run"
   ]
  }
 },
 {
  "number": 2090,
  "sha": "99cb3f707710e572ab48e107eb03b7bf5b8ae239",
  "author": "mari-linhares",
  "participant": "tfboyd",
  "created_at": "2017-08-02 00:27:05",
  "merged_at": "2017-08-02 23:33:54",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/cifar10_main.py",
  "condition": [
   "2. Paramters $0 $1 $2 $3 $4 $5, and $6 $7 GPU"
  ],
  "consequent": [
   "2. Parameters $0 $1 $2 $3 $4 $5, and $6 $7 GPU"
  ],
  "identifiers": {
   "condition": [
    "GPU",
    "Paramters"
   ],
   "consequent": [
    "GPU",
    "Parameters"
   ]
  }
 },
 {
  "number": 2090,
  "sha": "99cb3f707710e572ab48e107eb03b7bf5b8ae239",
  "author": "mari-linhares",
  "participant": "tfboyd",
  "created_at": "2017-08-02 00:27:05",
  "merged_at": "2017-08-02 23:33:54",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/cifar10_main.py",
  "condition": [
   "$0 = [0.1, 0.01, 0.001, 0.0002]"
  ],
  "consequent": [
   "$0 = [FLAGS.learning_rate * x          for x in [1, 0.1, 0.01, 0.002]]"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "learning_rate",
    "FLAGS",
    "x"
   ]
  }
 },
 {
  "number": 2101,
  "sha": "011225440ebef150187caf196e0b57747242278c",
  "author": "mari-linhares",
  "participant": "nealwu",
  "created_at": "2017-08-03 00:19:44",
  "merged_at": "2017-08-03 01:00:45",
  "merged_by": "nealwu",
  "file_path": "tutorials/image/cifar10_estimator/generate_cifar10_tfrecords.py",
  "condition": [
   "\"\"\"Returns the file names expected to exist for training, validation"
  ],
  "consequent": [
   "\"\"\"Returns the file names expected to exist in the input_dir.\"\"\""
  ],
  "identifiers": {
   "condition": [
    "exist",
    "training",
    "names",
    "file",
    "validation",
    "Returns",
    "to",
    "the",
    "expected"
   ],
   "consequent": []
  }
 },
 {
  "number": 2101,
  "sha": "011225440ebef150187caf196e0b57747242278c",
  "author": "mari-linhares",
  "participant": "nealwu",
  "created_at": "2017-08-03 00:19:44",
  "merged_at": "2017-08-03 01:00:45",
  "merged_by": "nealwu",
  "file_path": "tutorials/image/cifar10_estimator/generate_cifar10_tfrecords.py",
  "condition": [
   "and evaluation in the input_dir.\"\"\"",
   "def main(argv):",
   "\tdel argv          "
  ],
  "consequent": [
   "def main(unused_argv):"
  ],
  "identifiers": {
   "condition": [
    "input_dir",
    "argv",
    "main",
    "evaluation",
    "the"
   ],
   "consequent": [
    "main",
    "unused_argv"
   ]
  }
 },
 {
  "number": 2131,
  "sha": "8c019479b66fba189aadabbbf33605a286b95b9d",
  "author": "mari-linhares",
  "participant": "googlebot",
  "created_at": "2017-08-04 13:50:43",
  "merged_at": "2017-08-04 15:02:18",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/cifar10_main.py",
  "condition": [
   "'Number of threads to use for inter-op"
  ],
  "consequent": [
   "'Number of threads to use for inter-op'"
  ],
  "identifiers": {
   "condition": [
    "of",
    "use",
    "to",
    "inter",
    "op",
    "Number",
    "threads"
   ],
   "consequent": []
  }
 },
 {
  "number": 2131,
  "sha": "8c019479b66fba189aadabbbf33605a286b95b9d",
  "author": "mari-linhares",
  "participant": "googlebot",
  "created_at": "2017-08-04 13:50:43",
  "merged_at": "2017-08-04 15:02:18",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/cifar10_main.py",
  "condition": [
   "' parallelism. If set to 0, the system will pick"
  ],
  "consequent": [
   "' parallelism. If set to 0, the system will pick'"
  ],
  "identifiers": {
   "condition": [
    "If",
    "set",
    "system",
    "will",
    "parallelism",
    "pick",
    "to",
    "the"
   ],
   "consequent": []
  }
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "merged_at": "2017-08-24 17:05:08",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/cifar10_main.py",
  "condition": [
   "from __future__ import absolute_import"
  ],
  "consequent": [
   "import argparse"
  ],
  "identifiers": {
   "condition": [
    "__future__",
    "absolute_import"
   ],
   "consequent": [
    "argparse"
   ]
  }
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "merged_at": "2017-08-24 17:05:08",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/cifar10_main.py",
  "condition": [
   "import operator"
  ],
  "consequent": [
   "import itertools"
  ],
  "identifiers": {
   "condition": [
    "operator"
   ],
   "consequent": [
    "itertools"
   ]
  }
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "merged_at": "2017-08-24 17:05:08",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/cifar10_main.py",
  "condition": [
   "import cifar10",
   "import cifar10_model"
  ],
  "consequent": [
   "import six"
  ],
  "identifiers": {
   "condition": [
    "cifar10",
    "cifar10_model"
   ],
   "consequent": [
    "six"
   ]
  }
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "merged_at": "2017-08-24 17:05:08",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/cifar10_main.py",
  "condition": [
   "from tensorflow.python.platform import tf_logging as logging",
   "from tensorflow.python.training import basic_session_run_hooks",
   "from tensorflow.python.training import session_run_hook",
   "from tensorflow.python.training import training_util"
  ],
  "consequent": [
   "import cifar10",
   "import cifar10_model",
   "import cifar10_utils"
  ],
  "identifiers": {
   "condition": [
    "training",
    "python",
    "training_util",
    "tf_logging",
    "session_run_hook",
    "tensorflow",
    "logging",
    "basic_session_run_hooks",
    "platform"
   ],
   "consequent": [
    "cifar10_utils",
    "cifar10",
    "cifar10_model"
   ]
  }
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "merged_at": "2017-08-24 17:05:08",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/cifar10_main.py",
  "condition": [
   "FLAGS = tf.flags.FLAGS",
   "tf.flags.DEFINE_string('data_dir', '',                        'The directory where the CIFAR-10 input data is stored.')"
  ],
  "consequent": [
   "def get_model_fn(num_gpus, variable_strategy, num_workers, sync):",
   "\tdef _resnet_model_fn(features, labels, mode, params):",
   "\t\"\"\"Resnet model body."
  ],
  "identifiers": {
   "condition": [
    "tf",
    "FLAGS",
    "flags",
    "DEFINE_string"
   ],
   "consequent": [
    "mode",
    "params",
    "body",
    "Resnet",
    "variable_strategy",
    "get_model_fn",
    "num_gpus",
    "_resnet_model_fn",
    "sync",
    "features",
    "model",
    "num_workers",
    "labels"
   ]
  }
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "merged_at": "2017-08-24 17:05:08",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/cifar10_main.py",
  "condition": [
   "tf.flags.DEFINE_string('model_dir', '',                        'The directory where the model will be stored.')"
  ],
  "consequent": [
   "Support single host, one or more GPU training. Parameter distribution can",
   "\tbe either one of the following scheme.",
   "    1. CPU is the parameter server and manages gradient updates.",
   "    2. Parameters are distributed evenly across all GPUs, and the first GPU",
   "\tmanages gradient updates."
  ],
  "identifiers": {
   "condition": [
    "tf",
    "flags",
    "DEFINE_string"
   ],
   "consequent": [
    "training",
    "CPU",
    "first",
    "single",
    "parameter",
    "server",
    "either",
    "GPUs",
    "GPU",
    "Support",
    "of",
    "manages",
    "Parameter",
    "host",
    "updates",
    "are",
    "Parameters",
    "evenly",
    "across",
    "be",
    "distributed",
    "gradient",
    "all",
    "can",
    "more",
    "scheme",
    "distribution",
    "following",
    "one",
    "the"
   ]
  }
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "merged_at": "2017-08-24 17:05:08",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/cifar10_main.py",
  "condition": [
   "tf.flags.DEFINE_boolean('is_cpu_ps', True,                         'If using CPU as the parameter server.') ",
   "tf.flags.DEFINE_integer('num_gpus', 1,                         'The number of gpus used. Uses only CPU if set to 0.') ",
   "tf.flags.DEFINE_integer('num_layers', 44, 'The number of layers of the model.') ",
   "tf.flags.DEFINE_integer('train_steps', 80000,                         'The number of steps to use for training.') ",
   "tf.flags.DEFINE_integer('train_batch_size', 128, 'Batch size for training.') ",
   "tf.flags.DEFINE_integer('eval_batch_size', 100, 'Batch size for validation.') ",
   "tf.flags.DEFINE_float('momentum', 0.9, 'Momentum for MomentumOptimizer.') ",
   "tf.flags.DEFINE_float('weight_decay', 2e-4, 'Weight decay for convolutions.') ",
   "tf.flags.DEFINE_float('learning_rate', 0.1,                       'This is the inital learning rate value.'                       ' The learning rate will decrease during training.'                       ' For more details check the model_fn implementation'                       ' in this file.') ",
   "tf.flags.DEFINE_boolean('use_distortion_for_training', True,                         'If doing image distortion for training.') ",
   "tf.flags.DEFINE_boolean('run_experiment', False,                         'If True will run an experiment,'                         ' otherwise will run training and evaluation'                         ' using the estimator interface.'                         ' Experiments perform training on several workers in'                         ' parallel, in other words experiments know how to'                         ' invoke train and eval in a sensible fashion for'                         ' distributed training.') ",
   "tf.flags.DEFINE_boolean('sync', False,                         'If true when running in a distributed environment'                         ' will run on sync mode.') ",
   "tf.flags.DEFINE_integer('num_workers', 1, 'Number of workers.')              ",
   "tf.flags.DEFINE_integer('num_intra_threads', 1,                         'Number of threads to use for intra-op parallelism.'                         ' If set to 0, the system will pick an appropriate number.'                         ' The default is 1 since in this example CPU only handles'                         ' the input pipeline and gradient aggregation (when'                         ' --is_cpu_ps). Ops that could potentially benefit'                         ' from intra-op parallelism are scheduled to run on GPUs.') ",
   "tf.flags.DEFINE_integer('num_inter_threads', 0,                         'Number of threads to use for inter-op'                         ' parallelism. If set to 0, the system will pick'                         ' an appropriate number.') ",
   "tf.flags.DEFINE_boolean('force_gpu_compatible', False,                         'Whether to enable force_gpu_compatible in'                         ' GPU_Options. Check'                         ' tensorflow/core/protobuf/config.proto#L69'                         ' for details.')                   ",
   "tf.flags.DEFINE_boolean('log_device_placement', False,                         'Whether to log device placement.')  ",
   "class ExamplesPerSecondHook(session_run_hook.SessionRunHook):",
   "\t\"\"\"Hook to print out examples per second.",
   "",
   "    Total time is tracked and then divided by the total number of steps",
   "    to get the average step time and then batch_size is used to determine",
   "    the running average of examples per second. The examples per second for the",
   "    most recent interval is also logged.",
   "  \"\"\" ",
   "  def __init__(       self,       batch_size,       every_n_steps=100,       every_n_secs=None,):",
   "\t\"\"\"Initializer for ExamplesPerSecondHook. ",
   "\t$0:"
  ],
  "consequent": [
   "$0:"
  ],
  "identifiers": {
   "condition": [
    "every_n_steps",
    "batch_size",
    "session_run_hook",
    "DEFINE_float",
    "__init__",
    "tf",
    "self",
    "DEFINE_integer",
    "every_n_secs",
    "ExamplesPerSecondHook",
    "SessionRunHook",
    "Initializer",
    "flags",
    "DEFINE_boolean"
   ],
   "consequent": []
  }
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "merged_at": "2017-08-24 17:05:08",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/cifar10_main.py",
  "condition": [
   "batch_size: Total batch size used to calculate examples/second from",
   "\tglobal time.",
   "      every_n_steps: Log stats every n steps.",
   "      every_n_secs: Log stats every n seconds."
  ],
  "consequent": [
   "features: a list of tensors, one for each tower",
   "\tlabels: a list of tensors, one for each tower",
   "      mode: ModeKeys.TRAIN or EVAL",
   "      params: Hyperparameters suitable for tuning",
   "    Returns:",
   "\tA EstimatorSpec object."
  ],
  "identifiers": {
   "condition": [
    "every_n_steps",
    "stats",
    "every",
    "calculate",
    "Log",
    "used",
    "batch_size",
    "steps",
    "seconds",
    "time",
    "to",
    "n",
    "every_n_secs",
    "Total",
    "second",
    "batch",
    "size",
    "examples"
   ],
   "consequent": [
    "tower",
    "EstimatorSpec",
    "tensors",
    "mode",
    "list",
    "features",
    "A",
    "of",
    "each",
    "a",
    "tuning",
    "TRAIN",
    "EVAL",
    "params",
    "suitable",
    "Returns",
    "labels",
    "object",
    "ModeKeys",
    "Hyperparameters",
    "one"
   ]
  }
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "merged_at": "2017-08-24 17:05:08",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/cifar10_main.py",
  "condition": [
   "if (every_n_steps is None) == (every_n_secs is None):",
   "\traise ValueError('exactly one of every_n_steps'                        ' and every_n_secs should be provided.')",
   "    self._timer = basic_session_run_hooks.SecondOrStepTimer(         every_steps=every_n_steps, every_secs=every_n_secs) ",
   "\tself._step_train_time = 0",
   "    self._total_steps = 0",
   "    self._batch_size = batch_size ",
   "  def begin(self):",
   "\tself._global_step_tensor = training_util.get_global_step()",
   "    if self._global_step_tensor is None:",
   "\traise RuntimeError(           'Global step should be created to use StepCounterHook.') ",
   "  def before_run(self, run_context):                                   ",
   "\treturn basic_session_run_hooks.SessionRunArgs(self._global_step_tensor) ",
   "  def after_run(self, run_context, run_values):",
   "\t_ = run_context ",
   "    global_step = run_values.results",
   "    if self._timer.should_trigger_for_step(global_step):",
   "\telapsed_time, elapsed_steps = self._timer.update_last_triggered_step(           global_step)",
   "      if elapsed_time is not None:",
   "\tsteps_per_sec = elapsed_steps / elapsed_time",
   "        self._step_train_time += elapsed_time",
   "        self._total_steps += elapsed_steps ",
   "        average_examples_per_sec = self._batch_size * (             self._total_steps / self._step_train_time)",
   "        current_examples_per_sec = steps_per_sec * self._batch_size                                                                ",
   "        logging.info('%s: %g (%g), step = %g', 'Average examples/sec',                      average_examples_per_sec, current_examples_per_sec,                      self._total_steps)  ",
   "class GpuParamServerDeviceSetter(object):",
   "\t\"\"\"Used with tf.device() to place variables on the least loaded GPU.",
   "",
   "    A common use for this class is to pass a list of GPU devices, e.g. ['gpu:0',",
   "    'gpu:1','gpu:2'], as ps_devices.  When each variable is placed, it will be",
   "    placed on the least loaded gpu. All other Ops, which will be the computation",
   "    Ops, will be placed on the worker_device.",
   "  \"\"\" ",
   "  def __init__(self, worker_device, ps_devices):",
   "\t\"\"\"Initializer for GpuParamServerDeviceSetter.",
   "",
   "    Args:",
   "      worker_device: the device to use for computation Ops.",
   "      ps_devices: a list of devices to use for Variable Ops. Each variable is",
   "      assigned to the least loaded device.",
   "    \"\"\"",
   "    self.ps_devices = ps_devices",
   "    self.worker_device = worker_device",
   "    self.ps_sizes = [0] * len(self.ps_devices) ",
   "  def __call__(self, op):",
   "\tif op.device:",
   "\treturn op.device",
   "    if op.type not in ['Variable', 'VariableV2', 'VarHandleOp']:",
   "\treturn self.worker_device                                       ",
   "    device_index, _ = min(enumerate(self.ps_sizes), key=operator.itemgetter(1))",
   "    device_name = self.ps_devices[device_index]",
   "    var_size = op.outputs[0].get_shape().num_elements()",
   "    self.ps_sizes[device_index] += var_size ",
   "    return device_name  ",
   "def _create_device_setter(is_cpu_ps, worker, num_gpus):",
   "\t\"\"\"Create device setter object.\"\"\"",
   "  if is_cpu_ps:                                                                                                                                              ",
   "\treturn $0.train.replica_device_setter(         worker_device=worker, ps_device='/cpu:0', ps_tasks=1)",
   "  else:",
   "\tgpus = ['/gpu:%d' % i for i in range(num_gpus)]",
   "    return GpuParamServerDeviceSetter(worker, gpus)  ",
   "def _resnet_model_fn(features, labels, $1):",
   "\t\"\"\"Resnet model body.",
   "",
   "  Support single host, one or more GPU training. Parameter distribution can be",
   "  either one of the following scheme.",
   "  1. CPU is the parameter server and manages gradient updates.",
   "  2. Parameters are distributed evenly across all GPUs, and the first GPU",
   "     manages gradient updates.",
   "",
   "  Args:",
   "    features: a list of tensors, one for each tower",
   "    labels: a list of tensors, one for each tower",
   "    mode: ModeKeys.TRAIN or EVAL",
   "  Returns:",
   "    A EstimatorSpec object.",
   "  \"\"\"",
   "  $2 = ($1 == $0.$3.$4.$5)"
  ],
  "consequent": [
   "$2 = ($1 == $0.$3.$4.$5)"
  ],
  "identifiers": {
   "condition": [
    "_step_train_time",
    "every_steps",
    "after_run",
    "before_run",
    "run_values",
    "average_examples_per_sec",
    "training_util",
    "_total_steps",
    "self",
    "get_global_step",
    "ValueError",
    "device",
    "num_gpus",
    "features",
    "_create_device_setter",
    "elapsed_steps",
    "logging",
    "basic_session_run_hooks",
    "SecondOrStepTimer",
    "worker_device",
    "operator",
    "get_shape",
    "every_n_steps",
    "itemgetter",
    "_",
    "outputs",
    "type",
    "current_examples_per_sec",
    "batch_size",
    "__call__",
    "gpus",
    "__init__",
    "SessionRunArgs",
    "GpuParamServerDeviceSetter",
    "info",
    "len",
    "key",
    "_resnet_model_fn",
    "device_name",
    "ps_sizes",
    "every_n_secs",
    "_global_step_tensor",
    "every_secs",
    "train",
    "_timer",
    "i",
    "steps_per_sec",
    "ps_tasks",
    "global_step",
    "range",
    "op",
    "elapsed_time",
    "results",
    "labels",
    "is_cpu_ps",
    "object",
    "ps_devices",
    "worker",
    "run_context",
    "_batch_size",
    "min",
    "num_elements",
    "replica_device_setter",
    "update_last_triggered_step",
    "enumerate",
    "var_size",
    "device_index",
    "RuntimeError",
    "ps_device",
    "begin",
    "should_trigger_for_step"
   ],
   "consequent": []
  }
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "merged_at": "2017-08-24 17:05:08",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/cifar10_main.py",
  "condition": [
   "is_cpu_ps = FLAGS.is_cpu_ps",
   "\tnum_gpus = FLAGS.num_gpus",
   "  $0 = FLAGS.$0"
  ],
  "consequent": [
   "$0 = params.$0"
  ],
  "identifiers": {
   "condition": [
    "num_gpus",
    "is_cpu_ps",
    "FLAGS"
   ],
   "consequent": [
    "params"
   ]
  }
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "merged_at": "2017-08-24 17:05:08",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/cifar10_main.py",
  "condition": [
   "$0 = FLAGS.$0"
  ],
  "consequent": [
   "$0 = params.$0"
  ],
  "identifiers": {
   "condition": [
    "FLAGS"
   ],
   "consequent": [
    "params"
   ]
  }
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "merged_at": "2017-08-24 17:05:08",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/cifar10_main.py",
  "condition": [
   "if $0 != 0:"
  ],
  "consequent": [
   "if $0 == 0:",
   "\tnum_devices = 1",
   "      device_type = 'cpu'",
   "    else:",
   "\tnum_devices = $0",
   "      device_type = 'gpu'"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "device_type",
    "num_devices"
   ]
  }
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "merged_at": "2017-08-24 17:05:08",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/cifar10_main.py",
  "condition": [
   "for $0 in range(num_gpus):"
  ],
  "consequent": [
   "for $0 in range(num_devices):"
  ],
  "identifiers": {
   "condition": [
    "num_gpus",
    "range"
   ],
   "consequent": [
    "range",
    "num_devices"
   ]
  }
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "merged_at": "2017-08-24 17:05:08",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/cifar10_main.py",
  "condition": [
   "worker = '/gpu:%d' % $0",
   "\t$1 = _create_device_setter(is_cpu_ps, worker, FLAGS.$2)"
  ],
  "consequent": [
   "worker_device = '/{}:{}'.format(device_type, $0)",
   "\tif variable_strategy == 'CPU':",
   "\t$1 = cifar10_utils.local_device_setter(               worker_device=worker_device)",
   "      elif variable_strategy == 'GPU':",
   "\t$1 = cifar10_utils.local_device_setter(               ps_device_type='gpu',               worker_device=worker_device,               ps_strategy=tf.contrib.training.GreedyLoadBalancingStrategy(                   $2,                   tf.contrib.training.byte_size_load_fn               )           )"
  ],
  "identifiers": {
   "condition": [
    "worker",
    "is_cpu_ps",
    "_create_device_setter",
    "FLAGS"
   ],
   "consequent": [
    "training",
    "device_type",
    "ps_device_type",
    "variable_strategy",
    "ps_strategy",
    "GreedyLoadBalancingStrategy",
    "tf",
    "cifar10_utils",
    "contrib",
    "worker_device",
    "byte_size_load_fn",
    "format",
    "local_device_setter"
   ]
  }
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "merged_at": "2017-08-24 17:05:08",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/cifar10_main.py",
  "condition": [
   "_tower_fn($0, $1, $2[$3],                       $4[$3], $5, $6,                       $7, False)"
  ],
  "consequent": [
   "loss, gradvars, preds = _tower_fn(                 $0,                 $1,                 $2[$3],                 $4[$3],                 (device_type == 'cpu'),                 params.num_layers,                 params.batch_norm_decay,                 params.batch_norm_epsilon)",
   "\t$5.append(loss)",
   "            $6.append(gradvars)",
   "            $7.append(preds)"
  ],
  "identifiers": {
   "condition": [
    "_tower_fn"
   ],
   "consequent": [
    "device_type",
    "loss",
    "params",
    "gradvars",
    "batch_norm_decay",
    "append",
    "num_layers",
    "_tower_fn",
    "batch_norm_epsilon",
    "preds"
   ]
  }
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "merged_at": "2017-08-24 17:05:08",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/cifar10_main.py",
  "condition": [
   "else:",
   "\twith tf.variable_scope('resnet'), tf.device('/cpu:0'):",
   "\twith tf.name_scope('tower_cpu') as name_scope:",
   "\t_tower_fn(is_training, weight_decay, tower_features[0], tower_labels[0],                   tower_losses, tower_gradvars, tower_preds, True)",
   "        update_ops = tf.get_collection(tf.GraphKeys.UPDATE_OPS, name_scope)                                          "
  ],
  "consequent": [],
  "identifiers": {
   "condition": [
    "variable_scope",
    "name_scope",
    "weight_decay",
    "tower_features",
    "tower_labels",
    "UPDATE_OPS",
    "tower_gradvars",
    "is_training",
    "tf",
    "device",
    "_tower_fn",
    "update_ops",
    "get_collection",
    "tower_preds",
    "GraphKeys",
    "tower_losses"
   ],
   "consequent": []
  }
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "merged_at": "2017-08-24 17:05:08",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/cifar10_main.py",
  "condition": [
   "                                                                                                                                                                                                                                     ",
   "\tps_device = '/cpu:0' if is_cpu_ps else '/gpu:0'",
   "  with tf.device(ps_device):",
   "\tloss = tf.reduce_mean(tower_losses, name='loss')"
  ],
  "consequent": [
   "all_grads = {}"
  ],
  "identifiers": {
   "condition": [
    "loss",
    "name",
    "tf",
    "device",
    "reduce_mean",
    "ps_device",
    "is_cpu_ps",
    "tower_losses"
   ],
   "consequent": [
    "all_grads"
   ]
  }
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "merged_at": "2017-08-24 17:05:08",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/cifar10_main.py",
  "condition": [
   "for zipped_gradvars in zip(*$0):"
  ],
  "consequent": [
   "for grad, var in itertools.chain(*$0):"
  ],
  "identifiers": {
   "condition": [
    "zip",
    "zipped_gradvars"
   ],
   "consequent": [
    "var",
    "chain",
    "itertools",
    "grad"
   ]
  }
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "merged_at": "2017-08-24 17:05:08",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/cifar10_main.py",
  "condition": [
   "                                                             ",
   "\t$0 = zipped_gradvars[0][1]",
   "        $1 = [gv[0] for gv in zipped_gradvars]"
  ],
  "consequent": [
   "if grad is not None:",
   "\tall_grads.setdefault($0, []).append(grad)",
   "      for $0, $1 in six.iteritems(all_grads):"
  ],
  "identifiers": {
   "condition": [
    "gv",
    "zipped_gradvars"
   ],
   "consequent": [
    "setdefault",
    "append",
    "all_grads",
    "iteritems",
    "six",
    "grad"
   ]
  }
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "merged_at": "2017-08-24 17:05:08",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/cifar10_main.py",
  "condition": [
   "'train') // (FLAGS.$0 * FLAGS.$1)"
  ],
  "consequent": [
   "'train') // (params.$0 * $1)"
  ],
  "identifiers": {
   "condition": [
    "FLAGS"
   ],
   "consequent": [
    "params"
   ]
  }
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "merged_at": "2017-08-24 17:05:08",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/cifar10_main.py",
  "condition": [
   "$0 = [FLAGS.$1 * $2 for $2 in [1, 0.1, 0.01, 0.002]]"
  ],
  "consequent": [
   "$0 = [params.$1 * $2 for $2 in [1, 0.1, 0.01, 0.002]]"
  ],
  "identifiers": {
   "condition": [
    "FLAGS"
   ],
   "consequent": [
    "params"
   ]
  }
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "merged_at": "2017-08-24 17:05:08",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/cifar10_main.py",
  "condition": [
   "if FLAGS.$0:"
  ],
  "consequent": [
   "if $0:"
  ],
  "identifiers": {
   "condition": [
    "FLAGS"
   ],
   "consequent": []
  }
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "merged_at": "2017-08-24 17:05:08",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/cifar10_main.py",
  "condition": [
   "$0=FLAGS.$1)"
  ],
  "consequent": [
   "$0=$1)"
  ],
  "identifiers": {
   "condition": [
    "FLAGS"
   ],
   "consequent": []
  }
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "merged_at": "2017-08-24 17:05:08",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/cifar10_main.py",
  "condition": [
   "}"
  ],
  "consequent": [
   "}",
   "\tloss = tf.reduce_mean(tower_losses, name='loss')"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "loss",
    "name",
    "tf",
    "reduce_mean",
    "tower_losses"
   ]
  }
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "merged_at": "2017-08-24 17:05:08",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/cifar10_main.py",
  "condition": [
   "$0=$1)"
  ],
  "consequent": [
   "$0=$1)",
   "\treturn _resnet_model_fn"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "_resnet_model_fn"
   ]
  }
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "merged_at": "2017-08-24 17:05:08",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/cifar10_main.py",
  "condition": [
   "def _tower_fn($0, $1, $2, $3, tower_losses,               tower_gradvars, tower_preds, $4):"
  ],
  "consequent": [
   "def _tower_fn($0,               $1,               $2,               $3,               $4,               num_layers,               batch_norm_decay,               batch_norm_epsilon):"
  ],
  "identifiers": {
   "condition": [
    "tower_preds",
    "_tower_fn",
    "tower_losses",
    "tower_gradvars"
   ],
   "consequent": [
    "batch_norm_decay",
    "_tower_fn",
    "num_layers",
    "batch_norm_epsilon"
   ]
  }
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "merged_at": "2017-08-24 17:05:08",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/cifar10_main.py",
  "condition": [
   "FLAGS.$0, $1=$1, $2=$2)"
  ],
  "consequent": [
   "$0,",
   "\tbatch_norm_decay=batch_norm_decay,",
   "      batch_norm_epsilon=batch_norm_epsilon,",
   "      $1=$1, $2=$2)"
  ],
  "identifiers": {
   "condition": [
    "FLAGS"
   ],
   "consequent": [
    "batch_norm_decay",
    "batch_norm_epsilon"
   ]
  }
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "merged_at": "2017-08-24 17:05:08",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/cifar10_main.py",
  "condition": [
   "tower_preds.append($0)",
   "\ttower_losses.append($1)",
   "  tower_gradvars.append(zip($2, $3))"
  ],
  "consequent": [
   "return $1, zip($2, $3), $0"
  ],
  "identifiers": {
   "condition": [
    "zip",
    "append",
    "tower_gradvars",
    "tower_preds",
    "tower_losses"
   ],
   "consequent": [
    "zip"
   ]
  }
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "merged_at": "2017-08-24 17:05:08",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/cifar10_main.py",
  "condition": [
   "def input_fn($0, $1):"
  ],
  "consequent": [
   "def input_fn(data_dir, $0, $1, batch_size,              use_distortion_for_training=True):"
  ],
  "identifiers": {
   "condition": [
    "input_fn"
   ],
   "consequent": [
    "input_fn",
    "batch_size",
    "use_distortion_for_training",
    "data_dir"
   ]
  }
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "merged_at": "2017-08-24 17:05:08",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/cifar10_main.py",
  "condition": [
   "if $0 == 'train':",
   "\tbatch_size = FLAGS.train_batch_size",
   "  elif $0 == 'validate' or $0 == 'eval':",
   "\tbatch_size = FLAGS.eval_batch_size",
   "  else:",
   "\traise ValueError('Subset must be one of \\'train\\''                      ', \\'validate\\' and \\'eval\\'')",
   "    $1 = $0 == 'train' and FLAGS.$2"
  ],
  "consequent": [
   "$1 = $0 == 'train' and $2"
  ],
  "identifiers": {
   "condition": [
    "train_batch_size",
    "FLAGS",
    "batch_size",
    "ValueError",
    "eval_batch_size"
   ],
   "consequent": []
  }
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "merged_at": "2017-08-24 17:05:08",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/cifar10_main.py",
  "condition": [
   "$0 = $1.Cifar10DataSet(FLAGS.$2, $3, $4)"
  ],
  "consequent": [
   "$0 = $1.Cifar10DataSet($2, $3, $4)"
  ],
  "identifiers": {
   "condition": [
    "Cifar10DataSet",
    "FLAGS"
   ],
   "consequent": [
    "Cifar10DataSet"
   ]
  }
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "merged_at": "2017-08-24 17:05:08",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/cifar10_main.py",
  "condition": [
   "def get_experiment_fn(train_input_fn, eval_input_fn, train_steps, eval_steps,                       train_hooks):"
  ],
  "consequent": [
   "def get_experiment_fn(data_dir, num_gpus, is_gpu_ps,                       use_distortion_for_training=True,                       sync=True):"
  ],
  "identifiers": {
   "condition": [
    "eval_steps",
    "train_steps",
    "eval_input_fn",
    "get_experiment_fn",
    "train_input_fn",
    "train_hooks"
   ],
   "consequent": [
    "use_distortion_for_training",
    "num_gpus",
    "is_gpu_ps",
    "sync",
    "get_experiment_fn",
    "data_dir"
   ]
  }
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "merged_at": "2017-08-24 17:05:08",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/cifar10_main.py",
  "condition": [
   "$0 for $1 $2."
  ],
  "consequent": [
   "$0 for $1 $2. Arguments passed directly to this",
   "\tfunction are not tunable, all other arguments should be passed within",
   "  tf.HParams, passed to the enclosed function. ",
   "  Args:",
   "\tdata_dir: str. Location of the data for input_fns.",
   "      num_gpus: int. Number of GPUs on each worker.",
   "      is_gpu_ps: bool. If true, average gradients on GPUs.",
   "      use_distortion_for_training: bool. See cifar10.Cifar10DataSet.",
   "      sync: bool. If true synchronizes variable updates across workers.",
   "  Returns:",
   "\tA function (tf.estimator.RunConfig, tf.contrib.$2.HParams) ->",
   "      tf.contrib.learn.Experiment. ",
   "      Suitable for use by tf.contrib.learn.learn_runner, which will run various",
   "      methods on Experiment (train, evaluate) based on information",
   "      about the current runner in `run_config`."
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "If",
    "various",
    "will",
    "run_config",
    "use",
    "data",
    "num_gpus",
    "str",
    "contrib",
    "data_dir",
    "tunable",
    "based",
    "RunConfig",
    "A",
    "GPUs",
    "of",
    "other",
    "runner",
    "evaluate",
    "bool",
    "each",
    "learn_runner",
    "to",
    "which",
    "true",
    "sync",
    "updates",
    "should",
    "are",
    "Cifar10DataSet",
    "directly",
    "arguments",
    "run",
    "passed",
    "across",
    "train",
    "be",
    "variable",
    "int",
    "synchronizes",
    "all",
    "tf",
    "Location",
    "Returns",
    "Experiment",
    "See",
    "learn",
    "workers",
    "Arguments",
    "HParams",
    "input_fns",
    "information",
    "methods",
    "worker",
    "estimator",
    "Args",
    "gradients",
    "Suitable",
    "about",
    "within",
    "function",
    "average",
    "use_distortion_for_training",
    "current",
    "is_gpu_ps",
    "on",
    "Number",
    "by",
    "this",
    "cifar10",
    "the",
    "enclosed"
   ]
  }
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "merged_at": "2017-08-24 17:05:08",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/cifar10_main.py",
  "condition": [
   "del hparams"
  ],
  "consequent": [
   "train_input_fn = functools.partial(         input_fn,         data_dir,         subset='train',         num_shards=num_gpus,         batch_size=hparams.train_batch_size,         use_distortion_for_training=use_distortion_for_training     ) ",
   "\teval_input_fn = functools.partial(         input_fn,         data_dir,         subset='eval',         batch_size=hparams.eval_batch_size,         num_shards=num_gpus     ) ",
   "    num_eval_examples = cifar10.Cifar10DataSet.num_examples_per_epoch('eval')",
   "    if num_eval_examples % hparams.eval_batch_size != 0:",
   "\traise ValueError('validation set size must be multiple of eval_batch_size') ",
   "    train_steps = hparams.train_steps",
   "    eval_steps = num_eval_examples // hparams.eval_batch_size",
   "    examples_sec_hook = cifar10_utils.ExamplesPerSecondHook(       hparams.train_batch_size, every_n_steps=10) ",
   "    tensors_to_log = {'learning_rate': 'learning_rate',                       'loss': 'loss'} ",
   "    logging_hook = tf.train.LoggingTensorHook(       tensors=tensors_to_log, every_n_iter=100) ",
   "    hooks = [logging_hook, examples_sec_hook]"
  ],
  "identifiers": {
   "condition": [
    "hparams"
   ],
   "consequent": [
    "num_eval_examples",
    "train_batch_size",
    "logging_hook",
    "tensors",
    "functools",
    "num_gpus",
    "eval_input_fn",
    "ValueError",
    "ExamplesPerSecondHook",
    "eval_batch_size",
    "hparams",
    "data_dir",
    "every_n_steps",
    "num_examples_per_epoch",
    "eval_steps",
    "batch_size",
    "train_steps",
    "Cifar10DataSet",
    "train",
    "tensors_to_log",
    "subset",
    "tf",
    "cifar10_utils",
    "partial",
    "num_shards",
    "hooks",
    "input_fn",
    "use_distortion_for_training",
    "LoggingTensorHook",
    "examples_sec_hook",
    "every_n_iter",
    "train_input_fn",
    "cifar10"
   ]
  }
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "merged_at": "2017-08-24 17:05:08",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/cifar10_main.py",
  "condition": [
   "$0 = $1.$2.Estimator(model_fn=_resnet_model_fn,"
  ],
  "consequent": [
   "$0 = $1.$2.Estimator("
  ],
  "identifiers": {
   "condition": [
    "model_fn",
    "_resnet_model_fn",
    "Estimator"
   ],
   "consequent": [
    "Estimator"
   ]
  }
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "merged_at": "2017-08-24 17:05:08",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/cifar10_main.py",
  "condition": [
   "$0=$1)"
  ],
  "consequent": [
   "model_fn=get_model_fn(             num_gpus, is_gpu_ps, $1.num_worker_replicas or 1, sync),",
   "\t$0=$1,",
   "        params=hparams",
   "    )"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "num_worker_replicas",
    "model_fn",
    "params",
    "get_model_fn",
    "num_gpus",
    "is_gpu_ps",
    "sync",
    "hparams"
   ]
  }
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "merged_at": "2017-08-24 17:05:08",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/cifar10_main.py",
  "condition": [
   "$0.extend_train_hooks(train_hooks)"
  ],
  "consequent": [
   "$0.extend_train_hooks(hooks)"
  ],
  "identifiers": {
   "condition": [
    "train_hooks",
    "extend_train_hooks"
   ],
   "consequent": [
    "hooks",
    "extend_train_hooks"
   ]
  }
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "merged_at": "2017-08-24 17:05:08",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/cifar10_main.py",
  "condition": [
   "def main(unused_argv):"
  ],
  "consequent": [
   "def main(job_dir,          data_dir,          num_gpus,          variable_strategy,          use_distortion_for_training,          log_device_placement,          num_intra_threads,          sync,          **hparams):"
  ],
  "identifiers": {
   "condition": [
    "main",
    "unused_argv"
   ],
   "consequent": [
    "hparams",
    "log_device_placement",
    "job_dir",
    "num_intra_threads",
    "variable_strategy",
    "use_distortion_for_training",
    "main",
    "num_gpus",
    "sync",
    "data_dir"
   ]
  }
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "merged_at": "2017-08-24 17:05:08",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/cifar10_main.py",
  "condition": [
   "if FLAGS.$0 < 0:"
  ],
  "consequent": [
   "                        ",
   "\tsess_config = tf.ConfigProto(       allow_soft_placement=True,       log_device_placement=log_device_placement,       intra_op_parallelism_threads=num_intra_threads,       gpu_options=tf.GPUOptions(           force_gpu_compatible=True       )   ) ",
   "  config = cifar10_utils.RunConfig(       session_config=sess_config,       model_dir=job_dir)",
   "  tf.contrib.learn.learn_runner.run(       get_experiment_fn(           data_dir,           $0,           variable_strategy,           use_distortion_for_training,           sync       ),       run_config=config,       hparams=tf.contrib.training.HParams(**hparams)   )  ",
   "if __name__ == '__main__':",
   "\tparser = argparse.ArgumentParser()",
   "  parser.add_argument(       '--data-dir',       type=str,       required=True,       help='The directory where the CIFAR-10 input data is stored.'   )",
   "  parser.add_argument(       '--job-dir',       type=str,       required=True,       help='The directory where the model will be stored.'   )",
   "  parser.add_argument(       '--variable-strategy',       choices=['CPU', 'GPU'],       type=str,       default='CPU',       help='Where to locate variable operations'   )",
   "  parser.add_argument(       '--num-gpus',       type=int,       default=1,       help='The number of gpus used. Uses only CPU if set to 0.'   )",
   "  parser.add_argument(       '--num-layers',       type=int,       default=44,       help='The number of layers of the model.'   )",
   "  parser.add_argument(       '--train-steps',       type=int,       default=80000,       help='The number of steps to use for training.'   )",
   "  parser.add_argument(       '--train-batch-size',       type=int,       default=128,       help='Batch size for training.'   )",
   "  parser.add_argument(       '--eval-batch-size',       type=int,       default=100,       help='Batch size for validation.'   )",
   "  parser.add_argument(       '--momentum',       type=float,       default=0.9,       help='Momentum for MomentumOptimizer.'   )",
   "  parser.add_argument(       '--weight-decay',       type=float,       default=2e-4,       help='Weight decay for convolutions.'   )",
   "  parser.add_argument(       '--learning-rate',       type=float,       default=0.1,       help=\"\"\"\\",
   "      This is the inital learning rate value. The learning rate will decrease",
   "      during training. For more details check the model_fn implementation in",
   "      this file.\\",
   "      \"\"\"   )",
   "  parser.add_argument(       '--use-distortion-for-training',       type=bool,       default=True,       help='If doing image distortion for training.'   )",
   "  parser.add_argument(       '--sync',       action='store_true',       default=False,       help=\"\"\"\\",
   "      If present when running in a distributed environment will run on sync mode.\\",
   "      \"\"\"   )",
   "  parser.add_argument(       '--num-intra-threads',       type=int,       default=0,       help=\"\"\"\\",
   "      Number of threads to use for intra-op parallelism. When training on CPU",
   "      set to 0 to have the system pick the appropriate number or alternatively",
   "      set it to the number of physical CPU cores.\\",
   "      \"\"\"   )",
   "  parser.add_argument(       '--num-inter-threads',       type=int,       default=0,       help=\"\"\"\\",
   "      Number of threads to use for inter-op parallelism. If set to 0, the",
   "      system will pick an appropriate number.\\",
   "      \"\"\"   )",
   "  parser.add_argument(       '--log-device-placement',       action='store_true',       default=False,       help='Whether to log device placement.'   )",
   "  parser.add_argument(       '--batch-norm-decay',       type=float,       default=0.997,       help='Decay for batch norm.'   )",
   "  parser.add_argument(       '--batch-norm-epsilon',       type=float,       default=1e-5,       help='Epsilon for batch norm.'   )",
   "  args = parser.parse_args() ",
   "  if args.$0 < 0:"
  ],
  "identifiers": {
   "condition": [
    "FLAGS"
   ],
   "consequent": [
    "add_argument",
    "training",
    "intra_op_parallelism_threads",
    "job_dir",
    "allow_soft_placement",
    "run_config",
    "force_gpu_compatible",
    "ArgumentParser",
    "config",
    "contrib",
    "str",
    "data_dir",
    "hparams",
    "gpu_options",
    "RunConfig",
    "__name__",
    "choices",
    "required",
    "default",
    "type",
    "argparse",
    "variable_strategy",
    "bool",
    "learn_runner",
    "sync",
    "session_config",
    "run",
    "args",
    "log_device_placement",
    "float",
    "ConfigProto",
    "num_intra_threads",
    "parser",
    "int",
    "tf",
    "cifar10_utils",
    "parse_args",
    "learn",
    "HParams",
    "sess_config",
    "model_dir",
    "use_distortion_for_training",
    "help",
    "get_experiment_fn",
    "GPUOptions",
    "action"
   ]
  }
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "merged_at": "2017-08-24 17:05:08",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/cifar10_main.py",
  "condition": [
   "if FLAGS.$0 == 0 and not FLAGS.is_cpu_ps:"
  ],
  "consequent": [
   "if args.$0 == 0 and args.variable_strategy == 'GPU':"
  ],
  "identifiers": {
   "condition": [
    "is_cpu_ps",
    "FLAGS"
   ],
   "consequent": [
    "args",
    "variable_strategy"
   ]
  }
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "merged_at": "2017-08-24 17:05:08",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/cifar10_main.py",
  "condition": [
   "if (FLAGS.$0 - 2) % 6 != 0:"
  ],
  "consequent": [
   "if (args.$0 - 2) % 6 != 0:"
  ],
  "identifiers": {
   "condition": [
    "FLAGS"
   ],
   "consequent": [
    "args"
   ]
  }
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "merged_at": "2017-08-24 17:05:08",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/cifar10_main.py",
  "condition": [
   "if FLAGS.$0 != 0 and FLAGS.$1 % FLAGS.$0 != 0:"
  ],
  "consequent": [
   "if args.$0 != 0 and args.$1 % args.$0 != 0:"
  ],
  "identifiers": {
   "condition": [
    "FLAGS"
   ],
   "consequent": [
    "args"
   ]
  }
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "merged_at": "2017-08-24 17:05:08",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/cifar10_main.py",
  "condition": [
   "if FLAGS.$0 != 0 and FLAGS.$1 % FLAGS.$0 != 0:"
  ],
  "consequent": [
   "if args.$0 != 0 and args.$1 % args.$0 != 0:"
  ],
  "identifiers": {
   "condition": [
    "FLAGS"
   ],
   "consequent": [
    "args"
   ]
  }
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "merged_at": "2017-08-24 17:05:08",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/cifar10_main.py",
  "condition": [
   "num_eval_examples = cifar10.Cifar10DataSet.num_examples_per_epoch('eval')",
   "\tif num_eval_examples % FLAGS.eval_batch_size != 0:",
   "\traise ValueError('validation set size must be multiple of eval_batch_size') ",
   "  train_input_fn = functools.partial(input_fn, subset='train',                                      num_shards=FLAGS.num_gpus) ",
   "  eval_input_fn = functools.partial(input_fn, subset='eval',                                     num_shards=FLAGS.num_gpus) ",
   "  train_steps = FLAGS.train_steps",
   "  eval_steps = num_eval_examples // FLAGS.eval_batch_size                            ",
   "  sess_config = tf.ConfigProto()",
   "  sess_config.allow_soft_placement = True",
   "  sess_config.log_device_placement = FLAGS.log_device_placement",
   "  sess_config.intra_op_parallelism_threads = FLAGS.num_intra_threads",
   "  sess_config.inter_op_parallelism_threads = FLAGS.num_inter_threads",
   "  sess_config.gpu_options.force_gpu_compatible = FLAGS.force_gpu_compatible                                                                                                                               ",
   "  tensors_to_log = {'learning_rate': 'learning_rate',                     'loss': 'gradient_averaging/loss'} ",
   "  logging_hook = tf.train.LoggingTensorHook(       tensors=tensors_to_log, every_n_iter=100) ",
   "  examples_sec_hook = ExamplesPerSecondHook(       FLAGS.train_batch_size, every_n_steps=10) ",
   "  hooks = [logging_hook, examples_sec_hook] ",
   "  if FLAGS.run_experiment:",
   "\tconfig = tf.contrib.learn.RunConfig(model_dir=FLAGS.model_dir)",
   "    config = config.replace(session_config=sess_config)",
   "    tf.contrib.learn.learn_runner.run(         get_experiment_fn(train_input_fn, eval_input_fn,                           train_steps, eval_steps,                           hooks), run_config=config) ",
   "  else:",
   "\tconfig = tf.estimator.RunConfig()",
   "    config = config.replace(session_config=sess_config)",
   "    classifier = tf.estimator.Estimator(         model_fn=_resnet_model_fn, model_dir=FLAGS.model_dir, config=config) ",
   "    print('Starting to train...')",
   "    classifier.train(input_fn=train_input_fn,                      steps=train_steps,                      hooks=hooks) ",
   "    print('Starting to evaluate...')",
   "    eval_results = classifier.evaluate(         input_fn=eval_input_fn,         steps=eval_steps)",
   "    print(eval_results) ",
   "if __name__ == '__main__':",
   "\ttf.app.run()"
  ],
  "consequent": [
   "main(**vars(args))"
  ],
  "identifiers": {
   "condition": [
    "num_eval_examples",
    "intra_op_parallelism_threads",
    "allow_soft_placement",
    "logging_hook",
    "train_batch_size",
    "replace",
    "run_config",
    "force_gpu_compatible",
    "tensors",
    "Estimator",
    "model_fn",
    "steps",
    "app",
    "config",
    "ValueError",
    "functools",
    "num_gpus",
    "eval_input_fn",
    "ExamplesPerSecondHook",
    "eval_batch_size",
    "contrib",
    "gpu_options",
    "RunConfig",
    "__name__",
    "every_n_steps",
    "num_examples_per_epoch",
    "eval_steps",
    "train_steps",
    "evaluate",
    "learn_runner",
    "_resnet_model_fn",
    "session_config",
    "Cifar10DataSet",
    "run",
    "eval_results",
    "train",
    "log_device_placement",
    "ConfigProto",
    "FLAGS",
    "num_intra_threads",
    "tensors_to_log",
    "subset",
    "tf",
    "partial",
    "num_shards",
    "run_experiment",
    "learn",
    "hooks",
    "num_inter_threads",
    "estimator",
    "sess_config",
    "input_fn",
    "model_dir",
    "LoggingTensorHook",
    "inter_op_parallelism_threads",
    "every_n_iter",
    "examples_sec_hook",
    "get_experiment_fn",
    "train_input_fn",
    "print",
    "cifar10",
    "classifier"
   ],
   "consequent": [
    "main",
    "vars",
    "args"
   ]
  }
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "merged_at": "2017-08-24 17:05:08",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/cifar10_model.py",
  "condition": [
   "from __future__ import absolute_import",
   "\tdef __init__($0, $1, $2, $3='channels_first'):"
  ],
  "consequent": [
   "def __init__($0,                $1,                $2,                batch_norm_decay,                batch_norm_epsilon,                $3='channels_first'):"
  ],
  "identifiers": {
   "condition": [
    "__future__",
    "__init__",
    "absolute_import"
   ],
   "consequent": [
    "batch_norm_decay",
    "batch_norm_epsilon",
    "__init__"
   ]
  }
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "merged_at": "2017-08-24 17:05:08",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/cifar10_model.py",
  "condition": [
   "super($0, $1).__init__($2, $3)"
  ],
  "consequent": [
   "super($0, $1).__init__(         $2,         $3,         batch_norm_decay,         batch_norm_epsilon     )"
  ],
  "identifiers": {
   "condition": [
    "__init__",
    "super"
   ],
   "consequent": [
    "batch_norm_decay",
    "__init__",
    "batch_norm_epsilon",
    "super"
   ]
  }
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "merged_at": "2017-08-24 17:05:08",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/generate_cifar10_tfrecords.py",
  "condition": [
   "FLAGS = tf.flags.FLAGS ",
   "tf.flags.DEFINE_string('input_dir', '',                        'Directory where CIFAR10 data is located.') ",
   "tf.flags.DEFINE_string('output_dir', '',                        'Directory where TFRecords will be saved.'                        'The TFRecords will have the same name as'                        ' the CIFAR10 inputs + .tfrecords.')"
  ],
  "consequent": [
   "import argparse"
  ],
  "identifiers": {
   "condition": [
    "tf",
    "FLAGS",
    "flags",
    "DEFINE_string"
   ],
   "consequent": [
    "argparse"
   ]
  }
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "merged_at": "2017-08-24 17:05:08",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/generate_cifar10_tfrecords.py",
  "condition": [
   "def main(unused_argv):"
  ],
  "consequent": [
   "def main(input_dir, output_dir):"
  ],
  "identifiers": {
   "condition": [
    "main",
    "unused_argv"
   ],
   "consequent": [
    "main",
    "output_dir",
    "input_dir"
   ]
  }
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "merged_at": "2017-08-24 17:05:08",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/generate_cifar10_tfrecords.py",
  "condition": [
   "$0.$1.join(FLAGS.$2, $3) for $3 in $4]"
  ],
  "consequent": [
   "$0.$1.join($2, $3) for $3 in $4]"
  ],
  "identifiers": {
   "condition": [
    "join",
    "FLAGS"
   ],
   "consequent": [
    "join"
   ]
  }
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "merged_at": "2017-08-24 17:05:08",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/generate_cifar10_tfrecords.py",
  "condition": [
   "$0 = $1.$2.join(FLAGS.$3, $4 + '.tfrecords')"
  ],
  "consequent": [
   "$0 = $1.$2.join($3, $4 + '.tfrecords')"
  ],
  "identifiers": {
   "condition": [
    "join",
    "FLAGS"
   ],
   "consequent": [
    "join"
   ]
  }
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "merged_at": "2017-08-24 17:05:08",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/generate_cifar10_tfrecords.py",
  "condition": [
   "tf.app.run($0)"
  ],
  "consequent": [
   "parser = argparse.ArgumentParser()",
   "\tparser.add_argument(       '--input-dir',       type=str,       default='',       help='Directory where CIFAR10 data is located.'   )",
   "  parser.add_argument(       '--output-dir',       type=str,       default='',       help=\"\"\"\\",
   "      Directory where TFRecords will be saved.The TFRecords will have the same",
   "      name as the CIFAR10 inputs + .tfrecords.\\",
   "      \"\"\"   )",
   "  args = parser.parse_args()",
   "  $0(args.input_dir, args.output_dir)"
  ],
  "identifiers": {
   "condition": [
    "tf",
    "run",
    "app"
   ],
   "consequent": [
    "add_argument",
    "args",
    "type",
    "input_dir",
    "ArgumentParser",
    "argparse",
    "parser",
    "help",
    "str",
    "parse_args",
    "default",
    "output_dir"
   ]
  }
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "merged_at": "2017-08-24 17:05:08",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/model_base.py",
  "condition": [
   "FLAGS = tf.flags.FLAGS ",
   "tf.flags.DEFINE_float('batch_norm_decay', 0.997, 'Decay for batch norm.')",
   "tf.flags.DEFINE_float('batch_norm_epsilon', 1e-5, 'Epsilon for batch norm.') ",
   "\tdef __init__($0, $1, $2):"
  ],
  "consequent": [
   "def __init__($0, $1, $2, batch_norm_decay, batch_norm_epsilon):"
  ],
  "identifiers": {
   "condition": [
    "FLAGS",
    "__init__",
    "DEFINE_float",
    "tf",
    "flags"
   ],
   "consequent": [
    "batch_norm_decay",
    "batch_norm_epsilon",
    "__init__"
   ]
  }
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "merged_at": "2017-08-24 17:05:08",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/model_base.py",
  "condition": [
   "$0=FLAGS.$1,"
  ],
  "consequent": [
   "self._batch_norm_decay = $1",
   "\tself._batch_norm_epsilon = batch_norm_epsilon",
   "\t$0=self._batch_norm_decay,"
  ],
  "identifiers": {
   "condition": [
    "FLAGS"
   ],
   "consequent": [
    "_batch_norm_epsilon",
    "_batch_norm_decay",
    "batch_norm_epsilon",
    "self"
   ]
  }
 },
 {
  "number": 2152,
  "sha": "e11010fce913ee21a5f57a116aa4c87d0afd3243",
  "author": "elibixby",
  "participant": "mari-linhares",
  "created_at": "2017-08-08 00:13:44",
  "merged_at": "2017-08-24 17:05:08",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/model_base.py",
  "condition": [
   "$0=FLAGS.batch_norm_epsilon,"
  ],
  "consequent": [
   "$0=self._batch_norm_epsilon,"
  ],
  "identifiers": {
   "condition": [
    "FLAGS",
    "batch_norm_epsilon"
   ],
   "consequent": [
    "_batch_norm_epsilon",
    "self"
   ]
  }
 },
 {
  "number": 2254,
  "sha": "289a2f99a7df528f6193a5ab3ee284ff3112b731",
  "author": "alanyee",
  "participant": "snurkabill",
  "created_at": "2017-08-18 21:41:19",
  "merged_at": "2017-08-27 03:51:43",
  "merged_by": "martinwicke",
  "file_path": "autoencoder/AdditiveGaussianNoiseAutoencoderRunner.py",
  "condition": [
   "$0 = AdditiveGaussianNoiseAutoencoder(n_input = 784,"
  ],
  "consequent": [
   "$0 = AdditiveGaussianNoiseAutoencoder("
  ],
  "identifiers": {
   "condition": [
    "n_input",
    "AdditiveGaussianNoiseAutoencoder"
   ],
   "consequent": [
    "AdditiveGaussianNoiseAutoencoder"
   ]
  }
 },
 {
  "number": 2254,
  "sha": "289a2f99a7df528f6193a5ab3ee284ff3112b731",
  "author": "alanyee",
  "participant": "snurkabill",
  "created_at": "2017-08-18 21:41:19",
  "merged_at": "2017-08-27 03:51:43",
  "merged_by": "martinwicke",
  "file_path": "autoencoder/AdditiveGaussianNoiseAutoencoderRunner.py",
  "condition": [
   "$0 = 200,",
   "\t$1 = $2.$3.$4,",
   "                                               $5 = $2.$6.AdamOptimizer($7 = 0.001),",
   "                                               $8 = 0.01)"
  ],
  "consequent": [
   "n_input=784,",
   "\t$0=200,",
   "    $1=$2.$3.$4,",
   "    $5=$2.$6.AdamOptimizer($7 = 0.001),",
   "    $8=0.01)"
  ],
  "identifiers": {
   "condition": [
    "AdamOptimizer"
   ],
   "consequent": [
    "n_input",
    "AdamOptimizer"
   ]
  }
 },
 {
  "number": 2254,
  "sha": "289a2f99a7df528f6193a5ab3ee284ff3112b731",
  "author": "alanyee",
  "participant": "snurkabill",
  "created_at": "2017-08-18 21:41:19",
  "merged_at": "2017-08-27 03:51:43",
  "merged_by": "martinwicke",
  "file_path": "autoencoder/AutoencoderRunner.py",
  "condition": [
   "$0 = Autoencoder(n_input = 784,"
  ],
  "consequent": [
   "$0 = Autoencoder("
  ],
  "identifiers": {
   "condition": [
    "n_input",
    "Autoencoder"
   ],
   "consequent": [
    "Autoencoder"
   ]
  }
 },
 {
  "number": 2254,
  "sha": "289a2f99a7df528f6193a5ab3ee284ff3112b731",
  "author": "alanyee",
  "participant": "snurkabill",
  "created_at": "2017-08-18 21:41:19",
  "merged_at": "2017-08-27 03:51:43",
  "merged_by": "martinwicke",
  "file_path": "autoencoder/AutoencoderRunner.py",
  "condition": [
   "$0 = 200,"
  ],
  "consequent": [
   "n_input=784,",
   "\t$0=200,"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "n_input"
   ]
  }
 },
 {
  "number": 2254,
  "sha": "289a2f99a7df528f6193a5ab3ee284ff3112b731",
  "author": "alanyee",
  "participant": "snurkabill",
  "created_at": "2017-08-18 21:41:19",
  "merged_at": "2017-08-27 03:51:43",
  "merged_by": "martinwicke",
  "file_path": "autoencoder/MaskingNoiseAutoencoderRunner.py",
  "condition": [
   "$0 = MaskingNoiseAutoencoder(n_input = 784,"
  ],
  "consequent": [
   "$0 = MaskingNoiseAutoencoder("
  ],
  "identifiers": {
   "condition": [
    "n_input",
    "MaskingNoiseAutoencoder"
   ],
   "consequent": [
    "MaskingNoiseAutoencoder"
   ]
  }
 },
 {
  "number": 2254,
  "sha": "289a2f99a7df528f6193a5ab3ee284ff3112b731",
  "author": "alanyee",
  "participant": "snurkabill",
  "created_at": "2017-08-18 21:41:19",
  "merged_at": "2017-08-27 03:51:43",
  "merged_by": "martinwicke",
  "file_path": "autoencoder/MaskingNoiseAutoencoderRunner.py",
  "condition": [
   "$0 = 200,",
   "\t$1 = $2.$3.$4,"
  ],
  "consequent": [
   "n_input=784,",
   "\t$0=200,",
   "    $1=$2.$3.$4,"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "n_input"
   ]
  }
 },
 {
  "number": 2343,
  "sha": "28d37e7a6f9af003823571972f0815b5e7a88169",
  "author": "elibixby",
  "participant": "tfboyd",
  "created_at": "2017-09-06 01:04:41",
  "merged_at": "2017-09-15 20:21:52",
  "merged_by": "isaprykin",
  "file_path": "tutorials/image/cifar10_estimator/cifar10_main.py",
  "condition": [
   "if run_config.num_worker_replicas:",
   "\tnum_workers = run_config.num_worker_replicas + 1",
   "    else:",
   "\tnum_workers = 1"
  ],
  "consequent": [],
  "identifiers": {
   "condition": [
    "num_workers",
    "num_worker_replicas",
    "run_config"
   ],
   "consequent": []
  }
 },
 {
  "number": 2343,
  "sha": "28d37e7a6f9af003823571972f0815b5e7a88169",
  "author": "elibixby",
  "participant": "tfboyd",
  "created_at": "2017-09-06 01:04:41",
  "merged_at": "2017-09-15 20:21:52",
  "merged_by": "isaprykin",
  "file_path": "tutorials/image/cifar10_estimator/cifar10_main.py",
  "condition": [
   "$0=get_model_fn($1, $2, num_workers),"
  ],
  "consequent": [
   "$0=get_model_fn($1, $2,                               run_config.num_worker_replicas or 1),"
  ],
  "identifiers": {
   "condition": [
    "num_workers",
    "get_model_fn"
   ],
   "consequent": [
    "num_worker_replicas",
    "run_config",
    "get_model_fn"
   ]
  }
 },
 {
  "number": 2443,
  "sha": "8815a8606c45e7c6c01549179903329af2b2d442",
  "author": "itsmeolivia",
  "participant": "nealwu",
  "created_at": "2017-09-22 22:04:53",
  "merged_at": "2017-09-22 22:43:07",
  "merged_by": "itsmeolivia",
  "file_path": "tutorials/image/cifar10/cifar10.py",
  "condition": [
   "FLAGS = tf.app.flags.FLAGS"
  ],
  "consequent": [
   "import argparse",
   "parser = argparse.ArgumentParser()"
  ],
  "identifiers": {
   "condition": [
    "tf",
    "FLAGS",
    "app",
    "flags"
   ],
   "consequent": [
    "ArgumentParser",
    "argparse",
    "parser"
   ]
  }
 },
 {
  "number": 2443,
  "sha": "8815a8606c45e7c6c01549179903329af2b2d442",
  "author": "itsmeolivia",
  "participant": "nealwu",
  "created_at": "2017-09-22 22:04:53",
  "merged_at": "2017-09-22 22:43:07",
  "merged_by": "itsmeolivia",
  "file_path": "tutorials/image/cifar10/cifar10.py",
  "condition": [
   "tf.app.flags.DEFINE_integer('batch_size', 128,"
  ],
  "consequent": [
   "parser.add_argument('--batch_size', type=int, default=128,"
  ],
  "identifiers": {
   "condition": [
    "tf",
    "DEFINE_integer",
    "flags",
    "app"
   ],
   "consequent": [
    "add_argument",
    "type",
    "parser",
    "int",
    "default"
   ]
  }
 },
 {
  "number": 2443,
  "sha": "8815a8606c45e7c6c01549179903329af2b2d442",
  "author": "itsmeolivia",
  "participant": "nealwu",
  "created_at": "2017-09-22 22:04:53",
  "merged_at": "2017-09-22 22:43:07",
  "merged_by": "itsmeolivia",
  "file_path": "tutorials/image/cifar10/cifar10.py",
  "condition": [
   "\"\"\"Number of images to process in a batch.\"\"\")"
  ],
  "consequent": [
   "help='Number of images to process in a batch.')"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "help"
   ]
  }
 },
 {
  "number": 2443,
  "sha": "8815a8606c45e7c6c01549179903329af2b2d442",
  "author": "itsmeolivia",
  "participant": "nealwu",
  "created_at": "2017-09-22 22:04:53",
  "merged_at": "2017-09-22 22:43:07",
  "merged_by": "itsmeolivia",
  "file_path": "tutorials/image/cifar10/cifar10.py",
  "condition": [
   "tf.app.flags.DEFINE_string('data_dir', '/tmp/cifar10_data',"
  ],
  "consequent": [
   "parser.add_argument('--data_dir', type=str, default='/tmp/cifar10_data',"
  ],
  "identifiers": {
   "condition": [
    "tf",
    "flags",
    "app",
    "DEFINE_string"
   ],
   "consequent": [
    "add_argument",
    "type",
    "parser",
    "str",
    "default"
   ]
  }
 },
 {
  "number": 2443,
  "sha": "8815a8606c45e7c6c01549179903329af2b2d442",
  "author": "itsmeolivia",
  "participant": "nealwu",
  "created_at": "2017-09-22 22:04:53",
  "merged_at": "2017-09-22 22:43:07",
  "merged_by": "itsmeolivia",
  "file_path": "tutorials/image/cifar10/cifar10.py",
  "condition": [
   "\"\"\"Path to the CIFAR-10 data directory.\"\"\")"
  ],
  "consequent": [
   "help='Path to the CIFAR-10 data directory.')"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "help"
   ]
  }
 },
 {
  "number": 2443,
  "sha": "8815a8606c45e7c6c01549179903329af2b2d442",
  "author": "itsmeolivia",
  "participant": "nealwu",
  "created_at": "2017-09-22 22:04:53",
  "merged_at": "2017-09-22 22:43:07",
  "merged_by": "itsmeolivia",
  "file_path": "tutorials/image/cifar10/cifar10.py",
  "condition": [
   "tf.app.flags.DEFINE_boolean('use_fp16', False,"
  ],
  "consequent": [
   "parser.add_argument('--use_fp16', type=bool, default=False,"
  ],
  "identifiers": {
   "condition": [
    "tf",
    "DEFINE_boolean",
    "flags",
    "app"
   ],
   "consequent": [
    "add_argument",
    "type",
    "parser",
    "bool",
    "default"
   ]
  }
 },
 {
  "number": 2443,
  "sha": "8815a8606c45e7c6c01549179903329af2b2d442",
  "author": "itsmeolivia",
  "participant": "nealwu",
  "created_at": "2017-09-22 22:04:53",
  "merged_at": "2017-09-22 22:43:07",
  "merged_by": "itsmeolivia",
  "file_path": "tutorials/image/cifar10/cifar10.py",
  "condition": [
   "\"\"\"Train the model using fp16.\"\"\")"
  ],
  "consequent": [
   "help='Train the model using fp16.') ",
   "FLAGS = parser.parse_args()"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "parser",
    "help",
    "FLAGS",
    "parse_args"
   ]
  }
 },
 {
  "number": 2443,
  "sha": "8815a8606c45e7c6c01549179903329af2b2d442",
  "author": "itsmeolivia",
  "participant": "nealwu",
  "created_at": "2017-09-22 22:04:53",
  "merged_at": "2017-09-22 22:43:07",
  "merged_by": "itsmeolivia",
  "file_path": "tutorials/image/cifar10/cifar10_eval.py",
  "condition": [
   "$0 = argparse.ArgumentParser()"
  ],
  "consequent": [
   "$0 = cifar10.$0"
  ],
  "identifiers": {
   "condition": [
    "argparse",
    "ArgumentParser"
   ],
   "consequent": [
    "cifar10"
   ]
  }
 },
 {
  "number": 2443,
  "sha": "8815a8606c45e7c6c01549179903329af2b2d442",
  "author": "itsmeolivia",
  "participant": "nealwu",
  "created_at": "2017-09-22 22:04:53",
  "merged_at": "2017-09-22 22:43:07",
  "merged_by": "itsmeolivia",
  "file_path": "tutorials/image/cifar10/cifar10_multi_gpu_train.py",
  "condition": [
   "FLAGS = tf.app.flags.FLAGS"
  ],
  "consequent": [
   "import argparse",
   "parser = cifar10.parser"
  ],
  "identifiers": {
   "condition": [
    "tf",
    "FLAGS",
    "app",
    "flags"
   ],
   "consequent": [
    "argparse",
    "parser",
    "cifar10"
   ]
  }
 },
 {
  "number": 2443,
  "sha": "8815a8606c45e7c6c01549179903329af2b2d442",
  "author": "itsmeolivia",
  "participant": "nealwu",
  "created_at": "2017-09-22 22:04:53",
  "merged_at": "2017-09-22 22:43:07",
  "merged_by": "itsmeolivia",
  "file_path": "tutorials/image/cifar10/cifar10_multi_gpu_train.py",
  "condition": [
   "tf.app.flags.DEFINE_string('train_dir', '/tmp/cifar10_train',"
  ],
  "consequent": [
   "parser.add_argument('--train_dir', type=str, default='/tmp/cifar10_train',"
  ],
  "identifiers": {
   "condition": [
    "tf",
    "flags",
    "app",
    "DEFINE_string"
   ],
   "consequent": [
    "add_argument",
    "type",
    "parser",
    "str",
    "default"
   ]
  }
 },
 {
  "number": 2443,
  "sha": "8815a8606c45e7c6c01549179903329af2b2d442",
  "author": "itsmeolivia",
  "participant": "nealwu",
  "created_at": "2017-09-22 22:04:53",
  "merged_at": "2017-09-22 22:43:07",
  "merged_by": "itsmeolivia",
  "file_path": "tutorials/image/cifar10/cifar10_multi_gpu_train.py",
  "condition": [
   "\"\"\"Directory where to write event logs \"\"\""
  ],
  "consequent": [
   "help='Directory where to write event logs and checkpoint.')"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "help"
   ]
  }
 },
 {
  "number": 2443,
  "sha": "8815a8606c45e7c6c01549179903329af2b2d442",
  "author": "itsmeolivia",
  "participant": "nealwu",
  "created_at": "2017-09-22 22:04:53",
  "merged_at": "2017-09-22 22:43:07",
  "merged_by": "itsmeolivia",
  "file_path": "tutorials/image/cifar10/cifar10_multi_gpu_train.py",
  "condition": [
   "\"\"\"and checkpoint.\"\"\")",
   "tf.app.flags.DEFINE_integer('max_steps', 1000000,"
  ],
  "consequent": [
   "parser.add_argument('--max_steps', type=int, default=1000000,"
  ],
  "identifiers": {
   "condition": [
    "tf",
    "DEFINE_integer",
    "flags",
    "app"
   ],
   "consequent": [
    "add_argument",
    "type",
    "parser",
    "int",
    "default"
   ]
  }
 },
 {
  "number": 2443,
  "sha": "8815a8606c45e7c6c01549179903329af2b2d442",
  "author": "itsmeolivia",
  "participant": "nealwu",
  "created_at": "2017-09-22 22:04:53",
  "merged_at": "2017-09-22 22:43:07",
  "merged_by": "itsmeolivia",
  "file_path": "tutorials/image/cifar10/cifar10_multi_gpu_train.py",
  "condition": [
   "\"\"\"Number of batches to run.\"\"\")"
  ],
  "consequent": [
   "help='Number of batches to run.')"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "help"
   ]
  }
 },
 {
  "number": 2443,
  "sha": "8815a8606c45e7c6c01549179903329af2b2d442",
  "author": "itsmeolivia",
  "participant": "nealwu",
  "created_at": "2017-09-22 22:04:53",
  "merged_at": "2017-09-22 22:43:07",
  "merged_by": "itsmeolivia",
  "file_path": "tutorials/image/cifar10/cifar10_multi_gpu_train.py",
  "condition": [
   "tf.app.flags.DEFINE_integer('num_gpus', 1,"
  ],
  "consequent": [
   "parser.add_argument('--num_gpus', type=int, default=1,"
  ],
  "identifiers": {
   "condition": [
    "tf",
    "DEFINE_integer",
    "flags",
    "app"
   ],
   "consequent": [
    "add_argument",
    "type",
    "parser",
    "int",
    "default"
   ]
  }
 },
 {
  "number": 2443,
  "sha": "8815a8606c45e7c6c01549179903329af2b2d442",
  "author": "itsmeolivia",
  "participant": "nealwu",
  "created_at": "2017-09-22 22:04:53",
  "merged_at": "2017-09-22 22:43:07",
  "merged_by": "itsmeolivia",
  "file_path": "tutorials/image/cifar10/cifar10_multi_gpu_train.py",
  "condition": [
   "\"\"\"How many GPUs to use.\"\"\")"
  ],
  "consequent": [
   "help='How many GPUs to use.')"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "help"
   ]
  }
 },
 {
  "number": 2443,
  "sha": "8815a8606c45e7c6c01549179903329af2b2d442",
  "author": "itsmeolivia",
  "participant": "nealwu",
  "created_at": "2017-09-22 22:04:53",
  "merged_at": "2017-09-22 22:43:07",
  "merged_by": "itsmeolivia",
  "file_path": "tutorials/image/cifar10/cifar10_multi_gpu_train.py",
  "condition": [
   "tf.app.flags.DEFINE_boolean('log_device_placement', False,"
  ],
  "consequent": [
   "parser.add_argument('--log_device_placement', type=bool, default=False,"
  ],
  "identifiers": {
   "condition": [
    "tf",
    "DEFINE_boolean",
    "flags",
    "app"
   ],
   "consequent": [
    "add_argument",
    "type",
    "parser",
    "bool",
    "default"
   ]
  }
 },
 {
  "number": 2443,
  "sha": "8815a8606c45e7c6c01549179903329af2b2d442",
  "author": "itsmeolivia",
  "participant": "nealwu",
  "created_at": "2017-09-22 22:04:53",
  "merged_at": "2017-09-22 22:43:07",
  "merged_by": "itsmeolivia",
  "file_path": "tutorials/image/cifar10/cifar10_multi_gpu_train.py",
  "condition": [
   "\"\"\"Whether to log device placement.\"\"\")"
  ],
  "consequent": [
   "help='Whether to log device placement.')"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "help"
   ]
  }
 },
 {
  "number": 2443,
  "sha": "8815a8606c45e7c6c01549179903329af2b2d442",
  "author": "itsmeolivia",
  "participant": "nealwu",
  "created_at": "2017-09-22 22:04:53",
  "merged_at": "2017-09-22 22:43:07",
  "merged_by": "itsmeolivia",
  "file_path": "tutorials/image/cifar10/cifar10_train.py",
  "condition": [
   "FLAGS = tf.app.flags.FLAGS"
  ],
  "consequent": [
   "import argparse",
   "parser = cifar10.parser"
  ],
  "identifiers": {
   "condition": [
    "tf",
    "FLAGS",
    "app",
    "flags"
   ],
   "consequent": [
    "argparse",
    "parser",
    "cifar10"
   ]
  }
 },
 {
  "number": 2443,
  "sha": "8815a8606c45e7c6c01549179903329af2b2d442",
  "author": "itsmeolivia",
  "participant": "nealwu",
  "created_at": "2017-09-22 22:04:53",
  "merged_at": "2017-09-22 22:43:07",
  "merged_by": "itsmeolivia",
  "file_path": "tutorials/image/cifar10/cifar10_train.py",
  "condition": [
   "tf.app.flags.DEFINE_string('train_dir', '/tmp/cifar10_train',"
  ],
  "consequent": [
   "parser.add_argument('--train_dir', type=str, default='/tmp/cifar10_train',"
  ],
  "identifiers": {
   "condition": [
    "tf",
    "flags",
    "app",
    "DEFINE_string"
   ],
   "consequent": [
    "add_argument",
    "type",
    "parser",
    "str",
    "default"
   ]
  }
 },
 {
  "number": 2443,
  "sha": "8815a8606c45e7c6c01549179903329af2b2d442",
  "author": "itsmeolivia",
  "participant": "nealwu",
  "created_at": "2017-09-22 22:04:53",
  "merged_at": "2017-09-22 22:43:07",
  "merged_by": "itsmeolivia",
  "file_path": "tutorials/image/cifar10/cifar10_train.py",
  "condition": [
   "\"\"\"Directory where to write event logs \"\"\""
  ],
  "consequent": [
   "help='Directory where to write event logs and checkpoint.')"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "help"
   ]
  }
 },
 {
  "number": 2443,
  "sha": "8815a8606c45e7c6c01549179903329af2b2d442",
  "author": "itsmeolivia",
  "participant": "nealwu",
  "created_at": "2017-09-22 22:04:53",
  "merged_at": "2017-09-22 22:43:07",
  "merged_by": "itsmeolivia",
  "file_path": "tutorials/image/cifar10/cifar10_train.py",
  "condition": [
   "\"\"\"and checkpoint.\"\"\")",
   "tf.app.flags.DEFINE_integer('max_steps', 1000000,"
  ],
  "consequent": [
   "parser.add_argument('--max_steps', type=int, default=1000000,"
  ],
  "identifiers": {
   "condition": [
    "tf",
    "DEFINE_integer",
    "flags",
    "app"
   ],
   "consequent": [
    "add_argument",
    "type",
    "parser",
    "int",
    "default"
   ]
  }
 },
 {
  "number": 2443,
  "sha": "8815a8606c45e7c6c01549179903329af2b2d442",
  "author": "itsmeolivia",
  "participant": "nealwu",
  "created_at": "2017-09-22 22:04:53",
  "merged_at": "2017-09-22 22:43:07",
  "merged_by": "itsmeolivia",
  "file_path": "tutorials/image/cifar10/cifar10_train.py",
  "condition": [
   "\"\"\"Number of batches to run.\"\"\")"
  ],
  "consequent": [
   "help='Number of batches to run.')"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "help"
   ]
  }
 },
 {
  "number": 2443,
  "sha": "8815a8606c45e7c6c01549179903329af2b2d442",
  "author": "itsmeolivia",
  "participant": "nealwu",
  "created_at": "2017-09-22 22:04:53",
  "merged_at": "2017-09-22 22:43:07",
  "merged_by": "itsmeolivia",
  "file_path": "tutorials/image/cifar10/cifar10_train.py",
  "condition": [
   "tf.app.flags.DEFINE_boolean('log_device_placement', False,"
  ],
  "consequent": [
   "parser.add_argument('--log_device_placement', type=bool, default=False,"
  ],
  "identifiers": {
   "condition": [
    "tf",
    "DEFINE_boolean",
    "flags",
    "app"
   ],
   "consequent": [
    "add_argument",
    "type",
    "parser",
    "bool",
    "default"
   ]
  }
 },
 {
  "number": 2443,
  "sha": "8815a8606c45e7c6c01549179903329af2b2d442",
  "author": "itsmeolivia",
  "participant": "nealwu",
  "created_at": "2017-09-22 22:04:53",
  "merged_at": "2017-09-22 22:43:07",
  "merged_by": "itsmeolivia",
  "file_path": "tutorials/image/cifar10/cifar10_train.py",
  "condition": [
   "\"\"\"Whether to log device placement.\"\"\")"
  ],
  "consequent": [
   "help='Whether to log device placement.')"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "help"
   ]
  }
 },
 {
  "number": 2443,
  "sha": "8815a8606c45e7c6c01549179903329af2b2d442",
  "author": "itsmeolivia",
  "participant": "nealwu",
  "created_at": "2017-09-22 22:04:53",
  "merged_at": "2017-09-22 22:43:07",
  "merged_by": "itsmeolivia",
  "file_path": "tutorials/image/cifar10/cifar10_train.py",
  "condition": [
   "tf.app.flags.DEFINE_integer('log_frequency', 10,"
  ],
  "consequent": [
   "parser.add_argument('--log_frequency', type=int, default=10,"
  ],
  "identifiers": {
   "condition": [
    "tf",
    "DEFINE_integer",
    "flags",
    "app"
   ],
   "consequent": [
    "add_argument",
    "type",
    "parser",
    "int",
    "default"
   ]
  }
 },
 {
  "number": 2443,
  "sha": "8815a8606c45e7c6c01549179903329af2b2d442",
  "author": "itsmeolivia",
  "participant": "nealwu",
  "created_at": "2017-09-22 22:04:53",
  "merged_at": "2017-09-22 22:43:07",
  "merged_by": "itsmeolivia",
  "file_path": "tutorials/image/cifar10/cifar10_train.py",
  "condition": [
   "\"\"\"How often to log results to the console.\"\"\")"
  ],
  "consequent": [
   "help='How often to log results to the console.')"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "help"
   ]
  }
 },
 {
  "number": 2620,
  "sha": "0a49aee83d52d41c2426984b9ace0be2ce3650c6",
  "author": "tombstone",
  "participant": "jch1",
  "created_at": "2017-10-27 22:17:29",
  "merged_at": "2017-10-27 22:49:33",
  "merged_by": "jch1",
  "file_path": "research/object_detection/builders/anchor_generator_builder.py",
  "condition": [
   "anchor_strides = None",
   "\tif $0.height_stride:",
   "\tanchor_strides = zip($0.height_stride,                            $0.width_stride)",
   "    anchor_offsets = None",
   "    if $0.height_offset:",
   "\tanchor_offsets = zip($0.height_offset,                            $0.width_offset)",
   "\tscales=[float(scale) for scale in $0.scales],"
  ],
  "consequent": [
   "reduce_boxes_in_lowest_layer=($0                                       .reduce_boxes_in_lowest_layer))"
  ],
  "identifiers": {
   "condition": [
    "zip",
    "float",
    "width_stride",
    "scales",
    "anchor_offsets",
    "height_offset",
    "scale",
    "width_offset",
    "height_stride",
    "anchor_strides"
   ],
   "consequent": [
    "reduce_boxes_in_lowest_layer"
   ]
  }
 },
 {
  "number": 2620,
  "sha": "0a49aee83d52d41c2426984b9ace0be2ce3650c6",
  "author": "tombstone",
  "participant": "jch1",
  "created_at": "2017-10-27 22:17:29",
  "merged_at": "2017-10-27 22:49:33",
  "merged_by": "jch1",
  "file_path": "research/object_detection/builders/anchor_generator_builder.py",
  "condition": [
   "interpolated_scale_aspect_ratio=(             ssd_anchor_generator_config.interpolated_scale_aspect_ratio),",
   "\tbase_anchor_size=[             ssd_anchor_generator_config.base_anchor_height,             ssd_anchor_generator_config.base_anchor_width         ],",
   "        anchor_strides=anchor_strides,",
   "        anchor_offsets=anchor_offsets,",
   "        reduce_boxes_in_lowest_layer=(             ssd_anchor_generator_config.reduce_boxes_in_lowest_layer))"
  ],
  "consequent": [],
  "identifiers": {
   "condition": [
    "anchor_offsets",
    "reduce_boxes_in_lowest_layer",
    "ssd_anchor_generator_config",
    "base_anchor_width",
    "base_anchor_height",
    "base_anchor_size",
    "anchor_strides",
    "interpolated_scale_aspect_ratio"
   ],
   "consequent": []
  }
 },
 {
  "number": 2620,
  "sha": "0a49aee83d52d41c2426984b9ace0be2ce3650c6",
  "author": "tombstone",
  "participant": "jch1",
  "created_at": "2017-10-27 22:17:29",
  "merged_at": "2017-10-27 22:49:33",
  "merged_by": "jch1",
  "file_path": "research/object_detection/builders/anchor_generator_builder_test.py",
  "condition": [
   "import math",
   "\tdef test_build_ssd_anchor_generator_with_custom_scales($0):",
   "\tanchor_generator_text_proto = \"\"\"",
   "      ssd_anchor_generator {",
   "        aspect_ratios: [1.0]",
   "        scales: [0.1, 0.15, 0.2, 0.4, 0.6, 0.8]",
   "        reduce_boxes_in_lowest_layer: false",
   "      }",
   "    \"\"\"",
   "    anchor_generator_proto = anchor_generator_pb2.AnchorGenerator()",
   "    text_format.Merge(anchor_generator_text_proto, anchor_generator_proto)",
   "    anchor_generator_object = anchor_generator_builder.build(         anchor_generator_proto)",
   "    $0.assertTrue(isinstance(anchor_generator_object,                                multiple_grid_anchor_generator.                                MultipleGridAnchorGenerator))",
   "    for actual_scales, expected_scales in zip(         list(anchor_generator_object._scales),         [(0.1, math.sqrt(0.1 * 0.15)),          (0.15, math.sqrt(0.15 * 0.2)),          (0.2, math.sqrt(0.2 * 0.4)),          (0.4, math.sqrt(0.4 * 0.6)),          (0.6, math.sqrt(0.6 * 0.8)),          (0.8, math.sqrt(0.8 * 1.0))]):",
   "\t$0.assert_almost_list_equal(expected_scales, actual_scales, delta=1e-2) ",
   "  def test_build_ssd_anchor_generator_with_custom_interpolated_scale($0):",
   "\tanchor_generator_text_proto = \"\"\"",
   "      ssd_anchor_generator {",
   "        aspect_ratios: [0.5]",
   "        interpolated_scale_aspect_ratio: 0.5",
   "        reduce_boxes_in_lowest_layer: false",
   "      }",
   "    \"\"\"",
   "    anchor_generator_proto = anchor_generator_pb2.AnchorGenerator()",
   "    text_format.Merge(anchor_generator_text_proto, anchor_generator_proto)",
   "    anchor_generator_object = anchor_generator_builder.build(         anchor_generator_proto)",
   "    $0.assertTrue(isinstance(anchor_generator_object,                                multiple_grid_anchor_generator.                                MultipleGridAnchorGenerator))",
   "    for actual_aspect_ratio, expected_aspect_ratio in zip(         list(anchor_generator_object._aspect_ratios),         6 * [(0.5, 0.5)]):",
   "\t$0.assert_almost_list_equal(expected_aspect_ratio, actual_aspect_ratio) ",
   "  def test_build_ssd_anchor_generator_without_reduced_boxes($0):"
  ],
  "consequent": [
   "def test_build_ssd_anchor_generator_withoud_reduced_boxes($0):"
  ],
  "identifiers": {
   "condition": [
    "test_build_ssd_anchor_generator_with_custom_interpolated_scale",
    "_scales",
    "multiple_grid_anchor_generator",
    "actual_scales",
    "text_format",
    "test_build_ssd_anchor_generator_with_custom_scales",
    "math",
    "sqrt",
    "list",
    "expected_aspect_ratio",
    "delta",
    "anchor_generator_pb2",
    "test_build_ssd_anchor_generator_without_reduced_boxes",
    "assertTrue",
    "Merge",
    "actual_aspect_ratio",
    "anchor_generator_text_proto",
    "anchor_generator_builder",
    "isinstance",
    "assert_almost_list_equal",
    "zip",
    "anchor_generator_proto",
    "expected_scales",
    "_aspect_ratios",
    "build",
    "MultipleGridAnchorGenerator",
    "AnchorGenerator",
    "anchor_generator_object"
   ],
   "consequent": [
    "test_build_ssd_anchor_generator_withoud_reduced_boxes"
   ]
  }
 },
 {
  "number": 2620,
  "sha": "0a49aee83d52d41c2426984b9ace0be2ce3650c6",
  "author": "tombstone",
  "participant": "jch1",
  "created_at": "2017-10-27 22:17:29",
  "merged_at": "2017-10-27 22:49:33",
  "merged_by": "jch1",
  "file_path": "research/object_detection/builders/anchor_generator_builder_test.py",
  "condition": [
   "height_stride: 16",
   "\theight_stride: 32",
   "        width_stride: 20",
   "        width_stride: 30",
   "        height_offset: 8",
   "        height_offset: 16",
   "        width_offset: 0",
   "        width_offset: 10",
   "        [(0.1, 0.3, 0.3), (0.8, 0.894)]):"
  ],
  "consequent": [
   "[(0.1, 0.3, 0.3), (0.8,)]):"
  ],
  "identifiers": {
   "condition": [
    "height_stride",
    "height_offset",
    "width_stride",
    "width_offset"
   ],
   "consequent": []
  }
 },
 {
  "number": 2631,
  "sha": "3237c08023d9667a3b4f30420b5c2ebe71e11cad",
  "author": "tombstone",
  "participant": "jch1",
  "created_at": "2017-10-28 20:37:34",
  "merged_at": "2017-10-29 17:02:54",
  "merged_by": "tombstone",
  "file_path": "research/object_detection/builders/model_builder_test.py",
  "condition": [
   "def test_create_faster_rcnn_inception_resnet_v2_model_from_config($0):"
  ],
  "consequent": [
   "from object_detection.models import faster_rcnn_nas_feature_extractor as frcnn_nas",
   "\tdef test_create_faster_rcnn_nas_model_from_config($0):"
  ],
  "identifiers": {
   "condition": [
    "test_create_faster_rcnn_inception_resnet_v2_model_from_config"
   ],
   "consequent": [
    "faster_rcnn_nas_feature_extractor",
    "object_detection",
    "frcnn_nas",
    "test_create_faster_rcnn_nas_model_from_config",
    "models"
   ]
  }
 },
 {
  "number": 2690,
  "sha": "ae5adb595834aceb09e6b434ad73cfb0f5f58cdb",
  "author": "k-w-w",
  "participant": "nealwu",
  "created_at": "2017-11-02 19:14:22",
  "merged_at": "2017-11-07 18:01:16",
  "merged_by": "k-w-w",
  "file_path": "official/mnist/mnist.py",
  "condition": [
   "                                   ",
   "\t$0 = $0.map($1)"
  ],
  "consequent": [
   "$0 = $0.map($1).prefetch(batch_size)"
  ],
  "identifiers": {
   "condition": [
    "map"
   ],
   "consequent": [
    "batch_size",
    "map",
    "prefetch"
   ]
  }
 },
 {
  "number": 2690,
  "sha": "ae5adb595834aceb09e6b434ad73cfb0f5f58cdb",
  "author": "k-w-w",
  "participant": "nealwu",
  "created_at": "2017-11-02 19:14:22",
  "merged_at": "2017-11-07 18:01:16",
  "merged_by": "k-w-w",
  "file_path": "official/resnet/cifar10_main.py",
  "condition": [
   "_SHUFFLE_BUFFER = 20000 ",
   "def dataset_parser(value):",
   "\t\"\"\"Parse a CIFAR-10 record from value.\"\"\""
  ],
  "consequent": [
   "def parse_record(raw_record):",
   "\t\"\"\"Parse CIFAR-10 image and label from a raw record.\"\"\""
  ],
  "identifiers": {
   "condition": [
    "_SHUFFLE_BUFFER",
    "dataset_parser",
    "value"
   ],
   "consequent": [
    "raw_record",
    "parse_record"
   ]
  }
 },
 {
  "number": 2690,
  "sha": "ae5adb595834aceb09e6b434ad73cfb0f5f58cdb",
  "author": "k-w-w",
  "participant": "nealwu",
  "created_at": "2017-11-02 19:14:22",
  "merged_at": "2017-11-07 18:01:16",
  "merged_by": "k-w-w",
  "file_path": "official/resnet/cifar10_main.py",
  "condition": [
   "$0 = $1.decode_raw(value, $1.$2)"
  ],
  "consequent": [
   "record_vector = $1.decode_raw($0, $1.$2)"
  ],
  "identifiers": {
   "condition": [
    "decode_raw",
    "value"
   ],
   "consequent": [
    "record_vector",
    "decode_raw"
   ]
  }
 },
 {
  "number": 2690,
  "sha": "ae5adb595834aceb09e6b434ad73cfb0f5f58cdb",
  "author": "k-w-w",
  "participant": "nealwu",
  "created_at": "2017-11-02 19:14:22",
  "merged_at": "2017-11-07 18:01:16",
  "merged_by": "k-w-w",
  "file_path": "official/resnet/cifar10_main.py",
  "condition": [
   "$0 = $1.cast(raw_record[0], $1.$2)"
  ],
  "consequent": [
   "$0 = $1.cast(record_vector[0], $1.$2)",
   "\t$0 = $1.one_hot($0, _NUM_CLASSES)"
  ],
  "identifiers": {
   "condition": [
    "cast",
    "raw_record"
   ],
   "consequent": [
    "record_vector",
    "cast",
    "one_hot",
    "_NUM_CLASSES"
   ]
  }
 },
 {
  "number": 2690,
  "sha": "ae5adb595834aceb09e6b434ad73cfb0f5f58cdb",
  "author": "k-w-w",
  "participant": "nealwu",
  "created_at": "2017-11-02 19:14:22",
  "merged_at": "2017-11-07 18:01:16",
  "merged_by": "k-w-w",
  "file_path": "official/resnet/cifar10_main.py",
  "condition": [
   "$0 = $1.reshape(raw_record[$2:$3],                            [$4, $5, $6])"
  ],
  "consequent": [
   "$0 = $1.reshape(       record_vector[$2:$3], [$4, $5, $6])"
  ],
  "identifiers": {
   "condition": [
    "reshape",
    "raw_record"
   ],
   "consequent": [
    "record_vector",
    "reshape"
   ]
  }
 },
 {
  "number": 2690,
  "sha": "ae5adb595834aceb09e6b434ad73cfb0f5f58cdb",
  "author": "k-w-w",
  "participant": "nealwu",
  "created_at": "2017-11-02 19:14:22",
  "merged_at": "2017-11-07 18:01:16",
  "merged_by": "k-w-w",
  "file_path": "official/resnet/cifar10_main.py",
  "condition": [
   "return $0, $1.one_hot(label, _NUM_CLASSES)  ",
   "def train_preprocess_fn($0, label):",
   "\t\"\"\"Preprocess a single training image of layout [height, width, depth].\"\"\"                                                            ",
   "  $0 = $1.$0.resize_image_with_crop_or_pad($0, $2 + 8, $3 + 8)                                                             ",
   "  $0 = $1.random_crop($0, [$2, $3, $4])                                           ",
   "  $0 = $1.$0.random_flip_left_right($0)"
  ],
  "consequent": [
   "def preprocess_image($0, is_training):",
   "\t\"\"\"Preprocess a single image of layout [height, width, depth].\"\"\"",
   "  if is_training:                                                              ",
   "\t$0 = $1.$0.resize_image_with_crop_or_pad(         $0, $2 + 8, $3 + 8)                                                               ",
   "    $0 = $1.random_crop($0, [$2, $3, $4])                                             ",
   "    $0 = $1.$0.random_flip_left_right($0)                                                                     ",
   "  $0 = $1.$0.per_image_standardization($0)",
   "  return $0"
  ],
  "identifiers": {
   "condition": [
    "label",
    "random_flip_left_right",
    "one_hot",
    "resize_image_with_crop_or_pad",
    "random_crop",
    "_NUM_CLASSES",
    "train_preprocess_fn"
   ],
   "consequent": [
    "preprocess_image",
    "per_image_standardization",
    "random_flip_left_right",
    "is_training",
    "resize_image_with_crop_or_pad",
    "random_crop"
   ]
  }
 },
 {
  "number": 2690,
  "sha": "ae5adb595834aceb09e6b434ad73cfb0f5f58cdb",
  "author": "k-w-w",
  "participant": "nealwu",
  "created_at": "2017-11-02 19:14:22",
  "merged_at": "2017-11-07 18:01:16",
  "merged_by": "k-w-w",
  "file_path": "official/resnet/cifar10_main.py",
  "condition": [
   "dataset = dataset.map(dataset_parser)"
  ],
  "consequent": [
   "data_dir: The directory containing the input data.",
   "\tbatch_size: The number of samples per batch."
  ],
  "identifiers": {
   "condition": [
    "dataset_parser",
    "map",
    "dataset"
   ],
   "consequent": [
    "number",
    "of",
    "batch_size",
    "data",
    "directory",
    "per",
    "containing",
    "input",
    "data_dir",
    "samples",
    "batch",
    "the",
    "The"
   ]
  }
 },
 {
  "number": 2690,
  "sha": "ae5adb595834aceb09e6b434ad73cfb0f5f58cdb",
  "author": "k-w-w",
  "participant": "nealwu",
  "created_at": "2017-11-02 19:14:22",
  "merged_at": "2017-11-07 18:01:16",
  "merged_by": "k-w-w",
  "file_path": "official/resnet/cifar10_main.py",
  "condition": [
   "                                                 ",
   "\tdataset = dataset.map(train_preprocess_fn)                                                               "
  ],
  "consequent": [],
  "identifiers": {
   "condition": [
    "map",
    "dataset",
    "train_preprocess_fn"
   ],
   "consequent": []
  }
 },
 {
  "number": 2690,
  "sha": "ae5adb595834aceb09e6b434ad73cfb0f5f58cdb",
  "author": "k-w-w",
  "participant": "nealwu",
  "created_at": "2017-11-02 19:14:22",
  "merged_at": "2017-11-07 18:01:16",
  "merged_by": "k-w-w",
  "file_path": "official/resnet/cifar10_main.py",
  "condition": [
   "$0 = $0.shuffle($1=_SHUFFLE_BUFFER)"
  ],
  "consequent": [
   "                                                                     ",
   "\t$0 = $0.shuffle($1=_NUM_IMAGES['train'])"
  ],
  "identifiers": {
   "condition": [
    "_SHUFFLE_BUFFER",
    "shuffle"
   ],
   "consequent": [
    "shuffle",
    "_NUM_IMAGES"
   ]
  }
 },
 {
  "number": 2690,
  "sha": "ae5adb595834aceb09e6b434ad73cfb0f5f58cdb",
  "author": "k-w-w",
  "participant": "nealwu",
  "created_at": "2017-11-02 19:14:22",
  "merged_at": "2017-11-07 18:01:16",
  "merged_by": "k-w-w",
  "file_path": "official/resnet/cifar10_main.py",
  "condition": [
   "lambda $0, $1: (tf.$0.per_image_standardization($0), $1))"
  ],
  "consequent": [
   "lambda $0, $1: (preprocess_image($0, is_training), $1)) ",
   "\tdataset = dataset.prefetch(2 * batch_size)"
  ],
  "identifiers": {
   "condition": [
    "tf",
    "per_image_standardization"
   ],
   "consequent": [
    "preprocess_image",
    "prefetch",
    "batch_size",
    "dataset",
    "is_training"
   ]
  }
 },
 {
  "number": 2690,
  "sha": "ae5adb595834aceb09e6b434ad73cfb0f5f58cdb",
  "author": "k-w-w",
  "participant": "nealwu",
  "created_at": "2017-11-02 19:14:22",
  "merged_at": "2017-11-07 18:01:16",
  "merged_by": "k-w-w",
  "file_path": "official/resnet/cifar10_test.py",
  "condition": [
   "$0 = $0.map($1.dataset_parser)"
  ],
  "consequent": [
   "$0 = $0.map($1.parse_record)"
  ],
  "identifiers": {
   "condition": [
    "map",
    "dataset_parser"
   ],
   "consequent": [
    "map",
    "parse_record"
   ]
  }
 },
 {
  "number": 2690,
  "sha": "ae5adb595834aceb09e6b434ad73cfb0f5f58cdb",
  "author": "k-w-w",
  "participant": "nealwu",
  "created_at": "2017-11-02 19:14:22",
  "merged_at": "2017-11-07 18:01:16",
  "merged_by": "k-w-w",
  "file_path": "official/resnet/imagenet_main.py",
  "condition": [
   "$0 = $0.map(lambda $1: dataset_parser($1, $2),                         $3=5)"
  ],
  "consequent": [
   "$0 = $0.map(lambda $1: dataset_parser($1, $2),                         $3=5)",
   "\t$0 = $0.prefetch(batch_size)"
  ],
  "identifiers": {
   "condition": [
    "map",
    "dataset_parser"
   ],
   "consequent": [
    "batch_size",
    "map",
    "dataset_parser",
    "prefetch"
   ]
  }
 },
 {
  "number": 2727,
  "sha": "3543f02d214cdd9798b4603fa8783652d222a73f",
  "author": "tombstone",
  "participant": "derekjchow",
  "created_at": "2017-11-07 19:31:26",
  "merged_at": "2017-11-09 21:55:01",
  "merged_by": "jch1",
  "file_path": "research/object_detection/builders/anchor_generator_builder.py",
  "condition": [
   "$0=($1                                       .$0))"
  ],
  "consequent": [
   "anchor_strides = None",
   "\tif $1.height_stride:",
   "\tanchor_strides = zip($1.height_stride,                            $1.width_stride)",
   "    anchor_offsets = None",
   "    if $1.height_offset:",
   "\tanchor_offsets = zip($1.height_offset,                            $1.width_offset)",
   "\tscales=[float(scale) for scale in $1.scales],",
   "        interpolated_scale_aspect_ratio=(             $1.interpolated_scale_aspect_ratio),",
   "        base_anchor_size=[             $1.base_anchor_height,             $1.base_anchor_width         ],",
   "        anchor_strides=anchor_strides,",
   "        anchor_offsets=anchor_offsets,",
   "        $0=(             $1.$0))"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "zip",
    "float",
    "width_stride",
    "scales",
    "anchor_offsets",
    "height_offset",
    "scale",
    "width_offset",
    "base_anchor_height",
    "base_anchor_width",
    "base_anchor_size",
    "height_stride",
    "anchor_strides",
    "interpolated_scale_aspect_ratio"
   ]
  }
 },
 {
  "number": 2727,
  "sha": "3543f02d214cdd9798b4603fa8783652d222a73f",
  "author": "tombstone",
  "participant": "derekjchow",
  "created_at": "2017-11-07 19:31:26",
  "merged_at": "2017-11-09 21:55:01",
  "merged_by": "jch1",
  "file_path": "research/object_detection/builders/anchor_generator_builder_test.py",
  "condition": [
   "def test_build_ssd_anchor_generator_withoud_reduced_boxes($0):"
  ],
  "consequent": [
   "import math ",
   "\tdef test_build_ssd_anchor_generator_with_custom_scales($0):",
   "\tanchor_generator_text_proto = \"\"\"",
   "      ssd_anchor_generator {",
   "        aspect_ratios: [1.0]",
   "        scales: [0.1, 0.15, 0.2, 0.4, 0.6, 0.8]",
   "        reduce_boxes_in_lowest_layer: false",
   "      }",
   "    \"\"\"",
   "    anchor_generator_proto = anchor_generator_pb2.AnchorGenerator()",
   "    text_format.Merge(anchor_generator_text_proto, anchor_generator_proto)",
   "    anchor_generator_object = anchor_generator_builder.build(         anchor_generator_proto)",
   "    $0.assertTrue(isinstance(anchor_generator_object,                                multiple_grid_anchor_generator.                                MultipleGridAnchorGenerator))",
   "    for actual_scales, expected_scales in zip(         list(anchor_generator_object._scales),         [(0.1, math.sqrt(0.1 * 0.15)),          (0.15, math.sqrt(0.15 * 0.2)),          (0.2, math.sqrt(0.2 * 0.4)),          (0.4, math.sqrt(0.4 * 0.6)),          (0.6, math.sqrt(0.6 * 0.8)),          (0.8, math.sqrt(0.8 * 1.0))]):",
   "\t$0.assert_almost_list_equal(expected_scales, actual_scales, delta=1e-2) ",
   "  def test_build_ssd_anchor_generator_with_custom_interpolated_scale($0):",
   "\tanchor_generator_text_proto = \"\"\"",
   "      ssd_anchor_generator {",
   "        aspect_ratios: [0.5]",
   "        interpolated_scale_aspect_ratio: 0.5",
   "        reduce_boxes_in_lowest_layer: false",
   "      }",
   "    \"\"\"",
   "    anchor_generator_proto = anchor_generator_pb2.AnchorGenerator()",
   "    text_format.Merge(anchor_generator_text_proto, anchor_generator_proto)",
   "    anchor_generator_object = anchor_generator_builder.build(         anchor_generator_proto)",
   "    $0.assertTrue(isinstance(anchor_generator_object,                                multiple_grid_anchor_generator.                                MultipleGridAnchorGenerator))",
   "    for actual_aspect_ratio, expected_aspect_ratio in zip(         list(anchor_generator_object._aspect_ratios),         6 * [(0.5, 0.5)]):",
   "\t$0.assert_almost_list_equal(expected_aspect_ratio, actual_aspect_ratio) ",
   "  def test_build_ssd_anchor_generator_without_reduced_boxes($0):"
  ],
  "identifiers": {
   "condition": [
    "test_build_ssd_anchor_generator_withoud_reduced_boxes"
   ],
   "consequent": [
    "test_build_ssd_anchor_generator_with_custom_interpolated_scale",
    "_scales",
    "multiple_grid_anchor_generator",
    "actual_scales",
    "text_format",
    "test_build_ssd_anchor_generator_with_custom_scales",
    "math",
    "sqrt",
    "list",
    "expected_aspect_ratio",
    "delta",
    "anchor_generator_pb2",
    "test_build_ssd_anchor_generator_without_reduced_boxes",
    "assertTrue",
    "Merge",
    "actual_aspect_ratio",
    "anchor_generator_text_proto",
    "anchor_generator_builder",
    "isinstance",
    "assert_almost_list_equal",
    "zip",
    "anchor_generator_proto",
    "expected_scales",
    "_aspect_ratios",
    "build",
    "MultipleGridAnchorGenerator",
    "AnchorGenerator",
    "anchor_generator_object"
   ]
  }
 },
 {
  "number": 2727,
  "sha": "3543f02d214cdd9798b4603fa8783652d222a73f",
  "author": "tombstone",
  "participant": "derekjchow",
  "created_at": "2017-11-07 19:31:26",
  "merged_at": "2017-11-09 21:55:01",
  "merged_by": "jch1",
  "file_path": "research/object_detection/builders/anchor_generator_builder_test.py",
  "condition": [
   "$0.",
   "\t$1))"
  ],
  "consequent": [
   "height_stride: 16",
   "\theight_stride: 32",
   "        width_stride: 20",
   "        width_stride: 30",
   "        height_offset: 8",
   "        height_offset: 16",
   "        width_offset: 0",
   "        width_offset: 10",
   "\t$0.",
   "                               $1))"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "height_stride",
    "height_offset",
    "width_stride",
    "width_offset"
   ]
  }
 },
 {
  "number": 2727,
  "sha": "3543f02d214cdd9798b4603fa8783652d222a73f",
  "author": "tombstone",
  "participant": "derekjchow",
  "created_at": "2017-11-07 19:31:26",
  "merged_at": "2017-11-09 21:55:01",
  "merged_by": "jch1",
  "file_path": "research/object_detection/builders/anchor_generator_builder_test.py",
  "condition": [
   "[(1.0, 2.0, 0.5), (2.0,)]):"
  ],
  "consequent": [
   "[(1.0, 2.0, 0.5), (2.0, 1.0)]):",
   "\tself.assert_almost_list_equal(expected_aspect_ratio, actual_aspect_ratio) ",
   "    for actual_strides, expected_strides in zip(",
   "\tlist(anchor_generator_object._anchor_strides), [(16, 20), (32, 30)]):",
   "      self.assert_almost_list_equal(expected_strides, actual_strides) ",
   "\tfor actual_offsets, expected_offsets in zip(",
   "\tlist(anchor_generator_object._anchor_offsets), [(8, 0), (16, 10)]):"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "zip",
    "expected_offsets",
    "expected_aspect_ratio",
    "actual_aspect_ratio",
    "_anchor_strides",
    "_anchor_offsets",
    "self",
    "expected_strides",
    "list",
    "actual_strides",
    "anchor_generator_object",
    "assert_almost_list_equal",
    "actual_offsets"
   ]
  }
 },
 {
  "number": 2727,
  "sha": "3543f02d214cdd9798b4603fa8783652d222a73f",
  "author": "tombstone",
  "participant": "derekjchow",
  "created_at": "2017-11-07 19:31:26",
  "merged_at": "2017-11-09 21:55:01",
  "merged_by": "jch1",
  "file_path": "research/object_detection/builders/anchor_generator_builder_test.py",
  "condition": [
   "$0.assert_almost_list_equal(expected_aspect_ratio, actual_aspect_ratio)"
  ],
  "consequent": [
   "$0.assert_almost_list_equal(expected_offsets, actual_offsets)"
  ],
  "identifiers": {
   "condition": [
    "assert_almost_list_equal",
    "expected_aspect_ratio",
    "actual_aspect_ratio"
   ],
   "consequent": [
    "assert_almost_list_equal",
    "actual_offsets",
    "expected_offsets"
   ]
  }
 },
 {
  "number": 2846,
  "sha": "f893da6d95c1feff49576548d6cc75415e42118c",
  "author": "cclauss",
  "participant": "tensorflow-jenkins",
  "created_at": "2017-11-21 05:12:42",
  "merged_at": "2017-11-21 23:10:45",
  "merged_by": "nealwu",
  "file_path": "research/attention_ocr/python/model_test.py",
  "condition": [
   "from $0 import xrange"
  ],
  "consequent": [
   "from $0.moves import xrange"
  ],
  "identifiers": {
   "condition": [
    "xrange"
   ],
   "consequent": [
    "xrange",
    "moves"
   ]
  }
 },
 {
  "number": 2849,
  "sha": "eff8d09d853d7b6b2716e652ab6baa96322208f2",
  "author": "cclauss",
  "participant": "tensorflow-jenkins",
  "created_at": "2017-11-21 05:46:03",
  "merged_at": "2017-11-21 23:12:38",
  "merged_by": "nealwu",
  "file_path": "research/slim/nets/mobilenet_v1_test.py",
  "condition": [
   "for $0, $1 in $2.iteritems():"
  ],
  "consequent": [
   "for $0, $1 in $2.items():"
  ],
  "identifiers": {
   "condition": [
    "iteritems"
   ],
   "consequent": [
    "items"
   ]
  }
 },
 {
  "number": 2849,
  "sha": "eff8d09d853d7b6b2716e652ab6baa96322208f2",
  "author": "cclauss",
  "participant": "tensorflow-jenkins",
  "created_at": "2017-11-21 05:46:03",
  "merged_at": "2017-11-21 23:12:38",
  "merged_by": "nealwu",
  "file_path": "research/slim/nets/mobilenet_v1_test.py",
  "condition": [
   "for $0, $1 in $2.iteritems():"
  ],
  "consequent": [
   "for $0, $1 in $2.items():"
  ],
  "identifiers": {
   "condition": [
    "iteritems"
   ],
   "consequent": [
    "items"
   ]
  }
 },
 {
  "number": 2849,
  "sha": "eff8d09d853d7b6b2716e652ab6baa96322208f2",
  "author": "cclauss",
  "participant": "tensorflow-jenkins",
  "created_at": "2017-11-21 05:46:03",
  "merged_at": "2017-11-21 23:12:38",
  "merged_by": "nealwu",
  "file_path": "research/slim/nets/mobilenet_v1_test.py",
  "condition": [
   "for $0, $1 in $2.iteritems():"
  ],
  "consequent": [
   "for $0, $1 in $2.items():"
  ],
  "identifiers": {
   "condition": [
    "iteritems"
   ],
   "consequent": [
    "items"
   ]
  }
 },
 {
  "number": 2849,
  "sha": "eff8d09d853d7b6b2716e652ab6baa96322208f2",
  "author": "cclauss",
  "participant": "tensorflow-jenkins",
  "created_at": "2017-11-21 05:46:03",
  "merged_at": "2017-11-21 23:12:38",
  "merged_by": "nealwu",
  "file_path": "research/slim/nets/mobilenet_v1_test.py",
  "condition": [
   "for $0, $1 in $2.iteritems():"
  ],
  "consequent": [
   "for $0, $1 in $2.items():"
  ],
  "identifiers": {
   "condition": [
    "iteritems"
   ],
   "consequent": [
    "items"
   ]
  }
 },
 {
  "number": 3023,
  "sha": "c8ed619afb0af0cd597e8e1c5ed8db0aa6cc70de",
  "author": "mhyttsten",
  "participant": "tensorflow-jenkins",
  "created_at": "2017-12-18 23:36:59",
  "merged_at": "2017-12-19 15:54:44",
  "merged_by": "MarkDaoust",
  "file_path": "samples/outreach/blogs/Blog_Custom_Estimators.py",
  "condition": [
   "if sys.version_info < (3, 0, 0):",
   "\tfrom $0 import urlopen",
   "else:",
   "\tfrom $0.$1 import urlopen"
  ],
  "consequent": [
   "import six.moves.$0.$1 as $1"
  ],
  "identifiers": {
   "condition": [
    "sys",
    "version_info",
    "urlopen"
   ],
   "consequent": [
    "six",
    "moves"
   ]
  }
 },
 {
  "number": 3023,
  "sha": "c8ed619afb0af0cd597e8e1c5ed8db0aa6cc70de",
  "author": "mhyttsten",
  "participant": "tensorflow-jenkins",
  "created_at": "2017-12-18 23:36:59",
  "merged_at": "2017-12-19 15:54:44",
  "merged_by": "MarkDaoust",
  "file_path": "samples/outreach/blogs/Blog_Custom_Estimators.py",
  "condition": [
   "$0 = urlopen($1).read()"
  ],
  "consequent": [
   "$0 = request.urlopen($1).read()"
  ],
  "identifiers": {
   "condition": [
    "urlopen",
    "read"
   ],
   "consequent": [
    "request",
    "urlopen",
    "read"
   ]
  }
 },
 {
  "number": 3023,
  "sha": "c8ed619afb0af0cd597e8e1c5ed8db0aa6cc70de",
  "author": "mhyttsten",
  "participant": "tensorflow-jenkins",
  "created_at": "2017-12-18 23:36:59",
  "merged_at": "2017-12-19 15:54:44",
  "merged_by": "MarkDaoust",
  "file_path": "samples/outreach/blogs/Blog_Custom_Estimators.py",
  "condition": [
   "logits = tf.layers.Dense(3, activation=tf.nn.relu)(h2)"
  ],
  "consequent": [],
  "identifiers": {
   "condition": [
    "Dense",
    "layers",
    "logits",
    "tf",
    "relu",
    "nn",
    "h2",
    "activation"
   ],
   "consequent": []
  }
 },
 {
  "number": 3024,
  "sha": "4d79fee396e789b1c2fb53d391ea792907c59c95",
  "author": "asimshankar",
  "participant": "martinwicke",
  "created_at": "2017-12-19 01:15:43",
  "merged_at": "2017-12-21 00:34:24",
  "merged_by": "asimshankar",
  "file_path": "official/mnist/mnist.py",
  "condition": [
   "def predict_spec(model, $0):",
   "\t\"\"\"EstimatorSpec for predictions.\"\"\"",
   "  if isinstance($0, $1):",
   "\t$0 = $0['image']",
   "  logits = model($0, training=False)",
   "  predictions = {       'classes': tf.argmax(logits, axis=1),       'probabilities': tf.nn.softmax(logits),   }",
   "  return tf.estimator.EstimatorSpec(       mode=tf.estimator.ModeKeys.PREDICT,       predictions=predictions,       export_outputs={           'classify': tf.estimator.export.PredictOutput(predictions)       })  ",
   "def train_spec(model, $0, labels):",
   "\t\"\"\"EstimatorSpec for training.\"\"\"",
   "  optimizer = tf.train.AdamOptimizer(learning_rate=1e-4)",
   "  logits = model($0, training=True)",
   "  loss = tf.losses.softmax_cross_entropy(onehot_labels=labels, logits=logits)",
   "  accuracy = tf.metrics.accuracy(       labels=tf.argmax(labels, axis=1), predictions=tf.argmax(logits, axis=1))                                                                                        ",
   "  tf.identity(accuracy[1], name='train_accuracy')",
   "  tf.summary.scalar('train_accuracy', accuracy[1])",
   "  return tf.estimator.EstimatorSpec(       mode=tf.estimator.ModeKeys.TRAIN,       loss=loss,       train_op=optimizer.minimize(loss, tf.train.get_or_create_global_step()))  ",
   "def eval_spec(model, $0, labels):",
   "\t\"\"\"EstimatorSpec for evaluation.\"\"\"",
   "  logits = model($0, training=False)",
   "  loss = tf.losses.softmax_cross_entropy(onehot_labels=labels, logits=logits)",
   "  return tf.estimator.EstimatorSpec(       mode=tf.estimator.ModeKeys.EVAL,       loss=loss,       eval_metric_ops={           'accuracy':               tf.metrics.accuracy(                   labels=tf.argmax(labels, axis=1),                   predictions=tf.argmax(logits, axis=1)),       })"
  ],
  "consequent": [
   "$0 = features",
   "\tif isinstance($0, $1):",
   "\t$0 = features['image']"
  ],
  "identifiers": {
   "condition": [
    "training",
    "EstimatorSpec",
    "eval_spec",
    "mode",
    "PREDICT",
    "PredictOutput",
    "nn",
    "optimizer",
    "metrics",
    "argmax",
    "AdamOptimizer",
    "predictions",
    "name",
    "softmax",
    "export",
    "isinstance",
    "summary",
    "TRAIN",
    "train_op",
    "identity",
    "eval_metric_ops",
    "train",
    "softmax_cross_entropy",
    "EVAL",
    "learning_rate",
    "tf",
    "predict_spec",
    "export_outputs",
    "minimize",
    "accuracy",
    "model",
    "labels",
    "onehot_labels",
    "estimator",
    "loss",
    "axis",
    "ModeKeys",
    "train_spec",
    "get_or_create_global_step",
    "logits",
    "losses",
    "scalar"
   ],
   "consequent": [
    "features",
    "isinstance"
   ]
  }
 },
 {
  "number": 3024,
  "sha": "4d79fee396e789b1c2fb53d391ea792907c59c95",
  "author": "asimshankar",
  "participant": "martinwicke",
  "created_at": "2017-12-19 01:15:43",
  "merged_at": "2017-12-21 00:34:24",
  "merged_by": "asimshankar",
  "file_path": "official/mnist/mnist.py",
  "condition": [
   "return predict_spec($0, features)"
  ],
  "consequent": [
   "logits = $0(image, training=False)",
   "\tpredictions = {         'classes': tf.argmax(logits, axis=1),         'probabilities': tf.nn.softmax(logits),     }",
   "    return tf.estimator.EstimatorSpec(         mode=tf.estimator.ModeKeys.PREDICT,         predictions=predictions,         export_outputs={             'classify': tf.estimator.export.PredictOutput(predictions)         })"
  ],
  "identifiers": {
   "condition": [
    "predict_spec",
    "features"
   ],
   "consequent": [
    "training",
    "estimator",
    "EstimatorSpec",
    "axis",
    "argmax",
    "mode",
    "predictions",
    "ModeKeys",
    "softmax",
    "PREDICT",
    "logits",
    "tf",
    "export_outputs",
    "export",
    "PredictOutput",
    "image",
    "nn"
   ]
  }
 },
 {
  "number": 3024,
  "sha": "4d79fee396e789b1c2fb53d391ea792907c59c95",
  "author": "asimshankar",
  "participant": "martinwicke",
  "created_at": "2017-12-19 01:15:43",
  "merged_at": "2017-12-21 00:34:24",
  "merged_by": "asimshankar",
  "file_path": "official/mnist/mnist.py",
  "condition": [
   "return train_spec($0, features, $1)"
  ],
  "consequent": [
   "optimizer = tf.train.AdamOptimizer(learning_rate=1e-4)",
   "\tlogits = $0(image, training=True)",
   "    loss = tf.losses.softmax_cross_entropy(onehot_labels=$1, logits=logits)",
   "    accuracy = tf.metrics.accuracy(         $1=tf.argmax($1, axis=1), predictions=tf.argmax(logits, axis=1))                                                                                            ",
   "    tf.identity(accuracy[1], name='train_accuracy')",
   "    tf.summary.scalar('train_accuracy', accuracy[1])",
   "    return tf.estimator.EstimatorSpec(         mode=tf.estimator.ModeKeys.TRAIN,         loss=loss,         train_op=optimizer.minimize(loss, tf.train.get_or_create_global_step()))"
  ],
  "identifiers": {
   "condition": [
    "features",
    "train_spec"
   ],
   "consequent": [
    "training",
    "EstimatorSpec",
    "mode",
    "optimizer",
    "metrics",
    "argmax",
    "AdamOptimizer",
    "predictions",
    "name",
    "TRAIN",
    "summary",
    "image",
    "train_op",
    "identity",
    "train",
    "softmax_cross_entropy",
    "learning_rate",
    "tf",
    "minimize",
    "accuracy",
    "onehot_labels",
    "estimator",
    "loss",
    "axis",
    "ModeKeys",
    "get_or_create_global_step",
    "logits",
    "losses",
    "scalar"
   ]
  }
 },
 {
  "number": 3024,
  "sha": "4d79fee396e789b1c2fb53d391ea792907c59c95",
  "author": "asimshankar",
  "participant": "martinwicke",
  "created_at": "2017-12-19 01:15:43",
  "merged_at": "2017-12-21 00:34:24",
  "merged_by": "asimshankar",
  "file_path": "official/mnist/mnist.py",
  "condition": [
   "return eval_spec($0, features, $1)"
  ],
  "consequent": [
   "logits = $0(image, training=False)",
   "\tloss = tf.losses.softmax_cross_entropy(onehot_labels=$1, logits=logits)",
   "    return tf.estimator.EstimatorSpec(         mode=tf.estimator.ModeKeys.EVAL,         loss=loss,         eval_metric_ops={             'accuracy':                 tf.metrics.accuracy(                     $1=tf.argmax($1, axis=1),                     predictions=tf.argmax(logits, axis=1)),         })"
  ],
  "identifiers": {
   "condition": [
    "eval_spec",
    "features"
   ],
   "consequent": [
    "training",
    "EstimatorSpec",
    "mode",
    "metrics",
    "argmax",
    "predictions",
    "image",
    "eval_metric_ops",
    "softmax_cross_entropy",
    "EVAL",
    "tf",
    "accuracy",
    "onehot_labels",
    "estimator",
    "loss",
    "axis",
    "ModeKeys",
    "logits",
    "losses"
   ]
  }
 },
 {
  "number": 3024,
  "sha": "4d79fee396e789b1c2fb53d391ea792907c59c95",
  "author": "asimshankar",
  "participant": "martinwicke",
  "created_at": "2017-12-19 01:15:43",
  "merged_at": "2017-12-21 00:34:24",
  "merged_by": "asimshankar",
  "file_path": "official/mnist/mnist.py",
  "condition": [
   "'image': tf.placeholder(tf.float32, [None, 28, 28])"
  ],
  "consequent": [
   "'image': image,"
  ],
  "identifiers": {
   "condition": [
    "tf",
    "float32",
    "placeholder"
   ],
   "consequent": [
    "image"
   ]
  }
 },
 {
  "number": 3093,
  "sha": "4a36e31baf9c98130bee1d40e779a959755d8652",
  "author": "asimshankar",
  "participant": "k-w-w",
  "created_at": "2018-01-02 22:04:45",
  "merged_at": "2018-01-03 01:31:50",
  "merged_by": "asimshankar",
  "file_path": "official/mnist/dataset.py",
  "condition": [
   "def maybe_download($0, $1):"
  ],
  "consequent": [
   "from six.moves import urllib",
   "def download($0, $1):"
  ],
  "identifiers": {
   "condition": [
    "maybe_download"
   ],
   "consequent": [
    "urllib",
    "six",
    "download",
    "moves"
   ]
  }
 },
 {
  "number": 3093,
  "sha": "4a36e31baf9c98130bee1d40e779a959755d8652",
  "author": "asimshankar",
  "participant": "k-w-w",
  "created_at": "2018-01-02 22:04:45",
  "merged_at": "2018-01-03 01:31:50",
  "merged_by": "asimshankar",
  "file_path": "official/mnist/dataset.py",
  "condition": [
   "zipped_filename = filename + '.gz'"
  ],
  "consequent": [
   "zipped_filepath = filepath + '.gz'",
   "\tprint('Downloading %s to %s' % (url, zipped_filepath))",
   "  urllib.request.urlretrieve(url, zipped_filepath)",
   "  with gzip.open(zipped_filepath, 'rb') as f_in, open(filepath, 'wb') as f_out:"
  ],
  "identifiers": {
   "condition": [
    "filename",
    "zipped_filename"
   ],
   "consequent": [
    "open",
    "urllib",
    "request",
    "url",
    "f_out",
    "f_in",
    "zipped_filepath",
    "print",
    "filepath",
    "gzip",
    "urlretrieve"
   ]
  }
 },
 {
  "number": 3093,
  "sha": "4a36e31baf9c98130bee1d40e779a959755d8652",
  "author": "asimshankar",
  "participant": "k-w-w",
  "created_at": "2018-01-02 22:04:45",
  "merged_at": "2018-01-03 01:31:50",
  "merged_by": "asimshankar",
  "file_path": "official/mnist/dataset.py",
  "condition": [
   "zipped_filepath = os.path.join($0, zipped_filename)",
   "\ttf.contrib.learn.datasets.base.maybe_download(zipped_filename, $0, url)",
   "  with gzip.open(os.path.join(zipped_filepath), 'rb') as f_in, open(       filepath, 'wb') as f_out:",
   "  $1 = maybe_download($0, $1)"
  ],
  "consequent": [
   "$1 = download($0, $1)"
  ],
  "identifiers": {
   "condition": [
    "open",
    "os",
    "maybe_download",
    "url",
    "join",
    "f_out",
    "datasets",
    "path",
    "f_in",
    "tf",
    "base",
    "zipped_filepath",
    "contrib",
    "learn",
    "filepath",
    "gzip",
    "zipped_filename"
   ],
   "consequent": [
    "download"
   ]
  }
 },
 {
  "number": 3093,
  "sha": "4a36e31baf9c98130bee1d40e779a959755d8652",
  "author": "asimshankar",
  "participant": "k-w-w",
  "created_at": "2018-01-02 22:04:45",
  "merged_at": "2018-01-03 01:31:50",
  "merged_by": "asimshankar",
  "file_path": "official/mnist/dataset.py",
  "condition": [
   "$0 = maybe_download($1, $0)"
  ],
  "consequent": [
   "$0 = download($1, $0)"
  ],
  "identifiers": {
   "condition": [
    "maybe_download"
   ],
   "consequent": [
    "download"
   ]
  }
 },
 {
  "number": 3106,
  "sha": "9ccb66226642ae8304d8b1a7a375d024e93db1bc",
  "author": "dakshvar22",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-01-04 11:57:39",
  "merged_at": "2018-01-10 21:04:57",
  "merged_by": "derekjchow",
  "file_path": "research/object_detection/exporter.py",
  "condition": [
   "$0=1)"
  ],
  "consequent": [
   "$0=rewriter_config_pb2.RewriterConfig.ON)"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "ON",
    "RewriterConfig",
    "rewriter_config_pb2"
   ]
  }
 },
 {
  "number": 3220,
  "sha": "7431515fddad576a2f614e90c14e1af022017311",
  "author": "cclauss",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-01-22 23:18:59",
  "merged_at": "2018-01-23 20:26:04",
  "merged_by": "nealwu",
  "file_path": "research/object_detection/dataset_tools/create_oid_tf_record.py",
  "condition": [
   "try:",
   "\tlong                  ",
   "except NameError:",
   "\tlong = $0            ",
   "\t$1 = long($2, 16) % $3.$4"
  ],
  "consequent": [
   "$1 = $0($2, 16) % $3.$4"
  ],
  "identifiers": {
   "condition": [
    "long",
    "NameError"
   ],
   "consequent": []
  }
 },
 {
  "number": 3314,
  "sha": "4070fa635b0964f4279e63b62d92903ac14c2899",
  "author": "djoshea",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-03 00:34:12",
  "merged_at": "2018-02-06 17:28:46",
  "merged_by": "sussillo",
  "file_path": "research/lfads/utils.py",
  "condition": [
   "if $0, $1 $2 $3 an appropriately sized, non-trainable vector"
  ],
  "consequent": [
   "if $0, $1 $2 $3 None"
  ],
  "identifiers": {
   "condition": [
    "vector",
    "sized",
    "trainable",
    "appropriately",
    "an",
    "non"
   ],
   "consequent": []
  }
 },
 {
  "number": 3314,
  "sha": "4070fa635b0964f4279e63b62d92903ac14c2899",
  "author": "djoshea",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-03 00:34:12",
  "merged_at": "2018-02-06 17:28:46",
  "merged_by": "sussillo",
  "file_path": "research/lfads/utils.py",
  "condition": [
   "b_collections = [tf.GraphKeys.GLOBAL_VARIABLES]",
   "\tif collections:",
   "\tb_collections += collections",
   "  bname = (name + \"/b\") if name else \"/b\""
  ],
  "consequent": [
   "b = None"
  ],
  "identifiers": {
   "condition": [
    "b_collections",
    "GLOBAL_VARIABLES",
    "name",
    "bname",
    "tf",
    "collections",
    "GraphKeys"
   ],
   "consequent": [
    "b"
   ]
  }
 },
 {
  "number": 3314,
  "sha": "4070fa635b0964f4279e63b62d92903ac14c2899",
  "author": "djoshea",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-03 00:34:12",
  "merged_at": "2018-02-06 17:28:46",
  "merged_by": "sussillo",
  "file_path": "research/lfads/utils.py",
  "condition": [
   "$0=$1, $2=$2)"
  ],
  "consequent": [
   "$1 = [tf.GraphKeys.GLOBAL_VARIABLES]",
   "\tif $0:",
   "\t$1 += $0",
   "    bname = (name + \"/b\") if name else \"/b\"",
   "\t$0=$1,",
   "                          $2=$2)"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "GLOBAL_VARIABLES",
    "name",
    "bname",
    "tf",
    "GraphKeys"
   ]
  }
 },
 {
  "number": 3334,
  "sha": "2ed6b9d9febdfd38b224dfb2ce1916d0a49c2f50",
  "author": "nealwu",
  "participant": "k-w-w",
  "created_at": "2018-02-06 20:29:28",
  "merged_at": "2018-02-07 20:18:02",
  "merged_by": "nealwu",
  "file_path": "official/wide_deep/wide_deep_test.py",
  "condition": [
   "$0, $1 = $2.input_fn($3.$4, 1, False, 1)"
  ],
  "consequent": [
   "dataset = $2.input_fn($3.$4, 1, False, 1)",
   "\t$0, $1 = dataset.make_one_shot_iterator().get_next()"
  ],
  "identifiers": {
   "condition": [
    "input_fn"
   ],
   "consequent": [
    "input_fn",
    "dataset",
    "get_next",
    "make_one_shot_iterator"
   ]
  }
 },
 {
  "number": 3339,
  "sha": "fd087884c2d5f2fccd50c1c1432aa1547742644e",
  "author": "newcoder",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-07 08:34:26",
  "merged_at": "2018-02-08 22:18:32",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/generate_cifar10_tfrecords.py",
  "condition": [
   "import pickle"
  ],
  "consequent": [
   "from six.moves import cPickle as pickle"
  ],
  "identifiers": {
   "condition": [
    "pickle"
   ],
   "consequent": [
    "pickle",
    "six",
    "moves",
    "cPickle"
   ]
  }
 },
 {
  "number": 3339,
  "sha": "fd087884c2d5f2fccd50c1c1432aa1547742644e",
  "author": "newcoder",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-07 08:34:26",
  "merged_at": "2018-02-08 22:18:32",
  "merged_by": "tfboyd",
  "file_path": "tutorials/image/cifar10_estimator/generate_cifar10_tfrecords.py",
  "condition": [
   "$0 = $1.load($2, encoding='latin1')"
  ],
  "consequent": [
   "$0 = $1.load($2)"
  ],
  "identifiers": {
   "condition": [
    "load",
    "encoding"
   ],
   "consequent": [
    "load"
   ]
  }
 },
 {
  "number": 3343,
  "sha": "75c042575c8a4fed4239d419d0d463ca5bb5f80b",
  "author": "nealwu",
  "participant": "karmel",
  "created_at": "2018-02-08 07:11:18",
  "merged_at": "2018-02-08 20:16:47",
  "merged_by": "nealwu",
  "file_path": "official/resnet/cifar10_test.py",
  "condition": [
   "for $0 in range(3):"
  ],
  "consequent": [
   "_HEIGHT = 32",
   "_WIDTH = 32",
   "_NUM_CHANNELS = 3",
   "\tfor $0 in range(_NUM_CHANNELS):"
  ],
  "identifiers": {
   "condition": [
    "range"
   ],
   "consequent": [
    "_WIDTH",
    "_HEIGHT",
    "range",
    "_NUM_CHANNELS"
   ]
  }
 },
 {
  "number": 3343,
  "sha": "75c042575c8a4fed4239d419d0d463ca5bb5f80b",
  "author": "nealwu",
  "participant": "karmel",
  "created_at": "2018-02-08 07:11:18",
  "merged_at": "2018-02-08 20:16:47",
  "merged_by": "nealwu",
  "file_path": "official/resnet/cifar10_test.py",
  "condition": [
   "for $0 in range(1024):"
  ],
  "consequent": [
   "for $0 in range(_HEIGHT * _WIDTH):"
  ],
  "identifiers": {
   "condition": [
    "range"
   ],
   "consequent": [
    "_WIDTH",
    "_HEIGHT",
    "range"
   ]
  }
 },
 {
  "number": 3343,
  "sha": "75c042575c8a4fed4239d419d0d463ca5bb5f80b",
  "author": "nealwu",
  "participant": "karmel",
  "created_at": "2018-02-08 07:11:18",
  "merged_at": "2018-02-08 20:16:47",
  "merged_by": "nealwu",
  "file_path": "official/resnet/cifar10_test.py",
  "condition": [
   "$0.assertEqual($1.get_shape().as_list(), [10])",
   "\t$0.assertEqual($2.get_shape().as_list(), [32, 32, 3])"
  ],
  "consequent": [
   "$0.assertAllEqual($1.shape, (10,))",
   "\t$0.assertAllEqual($2.shape, (_HEIGHT, _WIDTH, _NUM_CHANNELS))"
  ],
  "identifiers": {
   "condition": [
    "as_list",
    "assertEqual",
    "get_shape"
   ],
   "consequent": [
    "shape",
    "assertAllEqual",
    "_NUM_CHANNELS",
    "_WIDTH",
    "_HEIGHT"
   ]
  }
 },
 {
  "number": 3343,
  "sha": "75c042575c8a4fed4239d419d0d463ca5bb5f80b",
  "author": "nealwu",
  "participant": "karmel",
  "created_at": "2018-02-08 07:11:18",
  "merged_at": "2018-02-08 20:16:47",
  "merged_by": "nealwu",
  "file_path": "official/resnet/cifar10_test.py",
  "condition": [
   "$0 = $1.random_uniform([$2, 32, 32, 3])"
  ],
  "consequent": [
   "$0 = $1.random_uniform([$2, _HEIGHT, _WIDTH, _NUM_CHANNELS])"
  ],
  "identifiers": {
   "condition": [
    "random_uniform"
   ],
   "consequent": [
    "_WIDTH",
    "random_uniform",
    "_HEIGHT",
    "_NUM_CHANNELS"
   ]
  }
 },
 {
  "number": 3376,
  "sha": "982a5504d5879b3cfdb051f452f4573e35623fc3",
  "author": "plakal",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-13 20:58:10",
  "merged_at": "2018-02-13 21:08:29",
  "merged_by": "plakal",
  "file_path": "research/audioset/mel_features.py",
  "condition": [
   "if upper_edge_hertz > nyquist_hertz:",
   "\traise ValueError(\"upper_edge_hertz %.1f is greater than Nyquist %.1f\" %                      (upper_edge_hertz, nyquist_hertz))"
  ],
  "consequent": [
   "if lower_edge_hertz < 0.0:",
   "\traise ValueError(\"lower_edge_hertz %.1f must be >= 0\" % lower_edge_hertz)"
  ],
  "identifiers": {
   "condition": [
    "nyquist_hertz",
    "ValueError",
    "upper_edge_hertz"
   ],
   "consequent": [
    "ValueError",
    "lower_edge_hertz"
   ]
  }
 },
 {
  "number": 3400,
  "sha": "2b56ede527955ae6ca582520c9a91a440e112c46",
  "author": "asimshankar",
  "participant": "sbl",
  "created_at": "2018-02-16 23:25:43",
  "merged_at": "2018-02-17 01:35:39",
  "merged_by": "asimshankar",
  "file_path": "official/mnist/mnist.py",
  "condition": [
   "\"\"\"Class that defines a graph $0 $1 $2 in $3 $4 $5."
  ],
  "consequent": [
   "\"\"\"Model $0 $1 $2 in $3 $4 $5."
  ],
  "identifiers": {
   "condition": [
    "graph",
    "that",
    "a",
    "Class",
    "defines"
   ],
   "consequent": [
    "Model"
   ]
  }
 },
 {
  "number": 3400,
  "sha": "2b56ede527955ae6ca582520c9a91a440e112c46",
  "author": "asimshankar",
  "participant": "sbl",
  "created_at": "2018-02-16 23:25:43",
  "merged_at": "2018-02-17 01:35:39",
  "merged_by": "asimshankar",
  "file_path": "official/mnist/mnist.py",
  "condition": [
   "$0 $1 as $2 $3.$4 and $3.$5 APIs."
  ],
  "consequent": [
   "$0 $1 as $2 $3.$4.Model using the $3.$5 API."
  ],
  "identifiers": {
   "condition": [
    "APIs"
   ],
   "consequent": [
    "using",
    "the",
    "Model",
    "API"
   ]
  }
 },
 {
  "number": 3400,
  "sha": "2b56ede527955ae6ca582520c9a91a440e112c46",
  "author": "asimshankar",
  "participant": "sbl",
  "created_at": "2018-02-16 23:25:43",
  "merged_at": "2018-02-17 01:35:39",
  "merged_by": "asimshankar",
  "file_path": "official/mnist/mnist_eager.py",
  "condition": [
   "$0 = $1.test($2.$3).batch(10000)"
  ],
  "consequent": [
   "                                                                                                                                                                 ",
   "\t$0 = $1.test($2.$3).batch($2.batch_size)"
  ],
  "identifiers": {
   "condition": [
    "batch",
    "test"
   ],
   "consequent": [
    "batch_size",
    "batch",
    "test"
   ]
  }
 },
 {
  "number": 3402,
  "sha": "9a9e42288490bbfb4146489b1a817e4eefd6bca8",
  "author": "a-dai",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-17 02:46:08",
  "merged_at": "2018-02-20 07:08:27",
  "merged_by": "a-dai",
  "file_path": "research/adversarial_text/adversarial_losses.py",
  "condition": [
   "[$0 * $1, $2] if $2 > 2, and"
  ],
  "consequent": [
   "if FLAGS.single_label:",
   "\tindices = tf.stack([tf.range(FLAGS.$1), inputs.length - 1], 1)",
   "    weights = tf.expand_dims(tf.gather_nd(inputs.eos_weights, indices), 1) ",
   "  if FLAGS.single_label:",
   "\tindices = tf.stack([tf.range(FLAGS.$1), f_inputs.length - 1], 1)",
   "    weights = tf.expand_dims(tf.gather_nd(f_inputs.eos_weights, indices), 1)",
   "\t[$1, $0, $2] if $2 > 2, and"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "inputs",
    "FLAGS",
    "length",
    "gather_nd",
    "single_label",
    "eos_weights",
    "range",
    "weights",
    "tf",
    "indices",
    "expand_dims",
    "stack",
    "f_inputs"
   ]
  }
 },
 {
  "number": 3402,
  "sha": "9a9e42288490bbfb4146489b1a817e4eefd6bca8",
  "author": "a-dai",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-17 02:46:08",
  "merged_at": "2018-02-20 07:08:27",
  "merged_by": "a-dai",
  "file_path": "research/adversarial_text/data/data_utils.py",
  "condition": [
   "$0: bool."
  ],
  "consequent": [
   "$0: integer, starting from 0."
  ],
  "identifiers": {
   "condition": [
    "bool"
   ],
   "consequent": [
    "integer",
    "starting"
   ]
  }
 },
 {
  "number": 3402,
  "sha": "9a9e42288490bbfb4146489b1a817e4eefd6bca8",
  "author": "a-dai",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-17 02:46:08",
  "merged_at": "2018-02-20 07:08:27",
  "merged_by": "a-dai",
  "file_path": "research/adversarial_text/graphs.py",
  "condition": [
   "$0.$1 = $2.contrib.framework.get_or_create_global_step()"
  ],
  "consequent": [
   "flags.DEFINE_bool('single_label', True, 'Whether the sequence has a single '                   'label, for optimization.')",
   "\t$0.$1 = $2.train.get_or_create_global_step()"
  ],
  "identifiers": {
   "condition": [
    "framework",
    "contrib",
    "get_or_create_global_step"
   ],
   "consequent": [
    "train",
    "DEFINE_bool",
    "flags",
    "get_or_create_global_step"
   ]
  }
 },
 {
  "number": 3402,
  "sha": "9a9e42288490bbfb4146489b1a817e4eefd6bca8",
  "author": "a-dai",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-17 02:46:08",
  "merged_at": "2018-02-20 07:08:27",
  "merged_by": "a-dai",
  "file_path": "research/adversarial_text/graphs.py",
  "condition": [
   "$0 = $1.accuracy($2, $3.$4, $3.$5)"
  ],
  "consequent": [
   "if FLAGS.single_label:",
   "\tindices = tf.stack([tf.range(FLAGS.batch_size), $3.length - 1], 1)",
   "      $4 = tf.expand_dims(tf.gather_nd($3.$4, indices), 1)",
   "      $5 = tf.expand_dims(tf.gather_nd($3.$5, indices), 1)",
   "    else:",
   "\t$4 = $3.$4",
   "      $5 = $3.$5",
   "    $0 = $1.accuracy($2, $4, $5)"
  ],
  "identifiers": {
   "condition": [
    "accuracy"
   ],
   "consequent": [
    "FLAGS",
    "length",
    "gather_nd",
    "single_label",
    "batch_size",
    "range",
    "tf",
    "indices",
    "expand_dims",
    "accuracy",
    "stack"
   ]
  }
 },
 {
  "number": 3402,
  "sha": "9a9e42288490bbfb4146489b1a817e4eefd6bca8",
  "author": "a-dai",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-17 02:46:08",
  "merged_at": "2018-02-20 07:08:27",
  "merged_by": "a-dai",
  "file_path": "research/adversarial_text/graphs.py",
  "condition": [
   "$0.predictions($1), $2.$3, $2.$4)"
  ],
  "consequent": [
   "if FLAGS.single_label:",
   "\tindices = tf.stack([tf.range(FLAGS.batch_size), $2.length - 1], 1)",
   "      $3 = tf.expand_dims(tf.gather_nd($2.$3, indices), 1)",
   "      $4 = tf.expand_dims(tf.gather_nd($2.$4, indices), 1)",
   "    else:",
   "\t$3 = $2.$3",
   "      $4 = $2.$4",
   "\t$0.predictions($1), $3, $4)"
  ],
  "identifiers": {
   "condition": [
    "predictions"
   ],
   "consequent": [
    "FLAGS",
    "length",
    "gather_nd",
    "single_label",
    "batch_size",
    "predictions",
    "range",
    "tf",
    "indices",
    "expand_dims",
    "stack"
   ]
  }
 },
 {
  "number": 3402,
  "sha": "9a9e42288490bbfb4146489b1a817e4eefd6bca8",
  "author": "a-dai",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-17 02:46:08",
  "merged_at": "2018-02-20 07:08:27",
  "merged_by": "a-dai",
  "file_path": "research/adversarial_text/graphs.py",
  "condition": [
   "$0 = $1.classification_loss($2, $3.$4, $3.$5)"
  ],
  "consequent": [
   "if FLAGS.single_label:",
   "\tindices = tf.stack([tf.range(FLAGS.batch_size), $3.length - 1], 1)",
   "      lstm_out = tf.expand_dims(tf.gather_nd(lstm_out, indices), 1)",
   "      $4 = tf.expand_dims(tf.gather_nd($3.$4, indices), 1)",
   "      $5 = tf.expand_dims(tf.gather_nd($3.$5, indices), 1)",
   "    else:",
   "\t$4 = $3.$4",
   "      $5 = $3.$5",
   "    $0 = $1.classification_loss($2, $4, $5)"
  ],
  "identifiers": {
   "condition": [
    "classification_loss"
   ],
   "consequent": [
    "FLAGS",
    "length",
    "gather_nd",
    "single_label",
    "batch_size",
    "lstm_out",
    "range",
    "tf",
    "classification_loss",
    "indices",
    "expand_dims",
    "stack"
   ]
  }
 },
 {
  "number": 3402,
  "sha": "9a9e42288490bbfb4146489b1a817e4eefd6bca8",
  "author": "a-dai",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-17 02:46:08",
  "merged_at": "2018-02-20 07:08:27",
  "merged_by": "a-dai",
  "file_path": "research/adversarial_text/graphs.py",
  "condition": [
   "tf.summary.scalar('total_classification_loss', total_loss)"
  ],
  "consequent": [],
  "identifiers": {
   "condition": [
    "scalar",
    "tf",
    "total_loss",
    "summary"
   ],
   "consequent": []
  }
 },
 {
  "number": 3402,
  "sha": "9a9e42288490bbfb4146489b1a817e4eefd6bca8",
  "author": "a-dai",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-17 02:46:08",
  "merged_at": "2018-02-20 07:08:27",
  "merged_by": "a-dai",
  "file_path": "research/adversarial_text/layers.py",
  "condition": [
   "$0 = $1.contrib.keras"
  ],
  "consequent": [
   "$0 = $1.keras"
  ],
  "identifiers": {
   "condition": [
    "keras",
    "contrib"
   ],
   "consequent": [
    "keras"
   ]
  }
 },
 {
  "number": 3402,
  "sha": "9a9e42288490bbfb4146489b1a817e4eefd6bca8",
  "author": "a-dai",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-17 02:46:08",
  "merged_at": "2018-02-20 07:08:27",
  "merged_by": "a-dai",
  "file_path": "research/adversarial_text/layers.py",
  "condition": [
   "\"\"\"$0 $1 $2 static_rnn."
  ],
  "consequent": [
   "\"\"\"$0 $1 $2 dynamic_rnn."
  ],
  "identifiers": {
   "condition": [
    "static_rnn"
   ],
   "consequent": [
    "dynamic_rnn"
   ]
  }
 },
 {
  "number": 3402,
  "sha": "9a9e42288490bbfb4146489b1a817e4eefd6bca8",
  "author": "a-dai",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-17 02:46:08",
  "merged_at": "2018-02-20 07:08:27",
  "merged_by": "a-dai",
  "file_path": "research/adversarial_text/layers.py",
  "condition": [
   "                                               ",
   "\tx = $0.unstack($0.transpose(x, perm=[1, 0, 2]))",
   "      $1, $2 = $0.contrib.rnn.static_rnn("
  ],
  "consequent": [
   "$1, $2 = $0.nn.dynamic_rnn("
  ],
  "identifiers": {
   "condition": [
    "unstack",
    "x",
    "static_rnn",
    "rnn",
    "contrib",
    "transpose",
    "perm"
   ],
   "consequent": [
    "nn",
    "dynamic_rnn"
   ]
  }
 },
 {
  "number": 3402,
  "sha": "9a9e42288490bbfb4146489b1a817e4eefd6bca8",
  "author": "a-dai",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-17 02:46:08",
  "merged_at": "2018-02-20 07:08:27",
  "merged_by": "a-dai",
  "file_path": "research/adversarial_text/layers.py",
  "condition": [
   "                                                                                               ",
   "\tlstm_out = tf.concat(lstm_out, 0)                                                           "
  ],
  "consequent": [],
  "identifiers": {
   "condition": [
    "tf",
    "lstm_out",
    "concat"
   ],
   "consequent": []
  }
 },
 {
  "number": 3402,
  "sha": "9a9e42288490bbfb4146489b1a817e4eefd6bca8",
  "author": "a-dai",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-17 02:46:08",
  "merged_at": "2018-02-20 07:08:27",
  "merged_by": "a-dai",
  "file_path": "research/adversarial_text/layers.py",
  "condition": [
   "$0 = $1.expand_dims($0, -1)"
  ],
  "consequent": [
   "self.multiclass_dense_layer = K.layers.Dense(self.vocab_size)",
   "\tself.multiclass_dense_layer.build(input_shape)",
   "      labels_reshaped = $1.reshape($0, [-1])",
   "      labels_reshaped = $1.expand_dims(labels_reshaped, -1)"
  ],
  "identifiers": {
   "condition": [
    "expand_dims"
   ],
   "consequent": [
    "build",
    "Dense",
    "input_shape",
    "vocab_size",
    "layers",
    "self",
    "K",
    "expand_dims",
    "labels_reshaped",
    "multiclass_dense_layer",
    "reshape"
   ]
  }
 },
 {
  "number": 3402,
  "sha": "9a9e42288490bbfb4146489b1a817e4eefd6bca8",
  "author": "a-dai",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-17 02:46:08",
  "merged_at": "2018-02-20 07:08:27",
  "merged_by": "a-dai",
  "file_path": "research/adversarial_text/layers.py",
  "condition": [
   "$0=labels,"
  ],
  "consequent": [
   "$0=labels_reshaped,"
  ],
  "identifiers": {
   "condition": [
    "labels"
   ],
   "consequent": [
    "labels_reshaped"
   ]
  }
 },
 {
  "number": 3402,
  "sha": "9a9e42288490bbfb4146489b1a817e4eefd6bca8",
  "author": "a-dai",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-17 02:46:08",
  "merged_at": "2018-02-20 07:08:27",
  "merged_by": "a-dai",
  "file_path": "research/adversarial_text/layers.py",
  "condition": [
   "$0=$0,"
  ],
  "consequent": [
   "inputs_reshaped = tf.reshape(x, [-1, int(x.get_shape()[2])])",
   "\t$0=labels_reshaped,"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "x",
    "int",
    "inputs_reshaped",
    "tf",
    "labels_reshaped",
    "reshape",
    "get_shape"
   ]
  }
 },
 {
  "number": 3402,
  "sha": "9a9e42288490bbfb4146489b1a817e4eefd6bca8",
  "author": "a-dai",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-17 02:46:08",
  "merged_at": "2018-02-20 07:08:27",
  "merged_by": "a-dai",
  "file_path": "research/adversarial_text/layers.py",
  "condition": [
   "$0=x,"
  ],
  "consequent": [
   "$0=inputs_reshaped,"
  ],
  "identifiers": {
   "condition": [
    "x"
   ],
   "consequent": [
    "inputs_reshaped"
   ]
  }
 },
 {
  "number": 3402,
  "sha": "9a9e42288490bbfb4146489b1a817e4eefd6bca8",
  "author": "a-dai",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-17 02:46:08",
  "merged_at": "2018-02-20 07:08:27",
  "merged_by": "a-dai",
  "file_path": "research/adversarial_text/layers.py",
  "condition": [
   "$0 = $1.matmul($2, $3.lin_w) + $3.lin_b"
  ],
  "consequent": [
   "lm_loss = $1.reshape(           lm_loss,           [int($2.get_shape()[0]), int($2.get_shape()[1])])",
   "\t$0 = $3.multiclass_dense_layer($2)"
  ],
  "identifiers": {
   "condition": [
    "matmul",
    "lin_w",
    "lin_b"
   ],
   "consequent": [
    "lm_loss",
    "int",
    "multiclass_dense_layer",
    "reshape",
    "get_shape"
   ]
  }
 },
 {
  "number": 3402,
  "sha": "9a9e42288490bbfb4146489b1a817e4eefd6bca8",
  "author": "a-dai",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-17 02:46:08",
  "merged_at": "2018-02-20 07:08:27",
  "merged_by": "a-dai",
  "file_path": "research/adversarial_text/layers.py",
  "condition": [
   "variables_averages_op = variable_averages.apply(tvars)",
   "\twith $0.control_dependencies([$1, variables_averages_op]):"
  ],
  "consequent": [
   "with $0.control_dependencies([$1]):"
  ],
  "identifiers": {
   "condition": [
    "apply",
    "tvars",
    "variables_averages_op",
    "variable_averages",
    "control_dependencies"
   ],
   "consequent": [
    "control_dependencies"
   ]
  }
 },
 {
  "number": 3402,
  "sha": "9a9e42288490bbfb4146489b1a817e4eefd6bca8",
  "author": "a-dai",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-17 02:46:08",
  "merged_at": "2018-02-20 07:08:27",
  "merged_by": "a-dai",
  "file_path": "research/adversarial_text/layers.py",
  "condition": [
   "$0 = tf.no_op(name='train_op')"
  ],
  "consequent": [
   "$0 = variable_averages.apply(tvars)"
  ],
  "identifiers": {
   "condition": [
    "tf",
    "no_op",
    "name"
   ],
   "consequent": [
    "apply",
    "variable_averages",
    "tvars"
   ]
  }
 },
 {
  "number": 3402,
  "sha": "9a9e42288490bbfb4146489b1a817e4eefd6bca8",
  "author": "a-dai",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-17 02:46:08",
  "merged_at": "2018-02-20 07:08:27",
  "merged_by": "a-dai",
  "file_path": "research/adversarial_text/train_utils.py",
  "condition": [
   "sv.stop()",
   "\tif $0:"
  ],
  "consequent": [
   "if $0 and global_step_val >= FLAGS.max_steps:"
  ],
  "identifiers": {
   "condition": [
    "sv",
    "stop"
   ],
   "consequent": [
    "FLAGS",
    "max_steps",
    "global_step_val"
   ]
  }
 },
 {
  "number": 3414,
  "sha": "900ea81409940e5f6ca9d5e0cc834ad0eae8204a",
  "author": "a-dai",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-20 21:33:45",
  "merged_at": "2018-02-22 19:25:06",
  "merged_by": "a-dai",
  "file_path": "research/adversarial_text/data/data_utils_test.py",
  "condition": [
   "from adversarial_text.$0 import data_utils"
  ],
  "consequent": [
   "from $0 import data_utils"
  ],
  "identifiers": {
   "condition": [
    "data_utils",
    "adversarial_text"
   ],
   "consequent": [
    "data_utils"
   ]
  }
 },
 {
  "number": 3414,
  "sha": "900ea81409940e5f6ca9d5e0cc834ad0eae8204a",
  "author": "a-dai",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-20 21:33:45",
  "merged_at": "2018-02-22 19:25:06",
  "merged_by": "a-dai",
  "file_path": "research/adversarial_text/data/document_generators.py",
  "condition": [
   "from adversarial_text.$0 import data_utils"
  ],
  "consequent": [
   "from $0 import data_utils"
  ],
  "identifiers": {
   "condition": [
    "data_utils",
    "adversarial_text"
   ],
   "consequent": [
    "data_utils"
   ]
  }
 },
 {
  "number": 3414,
  "sha": "900ea81409940e5f6ca9d5e0cc834ad0eae8204a",
  "author": "a-dai",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-20 21:33:45",
  "merged_at": "2018-02-22 19:25:06",
  "merged_by": "a-dai",
  "file_path": "research/adversarial_text/evaluate.py",
  "condition": [
   "from adversarial_text import graphs"
  ],
  "consequent": [
   "import graphs"
  ],
  "identifiers": {
   "condition": [
    "graphs",
    "adversarial_text"
   ],
   "consequent": [
    "graphs"
   ]
  }
 },
 {
  "number": 3414,
  "sha": "900ea81409940e5f6ca9d5e0cc834ad0eae8204a",
  "author": "a-dai",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-20 21:33:45",
  "merged_at": "2018-02-22 19:25:06",
  "merged_by": "a-dai",
  "file_path": "research/adversarial_text/data/gen_data.py",
  "condition": [
   "from adversarial_text.$0 import data_utils"
  ],
  "consequent": [
   "from $0 import data_utils"
  ],
  "identifiers": {
   "condition": [
    "data_utils",
    "adversarial_text"
   ],
   "consequent": [
    "data_utils"
   ]
  }
 },
 {
  "number": 3414,
  "sha": "900ea81409940e5f6ca9d5e0cc834ad0eae8204a",
  "author": "a-dai",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-20 21:33:45",
  "merged_at": "2018-02-22 19:25:06",
  "merged_by": "a-dai",
  "file_path": "research/adversarial_text/data/gen_data.py",
  "condition": [
   "from adversarial_text.$0 import document_generators"
  ],
  "consequent": [
   "from $0 import document_generators"
  ],
  "identifiers": {
   "condition": [
    "document_generators",
    "adversarial_text"
   ],
   "consequent": [
    "document_generators"
   ]
  }
 },
 {
  "number": 3414,
  "sha": "900ea81409940e5f6ca9d5e0cc834ad0eae8204a",
  "author": "a-dai",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-20 21:33:45",
  "merged_at": "2018-02-22 19:25:06",
  "merged_by": "a-dai",
  "file_path": "research/adversarial_text/data/gen_vocab.py",
  "condition": [
   "from adversarial_text.$0 import data_utils"
  ],
  "consequent": [
   "from $0 import data_utils"
  ],
  "identifiers": {
   "condition": [
    "data_utils",
    "adversarial_text"
   ],
   "consequent": [
    "data_utils"
   ]
  }
 },
 {
  "number": 3414,
  "sha": "900ea81409940e5f6ca9d5e0cc834ad0eae8204a",
  "author": "a-dai",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-20 21:33:45",
  "merged_at": "2018-02-22 19:25:06",
  "merged_by": "a-dai",
  "file_path": "research/adversarial_text/data/gen_vocab.py",
  "condition": [
   "from adversarial_text.$0 import document_generators"
  ],
  "consequent": [
   "from $0 import document_generators"
  ],
  "identifiers": {
   "condition": [
    "document_generators",
    "adversarial_text"
   ],
   "consequent": [
    "document_generators"
   ]
  }
 },
 {
  "number": 3414,
  "sha": "900ea81409940e5f6ca9d5e0cc834ad0eae8204a",
  "author": "a-dai",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-20 21:33:45",
  "merged_at": "2018-02-22 19:25:06",
  "merged_by": "a-dai",
  "file_path": "research/adversarial_text/graphs.py",
  "condition": [
   "from adversarial_text import $0 as adv_lib"
  ],
  "consequent": [
   "import $0 as adv_lib"
  ],
  "identifiers": {
   "condition": [
    "adv_lib",
    "adversarial_text"
   ],
   "consequent": [
    "adv_lib"
   ]
  }
 },
 {
  "number": 3414,
  "sha": "900ea81409940e5f6ca9d5e0cc834ad0eae8204a",
  "author": "a-dai",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-20 21:33:45",
  "merged_at": "2018-02-22 19:25:06",
  "merged_by": "a-dai",
  "file_path": "research/adversarial_text/graphs.py",
  "condition": [
   "from adversarial_text import $0 as $1",
   "from adversarial_text import $2 as layers_lib"
  ],
  "consequent": [
   "import $0 as $1",
   "import $2 as layers_lib"
  ],
  "identifiers": {
   "condition": [
    "layers_lib",
    "adversarial_text"
   ],
   "consequent": [
    "layers_lib"
   ]
  }
 },
 {
  "number": 3414,
  "sha": "900ea81409940e5f6ca9d5e0cc834ad0eae8204a",
  "author": "a-dai",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-20 21:33:45",
  "merged_at": "2018-02-22 19:25:06",
  "merged_by": "a-dai",
  "file_path": "research/adversarial_text/graphs_test.py",
  "condition": [
   "from adversarial_text import graphs"
  ],
  "consequent": [
   "import graphs"
  ],
  "identifiers": {
   "condition": [
    "graphs",
    "adversarial_text"
   ],
   "consequent": [
    "graphs"
   ]
  }
 },
 {
  "number": 3414,
  "sha": "900ea81409940e5f6ca9d5e0cc834ad0eae8204a",
  "author": "a-dai",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-20 21:33:45",
  "merged_at": "2018-02-22 19:25:06",
  "merged_by": "a-dai",
  "file_path": "research/adversarial_text/graphs_test.py",
  "condition": [
   "from adversarial_text.$0 import data_utils"
  ],
  "consequent": [
   "from $0 import data_utils"
  ],
  "identifiers": {
   "condition": [
    "data_utils",
    "adversarial_text"
   ],
   "consequent": [
    "data_utils"
   ]
  }
 },
 {
  "number": 3414,
  "sha": "900ea81409940e5f6ca9d5e0cc834ad0eae8204a",
  "author": "a-dai",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-20 21:33:45",
  "merged_at": "2018-02-22 19:25:06",
  "merged_by": "a-dai",
  "file_path": "research/adversarial_text/inputs.py",
  "condition": [
   "from adversarial_text.$0 import data_utils"
  ],
  "consequent": [
   "from $0 import data_utils"
  ],
  "identifiers": {
   "condition": [
    "data_utils",
    "adversarial_text"
   ],
   "consequent": [
    "data_utils"
   ]
  }
 },
 {
  "number": 3414,
  "sha": "900ea81409940e5f6ca9d5e0cc834ad0eae8204a",
  "author": "a-dai",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-20 21:33:45",
  "merged_at": "2018-02-22 19:25:06",
  "merged_by": "a-dai",
  "file_path": "research/adversarial_text/pretrain.py",
  "condition": [
   "from adversarial_text import $0",
   "from adversarial_text import train_utils"
  ],
  "consequent": [
   "import $0",
   "import train_utils"
  ],
  "identifiers": {
   "condition": [
    "train_utils",
    "adversarial_text"
   ],
   "consequent": [
    "train_utils"
   ]
  }
 },
 {
  "number": 3414,
  "sha": "900ea81409940e5f6ca9d5e0cc834ad0eae8204a",
  "author": "a-dai",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-20 21:33:45",
  "merged_at": "2018-02-22 19:25:06",
  "merged_by": "a-dai",
  "file_path": "research/adversarial_text/train_classifier.py",
  "condition": [
   "from adversarial_text import $0",
   "from adversarial_text import train_utils"
  ],
  "consequent": [
   "import $0",
   "import train_utils"
  ],
  "identifiers": {
   "condition": [
    "train_utils",
    "adversarial_text"
   ],
   "consequent": [
    "train_utils"
   ]
  }
 },
 {
  "number": 3474,
  "sha": "36f803298c1ac60997841dd2b0df00dc704a8c7f",
  "author": "suharshs",
  "participant": "googlebot",
  "created_at": "2018-02-26 22:05:46",
  "merged_at": "2018-02-27 00:54:56",
  "merged_by": "petewarden",
  "file_path": "research/slim/nets/mobilenet_v1_train.py",
  "condition": [
   "$0.logdir,"
  ],
  "consequent": [
   "$0.checkpoint_dir,"
  ],
  "identifiers": {
   "condition": [
    "logdir"
   ],
   "consequent": [
    "checkpoint_dir"
   ]
  }
 },
 {
  "number": 3487,
  "sha": "9bbbeb44db14d5547f6ecbebbb48dc4bccf6c782",
  "author": "a-dai",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 02:55:13",
  "merged_at": "2018-02-28 03:07:51",
  "merged_by": "lukaszkaiser",
  "file_path": "research/maskgan/train_mask_gan.py",
  "condition": [
   "\"\"\"Name prefix of the Tensorflow eval master,"
  ],
  "consequent": [
   "\"\"\"Name prefix of the Tensorflow eval master.\"\"\")"
  ],
  "identifiers": {
   "condition": [
    "of",
    "Name",
    "Tensorflow",
    "eval",
    "master",
    "prefix",
    "the"
   ],
   "consequent": []
  }
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "merged_at": "2018-03-09 22:20:18",
  "merged_by": "derekjchow",
  "file_path": "research/object_detection/builders/preprocessor_builder.py",
  "condition": [
   "$0 = [           ($1.$0[0], $1.$0[1])           for $1 in $2.$3]"
  ],
  "consequent": [
   "$0 = [tuple($1.$0)                                for $1 in $2.$3]",
   "\tmax_padded_size_ratio = [tuple($1.max_padded_size_ratio)"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "tuple",
    "max_padded_size_ratio"
   ]
  }
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "merged_at": "2018-03-09 22:20:18",
  "merged_by": "derekjchow",
  "file_path": "research/object_detection/builders/preprocessor_builder.py",
  "condition": [
   "max_padded_size_ratio = [           ($0.max_padded_size_ratio[0], $0.max_padded_size_ratio[1])           for $0 in $1.$2]"
  ],
  "consequent": [
   "for $0 in $1.$2]"
  ],
  "identifiers": {
   "condition": [
    "max_padded_size_ratio"
   ],
   "consequent": []
  }
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "merged_at": "2018-03-09 22:20:18",
  "merged_by": "derekjchow",
  "file_path": "research/object_detection/builders/preprocessor_builder.py",
  "condition": [
   "$0 = [$1.$0 for $1 in $2.$3]"
  ],
  "consequent": [
   "kwargs = {}",
   "\taspect_ratio = $2.aspect_ratio",
   "    if aspect_ratio:",
   "\tkwargs['aspect_ratio'] = aspect_ratio",
   "    min_padded_size_ratio = $2.min_padded_size_ratio",
   "    if min_padded_size_ratio:",
   "\tif len(min_padded_size_ratio) != 2:",
   "\traise ValueError('min_padded_size_ratio should have 2 elements if set!')",
   "      kwargs['min_padded_size_ratio'] = tuple(min_padded_size_ratio)",
   "    max_padded_size_ratio = $2.max_padded_size_ratio",
   "    if max_padded_size_ratio:",
   "\tif len(max_padded_size_ratio) != 2:",
   "\traise ValueError('max_padded_size_ratio should have 2 elements if set!')",
   "      kwargs['max_padded_size_ratio'] = tuple(max_padded_size_ratio)",
   "      kwargs['min_object_covered'] = [$1.$0                                       for $1 in $2.$3]"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "kwargs",
    "max_padded_size_ratio",
    "len",
    "ValueError",
    "aspect_ratio",
    "min_padded_size_ratio",
    "tuple"
   ]
  }
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "merged_at": "2018-03-09 22:20:18",
  "merged_by": "derekjchow",
  "file_path": "research/object_detection/builders/preprocessor_builder.py",
  "condition": [
   "aspect_ratio_range = [($0.$1, $0.$2)"
  ],
  "consequent": [
   "kwargs['aspect_ratio_range'] = [($0.$1, $0.$2)                                       for $0 in config.operations]",
   "\tkwargs['area_range'] = [($0.min_area, $0.max_area)"
  ],
  "identifiers": {
   "condition": [
    "aspect_ratio_range"
   ],
   "consequent": [
    "kwargs",
    "min_area",
    "config",
    "max_area",
    "operations"
   ]
  }
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "merged_at": "2018-03-09 22:20:18",
  "merged_by": "derekjchow",
  "file_path": "research/object_detection/builders/preprocessor_builder.py",
  "condition": [
   "area_range = [($0.min_area, $0.max_area) for $0 in $1.$2]",
   "\t$3 = [$0.$3 for $0 in $1.$2]"
  ],
  "consequent": [
   "kwargs['overlap_thresh'] = [$0.$3 for $0 in $1.$2]"
  ],
  "identifiers": {
   "condition": [
    "max_area",
    "min_area",
    "area_range"
   ],
   "consequent": [
    "kwargs"
   ]
  }
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "merged_at": "2018-03-09 22:20:18",
  "merged_by": "derekjchow",
  "file_path": "research/object_detection/builders/preprocessor_builder.py",
  "condition": [
   "$0 = [$1.$0 for $1 in $2.$3]"
  ],
  "consequent": [
   "kwargs['random_coef'] = [$1.$0 for $1 in $2.$3]"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "kwargs"
   ]
  }
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "merged_at": "2018-03-09 22:20:18",
  "merged_by": "derekjchow",
  "file_path": "research/object_detection/builders/preprocessor_builder.py",
  "condition": [
   "min_padded_size_ratio = [           (op.min_padded_size_ratio[0], op.min_padded_size_ratio[1])           for op in config.operations]",
   "\tmax_padded_size_ratio = [           (op.max_padded_size_ratio[0], op.max_padded_size_ratio[1])           for op in config.operations]",
   "      return ($0.$1,               {                   'min_object_covered': min_object_covered,                   'aspect_ratio': config.aspect_ratio,                   'aspect_ratio_range': aspect_ratio_range,                   'area_range': area_range,                   'overlap_thresh': overlap_thresh,                   'random_coef': random_coef,                   'min_padded_size_ratio': min_padded_size_ratio,                   'max_padded_size_ratio': max_padded_size_ratio,               })",
   "    return ($0.$1, {})"
  ],
  "consequent": [
   "return ($0.$1, kwargs)"
  ],
  "identifiers": {
   "condition": [
    "overlap_thresh",
    "max_padded_size_ratio",
    "config",
    "aspect_ratio",
    "min_padded_size_ratio",
    "min_object_covered",
    "operations",
    "op",
    "aspect_ratio_range",
    "area_range",
    "random_coef"
   ],
   "consequent": [
    "kwargs"
   ]
  }
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "merged_at": "2018-03-09 22:20:18",
  "merged_by": "derekjchow",
  "file_path": "research/object_detection/core/box_list_ops_test.py",
  "condition": [
   "nms = box_list_ops.non_max_suppression(         boxes, iou_thresh, max_output_size)",
   "\twith $0.test_session() as sess:",
   "\twith $0.assertRaisesWithPredicateMatch("
  ],
  "consequent": [
   "with $0.assertRaisesWithPredicateMatch(ValueError,"
  ],
  "identifiers": {
   "condition": [
    "boxes",
    "assertRaisesWithPredicateMatch",
    "box_list_ops",
    "sess",
    "max_output_size",
    "test_session",
    "non_max_suppression",
    "iou_thresh",
    "nms"
   ],
   "consequent": [
    "ValueError",
    "assertRaisesWithPredicateMatch"
   ]
  }
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "merged_at": "2018-03-09 22:20:18",
  "merged_by": "derekjchow",
  "file_path": "research/object_detection/core/box_list_ops_test.py",
  "condition": [
   "errors.InvalidArgumentError, 'scores has incompatible shape'):",
   "\tsess.run(nms.get())"
  ],
  "consequent": [
   "'Dimensions must be equal'):",
   "\tbox_list_ops.non_max_suppression(boxes, iou_thresh, max_output_size)"
  ],
  "identifiers": {
   "condition": [
    "InvalidArgumentError",
    "get",
    "sess",
    "nms",
    "run",
    "errors"
   ],
   "consequent": [
    "boxes",
    "box_list_ops",
    "max_output_size",
    "non_max_suppression",
    "iou_thresh"
   ]
  }
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "merged_at": "2018-03-09 22:20:18",
  "merged_by": "derekjchow",
  "file_path": "research/object_detection/data_decoders/tf_example_decoder.py",
  "condition": [
   "$0 = $1.BackupHandler("
  ],
  "consequent": [
   "from tensorflow.python.ops import array_ops",
   "from tensorflow.python.ops import control_flow_ops",
   "from tensorflow.python.ops import math_ops  ",
   "class BackupHandler($1.ItemHandler):",
   "\t\"\"\"An ItemHandler that tries two ItemHandlers in order.\"\"\" ",
   "  def __init__(self, handler, backup):",
   "\t\"\"\"Initializes the BackupHandler handler.",
   "",
   "    If the first Handler's tensors_to_item returns a Tensor with no elements,",
   "    the second Handler is used.",
   "",
   "    Args:",
   "      handler: The primary ItemHandler.",
   "      backup: The backup ItemHandler.",
   "",
   "    Raises:",
   "      ValueError: if either is not an ItemHandler.",
   "    \"\"\"",
   "    if not isinstance(handler, $1.ItemHandler):",
   "\traise ValueError('Primary handler is of type %s instead of ItemHandler' %                        type(handler))",
   "    if not isinstance(backup, $1.ItemHandler):",
   "\traise ValueError(           'Backup handler is of type %s instead of ItemHandler' % type(backup))",
   "    self._handler = handler",
   "    self._backup = backup",
   "    super(BackupHandler, self).__init__(handler.keys + backup.keys) ",
   "  def tensors_to_item(self, keys_to_tensors):",
   "\titem = self._handler.tensors_to_item(keys_to_tensors)",
   "    return control_flow_ops.cond(         pred=math_ops.equal(math_ops.reduce_prod(array_ops.shape(item)), 0),         true_fn=lambda: self._backup.tensors_to_item(keys_to_tensors),         false_fn=lambda: item)                                                                                                                                                                                                                                                              ",
   "\t$0 = BackupHandler("
  ],
  "identifiers": {
   "condition": [
    "BackupHandler"
   ],
   "consequent": [
    "python",
    "item",
    "self",
    "ValueError",
    "tensors_to_item",
    "type",
    "_handler",
    "control_flow_ops",
    "__init__",
    "keys",
    "isinstance",
    "math_ops",
    "handler",
    "BackupHandler",
    "cond",
    "shape",
    "backup",
    "ItemHandler",
    "tensorflow",
    "reduce_prod",
    "keys_to_tensors",
    "pred",
    "ops",
    "array_ops",
    "_backup",
    "false_fn",
    "super",
    "true_fn",
    "equal"
   ]
  }
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "merged_at": "2018-03-09 22:20:18",
  "merged_by": "derekjchow",
  "file_path": "research/object_detection/eval_util.py",
  "condition": [
   "output_dict[detection_fields.$0] = $0",
   "\toutput_dict[detection_fields.$0] = (         $1.get())"
  ],
  "consequent": [
   "$0 = $1.get()"
  ],
  "identifiers": {
   "condition": [
    "get",
    "output_dict",
    "detection_fields"
   ],
   "consequent": [
    "get"
   ]
  }
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "merged_at": "2018-03-09 22:20:18",
  "merged_by": "derekjchow",
  "file_path": "research/object_detection/eval_util.py",
  "condition": [
   "$0[$1.$2] = $2"
  ],
  "consequent": [
   "num_detections = tf.to_int32(detections[$1.num_detections][0])",
   "\tdetection_boxes = tf.slice(       detection_boxes, begin=[0, 0], size=[num_detections, -1])",
   "  detection_classes = tf.slice(       detection_classes, begin=[0], size=[num_detections])",
   "  $2 = tf.slice(       $2, begin=[0], size=[num_detections])",
   "  $0[$1.detection_boxes] = detection_boxes"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "begin",
    "to_int32",
    "detection_boxes",
    "tf",
    "slice",
    "detections",
    "detection_classes",
    "size",
    "num_detections"
   ]
  }
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "merged_at": "2018-03-09 22:20:18",
  "merged_by": "derekjchow",
  "file_path": "research/object_detection/eval_util.py",
  "condition": [
   "num_detections = tf.to_int32(detections[$0.num_detections][0])",
   "\tdetection_boxes = tf.slice(         detection_boxes, begin=[0, 0], size=[num_detections, -1])"
  ],
  "consequent": [
   "output_dict[$0.detection_scores] = detection_scores"
  ],
  "identifiers": {
   "condition": [
    "begin",
    "to_int32",
    "detection_boxes",
    "tf",
    "slice",
    "detections",
    "size",
    "num_detections"
   ],
   "consequent": [
    "detection_scores",
    "output_dict"
   ]
  }
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "merged_at": "2018-03-09 22:20:18",
  "merged_by": "derekjchow",
  "file_path": "research/object_detection/inputs.py",
  "condition": [
   "$0: if $1 `$2` or `$3` are not of $1"
  ],
  "consequent": [
   "$0: if $1 `$2`, `$3` or `model_config`"
  ],
  "identifiers": {
   "condition": [
    "are",
    "of"
   ],
   "consequent": [
    "model_config"
   ]
  }
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "merged_at": "2018-03-09 22:20:18",
  "merged_by": "derekjchow",
  "file_path": "research/object_detection/inputs.py",
  "condition": [
   "$0 $1."
  ],
  "consequent": [
   "are not of the $0 $1."
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "are",
    "of",
    "the"
   ]
  }
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "merged_at": "2018-03-09 22:20:18",
  "merged_by": "derekjchow",
  "file_path": "research/object_detection/inputs.py",
  "condition": [
   "$0: if $1 `$2` or `$3` are not of $1"
  ],
  "consequent": [
   "$0: if $1 `$2`, `$3` or `model_config`"
  ],
  "identifiers": {
   "condition": [
    "are",
    "of"
   ],
   "consequent": [
    "model_config"
   ]
  }
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "merged_at": "2018-03-09 22:20:18",
  "merged_by": "derekjchow",
  "file_path": "research/object_detection/inputs.py",
  "condition": [
   "$0 $1."
  ],
  "consequent": [
   "are not of the $0 $1."
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "are",
    "of",
    "the"
   ]
  }
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "merged_at": "2018-03-09 22:20:18",
  "merged_by": "derekjchow",
  "file_path": "research/object_detection/metrics/coco_evaluation.py",
  "condition": [
   "$0.",
   "\tExportSingleImageGroundtruthToCoco("
  ],
  "consequent": [
   "InputDataFields.groundtruth_is_crowd (optional): integer numpy array of",
   "\tshape [num_boxes] containing iscrowd flag for groundtruth boxes.",
   "    groundtruth_is_crowd = groundtruth_dict.get(         standard_fields.InputDataFields.groundtruth_is_crowd)                                                 ",
   "\tif groundtruth_is_crowd is not None and not groundtruth_is_crowd.shape[0]:",
   "\tgroundtruth_is_crowd = None ",
   "\t$0.ExportSingleImageGroundtruthToCoco("
  ],
  "identifiers": {
   "condition": [
    "ExportSingleImageGroundtruthToCoco"
   ],
   "consequent": [
    "flag",
    "groundtruth",
    "boxes",
    "get",
    "optional",
    "of",
    "InputDataFields",
    "numpy",
    "shape",
    "groundtruth_dict",
    "integer",
    "standard_fields",
    "array",
    "containing",
    "num_boxes",
    "ExportSingleImageGroundtruthToCoco",
    "groundtruth_is_crowd",
    "iscrowd"
   ]
  }
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "merged_at": "2018-03-09 22:20:18",
  "merged_by": "derekjchow",
  "file_path": "research/object_detection/metrics/coco_evaluation.py",
  "condition": [
   "$0=$1[standard_fields.InputDataFields."
  ],
  "consequent": [
   "$0=$1["
  ],
  "identifiers": {
   "condition": [
    "standard_fields",
    "InputDataFields"
   ],
   "consequent": []
  }
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "merged_at": "2018-03-09 22:20:18",
  "merged_by": "derekjchow",
  "file_path": "research/object_detection/metrics/coco_evaluation.py",
  "condition": [
   "$0],"
  ],
  "consequent": [
   "standard_fields.InputDataFields.$0],"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "standard_fields",
    "InputDataFields"
   ]
  }
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "merged_at": "2018-03-09 22:20:18",
  "merged_by": "derekjchow",
  "file_path": "research/object_detection/metrics/coco_evaluation.py",
  "condition": [
   "$0=$1[standard_fields."
  ],
  "consequent": [
   "$0=$1["
  ],
  "identifiers": {
   "condition": [
    "standard_fields"
   ],
   "consequent": []
  }
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "merged_at": "2018-03-09 22:20:18",
  "merged_by": "derekjchow",
  "file_path": "research/object_detection/metrics/coco_evaluation.py",
  "condition": [
   "$0.",
   "\t$1]))"
  ],
  "consequent": [
   "standard_fields.$0.$1],",
   "\tgroundtruth_is_crowd=groundtruth_is_crowd))"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "standard_fields",
    "groundtruth_is_crowd"
   ]
  }
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "merged_at": "2018-03-09 22:20:18",
  "merged_by": "derekjchow",
  "file_path": "research/object_detection/metrics/coco_tools.py",
  "condition": [
   "$0=None):"
  ],
  "consequent": [
   "$0=None,",
   "\tgroundtruth_is_crowd=None):"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "groundtruth_is_crowd"
   ]
  }
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "merged_at": "2018-03-09 22:20:18",
  "merged_by": "derekjchow",
  "file_path": "research/object_detection/metrics/coco_tools.py",
  "condition": [
   "$0 $1 $2 and \"iscrowd\" fields are always set to 0.",
   "\tTODO(jonathanhuang): pass in \"iscrowd\" array for evaluating on COCO dataset."
  ],
  "consequent": [
   "$0 $1 $2."
  ],
  "identifiers": {
   "condition": [
    "set",
    "dataset",
    "jonathanhuang",
    "to",
    "fields",
    "TODO",
    "array",
    "evaluating",
    "on",
    "COCO",
    "are",
    "always"
   ],
   "consequent": []
  }
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "merged_at": "2018-03-09 22:20:18",
  "merged_by": "derekjchow",
  "file_path": "research/object_detection/metrics/coco_tools.py",
  "condition": [
   "'id': $0 + $1,"
  ],
  "consequent": [
   "groundtruth_is_crowd: optional numpy array (int) with shape [num_gt_boxes]",
   "\tindicating whether groundtruth boxes are crowd.",
   "  has_is_crowd = groundtruth_is_crowd is not None",
   "\tif has_is_crowd and len(groundtruth_is_crowd.shape) != 1:",
   "\traise ValueError('groundtruth_is_crowd is expected to be of rank 1.')",
   "\tiscrowd = groundtruth_is_crowd[$1] if has_is_crowd else 0",
   "\t'id':",
   "\t$0 + $1,"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "groundtruth",
    "boxes",
    "has_is_crowd",
    "optional",
    "numpy",
    "shape",
    "int",
    "num_gt_boxes",
    "whether",
    "len",
    "array",
    "ValueError",
    "crowd",
    "are",
    "indicating",
    "groundtruth_is_crowd",
    "iscrowd"
   ]
  }
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "merged_at": "2018-03-09 22:20:18",
  "merged_by": "derekjchow",
  "file_path": "research/object_detection/metrics/coco_tools.py",
  "condition": [
   "'iscrowd': 0"
  ],
  "consequent": [
   "'iscrowd':",
   "\tiscrowd"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "iscrowd"
   ]
  }
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "merged_at": "2018-03-09 22:20:18",
  "merged_by": "derekjchow",
  "file_path": "research/object_detection/metrics/coco_tools_test.py",
  "condition": [
   "$0 = ['04', '31', '4']"
  ],
  "consequent": [
   "is_crowd = np.array([0, 1, 0], dtype=np.int32)",
   "\t$0 = ['04', '31', '4']                                                                                "
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "int32",
    "dtype",
    "array",
    "np",
    "is_crowd"
   ]
  }
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "merged_at": "2018-03-09 22:20:18",
  "merged_by": "derekjchow",
  "file_path": "research/object_detection/model.py",
  "condition": [
   "$0 = $1.get_configs_from_pipeline_file($2)"
  ],
  "consequent": [
   "from tensorflow.python.lib.io import file_io                                                         ",
   "MODEL_BUILD_UTIL_MAP = {     'get_configs_from_pipeline_file':         $1.get_configs_from_pipeline_file,     'create_pipeline_proto_from_configs':         $1.create_pipeline_proto_from_configs,     'merge_external_params_with_configs':         $1.merge_external_params_with_configs,     'create_train_input_fn': inputs.create_train_input_fn,     'create_eval_input_fn': inputs.create_eval_input_fn,     'create_predict_input_fn': inputs.create_predict_input_fn, }",
   "\tget_configs_from_pipeline_file = MODEL_BUILD_UTIL_MAP[       'get_configs_from_pipeline_file']",
   "  create_pipeline_proto_from_configs = MODEL_BUILD_UTIL_MAP[       'create_pipeline_proto_from_configs']",
   "  merge_external_params_with_configs = MODEL_BUILD_UTIL_MAP[       'merge_external_params_with_configs']",
   "  create_train_input_fn = MODEL_BUILD_UTIL_MAP['create_train_input_fn']",
   "  create_eval_input_fn = MODEL_BUILD_UTIL_MAP['create_eval_input_fn']",
   "  create_predict_input_fn = MODEL_BUILD_UTIL_MAP['create_predict_input_fn'] ",
   "  $0 = get_configs_from_pipeline_file($2)"
  ],
  "identifiers": {
   "condition": [
    "get_configs_from_pipeline_file"
   ],
   "consequent": [
    "create_pipeline_proto_from_configs",
    "inputs",
    "python",
    "io",
    "create_predict_input_fn",
    "tensorflow",
    "file_io",
    "create_eval_input_fn",
    "get_configs_from_pipeline_file",
    "merge_external_params_with_configs",
    "lib",
    "MODEL_BUILD_UTIL_MAP",
    "create_train_input_fn"
   ]
  }
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "merged_at": "2018-03-09 22:20:18",
  "merged_by": "derekjchow",
  "file_path": "research/object_detection/model.py",
  "condition": [
   "$0 = config_util.merge_external_params_with_configs("
  ],
  "consequent": [
   "$0 = merge_external_params_with_configs("
  ],
  "identifiers": {
   "condition": [
    "merge_external_params_with_configs",
    "config_util"
   ],
   "consequent": [
    "merge_external_params_with_configs"
   ]
  }
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "merged_at": "2018-03-09 22:20:18",
  "merged_by": "derekjchow",
  "file_path": "research/object_detection/model.py",
  "condition": [
   "$0 = inputs.create_train_input_fn("
  ],
  "consequent": [
   "$0 = create_train_input_fn("
  ],
  "identifiers": {
   "condition": [
    "inputs",
    "create_train_input_fn"
   ],
   "consequent": [
    "create_train_input_fn"
   ]
  }
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "merged_at": "2018-03-09 22:20:18",
  "merged_by": "derekjchow",
  "file_path": "research/object_detection/model.py",
  "condition": [
   "$0 = inputs.create_eval_input_fn("
  ],
  "consequent": [
   "$0 = create_eval_input_fn("
  ],
  "identifiers": {
   "condition": [
    "create_eval_input_fn",
    "inputs"
   ],
   "consequent": [
    "create_eval_input_fn"
   ]
  }
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "merged_at": "2018-03-09 22:20:18",
  "merged_by": "derekjchow",
  "file_path": "research/object_detection/model.py",
  "condition": [
   "$0=inputs.create_predict_input_fn("
  ],
  "consequent": [
   "$0=create_predict_input_fn("
  ],
  "identifiers": {
   "condition": [
    "create_predict_input_fn",
    "inputs"
   ],
   "consequent": [
    "create_predict_input_fn"
   ]
  }
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "merged_at": "2018-03-09 22:20:18",
  "merged_by": "derekjchow",
  "file_path": "research/object_detection/model.py",
  "condition": [
   "$0 = config_util.create_pipeline_proto_from_configs("
  ],
  "consequent": [
   "$0 = create_pipeline_proto_from_configs("
  ],
  "identifiers": {
   "condition": [
    "create_pipeline_proto_from_configs",
    "config_util"
   ],
   "consequent": [
    "create_pipeline_proto_from_configs"
   ]
  }
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "merged_at": "2018-03-09 22:20:18",
  "merged_by": "derekjchow",
  "file_path": "research/object_detection/models/faster_rcnn_nas_feature_extractor.py",
  "condition": [
   "$0, $1 = $2.build_nasnet_large("
  ],
  "consequent": [
   "with arg_scope([slim.conv2d,                       slim.batch_norm,                       slim.separable_conv2d],                      reuse=self._reuse_weights):",
   "\t$0, $1 = $2.build_nasnet_large("
  ],
  "identifiers": {
   "condition": [
    "build_nasnet_large"
   ],
   "consequent": [
    "_reuse_weights",
    "separable_conv2d",
    "reuse",
    "self",
    "build_nasnet_large",
    "slim",
    "conv2d",
    "arg_scope",
    "batch_norm"
   ]
  }
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "merged_at": "2018-03-09 22:20:18",
  "merged_by": "derekjchow",
  "file_path": "research/object_detection/trainer.py",
  "condition": [
   "$0 = $1.SyncReplicasOptimizer("
  ],
  "consequent": [
   "$0 = $1.train.SyncReplicasOptimizer("
  ],
  "identifiers": {
   "condition": [
    "SyncReplicasOptimizer"
   ],
   "consequent": [
    "train",
    "SyncReplicasOptimizer"
   ]
  }
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "merged_at": "2018-03-09 22:20:18",
  "merged_by": "derekjchow",
  "file_path": "research/object_detection/trainer.py",
  "condition": [
   "$0=train_config.$1)"
  ],
  "consequent": [
   "$0=$1)"
  ],
  "identifiers": {
   "condition": [
    "train_config"
   ],
   "consequent": []
  }
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "merged_at": "2018-03-09 22:20:18",
  "merged_by": "derekjchow",
  "file_path": "research/object_detection/trainer.py",
  "condition": [
   "$0=$1.$0)"
  ],
  "consequent": [
   "$0=$1.$0,",
   "\tload_all_detection_checkpoint_vars=(               $1.load_all_detection_checkpoint_vars))"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "load_all_detection_checkpoint_vars"
   ]
  }
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "merged_at": "2018-03-09 22:20:18",
  "merged_by": "derekjchow",
  "file_path": "research/object_detection/utils/ops_test.py",
  "condition": [
   "tf_op_output = tf.image.resize_images(           inputs, [4, 4], method=tf.image.ResizeMethod.NEAREST_NEIGHBOR)",
   "\treturn ($0, tf_op_output)"
  ],
  "consequent": [
   "return $0"
  ],
  "identifiers": {
   "condition": [
    "inputs",
    "method",
    "tf_op_output",
    "tf",
    "resize_images",
    "NEAREST_NEIGHBOR",
    "image",
    "ResizeMethod"
   ],
   "consequent": []
  }
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "merged_at": "2018-03-09 22:20:18",
  "merged_by": "derekjchow",
  "file_path": "research/object_detection/utils/ops_test.py",
  "condition": [
   "$0 = $1.reshape($1.arange(2**4), [2, 2, 2, 2])"
  ],
  "consequent": [
   "$0 = $1.reshape($1.arange(4).astype($1.float32), [1, 2, 2, 1])"
  ],
  "identifiers": {
   "condition": [
    "arange",
    "reshape"
   ],
   "consequent": [
    "astype",
    "arange",
    "reshape",
    "float32"
   ]
  }
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "merged_at": "2018-03-09 22:20:18",
  "merged_by": "derekjchow",
  "file_path": "research/object_detection/utils/ops_test.py",
  "condition": [
   "($0, tf_op_output) = $1.execute($2, [$3])"
  ],
  "consequent": [
   "$0 = $1.execute($2, [$3]) ",
   "\texpected_output = [[[[0], [0], [1], [1]],                         [[0], [0], [1], [1]],                         [[2], [2], [3], [3]],                         [[2], [2], [3], [3]]]]"
  ],
  "identifiers": {
   "condition": [
    "tf_op_output",
    "execute"
   ],
   "consequent": [
    "expected_output",
    "execute"
   ]
  }
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "merged_at": "2018-03-09 22:20:18",
  "merged_by": "derekjchow",
  "file_path": "research/object_detection/utils/ops_test.py",
  "condition": [
   "$0.assertAllClose($1, tf_op_output)"
  ],
  "consequent": [
   "$0.assertAllClose($1, expected_output)"
  ],
  "identifiers": {
   "condition": [
    "tf_op_output",
    "assertAllClose"
   ],
   "consequent": [
    "expected_output",
    "assertAllClose"
   ]
  }
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "merged_at": "2018-03-09 22:20:18",
  "merged_by": "derekjchow",
  "file_path": "research/object_detection/utils/ops_test.py",
  "condition": [
   "$0 = $1.array([2, 2, 1])"
  ],
  "consequent": [
   "$0 = $1.array([2, 2, 1], dtype=$1.int32)"
  ],
  "identifiers": {
   "condition": [
    "array"
   ],
   "consequent": [
    "int32",
    "array",
    "dtype"
   ]
  }
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "merged_at": "2018-03-09 22:20:18",
  "merged_by": "derekjchow",
  "file_path": "research/object_detection/utils/ops_test.py",
  "condition": [
   "$0 = $1.array([0, 3, 1])"
  ],
  "consequent": [
   "$0 = $1.array([0, 3, 1], dtype=$1.int32)"
  ],
  "identifiers": {
   "condition": [
    "array"
   ],
   "consequent": [
    "int32",
    "array",
    "dtype"
   ]
  }
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "merged_at": "2018-03-09 22:20:18",
  "merged_by": "derekjchow",
  "file_path": "research/object_detection/utils/ops_test.py",
  "condition": [
   "$0 = $1.array([0, 0, 0, 0, 0, 0])"
  ],
  "consequent": [
   "$0 = $1.array([0, 0, 0, 0, 0, 0], dtype=$1.int32)"
  ],
  "identifiers": {
   "condition": [
    "array"
   ],
   "consequent": [
    "int32",
    "array",
    "dtype"
   ]
  }
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "merged_at": "2018-03-09 22:20:18",
  "merged_by": "derekjchow",
  "file_path": "research/object_detection/utils/test_case.py",
  "condition": [
   "if len($0) == 1:"
  ],
  "consequent": [
   "if (len($0) == 1           and (isinstance($0, list)                or isinstance($0, tuple))):"
  ],
  "identifiers": {
   "condition": [
    "len"
   ],
   "consequent": [
    "len",
    "list",
    "tuple",
    "isinstance"
   ]
  }
 },
 {
  "number": 3494,
  "sha": "0319908c2c4bb7e71341daeaa302c4862ebc9f46",
  "author": "pkulzc",
  "participant": "tensorflow-jenkins",
  "created_at": "2018-02-28 19:29:50",
  "merged_at": "2018-03-09 22:20:18",
  "merged_by": "derekjchow",
  "file_path": "research/object_detection/utils/test_case.py",
  "condition": [
   "if len($0) == 1:"
  ],
  "consequent": [
   "if (len($0) == 1           and (isinstance($0, list)                or isinstance($0, tuple))):"
  ],
  "identifiers": {
   "condition": [
    "len"
   ],
   "consequent": [
    "len",
    "list",
    "tuple",
    "isinstance"
   ]
  }
 },
 {
  "number": 3534,
  "sha": "c173bd9bfe614f79638aa3b244ecb91205017064",
  "author": "MTDzi",
  "participant": "lukaszkaiser",
  "created_at": "2018-03-06 20:36:37",
  "merged_at": "2018-03-07 20:03:49",
  "merged_by": "lukaszkaiser",
  "file_path": "research/learning_to_remember_rare_events/data_utils.py",
  "condition": [
   "import $0 as pickle"
  ],
  "consequent": [
   "from six.moves import $0 as pickle"
  ],
  "identifiers": {
   "condition": [
    "pickle"
   ],
   "consequent": [
    "pickle",
    "six",
    "moves"
   ]
  }
 },
 {
  "number": 3534,
  "sha": "c173bd9bfe614f79638aa3b244ecb91205017064",
  "author": "MTDzi",
  "participant": "lukaszkaiser",
  "created_at": "2018-03-06 20:36:37",
  "merged_at": "2018-03-07 20:03:49",
  "merged_by": "lukaszkaiser",
  "file_path": "research/learning_to_remember_rare_events/data_utils.py",
  "condition": [
   "$0 = [len($1) == 20 for $2, $1 in $3.iteritems()]"
  ],
  "consequent": [
   "$0 = [len($1) == 20 for $2, $1 in $3.items()]"
  ],
  "identifiers": {
   "condition": [
    "len",
    "iteritems"
   ],
   "consequent": [
    "len",
    "items"
   ]
  }
 },
 {
  "number": 3534,
  "sha": "c173bd9bfe614f79638aa3b244ecb91205017064",
  "author": "MTDzi",
  "participant": "lukaszkaiser",
  "created_at": "2018-03-06 20:36:37",
  "merged_at": "2018-03-07 20:03:49",
  "merged_by": "lukaszkaiser",
  "file_path": "research/learning_to_remember_rare_events/data_utils.py",
  "condition": [
   "$0 = [len($1) == 20 for $2, $1 in $3.iteritems()]"
  ],
  "consequent": [
   "$0 = [len($1) == 20 for $2, $1 in $3.items()]"
  ],
  "identifiers": {
   "condition": [
    "len",
    "iteritems"
   ],
   "consequent": [
    "len",
    "items"
   ]
  }
 },
 {
  "number": 3534,
  "sha": "c173bd9bfe614f79638aa3b244ecb91205017064",
  "author": "MTDzi",
  "participant": "lukaszkaiser",
  "created_at": "2018-03-06 20:36:37",
  "merged_at": "2018-03-07 20:03:49",
  "merged_by": "lukaszkaiser",
  "file_path": "research/learning_to_remember_rare_events/train.py",
  "condition": [
   "for $0 in $1.itervalues())"
  ],
  "consequent": [
   "for $0 in $1.values())"
  ],
  "identifiers": {
   "condition": [
    "itervalues"
   ],
   "consequent": [
    "values"
   ]
  }
 },
 {
  "number": 3534,
  "sha": "c173bd9bfe614f79638aa3b244ecb91205017064",
  "author": "MTDzi",
  "participant": "lukaszkaiser",
  "created_at": "2018-03-06 20:36:37",
  "merged_at": "2018-03-07 20:03:49",
  "merged_by": "lukaszkaiser",
  "file_path": "research/learning_to_remember_rare_events/train.py",
  "condition": [
   "for $0 in $1.itervalues())"
  ],
  "consequent": [
   "for $0 in $1.values())"
  ],
  "identifiers": {
   "condition": [
    "itervalues"
   ],
   "consequent": [
    "values"
   ]
  }
 },
 {
  "number": 3622,
  "sha": "14b8bf2521fa7fc0bd8ff631b808a418cb75f930",
  "author": "cshallue",
  "participant": "nealwu",
  "created_at": "2018-03-16 00:51:10",
  "merged_at": "2018-03-19 18:41:14",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/astro_cnn_model/astro_cnn_model.py",
  "condition": [
   "for $0, $1 in $2.$3.iteritems():"
  ],
  "consequent": [
   "for $0, $1 in $2.$3.items():"
  ],
  "identifiers": {
   "condition": [
    "iteritems"
   ],
   "consequent": [
    "items"
   ]
  }
 },
 {
  "number": 3622,
  "sha": "14b8bf2521fa7fc0bd8ff631b808a418cb75f930",
  "author": "cshallue",
  "participant": "nealwu",
  "created_at": "2018-03-16 00:51:10",
  "merged_at": "2018-03-19 18:41:14",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/astro_fc_model/astro_fc_model.py",
  "condition": [
   "for $0, $1 in $2.$3.iteritems():"
  ],
  "consequent": [
   "for $0, $1 in $2.$3.items():"
  ],
  "identifiers": {
   "condition": [
    "iteritems"
   ],
   "consequent": [
    "items"
   ]
  }
 },
 {
  "number": 3622,
  "sha": "14b8bf2521fa7fc0bd8ff631b808a418cb75f930",
  "author": "cshallue",
  "participant": "nealwu",
  "created_at": "2018-03-16 00:51:10",
  "merged_at": "2018-03-19 18:41:14",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/data/generate_input_records.py",
  "condition": [
   "$0.$1.$2[$3].$4.$5.extend([str($6) for $6 in $5])"
  ],
  "consequent": [
   "$0.$1.$2[$3].$4.$5.extend([       str($6).encode(\"latin-1\") for $6 in $5])"
  ],
  "identifiers": {
   "condition": [
    "extend",
    "str"
   ],
   "consequent": [
    "extend",
    "str",
    "encode"
   ]
  }
 },
 {
  "number": 3622,
  "sha": "14b8bf2521fa7fc0bd8ff631b808a418cb75f930",
  "author": "cshallue",
  "participant": "nealwu",
  "created_at": "2018-03-16 00:51:10",
  "merged_at": "2018-03-19 18:41:14",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/data/generate_input_records.py",
  "condition": [
   "for $0, $1 in $2.iteritems():"
  ],
  "consequent": [
   "for $0, $1 in $2.items():"
  ],
  "identifiers": {
   "condition": [
    "iteritems"
   ],
   "consequent": [
    "items"
   ]
  }
 },
 {
  "number": 3622,
  "sha": "14b8bf2521fa7fc0bd8ff631b808a418cb75f930",
  "author": "cshallue",
  "participant": "nealwu",
  "created_at": "2018-03-16 00:51:10",
  "merged_at": "2018-03-19 18:41:14",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/data/generate_input_records.py",
  "condition": [
   "_set_bytes_feature($0, $1, [str($2)])"
  ],
  "consequent": [
   "_set_bytes_feature($0, $1, [$2])"
  ],
  "identifiers": {
   "condition": [
    "str",
    "_set_bytes_feature"
   ],
   "consequent": [
    "_set_bytes_feature"
   ]
  }
 },
 {
  "number": 3622,
  "sha": "14b8bf2521fa7fc0bd8ff631b808a418cb75f930",
  "author": "cshallue",
  "participant": "nealwu",
  "created_at": "2018-03-16 00:51:10",
  "merged_at": "2018-03-19 18:41:14",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/ops/dataset_ops.py",
  "condition": [
   "for $0, $1 in $2.iteritems()"
  ],
  "consequent": [
   "for $0, $1 in $2.items()"
  ],
  "identifiers": {
   "condition": [
    "iteritems"
   ],
   "consequent": [
    "items"
   ]
  }
 },
 {
  "number": 3622,
  "sha": "14b8bf2521fa7fc0bd8ff631b808a418cb75f930",
  "author": "cshallue",
  "participant": "nealwu",
  "created_at": "2018-03-16 00:51:10",
  "merged_at": "2018-03-19 18:41:14",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/ops/dataset_ops.py",
  "condition": [
   "$0=$1.$2.$0(),"
  ],
  "consequent": [
   "$0=list($1.$2.$0()),"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "list"
   ]
  }
 },
 {
  "number": 3622,
  "sha": "14b8bf2521fa7fc0bd8ff631b808a418cb75f930",
  "author": "cshallue",
  "participant": "nealwu",
  "created_at": "2018-03-16 00:51:10",
  "merged_at": "2018-03-19 18:41:14",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/ops/dataset_ops.py",
  "condition": [
   "$0=$1.$2.$0(),"
  ],
  "consequent": [
   "$0=list($1.$2.$0()),"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "list"
   ]
  }
 },
 {
  "number": 3622,
  "sha": "14b8bf2521fa7fc0bd8ff631b808a418cb75f930",
  "author": "cshallue",
  "participant": "nealwu",
  "created_at": "2018-03-16 00:51:10",
  "merged_at": "2018-03-19 18:41:14",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/ops/dataset_ops.py",
  "condition": [
   "for $0, $1 in $2.$3.iteritems()"
  ],
  "consequent": [
   "for $0, $1 in $2.$3.items()"
  ],
  "identifiers": {
   "condition": [
    "iteritems"
   ],
   "consequent": [
    "items"
   ]
  }
 },
 {
  "number": 3622,
  "sha": "14b8bf2521fa7fc0bd8ff631b808a418cb75f930",
  "author": "cshallue",
  "participant": "nealwu",
  "created_at": "2018-03-16 00:51:10",
  "merged_at": "2018-03-19 18:41:14",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/ops/dataset_ops.py",
  "condition": [
   "for $0, $1 in $2.iteritems():"
  ],
  "consequent": [
   "for $0, $1 in $2.items():"
  ],
  "identifiers": {
   "condition": [
    "iteritems"
   ],
   "consequent": [
    "items"
   ]
  }
 },
 {
  "number": 3622,
  "sha": "14b8bf2521fa7fc0bd8ff631b808a418cb75f930",
  "author": "cshallue",
  "participant": "nealwu",
  "created_at": "2018-03-16 00:51:10",
  "merged_at": "2018-03-19 18:41:14",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/ops/input_ops.py",
  "condition": [
   "for $0, $1 in $2.$3.iteritems():"
  ],
  "consequent": [
   "for $0, $1 in $2.$3.items():"
  ],
  "identifiers": {
   "condition": [
    "iteritems"
   ],
   "consequent": [
    "items"
   ]
  }
 },
 {
  "number": 3622,
  "sha": "14b8bf2521fa7fc0bd8ff631b808a418cb75f930",
  "author": "cshallue",
  "participant": "nealwu",
  "created_at": "2018-03-16 00:51:10",
  "merged_at": "2018-03-19 18:41:14",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/ops/input_ops.py",
  "condition": [
   "for $0, $1 in $2.$3.iteritems():"
  ],
  "consequent": [
   "for $0, $1 in $2.$3.items():"
  ],
  "identifiers": {
   "condition": [
    "iteritems"
   ],
   "consequent": [
    "items"
   ]
  }
 },
 {
  "number": 3622,
  "sha": "14b8bf2521fa7fc0bd8ff631b808a418cb75f930",
  "author": "cshallue",
  "participant": "nealwu",
  "created_at": "2018-03-16 00:51:10",
  "merged_at": "2018-03-19 18:41:14",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/ops/input_ops.py",
  "condition": [
   "for $0, $1 in $2.iteritems():"
  ],
  "consequent": [
   "for $0, $1 in $2.items():"
  ],
  "identifiers": {
   "condition": [
    "iteritems"
   ],
   "consequent": [
    "items"
   ]
  }
 },
 {
  "number": 3622,
  "sha": "14b8bf2521fa7fc0bd8ff631b808a418cb75f930",
  "author": "cshallue",
  "participant": "nealwu",
  "created_at": "2018-03-16 00:51:10",
  "merged_at": "2018-03-19 18:41:14",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/ops/input_ops_test.py",
  "condition": [
   "for $0, $1 in $2[$3].iteritems()"
  ],
  "consequent": [
   "for $0, $1 in $2[$3].items()"
  ],
  "identifiers": {
   "condition": [
    "iteritems"
   ],
   "consequent": [
    "items"
   ]
  }
 },
 {
  "number": 3622,
  "sha": "14b8bf2521fa7fc0bd8ff631b808a418cb75f930",
  "author": "cshallue",
  "participant": "nealwu",
  "created_at": "2018-03-16 00:51:10",
  "merged_at": "2018-03-19 18:41:14",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/ops/testing.py",
  "condition": [
   "for $0, $1 in $2.iteritems() if $1[\"is_time_series\"]"
  ],
  "consequent": [
   "for $0, $1 in $2.items() if $1[\"is_time_series\"]"
  ],
  "identifiers": {
   "condition": [
    "iteritems"
   ],
   "consequent": [
    "items"
   ]
  }
 },
 {
  "number": 3622,
  "sha": "14b8bf2521fa7fc0bd8ff631b808a418cb75f930",
  "author": "cshallue",
  "participant": "nealwu",
  "created_at": "2018-03-16 00:51:10",
  "merged_at": "2018-03-19 18:41:14",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/ops/testing.py",
  "condition": [
   "for $0, $1 in $2.iteritems() if not $1[\"is_time_series\"]"
  ],
  "consequent": [
   "for $0, $1 in $2.items() if not $1[\"is_time_series\"]"
  ],
  "identifiers": {
   "condition": [
    "iteritems"
   ],
   "consequent": [
    "items"
   ]
  }
 },
 {
  "number": 3622,
  "sha": "14b8bf2521fa7fc0bd8ff631b808a418cb75f930",
  "author": "cshallue",
  "participant": "nealwu",
  "created_at": "2018-03-16 00:51:10",
  "merged_at": "2018-03-19 18:41:14",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/util/config_util.py",
  "condition": [
   "for $0, $1 in $2.iteritems():"
  ],
  "consequent": [
   "for $0, $1 in $2.items():"
  ],
  "identifiers": {
   "condition": [
    "iteritems"
   ],
   "consequent": [
    "items"
   ]
  }
 },
 {
  "number": 3622,
  "sha": "14b8bf2521fa7fc0bd8ff631b808a418cb75f930",
  "author": "cshallue",
  "participant": "nealwu",
  "created_at": "2018-03-16 00:51:10",
  "merged_at": "2018-03-19 18:41:14",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/util/configdict.py",
  "condition": [
   "for $0, $1 in $2.iteritems():"
  ],
  "consequent": [
   "for $0, $1 in $2.items():"
  ],
  "identifiers": {
   "condition": [
    "iteritems"
   ],
   "consequent": [
    "items"
   ]
  }
 },
 {
  "number": 3622,
  "sha": "14b8bf2521fa7fc0bd8ff631b808a418cb75f930",
  "author": "cshallue",
  "participant": "nealwu",
  "created_at": "2018-03-16 00:51:10",
  "merged_at": "2018-03-19 18:41:14",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/util.py",
  "condition": [
   "import itertools",
   "\tfor $0, $1 in itertools.izip($2, $3):"
  ],
  "consequent": [
   "for $0, $1 in zip($2, $3):"
  ],
  "identifiers": {
   "condition": [
    "itertools",
    "izip"
   ],
   "consequent": [
    "zip"
   ]
  }
 },
 {
  "number": 3622,
  "sha": "14b8bf2521fa7fc0bd8ff631b808a418cb75f930",
  "author": "cshallue",
  "participant": "nealwu",
  "created_at": "2018-03-16 00:51:10",
  "merged_at": "2018-03-19 18:41:14",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/util.py",
  "condition": [
   "for $0, $1 in itertools.izip($2, $3):"
  ],
  "consequent": [
   "for $0, $1 in zip($2, $3):"
  ],
  "identifiers": {
   "condition": [
    "itertools",
    "izip"
   ],
   "consequent": [
    "zip"
   ]
  }
 },
 {
  "number": 3622,
  "sha": "14b8bf2521fa7fc0bd8ff631b808a418cb75f930",
  "author": "cshallue",
  "participant": "nealwu",
  "created_at": "2018-03-16 00:51:10",
  "merged_at": "2018-03-19 18:41:14",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/util.py",
  "condition": [
   "for $0, $1, $2 in itertools.izip("
  ],
  "consequent": [
   "for $0, $1, $2 in zip("
  ],
  "identifiers": {
   "condition": [
    "itertools",
    "izip"
   ],
   "consequent": [
    "zip"
   ]
  }
 },
 {
  "number": 3622,
  "sha": "14b8bf2521fa7fc0bd8ff631b808a418cb75f930",
  "author": "cshallue",
  "participant": "nealwu",
  "created_at": "2018-03-16 00:51:10",
  "merged_at": "2018-03-19 18:41:14",
  "merged_by": "cshallue",
  "file_path": "research/astronet/third_party/kepler_spline/kepler_spline.py",
  "condition": [
   "import itertools",
   "\tfor $0, $1 in itertools.izip($2, $3):"
  ],
  "consequent": [
   "for $0, $1 in zip($2, $3):"
  ],
  "identifiers": {
   "condition": [
    "itertools",
    "izip"
   ],
   "consequent": [
    "zip"
   ]
  }
 },
 {
  "number": 3852,
  "sha": "279aa927d0160a7f08e48f17b83250ebbf7b866d",
  "author": "DefineFC",
  "participant": "googlebot",
  "created_at": "2018-04-03 08:32:41",
  "merged_at": "2018-04-04 06:08:58",
  "merged_by": "YknZhu",
  "file_path": "research/deeplab/core/xception_test.py",
  "condition": [
   "for $0, $1 in $2.iteritems():"
  ],
  "consequent": [
   "import six",
   "\tfor $0, $1 in six.iteritems($2):"
  ],
  "identifiers": {
   "condition": [
    "iteritems"
   ],
   "consequent": [
    "iteritems",
    "six"
   ]
  }
 },
 {
  "number": 3852,
  "sha": "279aa927d0160a7f08e48f17b83250ebbf7b866d",
  "author": "DefineFC",
  "participant": "googlebot",
  "created_at": "2018-04-03 08:32:41",
  "merged_at": "2018-04-04 06:08:58",
  "merged_by": "YknZhu",
  "file_path": "research/deeplab/core/xception_test.py",
  "condition": [
   "for $0, $1 in $2.iteritems():"
  ],
  "consequent": [
   "for $0, $1 in six.iteritems($2):"
  ],
  "identifiers": {
   "condition": [
    "iteritems"
   ],
   "consequent": [
    "iteritems",
    "six"
   ]
  }
 },
 {
  "number": 3852,
  "sha": "279aa927d0160a7f08e48f17b83250ebbf7b866d",
  "author": "DefineFC",
  "participant": "googlebot",
  "created_at": "2018-04-03 08:32:41",
  "merged_at": "2018-04-04 06:08:58",
  "merged_by": "YknZhu",
  "file_path": "research/deeplab/core/xception_test.py",
  "condition": [
   "for $0, $1 in $2.iteritems():"
  ],
  "consequent": [
   "for $0, $1 in six.iteritems($2):"
  ],
  "identifiers": {
   "condition": [
    "iteritems"
   ],
   "consequent": [
    "iteritems",
    "six"
   ]
  }
 },
 {
  "number": 3852,
  "sha": "279aa927d0160a7f08e48f17b83250ebbf7b866d",
  "author": "DefineFC",
  "participant": "googlebot",
  "created_at": "2018-04-03 08:32:41",
  "merged_at": "2018-04-04 06:08:58",
  "merged_by": "YknZhu",
  "file_path": "research/deeplab/datasets/build_data.py",
  "condition": [
   "return $0.$1.Feature($2=$0.$1.BytesList($3=[$4]))"
  ],
  "consequent": [
   "def norm2bytes($3):",
   "\treturn $3.encode() if isinstance($3, str) else $3 ",
   "  return $0.$1.Feature($2=$0.$1.BytesList($3=[norm2bytes($4)]))"
  ],
  "identifiers": {
   "condition": [
    "Feature",
    "BytesList"
   ],
   "consequent": [
    "encode",
    "BytesList",
    "norm2bytes",
    "str",
    "isinstance",
    "Feature"
   ]
  }
 },
 {
  "number": 3852,
  "sha": "279aa927d0160a7f08e48f17b83250ebbf7b866d",
  "author": "DefineFC",
  "participant": "googlebot",
  "created_at": "2018-04-03 08:32:41",
  "merged_at": "2018-04-04 06:08:58",
  "merged_by": "YknZhu",
  "file_path": "research/deeplab/eval.py",
  "condition": [
   "for $0, $1 in $2.iteritems():"
  ],
  "consequent": [
   "import six",
   "\tfor $0, $1 in six.iteritems($2):"
  ],
  "identifiers": {
   "condition": [
    "iteritems"
   ],
   "consequent": [
    "iteritems",
    "six"
   ]
  }
 },
 {
  "number": 3852,
  "sha": "279aa927d0160a7f08e48f17b83250ebbf7b866d",
  "author": "DefineFC",
  "participant": "googlebot",
  "created_at": "2018-04-03 08:32:41",
  "merged_at": "2018-04-04 06:08:58",
  "merged_by": "YknZhu",
  "file_path": "research/deeplab/eval.py",
  "condition": [
   "$0=$1.values(),"
  ],
  "consequent": [
   "$0=list($1.values()),"
  ],
  "identifiers": {
   "condition": [
    "values"
   ],
   "consequent": [
    "list",
    "values"
   ]
  }
 },
 {
  "number": 3852,
  "sha": "279aa927d0160a7f08e48f17b83250ebbf7b866d",
  "author": "DefineFC",
  "participant": "googlebot",
  "created_at": "2018-04-03 08:32:41",
  "merged_at": "2018-04-04 06:08:58",
  "merged_by": "YknZhu",
  "file_path": "research/deeplab/train.py",
  "condition": [
   "for $0, $1 in $2.iteritems():"
  ],
  "consequent": [
   "import six",
   "\tfor $0, $1 in six.iteritems($2):"
  ],
  "identifiers": {
   "condition": [
    "iteritems"
   ],
   "consequent": [
    "iteritems",
    "six"
   ]
  }
 },
 {
  "number": 3852,
  "sha": "279aa927d0160a7f08e48f17b83250ebbf7b866d",
  "author": "DefineFC",
  "participant": "googlebot",
  "created_at": "2018-04-03 08:32:41",
  "merged_at": "2018-04-04 06:08:58",
  "merged_by": "YknZhu",
  "file_path": "research/deeplab/train.py",
  "condition": [
   "$0 = $1.$2 / $3.num_clones"
  ],
  "consequent": [
   "$0 = int($1.$2 / $3.num_clones)"
  ],
  "identifiers": {
   "condition": [
    "num_clones"
   ],
   "consequent": [
    "int",
    "num_clones"
   ]
  }
 },
 {
  "number": 3852,
  "sha": "279aa927d0160a7f08e48f17b83250ebbf7b866d",
  "author": "DefineFC",
  "participant": "googlebot",
  "created_at": "2018-04-03 08:32:41",
  "merged_at": "2018-04-04 06:08:58",
  "merged_by": "YknZhu",
  "file_path": "research/deeplab/utils/train_utils.py",
  "condition": [
   "for $0, $1 in $2.iteritems():"
  ],
  "consequent": [
   "import six ",
   "\tfor $0, $1 in six.iteritems($2):"
  ],
  "identifiers": {
   "condition": [
    "iteritems"
   ],
   "consequent": [
    "iteritems",
    "six"
   ]
  }
 },
 {
  "number": 3853,
  "sha": "13c9de3965168b97cd78d30650efbbe5bd8edd02",
  "author": "walkerlala",
  "participant": "RomRoc",
  "created_at": "2018-04-03 12:06:49",
  "merged_at": "2018-04-09 17:37:53",
  "merged_by": "aquariusjay",
  "file_path": "research/deeplab/datasets/build_ade20k_data.py",
  "condition": [
   "import glob",
   "from PIL import Image",
   "flags = tf.app.flags",
   "\t\"\"\" Convert $0 $1 $2 $3 $3 $4 format ($5)."
  ],
  "consequent": [
   "\"\"\" Converts $0 $1 $2 $3 $3 $4 format ($5)."
  ],
  "identifiers": {
   "condition": [
    "PIL",
    "glob",
    "app",
    "tf",
    "Image",
    "Convert",
    "flags",
    "format"
   ],
   "consequent": [
    "Converts",
    "format"
   ]
  }
 },
 {
  "number": 3853,
  "sha": "13c9de3965168b97cd78d30650efbbe5bd8edd02",
  "author": "walkerlala",
  "participant": "RomRoc",
  "created_at": "2018-04-03 12:06:49",
  "merged_at": "2018-04-09 17:37:53",
  "merged_by": "aquariusjay",
  "file_path": "research/deeplab/datasets/build_ade20k_data.py",
  "condition": [
   "$0: dataset split ($1.$2., $3, $4)"
  ],
  "consequent": [
   "$0: Dataset split ($1.$2., $3, $4)."
  ],
  "identifiers": {
   "condition": [
    "split",
    "dataset"
   ],
   "consequent": [
    "Dataset",
    "split"
   ]
  }
 },
 {
  "number": 3853,
  "sha": "13c9de3965168b97cd78d30650efbbe5bd8edd02",
  "author": "walkerlala",
  "participant": "RomRoc",
  "created_at": "2018-04-03 12:06:49",
  "merged_at": "2018-04-09 17:37:53",
  "merged_by": "aquariusjay",
  "file_path": "research/deeplab/datasets/build_ade20k_data.py",
  "condition": [
   "$0: dir in $1 $2 $3 locates"
  ],
  "consequent": [
   "$0: Dir in $1 $2 $3 locates."
  ],
  "identifiers": {
   "condition": [
    "locates",
    "dir"
   ],
   "consequent": [
    "Dir",
    "locates"
   ]
  }
 },
 {
  "number": 3853,
  "sha": "13c9de3965168b97cd78d30650efbbe5bd8edd02",
  "author": "walkerlala",
  "participant": "RomRoc",
  "created_at": "2018-04-03 12:06:49",
  "merged_at": "2018-04-09 17:37:53",
  "merged_by": "aquariusjay",
  "file_path": "research/deeplab/datasets/build_ade20k_data.py",
  "condition": [
   "$0: dir in $1 $2 $3 locates"
  ],
  "consequent": [
   "$0: Dir in $1 $2 $3 locates."
  ],
  "identifiers": {
   "condition": [
    "locates",
    "dir"
   ],
   "consequent": [
    "Dir",
    "locates"
   ]
  }
 },
 {
  "number": 3853,
  "sha": "13c9de3965168b97cd78d30650efbbe5bd8edd02",
  "author": "walkerlala",
  "participant": "RomRoc",
  "created_at": "2018-04-03 12:06:49",
  "merged_at": "2018-04-09 17:37:53",
  "merged_by": "aquariusjay",
  "file_path": "research/deeplab/datasets/build_ade20k_data.py",
  "condition": [
   "$0 = glob.glob($1.$2.join($3, '*.jpg'))"
  ],
  "consequent": [
   "$0 = tf.gfile.Glob($1.$2.join($3, '*.jpg'))"
  ],
  "identifiers": {
   "condition": [
    "glob",
    "join"
   ],
   "consequent": [
    "gfile",
    "tf",
    "join",
    "Glob"
   ]
  }
 },
 {
  "number": 3853,
  "sha": "13c9de3965168b97cd78d30650efbbe5bd8edd02",
  "author": "walkerlala",
  "participant": "RomRoc",
  "created_at": "2018-04-03 12:06:49",
  "merged_at": "2018-04-09 17:37:53",
  "merged_by": "aquariusjay",
  "file_path": "research/deeplab/datasets/build_voc2012_data.py",
  "condition": [
   "import glob",
   "\t$0 = glob.glob($1.$2.join($3.$4, '*.txt'))"
  ],
  "consequent": [
   "$0 = tf.gfile.Glob($1.$2.join($3.$4, '*.txt'))"
  ],
  "identifiers": {
   "condition": [
    "glob",
    "join"
   ],
   "consequent": [
    "gfile",
    "tf",
    "join",
    "Glob"
   ]
  }
 },
 {
  "number": 3853,
  "sha": "13c9de3965168b97cd78d30650efbbe5bd8edd02",
  "author": "walkerlala",
  "participant": "RomRoc",
  "created_at": "2018-04-03 12:06:49",
  "merged_at": "2018-04-09 17:37:53",
  "merged_by": "aquariusjay",
  "file_path": "research/deeplab/model.py",
  "condition": [
   "def get_extra_layer_scopes():"
  ],
  "consequent": [
   "def get_extra_layer_scopes(last_layers_contain_logits_only=False):"
  ],
  "identifiers": {
   "condition": [
    "get_extra_layer_scopes"
   ],
   "consequent": [
    "get_extra_layer_scopes",
    "last_layers_contain_logits_only"
   ]
  }
 },
 {
  "number": 3853,
  "sha": "13c9de3965168b97cd78d30650efbbe5bd8edd02",
  "author": "walkerlala",
  "participant": "RomRoc",
  "created_at": "2018-04-03 12:06:49",
  "merged_at": "2018-04-09 17:37:53",
  "merged_by": "aquariusjay",
  "file_path": "research/deeplab/model.py",
  "condition": [
   "return ["
  ],
  "consequent": [
   "Args:",
   "\tlast_layers_contain_logits_only: Boolean, True if only consider logits as",
   "    the last layer (i.e., exclude ASPP module, decoder module and so on) ",
   "  if last_layers_contain_logits_only:",
   "\treturn [_LOGITS_SCOPE_NAME]",
   "  else:",
   "\treturn ["
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "Args",
    "so",
    "decoder",
    "last",
    "i",
    "ASPP",
    "last_layers_contain_logits_only",
    "consider",
    "_LOGITS_SCOPE_NAME",
    "logits",
    "e",
    "on",
    "module",
    "Boolean",
    "exclude",
    "the",
    "only",
    "layer"
   ]
  }
 },
 {
  "number": 3853,
  "sha": "13c9de3965168b97cd78d30650efbbe5bd8edd02",
  "author": "walkerlala",
  "participant": "RomRoc",
  "created_at": "2018-04-03 12:06:49",
  "merged_at": "2018-04-09 17:37:53",
  "merged_by": "aquariusjay",
  "file_path": "research/deeplab/train.py",
  "condition": [
   "$0 = $1.get_extra_layer_scopes()"
  ],
  "consequent": [
   "flags.DEFINE_boolean('last_layers_contain_logits_only', False,                      'Only consider logits as last layers or not.')",
   "\t$0 = $1.get_extra_layer_scopes(FLAGS.last_layers_contain_logits_only)"
  ],
  "identifiers": {
   "condition": [
    "get_extra_layer_scopes"
   ],
   "consequent": [
    "FLAGS",
    "last_layers_contain_logits_only",
    "get_extra_layer_scopes",
    "flags",
    "DEFINE_boolean"
   ]
  }
 },
 {
  "number": 4084,
  "sha": "4cfb259f02135f6e5b5a8f965833f6a5ab7672d9",
  "author": "XinyueZ",
  "participant": "MarkDaoust",
  "created_at": "2018-04-25 14:25:39",
  "merged_at": "2018-04-25 23:30:01",
  "merged_by": "MarkDaoust",
  "file_path": "samples/cookbook/regression/automobile_data.py",
  "condition": [
   "def from_dataset(dataset): return lambda: dataset.make_one_shot_iterator().get_next()"
  ],
  "consequent": [
   "def input_fn():"
  ],
  "identifiers": {
   "condition": [
    "get_next",
    "from_dataset",
    "dataset",
    "make_one_shot_iterator"
   ],
   "consequent": [
    "input_fn"
   ]
  }
 },
 {
  "number": 4084,
  "sha": "4cfb259f02135f6e5b5a8f965833f6a5ab7672d9",
  "author": "XinyueZ",
  "participant": "MarkDaoust",
  "created_at": "2018-04-25 14:25:39",
  "merged_at": "2018-04-25 23:30:01",
  "merged_by": "MarkDaoust",
  "file_path": "samples/cookbook/regression/automobile_data.py",
  "condition": [
   "return dataset"
  ],
  "consequent": [
   "return dataset.make_one_shot_iterator().get_next() ",
   "\treturn input_fn"
  ],
  "identifiers": {
   "condition": [
    "dataset"
   ],
   "consequent": [
    "get_next",
    "dataset",
    "input_fn",
    "make_one_shot_iterator"
   ]
  }
 },
 {
  "number": 4084,
  "sha": "4cfb259f02135f6e5b5a8f965833f6a5ab7672d9",
  "author": "XinyueZ",
  "participant": "MarkDaoust",
  "created_at": "2018-04-25 14:25:39",
  "merged_at": "2018-04-25 23:30:01",
  "merged_by": "MarkDaoust",
  "file_path": "samples/cookbook/regression/custom_regression.py",
  "condition": [
   "train = $0.make_dataset($1.$2, $3, $4, True, 1000)"
  ],
  "consequent": [
   "train_input_fn = $0.make_dataset($1.$2, $3, $4, True, 1000)"
  ],
  "identifiers": {
   "condition": [
    "train",
    "make_dataset"
   ],
   "consequent": [
    "make_dataset",
    "train_input_fn"
   ]
  }
 },
 {
  "number": 4084,
  "sha": "4cfb259f02135f6e5b5a8f965833f6a5ab7672d9",
  "author": "XinyueZ",
  "participant": "MarkDaoust",
  "created_at": "2018-04-25 14:25:39",
  "merged_at": "2018-04-25 23:30:01",
  "merged_by": "MarkDaoust",
  "file_path": "samples/cookbook/regression/custom_regression.py",
  "condition": [
   "test = $0.make_dataset($1.$2, $3, $4)"
  ],
  "consequent": [
   "test_input_fn = $0.make_dataset($1.$2, $3, $4)"
  ],
  "identifiers": {
   "condition": [
    "test",
    "make_dataset"
   ],
   "consequent": [
    "test_input_fn",
    "make_dataset"
   ]
  }
 },
 {
  "number": 4084,
  "sha": "4cfb259f02135f6e5b5a8f965833f6a5ab7672d9",
  "author": "XinyueZ",
  "participant": "MarkDaoust",
  "created_at": "2018-04-25 14:25:39",
  "merged_at": "2018-04-25 23:30:01",
  "merged_by": "MarkDaoust",
  "file_path": "samples/cookbook/regression/custom_regression.py",
  "condition": [
   "$0.train($1=automobile_data.from_dataset($2), $3=$4.$5)"
  ],
  "consequent": [
   "$0.$2($1=train_input_fn, $3=$4.$5)"
  ],
  "identifiers": {
   "condition": [
    "train",
    "automobile_data",
    "from_dataset"
   ],
   "consequent": [
    "train_input_fn"
   ]
  }
 },
 {
  "number": 4084,
  "sha": "4cfb259f02135f6e5b5a8f965833f6a5ab7672d9",
  "author": "XinyueZ",
  "participant": "MarkDaoust",
  "created_at": "2018-04-25 14:25:39",
  "merged_at": "2018-04-25 23:30:01",
  "merged_by": "MarkDaoust",
  "file_path": "samples/cookbook/regression/custom_regression.py",
  "condition": [
   "$0 = $1.evaluate($2=automobile_data.from_dataset(test))"
  ],
  "consequent": [
   "$0 = $1.evaluate($2=test_input_fn)"
  ],
  "identifiers": {
   "condition": [
    "evaluate",
    "from_dataset",
    "test",
    "automobile_data"
   ],
   "consequent": [
    "evaluate",
    "test_input_fn"
   ]
  }
 },
 {
  "number": 4084,
  "sha": "4cfb259f02135f6e5b5a8f965833f6a5ab7672d9",
  "author": "XinyueZ",
  "participant": "MarkDaoust",
  "created_at": "2018-04-25 14:25:39",
  "merged_at": "2018-04-25 23:30:01",
  "merged_by": "MarkDaoust",
  "file_path": "samples/cookbook/regression/dnn_regression.py",
  "condition": [
   "train = $0.make_dataset($1.$2, $3, $4, True, 1000)"
  ],
  "consequent": [
   "train_input_fn = $0.make_dataset($1.$2, $3, $4, True, 1000)"
  ],
  "identifiers": {
   "condition": [
    "train",
    "make_dataset"
   ],
   "consequent": [
    "make_dataset",
    "train_input_fn"
   ]
  }
 },
 {
  "number": 4084,
  "sha": "4cfb259f02135f6e5b5a8f965833f6a5ab7672d9",
  "author": "XinyueZ",
  "participant": "MarkDaoust",
  "created_at": "2018-04-25 14:25:39",
  "merged_at": "2018-04-25 23:30:01",
  "merged_by": "MarkDaoust",
  "file_path": "samples/cookbook/regression/dnn_regression.py",
  "condition": [
   "test = $0.make_dataset($1.$2, $3, $4)"
  ],
  "consequent": [
   "test_input_fn = $0.make_dataset($1.$2, $3, $4)"
  ],
  "identifiers": {
   "condition": [
    "test",
    "make_dataset"
   ],
   "consequent": [
    "test_input_fn",
    "make_dataset"
   ]
  }
 },
 {
  "number": 4084,
  "sha": "4cfb259f02135f6e5b5a8f965833f6a5ab7672d9",
  "author": "XinyueZ",
  "participant": "MarkDaoust",
  "created_at": "2018-04-25 14:25:39",
  "merged_at": "2018-04-25 23:30:01",
  "merged_by": "MarkDaoust",
  "file_path": "samples/cookbook/regression/dnn_regression.py",
  "condition": [
   "$0.train($1=automobile_data.from_dataset($2), $3=$4.$5)"
  ],
  "consequent": [
   "$0.$2($1=train_input_fn, $3=$4.$5)"
  ],
  "identifiers": {
   "condition": [
    "train",
    "automobile_data",
    "from_dataset"
   ],
   "consequent": [
    "train_input_fn"
   ]
  }
 },
 {
  "number": 4084,
  "sha": "4cfb259f02135f6e5b5a8f965833f6a5ab7672d9",
  "author": "XinyueZ",
  "participant": "MarkDaoust",
  "created_at": "2018-04-25 14:25:39",
  "merged_at": "2018-04-25 23:30:01",
  "merged_by": "MarkDaoust",
  "file_path": "samples/cookbook/regression/dnn_regression.py",
  "condition": [
   "$0 = $1.evaluate($2=automobile_data.from_dataset(test))"
  ],
  "consequent": [
   "$0 = $1.evaluate($2=test_input_fn)"
  ],
  "identifiers": {
   "condition": [
    "evaluate",
    "from_dataset",
    "test",
    "automobile_data"
   ],
   "consequent": [
    "evaluate",
    "test_input_fn"
   ]
  }
 },
 {
  "number": 4084,
  "sha": "4cfb259f02135f6e5b5a8f965833f6a5ab7672d9",
  "author": "XinyueZ",
  "participant": "MarkDaoust",
  "created_at": "2018-04-25 14:25:39",
  "merged_at": "2018-04-25 23:30:01",
  "merged_by": "MarkDaoust",
  "file_path": "samples/cookbook/regression/linear_regression.py",
  "condition": [
   "train = $0.make_dataset($1.$2, $3, $4, True, 1000)"
  ],
  "consequent": [
   "train_input_fn = $0.make_dataset($1.$2, $3, $4, True, 1000)"
  ],
  "identifiers": {
   "condition": [
    "train",
    "make_dataset"
   ],
   "consequent": [
    "make_dataset",
    "train_input_fn"
   ]
  }
 },
 {
  "number": 4084,
  "sha": "4cfb259f02135f6e5b5a8f965833f6a5ab7672d9",
  "author": "XinyueZ",
  "participant": "MarkDaoust",
  "created_at": "2018-04-25 14:25:39",
  "merged_at": "2018-04-25 23:30:01",
  "merged_by": "MarkDaoust",
  "file_path": "samples/cookbook/regression/linear_regression.py",
  "condition": [
   "test = $0.make_dataset($1.$2, $3, $4)"
  ],
  "consequent": [
   "test_input_fn = $0.make_dataset($1.$2, $3, $4)"
  ],
  "identifiers": {
   "condition": [
    "test",
    "make_dataset"
   ],
   "consequent": [
    "test_input_fn",
    "make_dataset"
   ]
  }
 },
 {
  "number": 4084,
  "sha": "4cfb259f02135f6e5b5a8f965833f6a5ab7672d9",
  "author": "XinyueZ",
  "participant": "MarkDaoust",
  "created_at": "2018-04-25 14:25:39",
  "merged_at": "2018-04-25 23:30:01",
  "merged_by": "MarkDaoust",
  "file_path": "samples/cookbook/regression/linear_regression.py",
  "condition": [
   "$0.train($1=automobile_data.from_dataset($2), $3=$4.$5)"
  ],
  "consequent": [
   "$0.$2($1=train_input_fn, $3=$4.$5)"
  ],
  "identifiers": {
   "condition": [
    "train",
    "automobile_data",
    "from_dataset"
   ],
   "consequent": [
    "train_input_fn"
   ]
  }
 },
 {
  "number": 4084,
  "sha": "4cfb259f02135f6e5b5a8f965833f6a5ab7672d9",
  "author": "XinyueZ",
  "participant": "MarkDaoust",
  "created_at": "2018-04-25 14:25:39",
  "merged_at": "2018-04-25 23:30:01",
  "merged_by": "MarkDaoust",
  "file_path": "samples/cookbook/regression/linear_regression.py",
  "condition": [
   "$0 = $1.evaluate($2=automobile_data.from_dataset(test))"
  ],
  "consequent": [
   "$0 = $1.evaluate($2=test_input_fn)"
  ],
  "identifiers": {
   "condition": [
    "evaluate",
    "from_dataset",
    "test",
    "automobile_data"
   ],
   "consequent": [
    "evaluate",
    "test_input_fn"
   ]
  }
 },
 {
  "number": 4084,
  "sha": "4cfb259f02135f6e5b5a8f965833f6a5ab7672d9",
  "author": "XinyueZ",
  "participant": "MarkDaoust",
  "created_at": "2018-04-25 14:25:39",
  "merged_at": "2018-04-25 23:30:01",
  "merged_by": "MarkDaoust",
  "file_path": "samples/cookbook/regression/linear_regression.py",
  "condition": [
   "predict = $0.make_dataset(1, $1)"
  ],
  "consequent": [
   "                                    ",
   "\tpredict_input_fn = $0.make_dataset(1, $1)"
  ],
  "identifiers": {
   "condition": [
    "predict",
    "make_dataset"
   ],
   "consequent": [
    "make_dataset",
    "predict_input_fn"
   ]
  }
 },
 {
  "number": 4084,
  "sha": "4cfb259f02135f6e5b5a8f965833f6a5ab7672d9",
  "author": "XinyueZ",
  "participant": "MarkDaoust",
  "created_at": "2018-04-25 14:25:39",
  "merged_at": "2018-04-25 23:30:01",
  "merged_by": "MarkDaoust",
  "file_path": "samples/cookbook/regression/linear_regression.py",
  "condition": [
   "$0 = $1.predict($2=automobile_data.from_dataset($3))"
  ],
  "consequent": [
   "$0 = $1.$3($2=predict_input_fn)"
  ],
  "identifiers": {
   "condition": [
    "predict",
    "from_dataset",
    "automobile_data"
   ],
   "consequent": [
    "predict_input_fn"
   ]
  }
 },
 {
  "number": 4084,
  "sha": "4cfb259f02135f6e5b5a8f965833f6a5ab7672d9",
  "author": "XinyueZ",
  "participant": "MarkDaoust",
  "created_at": "2018-04-25 14:25:39",
  "merged_at": "2018-04-25 23:30:01",
  "merged_by": "MarkDaoust",
  "file_path": "samples/cookbook/regression/linear_regression_categorical.py",
  "condition": [
   "train = $0.make_dataset($1.$2, $3, $4, True, 1000)"
  ],
  "consequent": [
   "train_input_fn = $0.make_dataset($1.$2, $3, $4, True, 1000)"
  ],
  "identifiers": {
   "condition": [
    "train",
    "make_dataset"
   ],
   "consequent": [
    "make_dataset",
    "train_input_fn"
   ]
  }
 },
 {
  "number": 4084,
  "sha": "4cfb259f02135f6e5b5a8f965833f6a5ab7672d9",
  "author": "XinyueZ",
  "participant": "MarkDaoust",
  "created_at": "2018-04-25 14:25:39",
  "merged_at": "2018-04-25 23:30:01",
  "merged_by": "MarkDaoust",
  "file_path": "samples/cookbook/regression/linear_regression_categorical.py",
  "condition": [
   "test = $0.make_dataset($1.$2, $3, $4)"
  ],
  "consequent": [
   "test_input_fn = $0.make_dataset($1.$2, $3, $4)"
  ],
  "identifiers": {
   "condition": [
    "test",
    "make_dataset"
   ],
   "consequent": [
    "test_input_fn",
    "make_dataset"
   ]
  }
 },
 {
  "number": 4084,
  "sha": "4cfb259f02135f6e5b5a8f965833f6a5ab7672d9",
  "author": "XinyueZ",
  "participant": "MarkDaoust",
  "created_at": "2018-04-25 14:25:39",
  "merged_at": "2018-04-25 23:30:01",
  "merged_by": "MarkDaoust",
  "file_path": "samples/cookbook/regression/linear_regression_categorical.py",
  "condition": [
   "$0.train($1=automobile_data.from_dataset($2), $3=$4.$5)"
  ],
  "consequent": [
   "$0.$2($1=train_input_fn, $3=$4.$5)"
  ],
  "identifiers": {
   "condition": [
    "train",
    "automobile_data",
    "from_dataset"
   ],
   "consequent": [
    "train_input_fn"
   ]
  }
 },
 {
  "number": 4084,
  "sha": "4cfb259f02135f6e5b5a8f965833f6a5ab7672d9",
  "author": "XinyueZ",
  "participant": "MarkDaoust",
  "created_at": "2018-04-25 14:25:39",
  "merged_at": "2018-04-25 23:30:01",
  "merged_by": "MarkDaoust",
  "file_path": "samples/cookbook/regression/linear_regression_categorical.py",
  "condition": [
   "$0 = $1.evaluate($2=automobile_data.from_dataset(test))"
  ],
  "consequent": [
   "$0 = $1.evaluate($2=test_input_fn)"
  ],
  "identifiers": {
   "condition": [
    "evaluate",
    "from_dataset",
    "test",
    "automobile_data"
   ],
   "consequent": [
    "evaluate",
    "test_input_fn"
   ]
  }
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "merged_at": "2018-06-05 07:54:45",
  "merged_by": "joel-shor",
  "file_path": "research/gan/cifar/data_provider_test.py",
  "condition": [
   "tf.$0.$1.$2,"
  ],
  "consequent": [
   "from absl import $0",
   "\t$0.$1.$2,"
  ],
  "identifiers": {
   "condition": [
    "tf"
   ],
   "consequent": [
    "absl"
   ]
  }
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "merged_at": "2018-06-05 07:54:45",
  "merged_by": "joel-shor",
  "file_path": "research/gan/cifar/eval.py",
  "condition": [
   "$0 = tf.$0",
   "$1 = tf.$0.$1"
  ],
  "consequent": [
   "from absl import app",
   "from absl import $0",
   "$1 = $0.$1"
  ],
  "identifiers": {
   "condition": [
    "tf"
   ],
   "consequent": [
    "app",
    "absl"
   ]
  }
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "merged_at": "2018-06-05 07:54:45",
  "merged_by": "joel-shor",
  "file_path": "research/gan/cifar/eval.py",
  "condition": [
   "tf.$0.run()"
  ],
  "consequent": [
   "$0.run(main)"
  ],
  "identifiers": {
   "condition": [
    "tf",
    "run"
   ],
   "consequent": [
    "main",
    "run"
   ]
  }
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "merged_at": "2018-06-05 07:54:45",
  "merged_by": "joel-shor",
  "file_path": "research/gan/cifar/eval_test.py",
  "condition": [
   "$0 = tf.$1.$0"
  ],
  "consequent": [
   "from absl import $1",
   "from absl.testing import parameterized",
   "$0 = $1.$0"
  ],
  "identifiers": {
   "condition": [
    "tf"
   ],
   "consequent": [
    "testing",
    "parameterized",
    "absl"
   ]
  }
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "merged_at": "2018-06-05 07:54:45",
  "merged_by": "joel-shor",
  "file_path": "research/gan/cifar/eval_test.py",
  "condition": [
   "class EvalTest($0.$1.$2):"
  ],
  "consequent": [
   "class EvalTest($0.$1.$2, parameterized.$2):"
  ],
  "identifiers": {
   "condition": [
    "EvalTest"
   ],
   "consequent": [
    "parameterized",
    "EvalTest"
   ]
  }
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "merged_at": "2018-06-05 07:54:45",
  "merged_by": "joel-shor",
  "file_path": "research/gan/cifar/eval_test.py",
  "condition": [
   "def _test_build_graph_helper($0, $1, $2):"
  ],
  "consequent": [
   "@parameterized.named_parameters(       ('RealData', True, False),       ('GeneratedData', False, False),       ('GeneratedDataConditional', False, True))",
   "\tdef test_build_graph($0, $1, $2):"
  ],
  "identifiers": {
   "condition": [
    "_test_build_graph_helper"
   ],
   "consequent": [
    "parameterized",
    "test_build_graph",
    "named_parameters"
   ]
  }
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "merged_at": "2018-06-05 07:54:45",
  "merged_by": "joel-shor",
  "file_path": "research/gan/cifar/train.py",
  "condition": [
   "$0 = tf.$0"
  ],
  "consequent": [
   "from absl import $0",
   "from absl import logging"
  ],
  "identifiers": {
   "condition": [
    "tf"
   ],
   "consequent": [
    "logging",
    "absl"
   ]
  }
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "merged_at": "2018-06-05 07:54:45",
  "merged_by": "joel-shor",
  "file_path": "research/gan/cifar/train.py",
  "condition": [
   "tf.$0.set_verbosity(tf.$0.$1)"
  ],
  "consequent": [
   "$0.set_verbosity($0.$1)"
  ],
  "identifiers": {
   "condition": [
    "tf",
    "set_verbosity"
   ],
   "consequent": [
    "set_verbosity"
   ]
  }
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "merged_at": "2018-06-05 07:54:45",
  "merged_by": "joel-shor",
  "file_path": "research/gan/cifar/train_test.py",
  "condition": [
   "$0 = tf.$1.$0"
  ],
  "consequent": [
   "from absl import $1",
   "from absl.testing import parameterized",
   "$0 = $1.$0"
  ],
  "identifiers": {
   "condition": [
    "tf"
   ],
   "consequent": [
    "testing",
    "parameterized",
    "absl"
   ]
  }
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "merged_at": "2018-06-05 07:54:45",
  "merged_by": "joel-shor",
  "file_path": "research/gan/cifar/train_test.py",
  "condition": [
   "class TrainTest($0.$1.$2):"
  ],
  "consequent": [
   "class TrainTest($0.$1.$2, parameterized.$2):"
  ],
  "identifiers": {
   "condition": [
    "TrainTest"
   ],
   "consequent": [
    "parameterized",
    "TrainTest"
   ]
  }
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "merged_at": "2018-06-05 07:54:45",
  "merged_by": "joel-shor",
  "file_path": "research/gan/cifar/train_test.py",
  "condition": [
   "def _test_build_graph_helper($0, $1, $2):"
  ],
  "consequent": [
   "@parameterized.named_parameters(       ('Unconditional', False, False),       ('Conditional', True, False),       ('SyncReplicas', False, True))",
   "\tdef test_build_graph_helper($0, $1, $2):"
  ],
  "identifiers": {
   "condition": [
    "_test_build_graph_helper"
   ],
   "consequent": [
    "test_build_graph_helper",
    "parameterized",
    "named_parameters"
   ]
  }
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "merged_at": "2018-06-05 07:54:45",
  "merged_by": "joel-shor",
  "file_path": "research/gan/cyclegan/data_provider_test.py",
  "condition": [
   "def _get_testdata_dir($0):",
   "\treturn $1.$2.join(         tf.$3.$4.$5,         'google3/third_party/tensorflow_models/gan/cyclegan/testdata')"
  ],
  "consequent": [
   "from absl import $3 ",
   "\tdef setUp($0):",
   "\tsuper(DataProviderTest, $0).setUp()",
   "    $0.testdata_dir = $1.$2.join(         $3.$4.$5,         'google3/third_party/tensorflow_models/gan/cyclegan/testdata')"
  ],
  "identifiers": {
   "condition": [
    "_get_testdata_dir",
    "join",
    "tf"
   ],
   "consequent": [
    "setUp",
    "absl",
    "join",
    "super",
    "DataProviderTest",
    "testdata_dir"
   ]
  }
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "merged_at": "2018-06-05 07:54:45",
  "merged_by": "joel-shor",
  "file_path": "research/gan/cyclegan/data_provider_test.py",
  "condition": [
   "$0 = $1.$2.join($3._get_testdata_dir(), '*.jpg')"
  ],
  "consequent": [
   "$0 = $1.$2.join($3.testdata_dir, '*.jpg')"
  ],
  "identifiers": {
   "condition": [
    "_get_testdata_dir",
    "join"
   ],
   "consequent": [
    "join",
    "testdata_dir"
   ]
  }
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "merged_at": "2018-06-05 07:54:45",
  "merged_by": "joel-shor",
  "file_path": "research/gan/cyclegan/data_provider_test.py",
  "condition": [
   "$0 = $1.$2.join($3._get_testdata_dir(), '*.jpg')"
  ],
  "consequent": [
   "$0 = $1.$2.join($3.testdata_dir, '*.jpg')"
  ],
  "identifiers": {
   "condition": [
    "_get_testdata_dir",
    "join"
   ],
   "consequent": [
    "join",
    "testdata_dir"
   ]
  }
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "merged_at": "2018-06-05 07:54:45",
  "merged_by": "joel-shor",
  "file_path": "research/gan/cyclegan/inference_demo.py",
  "condition": [
   "$0 = tf.$0"
  ],
  "consequent": [
   "from absl import app",
   "from absl import $0"
  ],
  "identifiers": {
   "condition": [
    "tf"
   ],
   "consequent": [
    "app",
    "absl"
   ]
  }
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "merged_at": "2018-06-05 07:54:45",
  "merged_by": "joel-shor",
  "file_path": "research/gan/cyclegan/inference_demo.py",
  "condition": [
   "tf.$0.run()"
  ],
  "consequent": [
   "$0.run()"
  ],
  "identifiers": {
   "condition": [
    "tf",
    "run"
   ],
   "consequent": [
    "run"
   ]
  }
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "merged_at": "2018-06-05 07:54:45",
  "merged_by": "joel-shor",
  "file_path": "research/gan/cyclegan/inference_demo_test.py",
  "condition": [
   "tf.$0.info('dir_path: {}'.format($1.listdir($2.$3)))"
  ],
  "consequent": [
   "from absl import $0 ",
   "\t$0.info('dir_path: %s', $1.listdir($2.$3))"
  ],
  "identifiers": {
   "condition": [
    "tf",
    "listdir",
    "format",
    "info"
   ],
   "consequent": [
    "info",
    "listdir",
    "absl"
   ]
  }
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "merged_at": "2018-06-05 07:54:45",
  "merged_by": "joel-shor",
  "file_path": "research/gan/cyclegan/inference_demo_test.py",
  "condition": [
   "tf.$0.info('gen x: {}'.format($1.listdir($2.$3)))"
  ],
  "consequent": [
   "$0.info('gen x: %s', $1.listdir($2.$3))"
  ],
  "identifiers": {
   "condition": [
    "tf",
    "listdir",
    "format",
    "info"
   ],
   "consequent": [
    "info",
    "listdir"
   ]
  }
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "merged_at": "2018-06-05 07:54:45",
  "merged_by": "joel-shor",
  "file_path": "research/gan/cyclegan/inference_demo_test.py",
  "condition": [
   "tf.$0.info('Testing {} for realism.'.format($1))"
  ],
  "consequent": [
   "$0.info('Testing %s for realism.', $1)"
  ],
  "identifiers": {
   "condition": [
    "tf",
    "format",
    "info"
   ],
   "consequent": [
    "info"
   ]
  }
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "merged_at": "2018-06-05 07:54:45",
  "merged_by": "joel-shor",
  "file_path": "research/gan/cyclegan/train.py",
  "condition": [
   "import numpy as np"
  ],
  "consequent": [
   "from absl import flags"
  ],
  "identifiers": {
   "condition": [
    "numpy",
    "np"
   ],
   "consequent": [
    "flags",
    "absl"
   ]
  }
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "merged_at": "2018-06-05 07:54:45",
  "merged_by": "joel-shor",
  "file_path": "research/gan/cyclegan/train.py",
  "condition": [
   "flags = tf.flags"
  ],
  "consequent": [
   "tfgan.eval.add_cyclegan_image_summaries(cyclegan_model)"
  ],
  "identifiers": {
   "condition": [
    "tf",
    "flags"
   ],
   "consequent": [
    "eval",
    "add_cyclegan_image_summaries",
    "tfgan",
    "cyclegan_model"
   ]
  }
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "merged_at": "2018-06-05 07:54:45",
  "merged_by": "joel-shor",
  "file_path": "research/gan/cyclegan/train_test.py",
  "condition": [
   "$0 = tf.$1.$0"
  ],
  "consequent": [
   "from absl import $1",
   "$0 = $1.$0"
  ],
  "identifiers": {
   "condition": [
    "tf"
   ],
   "consequent": [
    "absl"
   ]
  }
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "merged_at": "2018-06-05 07:54:45",
  "merged_by": "joel-shor",
  "file_path": "research/gan/image_compression/data_provider_test.py",
  "condition": [
   "class DataProviderTest($0.$1.$2):"
  ],
  "consequent": [
   "from absl import flags",
   "from absl.testing import parameterized",
   "class DataProviderTest($0.$1.$2, parameterized.$2):"
  ],
  "identifiers": {
   "condition": [
    "DataProviderTest"
   ],
   "consequent": [
    "absl",
    "DataProviderTest",
    "parameterized",
    "flags",
    "testing"
   ]
  }
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "merged_at": "2018-06-05 07:54:45",
  "merged_by": "joel-shor",
  "file_path": "research/gan/image_compression/data_provider_test.py",
  "condition": [
   "def _test_data_provider_helper($0, $1):"
  ],
  "consequent": [
   "@parameterized.named_parameters(       ('train', 'train'),       ('validation', 'validation'))",
   "\tdef test_data_provider($0, $1):"
  ],
  "identifiers": {
   "condition": [
    "_test_data_provider_helper"
   ],
   "consequent": [
    "parameterized",
    "test_data_provider",
    "named_parameters"
   ]
  }
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "merged_at": "2018-06-05 07:54:45",
  "merged_by": "joel-shor",
  "file_path": "research/gan/image_compression/data_provider_test.py",
  "condition": [
   "tf.$0.$1.$2,"
  ],
  "consequent": [
   "$0.$1.$2,"
  ],
  "identifiers": {
   "condition": [
    "tf"
   ],
   "consequent": []
  }
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "merged_at": "2018-06-05 07:54:45",
  "merged_by": "joel-shor",
  "file_path": "research/gan/image_compression/eval.py",
  "condition": [
   "$0 = tf.$0"
  ],
  "consequent": [
   "from absl import app",
   "from absl import $0"
  ],
  "identifiers": {
   "condition": [
    "tf"
   ],
   "consequent": [
    "app",
    "absl"
   ]
  }
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "merged_at": "2018-06-05 07:54:45",
  "merged_by": "joel-shor",
  "file_path": "research/gan/image_compression/eval.py",
  "condition": [
   "tf.$0.run()"
  ],
  "consequent": [
   "$0.run()"
  ],
  "identifiers": {
   "condition": [
    "tf",
    "run"
   ],
   "consequent": [
    "run"
   ]
  }
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "merged_at": "2018-06-05 07:54:45",
  "merged_by": "joel-shor",
  "file_path": "research/gan/image_compression/train.py",
  "condition": [
   "flags = tf.flags",
   "\ttf.$0.set_verbosity(tf.$0.$1)"
  ],
  "consequent": [
   "$0.set_verbosity($0.$1)"
  ],
  "identifiers": {
   "condition": [
    "tf",
    "set_verbosity",
    "flags"
   ],
   "consequent": [
    "set_verbosity"
   ]
  }
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "merged_at": "2018-06-05 07:54:45",
  "merged_by": "joel-shor",
  "file_path": "research/gan/image_compression/train_test.py",
  "condition": [
   "$0 = tf.$1.$0"
  ],
  "consequent": [
   "from absl import $1",
   "from absl.testing import parameterized",
   "$0 = $1.$0"
  ],
  "identifiers": {
   "condition": [
    "tf"
   ],
   "consequent": [
    "testing",
    "parameterized",
    "absl"
   ]
  }
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "merged_at": "2018-06-05 07:54:45",
  "merged_by": "joel-shor",
  "file_path": "research/gan/image_compression/train_test.py",
  "condition": [
   "class TrainTest($0.$1.$2):"
  ],
  "consequent": [
   "class TrainTest($0.$1.$2, parameterized.$2):"
  ],
  "identifiers": {
   "condition": [
    "TrainTest"
   ],
   "consequent": [
    "parameterized",
    "TrainTest"
   ]
  }
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "merged_at": "2018-06-05 07:54:45",
  "merged_by": "joel-shor",
  "file_path": "research/gan/image_compression/train_test.py",
  "condition": [
   "def _test_build_graph_helper($0, $1):"
  ],
  "consequent": [
   "@parameterized.named_parameters(       ('NoAdversarialLoss', 0.0),       ('AdversarialLoss', 1.0))",
   "\tdef test_build_graph($0, $1):"
  ],
  "identifiers": {
   "condition": [
    "_test_build_graph_helper"
   ],
   "consequent": [
    "parameterized",
    "test_build_graph",
    "named_parameters"
   ]
  }
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "merged_at": "2018-06-05 07:54:45",
  "merged_by": "joel-shor",
  "file_path": "research/gan/mnist/conditional_eval.py",
  "condition": [
   "$0 = tf.$0"
  ],
  "consequent": [
   "from absl import app",
   "from absl import $0"
  ],
  "identifiers": {
   "condition": [
    "tf"
   ],
   "consequent": [
    "app",
    "absl"
   ]
  }
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "merged_at": "2018-06-05 07:54:45",
  "merged_by": "joel-shor",
  "file_path": "research/gan/mnist/conditional_eval.py",
  "condition": [
   "tf.$0.run()"
  ],
  "consequent": [
   "$0.run(main)"
  ],
  "identifiers": {
   "condition": [
    "tf",
    "run"
   ],
   "consequent": [
    "main",
    "run"
   ]
  }
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "merged_at": "2018-06-05 07:54:45",
  "merged_by": "joel-shor",
  "file_path": "research/gan/mnist/conditional_eval_test.py",
  "condition": [
   "import tensorflow as tf"
  ],
  "consequent": [
   "from absl.testing import absltest"
  ],
  "identifiers": {
   "condition": [
    "tf",
    "tensorflow"
   ],
   "consequent": [
    "absltest",
    "testing",
    "absl"
   ]
  }
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "merged_at": "2018-06-05 07:54:45",
  "merged_by": "joel-shor",
  "file_path": "research/gan/mnist/conditional_eval_test.py",
  "condition": [
   "class ConditionalEvalTest(tf.test.$0):"
  ],
  "consequent": [
   "class ConditionalEvalTest(absltest.$0):"
  ],
  "identifiers": {
   "condition": [
    "tf",
    "test",
    "ConditionalEvalTest"
   ],
   "consequent": [
    "ConditionalEvalTest",
    "absltest"
   ]
  }
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "merged_at": "2018-06-05 07:54:45",
  "merged_by": "joel-shor",
  "file_path": "research/gan/mnist/conditional_eval_test.py",
  "condition": [
   "tf.test.main()"
  ],
  "consequent": [
   "absltest.main()"
  ],
  "identifiers": {
   "condition": [
    "main",
    "tf",
    "test"
   ],
   "consequent": [
    "main",
    "absltest"
   ]
  }
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "merged_at": "2018-06-05 07:54:45",
  "merged_by": "joel-shor",
  "file_path": "research/gan/mnist/data_provider_test.py",
  "condition": [
   "tf.$0.$1.$2,"
  ],
  "consequent": [
   "from absl import $0",
   "\t$0.$1.$2,"
  ],
  "identifiers": {
   "condition": [
    "tf"
   ],
   "consequent": [
    "absl"
   ]
  }
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "merged_at": "2018-06-05 07:54:45",
  "merged_by": "joel-shor",
  "file_path": "research/gan/mnist/eval.py",
  "condition": [
   "$0 = tf.$0"
  ],
  "consequent": [
   "from absl import app",
   "from absl import $0"
  ],
  "identifiers": {
   "condition": [
    "tf"
   ],
   "consequent": [
    "app",
    "absl"
   ]
  }
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "merged_at": "2018-06-05 07:54:45",
  "merged_by": "joel-shor",
  "file_path": "research/gan/mnist/eval.py",
  "condition": [
   "tf.$0.run()"
  ],
  "consequent": [
   "$0.run(main)"
  ],
  "identifiers": {
   "condition": [
    "tf",
    "run"
   ],
   "consequent": [
    "main",
    "run"
   ]
  }
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "merged_at": "2018-06-05 07:54:45",
  "merged_by": "joel-shor",
  "file_path": "research/gan/mnist/eval_test.py",
  "condition": [
   "import tensorflow as tf"
  ],
  "consequent": [
   "from absl import flags",
   "from absl.testing import absltest",
   "from absl.testing import parameterized"
  ],
  "identifiers": {
   "condition": [
    "tf",
    "tensorflow"
   ],
   "consequent": [
    "testing",
    "absl",
    "parameterized",
    "flags",
    "absltest"
   ]
  }
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "merged_at": "2018-06-05 07:54:45",
  "merged_by": "joel-shor",
  "file_path": "research/gan/mnist/eval_test.py",
  "condition": [
   "class EvalTest(tf.test.$0):"
  ],
  "consequent": [
   "class EvalTest(parameterized.$0):"
  ],
  "identifiers": {
   "condition": [
    "tf",
    "EvalTest",
    "test"
   ],
   "consequent": [
    "parameterized",
    "EvalTest"
   ]
  }
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "merged_at": "2018-06-05 07:54:45",
  "merged_by": "joel-shor",
  "file_path": "research/gan/mnist/eval_test.py",
  "condition": [
   "def _test_build_graph_helper($0, $1):"
  ],
  "consequent": [
   "@parameterized.named_parameters(       ('RealData', True),       ('GeneratedData', False))",
   "\tdef test_build_graph($0, $1):"
  ],
  "identifiers": {
   "condition": [
    "_test_build_graph_helper"
   ],
   "consequent": [
    "parameterized",
    "test_build_graph",
    "named_parameters"
   ]
  }
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "merged_at": "2018-06-05 07:54:45",
  "merged_by": "joel-shor",
  "file_path": "research/gan/mnist/eval_test.py",
  "condition": [
   "tf.$0.$1.$2 = $2"
  ],
  "consequent": [
   "$0.$1.$2 = $2"
  ],
  "identifiers": {
   "condition": [
    "tf"
   ],
   "consequent": []
  }
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "merged_at": "2018-06-05 07:54:45",
  "merged_by": "joel-shor",
  "file_path": "research/gan/mnist/eval_test.py",
  "condition": [
   "def test_build_graph_realdata(self):",
   "\tself._test_build_graph_helper(True) ",
   "  def test_build_graph_generateddata(self):",
   "\tself._test_build_graph_helper(False)",
   "  tf.test.main()"
  ],
  "consequent": [
   "absltest.main()"
  ],
  "identifiers": {
   "condition": [
    "_test_build_graph_helper",
    "test",
    "test_build_graph_realdata",
    "self",
    "main",
    "tf",
    "test_build_graph_generateddata"
   ],
   "consequent": [
    "main",
    "absltest"
   ]
  }
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "merged_at": "2018-06-05 07:54:45",
  "merged_by": "joel-shor",
  "file_path": "research/gan/mnist/infogan_eval.py",
  "condition": [
   "$0 = tf.$0"
  ],
  "consequent": [
   "from absl import app",
   "from absl import $0"
  ],
  "identifiers": {
   "condition": [
    "tf"
   ],
   "consequent": [
    "app",
    "absl"
   ]
  }
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "merged_at": "2018-06-05 07:54:45",
  "merged_by": "joel-shor",
  "file_path": "research/gan/mnist/infogan_eval.py",
  "condition": [
   "tf.$0.run()"
  ],
  "consequent": [
   "$0.run(main)"
  ],
  "identifiers": {
   "condition": [
    "tf",
    "run"
   ],
   "consequent": [
    "main",
    "run"
   ]
  }
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "merged_at": "2018-06-05 07:54:45",
  "merged_by": "joel-shor",
  "file_path": "research/gan/mnist/infogan_eval_test.py",
  "condition": [
   "import tensorflow as tf"
  ],
  "consequent": [
   "from absl.testing import absltest"
  ],
  "identifiers": {
   "condition": [
    "tf",
    "tensorflow"
   ],
   "consequent": [
    "absltest",
    "testing",
    "absl"
   ]
  }
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "merged_at": "2018-06-05 07:54:45",
  "merged_by": "joel-shor",
  "file_path": "research/gan/mnist/infogan_eval_test.py",
  "condition": [
   "class MnistInfoGANEvalTest(tf.test.$0):"
  ],
  "consequent": [
   "class MnistInfoGANEvalTest(absltest.$0):"
  ],
  "identifiers": {
   "condition": [
    "MnistInfoGANEvalTest",
    "tf",
    "test"
   ],
   "consequent": [
    "MnistInfoGANEvalTest",
    "absltest"
   ]
  }
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "merged_at": "2018-06-05 07:54:45",
  "merged_by": "joel-shor",
  "file_path": "research/gan/mnist/infogan_eval_test.py",
  "condition": [
   "tf.test.main()"
  ],
  "consequent": [
   "absltest.main()"
  ],
  "identifiers": {
   "condition": [
    "main",
    "tf",
    "test"
   ],
   "consequent": [
    "main",
    "absltest"
   ]
  }
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "merged_at": "2018-06-05 07:54:45",
  "merged_by": "joel-shor",
  "file_path": "research/gan/mnist/train.py",
  "condition": [
   "$0 = tf.$0"
  ],
  "consequent": [
   "from absl import $0",
   "from absl import logging"
  ],
  "identifiers": {
   "condition": [
    "tf"
   ],
   "consequent": [
    "logging",
    "absl"
   ]
  }
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "merged_at": "2018-06-05 07:54:45",
  "merged_by": "joel-shor",
  "file_path": "research/gan/mnist/train.py",
  "condition": [
   "tf.$0.set_verbosity(tf.$0.$1)"
  ],
  "consequent": [
   "$0.set_verbosity($0.$1)"
  ],
  "identifiers": {
   "condition": [
    "tf",
    "set_verbosity"
   ],
   "consequent": [
    "set_verbosity"
   ]
  }
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "merged_at": "2018-06-05 07:54:45",
  "merged_by": "joel-shor",
  "file_path": "research/gan/mnist/train_test.py",
  "condition": [
   "$0 = tf.$1.$0"
  ],
  "consequent": [
   "from absl import $1",
   "from absl.testing import parameterized",
   "$0 = $1.$0"
  ],
  "identifiers": {
   "condition": [
    "tf"
   ],
   "consequent": [
    "testing",
    "parameterized",
    "absl"
   ]
  }
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "merged_at": "2018-06-05 07:54:45",
  "merged_by": "joel-shor",
  "file_path": "research/gan/mnist/train_test.py",
  "condition": [
   "class TrainTest($0.$1.$2):"
  ],
  "consequent": [
   "class TrainTest($0.$1.$2, parameterized.$2):"
  ],
  "identifiers": {
   "condition": [
    "TrainTest"
   ],
   "consequent": [
    "parameterized",
    "TrainTest"
   ]
  }
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "merged_at": "2018-06-05 07:54:45",
  "merged_by": "joel-shor",
  "file_path": "research/gan/mnist/train_test.py",
  "condition": [
   "def _test_build_graph_helper($0, $1):"
  ],
  "consequent": [
   "@parameterized.named_parameters(       ('Unconditional', 'unconditional'),       ('Conditional', 'conditional'),       ('InfoGAN', 'infogan'))",
   "\tdef test_build_graph($0, $1):"
  ],
  "identifiers": {
   "condition": [
    "_test_build_graph_helper"
   ],
   "consequent": [
    "parameterized",
    "test_build_graph",
    "named_parameters"
   ]
  }
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "merged_at": "2018-06-05 07:54:45",
  "merged_by": "joel-shor",
  "file_path": "research/gan/mnist_estimator/train.py",
  "condition": [
   "$0 = tf.$0"
  ],
  "consequent": [
   "from absl import $0"
  ],
  "identifiers": {
   "condition": [
    "tf"
   ],
   "consequent": [
    "absl"
   ]
  }
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "merged_at": "2018-06-05 07:54:45",
  "merged_by": "joel-shor",
  "file_path": "research/gan/mnist_estimator/train_test.py",
  "condition": [
   "$0 = tf.$1.$0"
  ],
  "consequent": [
   "$0 = $1.$0"
  ],
  "identifiers": {
   "condition": [
    "tf"
   ],
   "consequent": []
  }
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "merged_at": "2018-06-05 07:54:45",
  "merged_by": "joel-shor",
  "file_path": "research/gan/pix2pix/networks.py",
  "condition": [
   "$0, $1 = $2.cyclegan_generator_resnet($3)"
  ],
  "consequent": [
   "Raises:",
   "\tValueError: If shape of last dimension (channels) is not defined.",
   "  input_size = $3.shape.as_list()",
   "\tchannels = input_size[-1]",
   "  if channels is None:",
   "\traise ValueError(         'Last dimension shape must be known but is None: %s' % input_size)",
   "    $0, $1 = $2.cyclegan_generator_resnet($3,                                                           num_outputs=channels)"
  ],
  "identifiers": {
   "condition": [
    "cyclegan_generator_resnet"
   ],
   "consequent": [
    "input_size",
    "Raises",
    "If",
    "of",
    "as_list",
    "last",
    "cyclegan_generator_resnet",
    "shape",
    "dimension",
    "channels",
    "ValueError",
    "defined",
    "num_outputs"
   ]
  }
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "merged_at": "2018-06-05 07:54:45",
  "merged_by": "joel-shor",
  "file_path": "research/gan/pix2pix/train_test.py",
  "condition": [
   "$0 = tf.$1.$0"
  ],
  "consequent": [
   "from absl import $1",
   "from absl.testing import parameterized",
   "$0 = $1.$0"
  ],
  "identifiers": {
   "condition": [
    "tf"
   ],
   "consequent": [
    "testing",
    "parameterized",
    "absl"
   ]
  }
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "merged_at": "2018-06-05 07:54:45",
  "merged_by": "joel-shor",
  "file_path": "research/gan/pix2pix/train_test.py",
  "condition": [
   "class TrainTest($0.$1.$2):"
  ],
  "consequent": [
   "class TrainTest($0.$1.$2, parameterized.$2):"
  ],
  "identifiers": {
   "condition": [
    "TrainTest"
   ],
   "consequent": [
    "parameterized",
    "TrainTest"
   ]
  }
 },
 {
  "number": 4181,
  "sha": "4f7074f67c5ca838c7ed7a86b45ef6efd55be373",
  "author": "joel-shor",
  "participant": "a819721810",
  "created_at": "2018-05-05 13:49:33",
  "merged_at": "2018-06-05 07:54:45",
  "merged_by": "joel-shor",
  "file_path": "research/gan/pix2pix/train_test.py",
  "condition": [
   "def _test_build_graph_helper($0, $1):"
  ],
  "consequent": [
   "@parameterized.named_parameters(       ('NoAdversarialLoss', 0.0),       ('AdversarialLoss', 1.0))",
   "\tdef test_build_graph($0, $1):"
  ],
  "identifiers": {
   "condition": [
    "_test_build_graph_helper"
   ],
   "consequent": [
    "parameterized",
    "test_build_graph",
    "named_parameters"
   ]
  }
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "merged_at": "2018-06-19 04:13:47",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/util.py",
  "condition": [
   "import collections ",
   "\t$0: $1 $2 or list $3 $4 $5; $6 is $7 $8 $3 time"
  ],
  "consequent": [
   "$0: $1 $2 or $8 $3 $4 $5; $6 is $7 $8 $3"
  ],
  "identifiers": {
   "condition": [
    "list",
    "time",
    "collections"
   ],
   "consequent": []
  }
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "merged_at": "2018-06-19 04:13:47",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/util.py",
  "condition": [
   "$0."
  ],
  "consequent": [
   "time $0."
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "time"
   ]
  }
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "merged_at": "2018-06-19 04:13:47",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/util.py",
  "condition": [
   "$0: $1 $2 or list $3 $4 $5; $6 is $7 $8 $3 flux"
  ],
  "consequent": [
   "$0: $1 $2 or $8 $3 $4 $5; $6 is $7 $8 $3"
  ],
  "identifiers": {
   "condition": [
    "list",
    "flux"
   ],
   "consequent": []
  }
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "merged_at": "2018-06-19 04:13:47",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/util.py",
  "condition": [
   "$0 $1 $2 $3 $4 $5."
  ],
  "consequent": [
   "flux $0 $1 $2 $3 $4 $5."
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "flux"
   ]
  }
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "merged_at": "2018-06-19 04:13:47",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/util.py",
  "condition": [
   "                                                                                                                                                                                                         ",
   "\tif len($0) > 0 and not isinstance($0[0], collections.Iterable):                                        "
  ],
  "consequent": [
   "if isinstance($0, np.ndarray) and $0.ndim == 1:"
  ],
  "identifiers": {
   "condition": [
    "len",
    "collections",
    "isinstance",
    "Iterable"
   ],
   "consequent": [
    "ndarray",
    "ndim",
    "isinstance",
    "np"
   ]
  }
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "merged_at": "2018-06-19 04:13:47",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/util.py",
  "condition": [
   "$0: $1 $2 or list $3 $4 $5; $6 is $7 $8 $3 time"
  ],
  "consequent": [
   "$0: $1 $2 or $8 $3 $4 $5; $6 is $7 $8 $3"
  ],
  "identifiers": {
   "condition": [
    "list",
    "time"
   ],
   "consequent": []
  }
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "merged_at": "2018-06-19 04:13:47",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/util.py",
  "condition": [
   "$0."
  ],
  "consequent": [
   "time $0."
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "time"
   ]
  }
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "merged_at": "2018-06-19 04:13:47",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/util.py",
  "condition": [
   "$0: $1 $2 or list $3 $4 $5; $6 is $7 $8 $3 flux"
  ],
  "consequent": [
   "$0: $1 $2 or $8 $3 $4 $5; $6 is $7 $8 $3"
  ],
  "identifiers": {
   "condition": [
    "list",
    "flux"
   ],
   "consequent": []
  }
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "merged_at": "2018-06-19 04:13:47",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/util.py",
  "condition": [
   "$0 $1 $2 $3 $4 $5."
  ],
  "consequent": [
   "flux $0 $1 $2 $3 $4 $5."
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "flux"
   ]
  }
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "merged_at": "2018-06-19 04:13:47",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/util.py",
  "condition": [
   "                                                                                                                                                                                                        ",
   "\tif len($0) > 0 and not isinstance($0[0], collections.Iterable):                                        "
  ],
  "consequent": [
   "if isinstance($0, np.ndarray) and $0.ndim == 1:"
  ],
  "identifiers": {
   "condition": [
    "len",
    "collections",
    "isinstance",
    "Iterable"
   ],
   "consequent": [
    "ndarray",
    "ndim",
    "isinstance",
    "np"
   ]
  }
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "merged_at": "2018-06-19 04:13:47",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/util.py",
  "condition": [
   "if len($0) > 0:"
  ],
  "consequent": [
   "if $0.size:"
  ],
  "identifiers": {
   "condition": [
    "len"
   ],
   "consequent": [
    "size"
   ]
  }
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "merged_at": "2018-06-19 04:13:47",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/util.py",
  "condition": [
   "$0.append($1.full_like($2, $1.$3))"
  ],
  "consequent": [
   "$0.append($1.array([$1.$3] * len($2)))"
  ],
  "identifiers": {
   "condition": [
    "append",
    "full_like"
   ],
   "consequent": [
    "len",
    "array",
    "append"
   ]
  }
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "merged_at": "2018-06-19 04:13:47",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/util_test.py",
  "condition": [
   "])"
  ],
  "consequent": [
   "                 ",
   "\tall_time = np.concatenate([np.arange(0, 1, 0.1), np.arange(1.5, 2, 0.1)])",
   "    all_flux = np.ones(15)                      ",
   "    split_time, split_flux = util.split(all_time, all_flux, gap_width=0.5)",
   "    self.assertLen(split_time, 2)",
   "    self.assertLen(split_flux, 2)",
   "    self.assertSequenceAlmostEqual(np.arange(0, 1, 0.1), split_time[0])",
   "    self.assertSequenceAlmostEqual(np.ones(10), split_flux[0])",
   "    self.assertSequenceAlmostEqual(np.arange(1.5, 2, 0.1), split_time[1])",
   "    self.assertSequenceAlmostEqual(np.ones(5), split_flux[1])                      ",
   "\t]),",
   "        np.arange(4, 5, 0.1)"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "split",
    "concatenate",
    "all_time",
    "arange",
    "self",
    "ones",
    "split_time",
    "split_flux",
    "gap_width",
    "assertLen",
    "np",
    "util",
    "assertSequenceAlmostEqual",
    "all_flux"
   ]
  }
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "merged_at": "2018-06-19 04:13:47",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/util_test.py",
  "condition": [
   "$0 = [$1.array([1] * 25)]"
  ],
  "consequent": [
   "$0 = [$1.ones(25), $1.ones(10)] ",
   "\tself.assertEqual(len(all_time), 2)",
   "    self.assertEqual(len(all_time[0]), 25)",
   "    self.assertEqual(len(all_time[1]), 10) ",
   "    self.assertEqual(len($0), 2)",
   "    self.assertEqual(len($0[0]), 25)",
   "    self.assertEqual(len($0[1]), 10)"
  ],
  "identifiers": {
   "condition": [
    "array"
   ],
   "consequent": [
    "all_time",
    "self",
    "len",
    "ones",
    "assertEqual"
   ]
  }
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "merged_at": "2018-06-19 04:13:47",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/util_test.py",
  "condition": [
   "$0.assertLen($1, 3)"
  ],
  "consequent": [
   "$0.assertLen($1, 4)",
   "\t$0.assertSequenceAlmostEqual(np.arange(0, 1, 0.1), split_time[0])",
   "    $0.assertSequenceAlmostEqual(np.ones(10), $1[0])"
  ],
  "identifiers": {
   "condition": [
    "assertLen"
   ],
   "consequent": [
    "arange",
    "split_time",
    "ones",
    "assertLen",
    "np",
    "assertSequenceAlmostEqual"
   ]
  }
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "merged_at": "2018-06-19 04:13:47",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/util_test.py",
  "condition": [
   "$0.assertSequenceAlmostEqual(         [0., 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], $1[0])",
   "\t$0.assertSequenceAlmostEqual([1, 1, 1, 1, 1, 1, 1, 1, 1, 1],                                    split_flux[0])",
   "    $0.assertSequenceAlmostEqual([1.5, 1.6, 1.7, 1.8, 1.9], $1[1])"
  ],
  "consequent": [
   "$0.assertSequenceAlmostEqual(np.arange(1.5, 2, 0.1), $1[1])"
  ],
  "identifiers": {
   "condition": [
    "split_flux",
    "assertSequenceAlmostEqual"
   ],
   "consequent": [
    "arange",
    "assertSequenceAlmostEqual",
    "np"
   ]
  }
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "merged_at": "2018-06-19 04:13:47",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/util_test.py",
  "condition": [
   "$0.assertSequenceAlmostEqual([1, 1, 1, 1, 1], $1[1])"
  ],
  "consequent": [
   "$0.assertSequenceAlmostEqual(np.ones(5), $1[1])"
  ],
  "identifiers": {
   "condition": [
    "assertSequenceAlmostEqual"
   ],
   "consequent": [
    "ones",
    "assertSequenceAlmostEqual",
    "np"
   ]
  }
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "merged_at": "2018-06-19 04:13:47",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/util_test.py",
  "condition": [
   "$0.assertSequenceAlmostEqual(         [3., 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9], $1[2])",
   "\t$0.assertSequenceAlmostEqual([1, 1, 1, 1, 1, 1, 1, 1, 1, 1],                                    $2[2])"
  ],
  "consequent": [
   "$0.assertSequenceAlmostEqual(np.arange(3, 4, 0.1), $1[2])",
   "\t$0.assertSequenceAlmostEqual(np.ones(10), $2[2])",
   "    $0.assertSequenceAlmostEqual(np.arange(4, 5, 0.1), $1[3])",
   "    $0.assertSequenceAlmostEqual(np.ones(10), $2[3])"
  ],
  "identifiers": {
   "condition": [
    "assertSequenceAlmostEqual"
   ],
   "consequent": [
    "ones",
    "arange",
    "assertSequenceAlmostEqual",
    "np"
   ]
  }
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "merged_at": "2018-06-19 04:13:47",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/util_test.py",
  "condition": [
   "$0.assertSequenceAlmostEqual(         [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], $1[0])",
   "\t$0.assertSequenceAlmostEqual(         [3., 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9], $2[1])",
   "    $0.assertSequenceAlmostEqual([1, 1, 1, 1, 1, 1, 1, 1, 1, 1],                                    $1[1])"
  ],
  "consequent": [
   "$0.assertSequenceAlmostEqual(np.ones(15), $1[0])",
   "\t$0.assertSequenceAlmostEqual(np.arange(3, 4, 0.1), $2[1])",
   "    $0.assertSequenceAlmostEqual(np.ones(10), $1[1])",
   "    $0.assertSequenceAlmostEqual(np.arange(4, 5, 0.1), $2[2])",
   "    $0.assertSequenceAlmostEqual(np.ones(10), $1[2])"
  ],
  "identifiers": {
   "condition": [
    "assertSequenceAlmostEqual"
   ],
   "consequent": [
    "ones",
    "arange",
    "assertSequenceAlmostEqual",
    "np"
   ]
  }
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "merged_at": "2018-06-19 04:13:47",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/util_test.py",
  "condition": [
   "$0.assertLen($1, 2)"
  ],
  "consequent": [
   "np.arange(20, 30, dtype=np.float),",
   "\tnp.array([], dtype=np.float)",
   "    $0.assertLen($1, 3)"
  ],
  "identifiers": {
   "condition": [
    "assertLen"
   ],
   "consequent": [
    "float",
    "arange",
    "dtype",
    "array",
    "assertLen",
    "np"
   ]
  }
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "merged_at": "2018-06-19 04:13:47",
  "merged_by": "cshallue",
  "file_path": "research/astronet/third_party/kepler_spline/kepler_spline.py",
  "condition": [
   "\"\"\"Error when fitting a Kepler spline.\"\"\""
  ],
  "consequent": [
   "class InsufficientPointsError(Exception):",
   "\t\"\"\"Indicates that insufficient points were available for spline fitting.\"\"\"",
   "  pass  ",
   "  \"\"\"Indicates an error in the underlying spline-fitting implementation.\"\"\""
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "InsufficientPointsError",
    "Exception"
   ]
  }
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "merged_at": "2018-06-19 04:13:47",
  "merged_by": "cshallue",
  "file_path": "research/astronet/third_party/kepler_spline/kepler_spline.py",
  "condition": [
   "_, _, $0 = $1.$1($2, $3=$4)"
  ],
  "consequent": [
   "$0 = $1.$1($2, $3=$4)[2]"
  ],
  "identifiers": {
   "condition": [
    "_"
   ],
   "consequent": []
  }
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "merged_at": "2018-06-19 04:13:47",
  "merged_by": "cshallue",
  "file_path": "research/astronet/third_party/kepler_spline/kepler_spline.py",
  "condition": [
   "spline_mask: List of boolean numpy arrays indicating which points in $0",
   "\tflux arrays were used to $1 $0 best-$1 $2.",
   "    $3: The break-point spacing used for $0 best-$1 $2.",
   "\t$4: List of break-point spacing values that failed."
  ],
  "consequent": [
   "if np.sum(mask) < 4:                                                                                                                                                                                                                                                                                                                                                                         ",
   "\traise InsufficientPointsError(           \"Cannot fit a spline on less than 4 points. After removing \"           \"outliers, got %d points.\" % np.sum(mask))  ",
   "class SplineMetadata(object):",
   "\t\"\"\"Metadata about a spline fit.",
   "",
   "  Attributes:",
   "    light_curve_mask: List of boolean numpy arrays indicating which points in",
   "        the light curve were used to fit the best-fit spline.",
   "    bkspace: The break-point spacing used for the best-fit spline.",
   "    bad_bkspaces: List of break-point spacing values that failed.",
   "    likelihood_term: The likelihood term of the Bayesian Information Criterion;",
   "        -2*ln(L), where L is the likelihood of the data given the model.",
   "    penalty_term: The penalty term for the number of parameters in the",
   "        Bayesian Information Criterion.",
   "    bic: The value of the Bayesian Information Criterion; equal to",
   "        likelihood_term + penalty_coeff * penalty_term.",
   "  \"\"\" ",
   "  def __init__(self):",
   "\tself.light_curve_mask = None",
   "    self.$3 = None",
   "    self.$4 = []",
   "    self.likelihood_term = None",
   "    self.penalty_term = None",
   "    self.bic = None",
   "    metadata: Object containing metadata about $0 $2 $1."
  ],
  "identifiers": {
   "condition": [
    "used",
    "spline_mask",
    "of",
    "that",
    "List",
    "which",
    "to",
    "points",
    "point",
    "indicating",
    "best",
    "spacing",
    "failed",
    "arrays",
    "boolean",
    "flux",
    "numpy",
    "were",
    "values",
    "The"
   ],
   "consequent": [
    "light_curve_mask",
    "InsufficientPointsError",
    "mask",
    "bic",
    "SplineMetadata",
    "likelihood_term",
    "about",
    "Object",
    "metadata",
    "__init__",
    "self",
    "penalty_term",
    "sum",
    "containing",
    "np",
    "object"
   ]
  }
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "merged_at": "2018-06-19 04:13:47",
  "merged_by": "cshallue",
  "file_path": "research/astronet/third_party/kepler_spline/kepler_spline.py",
  "condition": [
   "               ",
   "\tabs_deviations = $0.concatenate([$0.abs($1[1:] - $1[:-1]) for $1 in $2])",
   "  sigma = $0.median(abs_deviations) * 1.48 / $0.sqrt(2)"
  ],
  "consequent": [
   "                     ",
   "\tbest_spline = None",
   "  metadata = SplineMetadata()                                                                                                                                                                                                                                                                                                                                             ",
   "  scaled_diffs = $0.concatenate([$0.diff($1) / $0.sqrt(2) for $1 in $2])",
   "  if not scaled_diffs.size:",
   "\tbest_spline = [$0.array([$0.nan] * len($1)) for $1 in $2]",
   "    metadata.light_curve_mask = [         $0.zeros_like($1, dtype=$0.bool) for $1 in $2     ]",
   "    return best_spline, metadata"
  ],
  "identifiers": {
   "condition": [
    "median",
    "concatenate",
    "sigma",
    "sqrt",
    "abs_deviations",
    "abs"
   ],
   "consequent": [
    "light_curve_mask",
    "nan",
    "concatenate",
    "zeros_like",
    "SplineMetadata",
    "scaled_diffs",
    "dtype",
    "metadata",
    "diff",
    "sqrt",
    "len",
    "array",
    "bool",
    "size",
    "best_spline"
   ]
  }
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "merged_at": "2018-06-19 04:13:47",
  "merged_by": "cshallue",
  "file_path": "research/astronet/third_party/kepler_spline/kepler_spline.py",
  "condition": [
   "best_bic = None",
   "\tbest_spline = None",
   "  best_spline_mask = None",
   "  best_bkspace = None",
   "  bad_bkspaces = []"
  ],
  "consequent": [
   "                                                                                                                                                                                                                                                                ",
   "\tsigma = np.median(np.abs(scaled_diffs)) * 1.48"
  ],
  "identifiers": {
   "condition": [
    "best_spline_mask",
    "bad_bkspaces",
    "best_bic",
    "best_spline",
    "best_bkspace"
   ],
   "consequent": [
    "median",
    "sigma",
    "scaled_diffs",
    "np",
    "abs"
   ]
  }
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "merged_at": "2018-06-19 04:13:47",
  "merged_by": "cshallue",
  "file_path": "research/astronet/third_party/kepler_spline/kepler_spline.py",
  "condition": [
   "spline_mask = []"
  ],
  "consequent": [
   "light_curve_mask = []"
  ],
  "identifiers": {
   "condition": [
    "spline_mask"
   ],
   "consequent": [
    "light_curve_mask"
   ]
  }
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "merged_at": "2018-06-19 04:13:47",
  "merged_by": "cshallue",
  "file_path": "research/astronet/third_party/kepler_spline/kepler_spline.py",
  "condition": [
   "                                           ",
   "\tif len(time) < 4:",
   "\t$0.append($1)",
   "        spline_mask.append($2.ones_like($1, $3=$2.$4))",
   "        continue                                                                                              "
  ],
  "consequent": [
   "except InsufficientPointsError as e:                                                                                                                                                                                                                                ",
   "\tif verbose:",
   "\twarnings.warn(str(e))",
   "        $0.append($2.array([$2.nan] * len($1)))",
   "        light_curve_mask.append($2.zeros_like($1, $3=$2.$4))",
   "        continue"
  ],
  "identifiers": {
   "condition": [
    "ones_like",
    "append",
    "spline_mask",
    "len",
    "time"
   ],
   "consequent": [
    "light_curve_mask",
    "InsufficientPointsError",
    "nan",
    "zeros_like",
    "verbose",
    "warnings",
    "append",
    "warn",
    "len",
    "e",
    "array",
    "str"
   ]
  }
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "merged_at": "2018-06-19 04:13:47",
  "merged_by": "cshallue",
  "file_path": "research/astronet/third_party/kepler_spline/kepler_spline.py",
  "condition": [
   "$0.append($1)"
  ],
  "consequent": [
   "                                                                                                           ",
   "\tmetadata.$0.append($1)"
  ],
  "identifiers": {
   "condition": [
    "append"
   ],
   "consequent": [
    "append",
    "metadata"
   ]
  }
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "merged_at": "2018-06-19 04:13:47",
  "merged_by": "cshallue",
  "file_path": "research/astronet/third_party/kepler_spline/kepler_spline.py",
  "condition": [
   "spline_mask.append($0)"
  ],
  "consequent": [
   "light_curve_mask.append($0)"
  ],
  "identifiers": {
   "condition": [
    "spline_mask",
    "append"
   ],
   "consequent": [
    "light_curve_mask",
    "append"
   ]
  }
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "merged_at": "2018-06-19 04:13:47",
  "merged_by": "cshallue",
  "file_path": "research/astronet/third_party/kepler_spline/kepler_spline.py",
  "condition": [
   "if $0:"
  ],
  "consequent": [
   "if $0 or not npoints:"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "npoints"
   ]
  }
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "merged_at": "2018-06-19 04:13:47",
  "merged_by": "cshallue",
  "file_path": "research/astronet/third_party/kepler_spline/kepler_spline.py",
  "condition": [
   "$0 = $1 + $2 * $3 * $4.log($5)"
  ],
  "consequent": [
   "                                                                  ",
   "\tpenalty_term = $3 * $4.log($5) ",
   "    $0 = $1 + $2 * penalty_term"
  ],
  "identifiers": {
   "condition": [
    "log"
   ],
   "consequent": [
    "log",
    "penalty_term"
   ]
  }
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "merged_at": "2018-06-19 04:13:47",
  "merged_by": "cshallue",
  "file_path": "research/astronet/third_party/kepler_spline/kepler_spline.py",
  "condition": [
   "if best_bic is None or $0 < best_bic:"
  ],
  "consequent": [
   "if best_spline is None or $0 < metadata.$0:"
  ],
  "identifiers": {
   "condition": [
    "best_bic"
   ],
   "consequent": [
    "metadata",
    "best_spline"
   ]
  }
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "merged_at": "2018-06-19 04:13:47",
  "merged_by": "cshallue",
  "file_path": "research/astronet/third_party/kepler_spline/kepler_spline.py",
  "condition": [
   "best_bic = bic",
   "\tbest_spline_mask = spline_mask"
  ],
  "consequent": [
   "metadata.light_curve_mask = light_curve_mask"
  ],
  "identifiers": {
   "condition": [
    "best_spline_mask",
    "spline_mask",
    "best_bic",
    "bic"
   ],
   "consequent": [
    "light_curve_mask",
    "metadata"
   ]
  }
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "merged_at": "2018-06-19 04:13:47",
  "merged_by": "cshallue",
  "file_path": "research/astronet/third_party/kepler_spline/kepler_spline.py",
  "condition": [
   "best_bkspace = bkspace"
  ],
  "consequent": [
   "metadata.bkspace = bkspace",
   "\tmetadata.likelihood_term = likelihood_term",
   "      metadata.penalty_term = penalty_term",
   "      metadata.bic = bic"
  ],
  "identifiers": {
   "condition": [
    "bkspace",
    "best_bkspace"
   ],
   "consequent": [
    "bic",
    "likelihood_term",
    "metadata",
    "bkspace",
    "penalty_term"
   ]
  }
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "merged_at": "2018-06-19 04:13:47",
  "merged_by": "cshallue",
  "file_path": "research/astronet/third_party/kepler_spline/kepler_spline.py",
  "condition": [
   "return $0, best_spline_mask, best_bkspace, bad_bkspaces"
  ],
  "consequent": [
   "if $0 is None:                                                                                                          ",
   "\t$0 = [np.array([np.nan] * len(f)) for f in all_flux]",
   "    metadata.light_curve_mask = [         np.zeros_like(f, dtype=np.bool) for f in all_flux     ] ",
   "  return $0, metadata"
  ],
  "identifiers": {
   "condition": [
    "best_spline_mask",
    "bad_bkspaces",
    "best_bkspace"
   ],
   "consequent": [
    "light_curve_mask",
    "nan",
    "zeros_like",
    "dtype",
    "f",
    "metadata",
    "bool",
    "len",
    "array",
    "np",
    "all_flux"
   ]
  }
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "merged_at": "2018-06-19 04:13:47",
  "merged_by": "cshallue",
  "file_path": "research/astronet/third_party/kepler_spline/kepler_spline_test.py",
  "condition": [
   "def testKeplerSplineSine($0):"
  ],
  "consequent": [
   "def testFitSine($0):"
  ],
  "identifiers": {
   "condition": [
    "testKeplerSplineSine"
   ],
   "consequent": [
    "testFitSine"
   ]
  }
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "merged_at": "2018-06-19 04:13:47",
  "merged_by": "cshallue",
  "file_path": "research/astronet/third_party/kepler_spline/kepler_spline_test.py",
  "condition": [
   "def testKeplerSplineCubic($0):"
  ],
  "consequent": [
   "def testFitCubic($0):"
  ],
  "identifiers": {
   "condition": [
    "testKeplerSplineCubic"
   ],
   "consequent": [
    "testFitCubic"
   ]
  }
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "merged_at": "2018-06-19 04:13:47",
  "merged_by": "cshallue",
  "file_path": "research/astronet/third_party/kepler_spline/kepler_spline_test.py",
  "condition": [
   "def testKeplerSplineError($0):               ",
   "\t$1 = $2.concatenate([$2.arange(0, 1, 0.1), [2]])"
  ],
  "consequent": [
   "def testInsufficientPointsError($0):                         ",
   "\t$1 = $2.array([])",
   "    flux = $2.array([]) ",
   "    with $0.assertRaises(kepler_spline.InsufficientPointsError):",
   "\tkepler_spline.kepler_spline($1, flux, bkspace=0.5)                      ",
   "    $1 = $2.array([0.1, 0.2, 0.3])"
  ],
  "identifiers": {
   "condition": [
    "concatenate",
    "arange",
    "testKeplerSplineError"
   ],
   "consequent": [
    "InsufficientPointsError",
    "assertRaises",
    "flux",
    "bkspace",
    "testInsufficientPointsError",
    "array",
    "kepler_spline"
   ]
  }
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "merged_at": "2018-06-19 04:13:47",
  "merged_by": "cshallue",
  "file_path": "research/astronet/third_party/kepler_spline/kepler_spline_test.py",
  "condition": [
   "with $0.assertRaises($1.SplineError):"
  ],
  "consequent": [
   "with $0.assertRaises($1.InsufficientPointsError):"
  ],
  "identifiers": {
   "condition": [
    "assertRaises",
    "SplineError"
   ],
   "consequent": [
    "InsufficientPointsError",
    "assertRaises"
   ]
  }
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "merged_at": "2018-06-19 04:13:47",
  "merged_by": "cshallue",
  "file_path": "research/astronet/third_party/kepler_spline/kepler_spline_test.py",
  "condition": [
   "def testChooseKeplerSpline($0):"
  ],
  "consequent": [
   "class ChooseKeplerSplineTest(absltest.TestCase): ",
   "\tdef testNoPoints($0):",
   "\tall_time = [np.array([])]",
   "    all_flux = [np.array([])]                                                              ",
   "    bkspaces = np.logspace(np.log10(0.5), np.log10(5), num=20) ",
   "    spline, metadata = kepler_spline.choose_kepler_spline(         all_time, all_flux, bkspaces, penalty_coeff=1.0, verbose=False)",
   "    np.testing.assert_array_equal(spline, [[]])",
   "    np.testing.assert_array_equal(metadata.light_curve_mask, [[]]) ",
   "  def testTooFewPoints($0):                                                 ",
   "\tall_time = [         np.array([0.1]),         np.array([0.2, 0.3]),         np.array([0.4, 0.5, 0.6])     ]",
   "    all_flux = [np.sin(t) for t in all_time]                                                              ",
   "    bkspaces = np.logspace(np.log10(0.5), np.log10(5), num=20) ",
   "    spline, metadata = kepler_spline.choose_kepler_spline(         all_time, all_flux, bkspaces, penalty_coeff=1.0, verbose=False)                             ",
   "    $0.assertTrue(np.all(np.isnan(np.concatenate(spline))))",
   "    $0.assertFalse(np.any(np.concatenate(metadata.light_curve_mask)))",
   "    $0.assertIsNone(metadata.bkspace)",
   "    $0.assertEmpty(metadata.bad_bkspaces)",
   "    $0.assertIsNone(metadata.likelihood_term)",
   "    $0.assertIsNone(metadata.penalty_term)",
   "    $0.assertIsNone(metadata.bic)                             ",
   "    all_time.append(np.arange(0.7, 2.0, 0.1))",
   "    all_flux.append(np.sin(all_time[-1])) ",
   "    spline, metadata = kepler_spline.choose_kepler_spline(         all_time, all_flux, bkspaces, penalty_coeff=1.0, verbose=False)                                 ",
   "    for i in range(3):",
   "\t$0.assertTrue(np.all(np.isnan(spline[i])))",
   "      $0.assertFalse(np.any(metadata.light_curve_mask[i]))                                    ",
   "    $0.assertTrue(np.all(np.isfinite(spline[3])))",
   "    $0.assertTrue(np.all(metadata.light_curve_mask[3]))",
   "    $0.assertEmpty(metadata.bad_bkspaces)",
   "    $0.assertAlmostEqual(metadata.likelihood_term, -58.0794069927957)",
   "    $0.assertAlmostEqual(metadata.penalty_term, 7.69484807238461)",
   "    $0.assertAlmostEqual(metadata.bic, -50.3845589204111) ",
   "  def testFitSine($0):"
  ],
  "identifiers": {
   "condition": [
    "testChooseKeplerSpline"
   ],
   "consequent": [
    "bkspaces",
    "isfinite",
    "concatenate",
    "likelihood_term",
    "testFitSine",
    "assertFalse",
    "assertAlmostEqual",
    "kepler_spline",
    "all_flux",
    "absltest",
    "logspace",
    "light_curve_mask",
    "assertTrue",
    "bic",
    "num",
    "array",
    "TestCase",
    "testTooFewPoints",
    "sin",
    "log10",
    "testing",
    "penalty_coeff",
    "isnan",
    "ChooseKeplerSplineTest",
    "verbose",
    "append",
    "i",
    "range",
    "bkspace",
    "bad_bkspaces",
    "all",
    "penalty_term",
    "assertEmpty",
    "choose_kepler_spline",
    "assertIsNone",
    "any",
    "all_time",
    "spline",
    "arange",
    "metadata",
    "t",
    "np",
    "testNoPoints",
    "assert_array_equal"
   ]
  }
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "merged_at": "2018-06-19 04:13:47",
  "merged_by": "cshallue",
  "file_path": "research/astronet/third_party/kepler_spline/kepler_spline_test.py",
  "condition": [
   "time = [$0.arange(0, 100, 0.1), $0.arange(100, 200, 0.1)]"
  ],
  "consequent": [
   "all_time = [$0.arange(0, 100, 0.1), $0.arange(100, 200, 0.1)]"
  ],
  "identifiers": {
   "condition": [
    "arange",
    "time"
   ],
   "consequent": [
    "all_time",
    "arange"
   ]
  }
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "merged_at": "2018-06-19 04:13:47",
  "merged_by": "cshallue",
  "file_path": "research/astronet/third_party/kepler_spline/kepler_spline_test.py",
  "condition": [
   "flux = [$0.sin($1) for $1 in time]"
  ],
  "consequent": [
   "all_flux = [$0.sin($1) for $1 in all_time]"
  ],
  "identifiers": {
   "condition": [
    "time",
    "sin",
    "flux"
   ],
   "consequent": [
    "all_time",
    "sin",
    "all_flux"
   ]
  }
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "merged_at": "2018-06-19 04:13:47",
  "merged_by": "cshallue",
  "file_path": "research/astronet/third_party/kepler_spline/kepler_spline_test.py",
  "condition": [
   "$0, mask, bkspace, bad_bkspaces = $1.choose_kepler_spline("
  ],
  "consequent": [
   "$0, metadata = $1.choose_kepler_spline("
  ],
  "identifiers": {
   "condition": [
    "choose_kepler_spline",
    "mask",
    "bkspace",
    "bad_bkspaces"
   ],
   "consequent": [
    "choose_kepler_spline",
    "metadata"
   ]
  }
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "merged_at": "2018-06-19 04:13:47",
  "merged_by": "cshallue",
  "file_path": "research/astronet/third_party/kepler_spline/kepler_spline_test.py",
  "condition": [
   "time, flux, $0, $1=1.0)"
  ],
  "consequent": [
   "all_time, all_flux, $0, $1=1.0)"
  ],
  "identifiers": {
   "condition": [
    "time",
    "flux"
   ],
   "consequent": [
    "all_time",
    "all_flux"
   ]
  }
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "merged_at": "2018-06-19 04:13:47",
  "merged_by": "cshallue",
  "file_path": "research/astronet/third_party/kepler_spline/kepler_spline_test.py",
  "condition": [
   "$0.assertAlmostEqual(_rmse(flux, $1), 0.013013)"
  ],
  "consequent": [
   "$0.assertAlmostEqual(_rmse(all_flux, $1), 0.013013)"
  ],
  "identifiers": {
   "condition": [
    "_rmse",
    "assertAlmostEqual",
    "flux"
   ],
   "consequent": [
    "_rmse",
    "assertAlmostEqual",
    "all_flux"
   ]
  }
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "merged_at": "2018-06-19 04:13:47",
  "merged_by": "cshallue",
  "file_path": "research/astronet/third_party/kepler_spline/kepler_spline_test.py",
  "condition": [
   "$0.assertTrue($1.all(mask))"
  ],
  "consequent": [
   "$0.assertTrue($1.all(metadata.light_curve_mask))"
  ],
  "identifiers": {
   "condition": [
    "all",
    "mask",
    "assertTrue"
   ],
   "consequent": [
    "all",
    "light_curve_mask",
    "assertTrue",
    "metadata"
   ]
  }
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "merged_at": "2018-06-19 04:13:47",
  "merged_by": "cshallue",
  "file_path": "research/astronet/third_party/kepler_spline/kepler_spline_test.py",
  "condition": [
   "$0.assertAlmostEqual($1, 1.67990914314)"
  ],
  "consequent": [
   "$0.assertAlmostEqual(metadata.$1, 1.67990914314)"
  ],
  "identifiers": {
   "condition": [
    "assertAlmostEqual"
   ],
   "consequent": [
    "assertAlmostEqual",
    "metadata"
   ]
  }
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "merged_at": "2018-06-19 04:13:47",
  "merged_by": "cshallue",
  "file_path": "research/astronet/third_party/kepler_spline/kepler_spline_test.py",
  "condition": [
   "$0.assertEmpty($1)"
  ],
  "consequent": [
   "$0.assertEmpty(metadata.$1)",
   "\t$0.assertAlmostEqual(metadata.likelihood_term, -6685.64217856480)",
   "    $0.assertAlmostEqual(metadata.penalty_term, 942.51190498322)",
   "    $0.assertAlmostEqual(metadata.bic, -5743.13027358158)"
  ],
  "identifiers": {
   "condition": [
    "assertEmpty"
   ],
   "consequent": [
    "bic",
    "likelihood_term",
    "metadata",
    "penalty_term",
    "assertAlmostEqual",
    "assertEmpty"
   ]
  }
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "merged_at": "2018-06-19 04:13:47",
  "merged_by": "cshallue",
  "file_path": "research/astronet/third_party/kepler_spline/kepler_spline_test.py",
  "condition": [
   "$0, mask, bkspace, bad_bkspaces = $1.choose_kepler_spline("
  ],
  "consequent": [
   "$0, metadata = $1.choose_kepler_spline("
  ],
  "identifiers": {
   "condition": [
    "choose_kepler_spline",
    "mask",
    "bkspace",
    "bad_bkspaces"
   ],
   "consequent": [
    "choose_kepler_spline",
    "metadata"
   ]
  }
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "merged_at": "2018-06-19 04:13:47",
  "merged_by": "cshallue",
  "file_path": "research/astronet/third_party/kepler_spline/kepler_spline_test.py",
  "condition": [
   "time, flux, $0, $1=0.1)"
  ],
  "consequent": [
   "all_time, all_flux, $0, $1=0.1)"
  ],
  "identifiers": {
   "condition": [
    "time",
    "flux"
   ],
   "consequent": [
    "all_time",
    "all_flux"
   ]
  }
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "merged_at": "2018-06-19 04:13:47",
  "merged_by": "cshallue",
  "file_path": "research/astronet/third_party/kepler_spline/kepler_spline_test.py",
  "condition": [
   "$0.assertAlmostEqual(_rmse(flux, $1), 0.0066376)"
  ],
  "consequent": [
   "$0.assertAlmostEqual(_rmse(all_flux, $1), 0.0066376)"
  ],
  "identifiers": {
   "condition": [
    "_rmse",
    "assertAlmostEqual",
    "flux"
   ],
   "consequent": [
    "_rmse",
    "assertAlmostEqual",
    "all_flux"
   ]
  }
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "merged_at": "2018-06-19 04:13:47",
  "merged_by": "cshallue",
  "file_path": "research/astronet/third_party/kepler_spline/kepler_spline_test.py",
  "condition": [
   "$0.assertTrue($1.all(mask))"
  ],
  "consequent": [
   "$0.assertTrue($1.all(metadata.light_curve_mask))"
  ],
  "identifiers": {
   "condition": [
    "all",
    "mask",
    "assertTrue"
   ],
   "consequent": [
    "all",
    "light_curve_mask",
    "assertTrue",
    "metadata"
   ]
  }
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "merged_at": "2018-06-19 04:13:47",
  "merged_by": "cshallue",
  "file_path": "research/astronet/third_party/kepler_spline/kepler_spline_test.py",
  "condition": [
   "$0.assertAlmostEqual($1, 1.48817572082)"
  ],
  "consequent": [
   "$0.assertAlmostEqual(metadata.$1, 1.48817572082)"
  ],
  "identifiers": {
   "condition": [
    "assertAlmostEqual"
   ],
   "consequent": [
    "assertAlmostEqual",
    "metadata"
   ]
  }
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "merged_at": "2018-06-19 04:13:47",
  "merged_by": "cshallue",
  "file_path": "research/astronet/third_party/kepler_spline/kepler_spline_test.py",
  "condition": [
   "$0.assertEmpty($1)"
  ],
  "consequent": [
   "$0.assertEmpty(metadata.$1)",
   "\t$0.assertAlmostEqual(metadata.likelihood_term, -6731.59913975551)",
   "    $0.assertAlmostEqual(metadata.penalty_term, 1064.12634433589)",
   "    $0.assertAlmostEqual(metadata.bic, -6625.18650532192)"
  ],
  "identifiers": {
   "condition": [
    "assertEmpty"
   ],
   "consequent": [
    "bic",
    "likelihood_term",
    "metadata",
    "penalty_term",
    "assertAlmostEqual",
    "assertEmpty"
   ]
  }
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "merged_at": "2018-06-19 04:13:47",
  "merged_by": "cshallue",
  "file_path": "research/astronet/third_party/kepler_spline/kepler_spline_test.py",
  "condition": [
   "$0, mask, bkspace, bad_bkspaces = $1.choose_kepler_spline("
  ],
  "consequent": [
   "$0, metadata = $1.choose_kepler_spline("
  ],
  "identifiers": {
   "condition": [
    "choose_kepler_spline",
    "mask",
    "bkspace",
    "bad_bkspaces"
   ],
   "consequent": [
    "choose_kepler_spline",
    "metadata"
   ]
  }
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "merged_at": "2018-06-19 04:13:47",
  "merged_by": "cshallue",
  "file_path": "research/astronet/third_party/kepler_spline/kepler_spline_test.py",
  "condition": [
   "time, flux, $0, $1=2)"
  ],
  "consequent": [
   "all_time, all_flux, $0, $1=2)"
  ],
  "identifiers": {
   "condition": [
    "time",
    "flux"
   ],
   "consequent": [
    "all_time",
    "all_flux"
   ]
  }
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "merged_at": "2018-06-19 04:13:47",
  "merged_by": "cshallue",
  "file_path": "research/astronet/third_party/kepler_spline/kepler_spline_test.py",
  "condition": [
   "$0.assertAlmostEqual(_rmse(flux, $1), 0.026215449)"
  ],
  "consequent": [
   "$0.assertAlmostEqual(_rmse(all_flux, $1), 0.026215449)"
  ],
  "identifiers": {
   "condition": [
    "_rmse",
    "assertAlmostEqual",
    "flux"
   ],
   "consequent": [
    "_rmse",
    "assertAlmostEqual",
    "all_flux"
   ]
  }
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "merged_at": "2018-06-19 04:13:47",
  "merged_by": "cshallue",
  "file_path": "research/astronet/third_party/kepler_spline/kepler_spline_test.py",
  "condition": [
   "$0.assertTrue($1.all(mask))"
  ],
  "consequent": [
   "$0.assertTrue($1.all(metadata.light_curve_mask))"
  ],
  "identifiers": {
   "condition": [
    "all",
    "mask",
    "assertTrue"
   ],
   "consequent": [
    "all",
    "light_curve_mask",
    "assertTrue",
    "metadata"
   ]
  }
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "merged_at": "2018-06-19 04:13:47",
  "merged_by": "cshallue",
  "file_path": "research/astronet/third_party/kepler_spline/kepler_spline_test.py",
  "condition": [
   "$0.assertAlmostEqual($1, 1.89634509537)"
  ],
  "consequent": [
   "$0.assertAlmostEqual(metadata.$1, 1.89634509537)"
  ],
  "identifiers": {
   "condition": [
    "assertAlmostEqual"
   ],
   "consequent": [
    "assertAlmostEqual",
    "metadata"
   ]
  }
 },
 {
  "number": 4554,
  "sha": "8ae375064912b753d170452a7b2948fcbd2f2fad",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-15 19:26:41",
  "merged_at": "2018-06-19 04:13:47",
  "merged_by": "cshallue",
  "file_path": "research/astronet/third_party/kepler_spline/kepler_spline_test.py",
  "condition": [
   "$0.assertEmpty($1)"
  ],
  "consequent": [
   "$0.assertEmpty(metadata.$1)",
   "\t$0.assertAlmostEqual(metadata.likelihood_term, -6495.65564287904)",
   "    $0.assertAlmostEqual(metadata.penalty_term, 836.099270549629)",
   "    $0.assertAlmostEqual(metadata.bic, -4823.45710177978)"
  ],
  "identifiers": {
   "condition": [
    "assertEmpty"
   ],
   "consequent": [
    "bic",
    "likelihood_term",
    "metadata",
    "penalty_term",
    "assertAlmostEqual",
    "assertEmpty"
   ]
  }
 },
 {
  "number": 4570,
  "sha": "20da056d32106cca5b8fce4d44fb415754b1eb1e",
  "author": "djoshea",
  "participant": "sussillo",
  "created_at": "2018-06-18 22:37:42",
  "merged_at": "2018-06-18 22:45:11",
  "merged_by": "sussillo",
  "file_path": "research/lfads/lfads.py",
  "condition": [
   "def _case_with_no_default(pairs):",
   "\tdef _default_value_fn():",
   "\twith $0.control_dependencies([$0.Assert(False, [\"Reached default\"])]):",
   "\treturn $0.identity(pairs[0][1]())",
   "      return $0.case(pairs, _default_value_fn, $1=True)",
   "    $2 = _case_with_no_default($3)",
   "\t$4 = _case_with_no_default($5)",
   "    $6 = _case_with_no_default($7)",
   "    $8 = _case_with_no_default($9)"
  ],
  "consequent": [
   "$2 = $0.case($3, $1=True)",
   "\t$4 = $0.case($5, $1=True)",
   "    $6 = $0.case($7, $1=True)",
   "    $8 = $0.case($9, $1=True)"
  ],
  "identifiers": {
   "condition": [
    "case",
    "_default_value_fn",
    "_case_with_no_default",
    "control_dependencies",
    "pairs",
    "Assert",
    "identity"
   ],
   "consequent": [
    "case"
   ]
  }
 },
 {
  "number": 4570,
  "sha": "20da056d32106cca5b8fce4d44fb415754b1eb1e",
  "author": "djoshea",
  "participant": "sussillo",
  "created_at": "2018-06-18 22:37:42",
  "merged_at": "2018-06-18 22:45:11",
  "merged_by": "sussillo",
  "file_path": "research/lfads/lfads.py",
  "condition": [
   "print(\"Setting number of posterior samples to process to : \", E)",
   "\t\"\"\"$0 $1 value for goodies for $1 entire $2 using $1 $3"
  ],
  "consequent": [
   "\"\"\"$0 values of interest for $1  $2 by pushing $1 $3 through"
  ],
  "identifiers": {
   "condition": [
    "using",
    "entire",
    "E",
    "value",
    "goodies",
    "print"
   ],
   "consequent": [
    "of",
    "pushing",
    "interest",
    "through",
    "values",
    "by"
   ]
  }
 },
 {
  "number": 4570,
  "sha": "20da056d32106cca5b8fce4d44fb415754b1eb1e",
  "author": "djoshea",
  "participant": "sussillo",
  "created_at": "2018-06-18 22:37:42",
  "merged_at": "2018-06-18 22:45:11",
  "merged_by": "sussillo",
  "file_path": "research/lfads/lfads.py",
  "condition": [
   "$0 expected value is taken over hidden (z) variables, namely $1 $2",
   "\t$3 and $1 $4 $5, by pushing $1 $6 $7 for $8",
   "    $9 $1 $10 rather than by sampling (as in $11)",
   "    A $12 $13 $14 $15 $16 $17 $18 $19 time."
  ],
  "consequent": [
   "$0 $6 $7 for $8 $2 $3 and $1 $4 $5 $16",
   "\tpushed $9 $1 $10 instead $13 sampling (as is done in     $11).",
   "    This is $19 quick and approximate version $13 estimating these $7 instead",
   "    $13 sampling from $1 posterior many times and then averaging those $7 $13",
   "    interest. ",
   "    Internally, $19 $12 $13 $14 $15 $16 $17 $9 $1 $10 $18 once."
  ],
  "identifiers": {
   "condition": [
    "variables",
    "A",
    "over",
    "by",
    "pushing",
    "z",
    "hidden",
    "value",
    "taken",
    "namely",
    "sampling",
    "time",
    "rather",
    "expected",
    "than"
   ],
   "consequent": [
    "then",
    "those",
    "instead",
    "once",
    "quick",
    "averaging",
    "Internally",
    "estimating",
    "posterior",
    "This",
    "these",
    "many",
    "times",
    "sampling",
    "version",
    "pushed",
    "approximate",
    "done",
    "interest"
   ]
  }
 },
 {
  "number": 4570,
  "sha": "20da056d32106cca5b8fce4d44fb415754b1eb1e",
  "author": "djoshea",
  "participant": "sussillo",
  "created_at": "2018-06-18 22:37:42",
  "merged_at": "2018-06-18 22:45:11",
  "merged_by": "sussillo",
  "file_path": "research/lfads/lfads.py",
  "condition": [
   "$0 $1 with $2 averaged $3 $4 $2 $5 $6, $7:"
  ],
  "consequent": [
   "$0 $1 with $2 estimated $3 $4 $2 $5 $6, $7:"
  ],
  "identifiers": {
   "condition": [
    "averaged"
   ],
   "consequent": [
    "estimated"
   ]
  }
 },
 {
  "number": 4614,
  "sha": "ddee8c74a282fc64929323f45e87b58e47173667",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-24 05:05:07",
  "merged_at": "2018-06-24 05:33:20",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/data/generate_input_records.py",
  "condition": [
   "def _set_float_feature(ex, name, value):",
   "\t\"\"\"Sets the value of a float feature in a tensorflow.train.Example proto.\"\"\"",
   "  assert name not in ex.features.feature, \"Duplicate feature: %s\" % name",
   "  ex.features.feature[name].float_list.value.extend([float(v) for v in value])  ",
   "def _set_bytes_feature(ex, name, value):",
   "\t\"\"\"Sets the value of a bytes feature in a tensorflow.train.Example proto.\"\"\"",
   "  assert name not in ex.features.feature, \"Duplicate feature: %s\" % name",
   "  ex.features.feature[name].bytes_list.value.extend([       str(v).encode(\"latin-1\") for v in value])  ",
   "def _set_int64_feature(ex, name, value):",
   "\t\"\"\"Sets the value of an int64 feature in a tensorflow.train.Example proto.\"\"\"",
   "  assert name not in ex.features.feature, \"Duplicate feature: %s\" % name",
   "  ex.features.feature[name].int64_list.value.extend([int(v) for v in value])   ",
   "  Raises:",
   "\tIOError: If the light curve files for this Kepler ID cannot be found.                                      ",
   "  time, flux = $0.read_and_process_light_curve($1.$2,"
  ],
  "consequent": [
   "all_time, all_flux = $0.read_light_curve($1.$2,"
  ],
  "identifiers": {
   "condition": [
    "Raises",
    "If",
    "encode",
    "bytes_list",
    "features",
    "str",
    "feature",
    "time",
    "_set_float_feature",
    "ID",
    "v",
    "name",
    "found",
    "_set_int64_feature",
    "int64_list",
    "ex",
    "float",
    "extend",
    "be",
    "IOError",
    "int",
    "curve",
    "light",
    "Kepler",
    "read_and_process_light_curve",
    "flux",
    "float_list",
    "_set_bytes_feature",
    "value",
    "files",
    "this",
    "the",
    "cannot"
   ],
   "consequent": [
    "all_time",
    "read_light_curve",
    "all_flux"
   ]
  }
 },
 {
  "number": 4614,
  "sha": "ddee8c74a282fc64929323f45e87b58e47173667",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-24 05:05:07",
  "merged_at": "2018-06-24 05:33:20",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/data/generate_input_records.py",
  "condition": [
   "$0.$1)"
  ],
  "consequent": [
   "$0.$1)",
   "\ttime, flux = preprocess.process_light_curve(all_time, all_flux)",
   "  return preprocess.generate_example_for_tce(time, flux, tce)"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "flux",
    "all_time",
    "process_light_curve",
    "generate_example_for_tce",
    "tce",
    "preprocess",
    "time",
    "all_flux"
   ]
  }
 },
 {
  "number": 4614,
  "sha": "ddee8c74a282fc64929323f45e87b58e47173667",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-24 05:05:07",
  "merged_at": "2018-06-24 05:33:20",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/data/preprocess.py",
  "condition": [
   "def read_and_process_light_curve($0, $1, max_gap_width=0.75):",
   "\t\"\"\"$2 $3 $4 $5, fits $3 B-spline and divides the $5 by the spline."
  ],
  "consequent": [
   "from astronet.util import example_util",
   "def read_light_curve($0, $1):",
   "\t\"\"\"$2 $3 Kepler $4 $5."
  ],
  "identifiers": {
   "condition": [
    "divides",
    "fits",
    "spline",
    "max_gap_width",
    "by",
    "read_and_process_light_curve",
    "B",
    "the"
   ],
   "consequent": [
    "example_util",
    "Kepler",
    "astronet",
    "util",
    "read_light_curve"
   ]
  }
 },
 {
  "number": 4614,
  "sha": "ddee8c74a282fc64929323f45e87b58e47173667",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-24 05:05:07",
  "merged_at": "2018-06-24 05:33:20",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/data/preprocess.py",
  "condition": [
   "max_gap_width: Gap size (in days) above which $0 $1 $2 is split for",
   "\t$0 fitting $3 B-splines.",
   "    $4: 1D NumPy array; $0 $4 $5 $3 $0 $1 $2."
  ],
  "consequent": [
   "all_time: A list $3 numpy arrays; $0 $4 $5 $3 $0 raw $1 $2."
  ],
  "identifiers": {
   "condition": [
    "splines",
    "Gap",
    "split",
    "D",
    "NumPy",
    "days",
    "max_gap_width",
    "which",
    "array",
    "above",
    "B",
    "size",
    "fitting"
   ],
   "consequent": [
    "raw",
    "numpy",
    "all_time",
    "arrays",
    "list",
    "A"
   ]
  }
 },
 {
  "number": 4614,
  "sha": "ddee8c74a282fc64929323f45e87b58e47173667",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-24 05:05:07",
  "merged_at": "2018-06-24 05:33:20",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/data/preprocess.py",
  "condition": [
   "flux: 1D NumPy array; $0 normalized flux values $1 $0 light curve."
  ],
  "consequent": [
   "all_flux: A list $1 numpy arrays corresponding to $0 time arrays in",
   "\tall_time."
  ],
  "identifiers": {
   "condition": [
    "D",
    "normalized",
    "flux",
    "NumPy",
    "array",
    "values",
    "curve",
    "light"
   ],
   "consequent": [
    "numpy",
    "all_time",
    "arrays",
    "to",
    "list",
    "corresponding",
    "time",
    "A",
    "all_flux"
   ]
  }
 },
 {
  "number": 4614,
  "sha": "ddee8c74a282fc64929323f45e87b58e47173667",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-24 05:05:07",
  "merged_at": "2018-06-24 05:33:20",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/data/preprocess.py",
  "condition": [
   "ValueError: If the spline could not be fit.",
   "\tall_time, all_flux = $0.read_kepler_light_curve($1)"
  ],
  "consequent": [
   "return $0.read_kepler_light_curve($1)"
  ],
  "identifiers": {
   "condition": [
    "If",
    "be",
    "all_time",
    "spline",
    "ValueError",
    "read_kepler_light_curve",
    "fit",
    "the",
    "could",
    "all_flux"
   ],
   "consequent": [
    "read_kepler_light_curve"
   ]
  }
 },
 {
  "number": 4614,
  "sha": "ddee8c74a282fc64929323f45e87b58e47173667",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-24 05:05:07",
  "merged_at": "2018-06-24 05:33:20",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/data/preprocess.py",
  "condition": [
   "$0, $1 = $2.split($0, $1, $3=max_gap_width)"
  ],
  "consequent": [
   "def process_light_curve($0, $1):",
   "\t\"\"\"Removes low-frequency variability from a light curve.",
   "",
   "  Args:",
   "    all_time: A list of numpy arrays; the time values of the raw light curve.",
   "    all_flux: A list of numpy arrays corresponding to the time arrays in",
   "        all_time.",
   "",
   "  Returns:",
   "    time: 1D NumPy array; the time values of the light curve.",
   "    flux: 1D NumPy array; the normalized flux values of the light curve.",
   "  \"\"\"",
   "  $0, $1 = $2.split($0, $1, $3=0.75)"
  ],
  "identifiers": {
   "condition": [
    "max_gap_width",
    "split"
   ],
   "consequent": [
    "split",
    "process_light_curve"
   ]
  }
 },
 {
  "number": 4614,
  "sha": "ddee8c74a282fc64929323f45e87b58e47173667",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-24 05:05:07",
  "merged_at": "2018-06-24 05:33:20",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/data/preprocess.py",
  "condition": [
   "                                                                                    ",
   "\tbkspaces = np.logspace(np.log10(0.5), np.log10(20), num=20)                      ",
   "  $0 = $1.choose_kepler_spline(       $2, $3, bkspaces, penalty_coeff=1.0, $4=False)[0] ",
   "  if $0 is None:",
   "\traise ValueError(\"Failed to fit spline with Kepler ID %s\", kepid)"
  ],
  "consequent": [
   "                                                      ",
   "\t$0 = $1.fit_kepler_spline($2, $3, $4=False)[0]"
  ],
  "identifiers": {
   "condition": [
    "bkspaces",
    "logspace",
    "penalty_coeff",
    "np",
    "num",
    "kepid",
    "ValueError",
    "log10",
    "choose_kepler_spline"
   ],
   "consequent": [
    "fit_kepler_spline"
   ]
  }
 },
 {
  "number": 4614,
  "sha": "ddee8c74a282fc64929323f45e87b58e47173667",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-24 05:05:07",
  "merged_at": "2018-06-24 05:33:20",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/data/preprocess.py",
  "condition": [
   "$0.logging.warn(\"Incomplete spline with Kepler ID %s\", kepid)"
  ],
  "consequent": [
   "def generate_example_for_tce(time, flux, tce):",
   "\t\"\"\"Generates a tf.train.Example representing an input TCE.",
   "",
   "  Args:",
   "    time: 1D NumPy array; the time values of the light curve.",
   "    flux: 1D NumPy array; the normalized flux values of the light curve.",
   "    tce: Dict-like object containing at least 'tce_period', 'tce_duration', and",
   "        'tce_time0bk'. Additional items are included as features in the output.",
   "",
   "  Returns:",
   "    A tf.train.Example containing features 'global_view', 'local_view', and all",
   "    values present in `tce`.",
   "  \"\"\"",
   "  period = tce[\"tce_period\"]",
   "  duration = tce[\"tce_duration\"]",
   "  t0 = tce[\"tce_time0bk\"] ",
   "  time, flux = phase_fold_and_sort_light_curve(time, flux, period, t0)                        ",
   "  ex = $0.train.Example()                               ",
   "  example_util.set_float_feature(ex, \"global_view\",                                  global_view(time, flux, period))",
   "  example_util.set_float_feature(ex, \"local_view\",                                  local_view(time, flux, period, duration))                                  ",
   "  for name, value in tce.items():",
   "\texample_util.set_feature(ex, name, [value]) ",
   "  return ex"
  ],
  "identifiers": {
   "condition": [
    "kepid",
    "logging",
    "warn"
   ],
   "consequent": [
    "t0",
    "set_float_feature",
    "Example",
    "phase_fold_and_sort_light_curve",
    "time",
    "name",
    "duration",
    "ex",
    "train",
    "set_feature",
    "tce",
    "items",
    "local_view",
    "example_util",
    "period",
    "flux",
    "generate_example_for_tce",
    "global_view",
    "value"
   ]
  }
 },
 {
  "number": 4614,
  "sha": "ddee8c74a282fc64929323f45e87b58e47173667",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-24 05:05:07",
  "merged_at": "2018-06-24 05:33:20",
  "merged_by": "cshallue",
  "file_path": "research/astronet/third_party/kepler_spline/kepler_spline.py",
  "condition": [
   "$0: $1 $2 1$3 $4 $5; $6 flux (brightness) $7 $2 $6 light"
  ],
  "consequent": [
   "$0: $1 $2 1$3 $4 $5; $6 flux $7 $2 $6 light curve."
  ],
  "identifiers": {
   "condition": [
    "brightness",
    "light",
    "flux"
   ],
   "consequent": [
    "curve",
    "light",
    "flux"
   ]
  }
 },
 {
  "number": 4614,
  "sha": "ddee8c74a282fc64929323f45e87b58e47173667",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-24 05:05:07",
  "merged_at": "2018-06-24 05:33:20",
  "merged_by": "cshallue",
  "file_path": "research/astronet/third_party/kepler_spline/kepler_spline.py",
  "condition": [
   "curve.",
   "\t$0 = $1.concatenate([$1.diff($2) / $1.sqrt(2) for $2 in $3])"
  ],
  "consequent": [
   "$0 = [$1.diff($2) / $1.sqrt(2) for $2 in $3]",
   "\t$0 = $1.concatenate($0) if $0 else $1.array([])"
  ],
  "identifiers": {
   "condition": [
    "sqrt",
    "curve",
    "diff",
    "concatenate"
   ],
   "consequent": [
    "concatenate",
    "array",
    "diff",
    "sqrt"
   ]
  }
 },
 {
  "number": 4628,
  "sha": "f27ec7f61226224efd03d4bcce306521ba7067f0",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-25 23:01:51",
  "merged_at": "2018-06-27 16:28:12",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/data/generate_download_script.py",
  "condition": [
   "$0.chmod($1.$2, 0o744)"
  ],
  "consequent": [
   "import stat                                         ",
   "\t$0.chmod($1.$2, stat.S_IRWXU | stat.S_IRGRP | stat.S_IROTH)"
  ],
  "identifiers": {
   "condition": [
    "chmod"
   ],
   "consequent": [
    "chmod",
    "S_IRWXU",
    "S_IROTH",
    "stat",
    "S_IRGRP"
   ]
  }
 },
 {
  "number": 4628,
  "sha": "f27ec7f61226224efd03d4bcce306521ba7067f0",
  "author": "cshallue",
  "participant": "rasmi",
  "created_at": "2018-06-25 23:01:51",
  "merged_at": "2018-06-27 16:28:12",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/periodic_event_test.py",
  "condition": [
   "if $0 == '__main__':"
  ],
  "consequent": [
   "def testStr(self):",
   "\tself.assertEqual(str(Event(1, 2, 3)), \"<period=1, duration=2, t0=3>\") ",
   "  def testRepr(self):",
   "\tself.assertEqual(         repr(Event(1, 2, 3)), \"Event(<period=1, duration=2, t0=3>)\")",
   "if $0 == \"__main__\":"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "testRepr",
    "self",
    "Event",
    "str",
    "repr",
    "assertEqual",
    "testStr"
   ]
  }
 },
 {
  "number": 4852,
  "sha": "60613a8729122012c3f6739550de981d01087326",
  "author": "raymond-yuan",
  "participant": "alextp",
  "created_at": "2018-07-20 23:11:13",
  "merged_at": "2018-07-24 21:31:18",
  "merged_by": "raymond-yuan",
  "file_path": "research/a3c_blogpost/a3c_cartpole.py",
  "condition": [
   "os.environ[\"CUDA_DEVICE_ORDER\"] = \"PCI_BUS_ID\"                    ",
   "print(\"Eager execution: {}\".format(tf.executing_eagerly())) ",
   "def str2bool(v):",
   "\tif v.lower() in ('yes', 'true', 't', 'y', '1'):",
   "\treturn True",
   "  elif v.lower() in ('no', 'false', 'f', 'n', '0'):",
   "\treturn False",
   "  else:",
   "\traise argparse.ArgumentTypeError('Boolean value expected.')"
  ],
  "consequent": [
   "parser.add_argument('--train', dest='train', action='store_true',                     help='Train our model.')"
  ],
  "identifiers": {
   "condition": [
    "ArgumentTypeError",
    "os",
    "argparse",
    "v",
    "environ",
    "executing_eagerly",
    "str2bool",
    "tf",
    "lower",
    "print",
    "format"
   ],
   "consequent": [
    "add_argument",
    "dest",
    "parser",
    "help",
    "action"
   ]
  }
 },
 {
  "number": 4852,
  "sha": "60613a8729122012c3f6739550de981d01087326",
  "author": "raymond-yuan",
  "participant": "alextp",
  "created_at": "2018-07-20 23:11:13",
  "merged_at": "2018-07-24 21:31:18",
  "merged_by": "raymond-yuan",
  "file_path": "research/a3c_blogpost/a3c_cartpole.py",
  "condition": [
   "$0.add_argument(\"--train\", type=str2bool, $1=True,                     help='Train our model or to run an existing model and '                          'watch it play.')",
   "$0.add_argument('--lr', $1=0.0005,"
  ],
  "consequent": [
   "$0.add_argument('--lr', $1=0.001,"
  ],
  "identifiers": {
   "condition": [
    "add_argument",
    "help",
    "type",
    "str2bool"
   ],
   "consequent": [
    "add_argument"
   ]
  }
 },
 {
  "number": 4852,
  "sha": "60613a8729122012c3f6739550de981d01087326",
  "author": "raymond-yuan",
  "participant": "alextp",
  "created_at": "2018-07-20 23:11:13",
  "merged_at": "2018-07-24 21:31:18",
  "merged_by": "raymond-yuan",
  "file_path": "research/a3c_blogpost/a3c_cartpole.py",
  "condition": [
   "def tf_wrap(np_array, $0=$1.$2):",
   "\t\"\"\"Converts an np array to a tf constant.",
   "",
   "  Arguments:",
   "      np_array: Input array.",
   "      dtype: The desired data type of the array.",
   "",
   "  Returns:",
   "      A tensor of the np array of type dtype.",
   "  \"\"\"",
   "  if np_array.$0 != $0:",
   "\tnp_array = np_array.astype($0)",
   "  return $3.constant(np_array) ",
   "\t$4.global_model($3.constant($1.$5.$5((1, $4.$6)), $0=$3.$2))"
  ],
  "consequent": [
   "$4.global_model($3.convert_to_tensor($1.$5.$5((1, $4.$6)), $0=$3.$2))"
  ],
  "identifiers": {
   "condition": [
    "tf_wrap",
    "astype",
    "global_model",
    "np_array",
    "constant"
   ],
   "consequent": [
    "convert_to_tensor",
    "global_model"
   ]
  }
 },
 {
  "number": 4852,
  "sha": "60613a8729122012c3f6739550de981d01087326",
  "author": "raymond-yuan",
  "participant": "alextp",
  "created_at": "2018-07-20 23:11:13",
  "merged_at": "2018-07-24 21:31:18",
  "merged_by": "raymond-yuan",
  "file_path": "research/a3c_blogpost/a3c_cartpole.py",
  "condition": [
   "                                   ",
   "\twith tf.device('/cpu:0'):",
   "\t$0 = [Worker($1.$2,"
  ],
  "consequent": [
   "$0 = [Worker($1.$2,"
  ],
  "identifiers": {
   "condition": [
    "tf",
    "device",
    "Worker"
   ],
   "consequent": [
    "Worker"
   ]
  }
 },
 {
  "number": 4852,
  "sha": "60613a8729122012c3f6739550de981d01087326",
  "author": "raymond-yuan",
  "participant": "alextp",
  "created_at": "2018-07-20 23:11:13",
  "merged_at": "2018-07-24 21:31:18",
  "merged_by": "raymond-yuan",
  "file_path": "research/a3c_blogpost/a3c_cartpole.py",
  "condition": [
   "$0.$1, $2,"
  ],
  "consequent": [
   "$0.$1, $2,",
   "\ti, game_name=$0.game_name,"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "i",
    "game_name"
   ]
  }
 },
 {
  "number": 4852,
  "sha": "60613a8729122012c3f6739550de981d01087326",
  "author": "raymond-yuan",
  "participant": "alextp",
  "created_at": "2018-07-20 23:11:13",
  "merged_at": "2018-07-24 21:31:18",
  "merged_by": "raymond-yuan",
  "file_path": "research/a3c_blogpost/a3c_cartpole.py",
  "condition": [
   "$0, $1 = model(tf_wrap($2[None, :]))"
  ],
  "consequent": [
   "$0, $1 = model(tf.convert_to_tensor($2[None, :], dtype=tf.float32))"
  ],
  "identifiers": {
   "condition": [
    "model",
    "tf_wrap"
   ],
   "consequent": [
    "dtype",
    "tf",
    "model",
    "convert_to_tensor",
    "float32"
   ]
  }
 },
 {
  "number": 4852,
  "sha": "60613a8729122012c3f6739550de981d01087326",
  "author": "raymond-yuan",
  "participant": "alextp",
  "created_at": "2018-07-20 23:11:13",
  "merged_at": "2018-07-24 21:31:18",
  "merged_by": "raymond-yuan",
  "file_path": "research/a3c_blogpost/a3c_cartpole.py",
  "condition": [
   "$0, $1 = $2.local_model(tf_wrap($3[None, :]))"
  ],
  "consequent": [
   "$0, $1 = $2.local_model(             tf.convert_to_tensor($3[None, :],                                  dtype=tf.float32))"
  ],
  "identifiers": {
   "condition": [
    "local_model",
    "tf_wrap"
   ],
   "consequent": [
    "local_model",
    "dtype",
    "tf",
    "convert_to_tensor",
    "float32"
   ]
  }
 },
 {
  "number": 4852,
  "sha": "60613a8729122012c3f6739550de981d01087326",
  "author": "raymond-yuan",
  "participant": "alextp",
  "created_at": "2018-07-20 23:11:13",
  "merged_at": "2018-07-24 21:31:18",
  "merged_by": "raymond-yuan",
  "file_path": "research/a3c_blogpost/a3c_cartpole.py",
  "condition": [
   "$0 = $1.local_model(tf_wrap($2[None, :]))[-1].numpy()[0]"
  ],
  "consequent": [
   "$0 = $1.local_model(           tf.convert_to_tensor($2[None, :],                                dtype=tf.float32))[-1].numpy()[0]"
  ],
  "identifiers": {
   "condition": [
    "numpy",
    "local_model",
    "tf_wrap"
   ],
   "consequent": [
    "local_model",
    "numpy",
    "dtype",
    "tf",
    "convert_to_tensor",
    "float32"
   ]
  }
 },
 {
  "number": 4852,
  "sha": "60613a8729122012c3f6739550de981d01087326",
  "author": "raymond-yuan",
  "participant": "alextp",
  "created_at": "2018-07-20 23:11:13",
  "merged_at": "2018-07-24 21:31:18",
  "merged_by": "raymond-yuan",
  "file_path": "research/a3c_blogpost/a3c_cartpole.py",
  "condition": [
   "$0, $1 = $2.local_model(tf_wrap($3.vstack($4.$5)))"
  ],
  "consequent": [
   "$0, $1 = $2.local_model(         tf.convert_to_tensor($3.vstack($4.$5),                              dtype=tf.float32))"
  ],
  "identifiers": {
   "condition": [
    "vstack",
    "local_model",
    "tf_wrap"
   ],
   "consequent": [
    "local_model",
    "vstack",
    "dtype",
    "tf",
    "convert_to_tensor",
    "float32"
   ]
  }
 },
 {
  "number": 4852,
  "sha": "60613a8729122012c3f6739550de981d01087326",
  "author": "raymond-yuan",
  "participant": "alextp",
  "created_at": "2018-07-20 23:11:13",
  "merged_at": "2018-07-24 21:31:18",
  "merged_by": "raymond-yuan",
  "file_path": "research/a3c_blogpost/a3c_cartpole.py",
  "condition": [
   "$0 = tf_wrap($1.array($2)[:, None]) - values"
  ],
  "consequent": [
   "$0 = tf.convert_to_tensor($1.array($2)[:, None],                             dtype=tf.float32) - values"
  ],
  "identifiers": {
   "condition": [
    "array",
    "values",
    "tf_wrap"
   ],
   "consequent": [
    "dtype",
    "tf",
    "array",
    "values",
    "convert_to_tensor",
    "float32"
   ]
  }
 },
 {
  "number": 4852,
  "sha": "60613a8729122012c3f6739550de981d01087326",
  "author": "raymond-yuan",
  "participant": "alextp",
  "created_at": "2018-07-20 23:11:13",
  "merged_at": "2018-07-24 21:31:18",
  "merged_by": "raymond-yuan",
  "file_path": "research/a3c_blogpost/a3c_cartpole.py",
  "condition": [
   "$0 = -$1.$2.softmax_cross_entropy_with_logits_v2($3=$4,"
  ],
  "consequent": [
   "policy = $1.$2.softmax(logits)",
   "\tentropy = $1.reduce_sum(policy * $1.log(policy + 1e-20), axis=1) ",
   "    $0 = $1.$2.softmax_cross_entropy_with_logits_v2($3=$4,"
  ],
  "identifiers": {
   "condition": [
    "softmax_cross_entropy_with_logits_v2"
   ],
   "consequent": [
    "policy",
    "log",
    "axis",
    "reduce_sum",
    "softmax",
    "softmax_cross_entropy_with_logits_v2",
    "logits",
    "entropy"
   ]
  }
 },
 {
  "number": 4852,
  "sha": "60613a8729122012c3f6739550de981d01087326",
  "author": "raymond-yuan",
  "participant": "alextp",
  "created_at": "2018-07-20 23:11:13",
  "merged_at": "2018-07-24 21:31:18",
  "merged_by": "raymond-yuan",
  "file_path": "research/a3c_blogpost/a3c_cartpole.py",
  "condition": [
   "$0 = $1.reduce_mean(($2 + $3))"
  ],
  "consequent": [
   "$3 *= $1.stop_gradient(advantage)",
   "\t$3 -= 0.01 * entropy",
   "    $0 = $1.reduce_mean((0.5 * $2 + $3))"
  ],
  "identifiers": {
   "condition": [
    "reduce_mean"
   ],
   "consequent": [
    "advantage",
    "entropy",
    "stop_gradient",
    "reduce_mean"
   ]
  }
 },
 {
  "number": 5225,
  "sha": "967133c11ef03207e758b8b3f88f6791a4dd6b6d",
  "author": "tfboyd",
  "participant": "robieta",
  "created_at": "2018-09-02 15:42:55",
  "merged_at": "2018-09-04 23:56:34",
  "merged_by": "tfboyd",
  "file_path": "official/resnet/resnet_run_loop.py",
  "condition": [
   "$0 $1 removed $2 aspects $3 $4 $5 $6 other than $4",
   "\t$7 $8 $9 $10. $0 is useful in debugging $5 $6 performance."
  ],
  "consequent": [
   "$0 $1 returns a data set that iterates over a set $3 random data and",
   "\tbypasses $2 preprocessing, e.g. jpeg decode and $10. The $7 $8 $9",
   "  $10 is still included. $0 used $8 find $4 upper throughput bound when",
   "  tunning $4 full $5 $6."
  ],
  "identifiers": {
   "condition": [
    "removed",
    "other",
    "debugging",
    "aspects",
    "useful",
    "performance",
    "than"
   ],
   "consequent": [
    "find",
    "set",
    "iterates",
    "jpeg",
    "used",
    "data",
    "upper",
    "included",
    "when",
    "returns",
    "over",
    "that",
    "still",
    "tunning",
    "preprocessing",
    "a",
    "e",
    "full",
    "random",
    "bound",
    "throughput",
    "g",
    "bypasses",
    "decode",
    "The"
   ]
  }
 },
 {
  "number": 5253,
  "sha": "5c0c749b5e4fdf0588ae929008cd0036f0f83b9b",
  "author": "tfboyd",
  "participant": "robieta",
  "created_at": "2018-09-05 21:29:46",
  "merged_at": "2018-09-05 23:54:52",
  "merged_by": "tfboyd",
  "file_path": "official/resnet/cifar10_test.py",
  "condition": [
   "lambda $0: $1.parse_record($0, False))"
  ],
  "consequent": [
   "lambda $0: $1.parse_record($0, False, tf.float32))"
  ],
  "identifiers": {
   "condition": [
    "parse_record"
   ],
   "consequent": [
    "tf",
    "float32",
    "parse_record"
   ]
  }
 },
 {
  "number": 5518,
  "sha": "b98409cb5fc09d51e8aaee7d294efd23bdf47b58",
  "author": "tfboyd",
  "participant": "robieta",
  "created_at": "2018-10-13 15:03:09",
  "merged_at": "2018-10-18 18:54:07",
  "merged_by": "tfboyd",
  "file_path": "official/resnet/cifar10_main.py",
  "condition": [
   "def input_fn($0, $1, $2, $3=1, num_gpus=None,"
  ],
  "consequent": [
   "def input_fn($0, $1, $2, $3=1,"
  ],
  "identifiers": {
   "condition": [
    "input_fn",
    "num_gpus"
   ],
   "consequent": [
    "input_fn"
   ]
  }
 },
 {
  "number": 5518,
  "sha": "b98409cb5fc09d51e8aaee7d294efd23bdf47b58",
  "author": "tfboyd",
  "participant": "robieta",
  "created_at": "2018-10-13 15:03:09",
  "merged_at": "2018-10-18 18:54:07",
  "merged_by": "tfboyd",
  "file_path": "official/resnet/cifar10_main.py",
  "condition": [
   "$0=$1.$2):"
  ],
  "consequent": [
   "$0=$1.$2, datasets_num_private_threads=None,",
   "\tnum_parallel_batches=1):"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "datasets_num_private_threads",
    "num_parallel_batches"
   ]
  }
 },
 {
  "number": 5518,
  "sha": "b98409cb5fc09d51e8aaee7d294efd23bdf47b58",
  "author": "tfboyd",
  "participant": "robieta",
  "created_at": "2018-10-13 15:03:09",
  "merged_at": "2018-10-18 18:54:07",
  "merged_by": "tfboyd",
  "file_path": "official/resnet/cifar10_main.py",
  "condition": [
   "num_gpus: The number $0 gpus used for training."
  ],
  "consequent": [
   "datasets_num_private_threads: Number $0 private threads for tf.data.",
   "\tnum_parallel_batches: Number $0 parallel batches for tf.data."
  ],
  "identifiers": {
   "condition": [
    "training",
    "number",
    "used",
    "gpus",
    "num_gpus",
    "The"
   ],
   "consequent": [
    "parallel",
    "num_parallel_batches",
    "batches",
    "private",
    "data",
    "tf",
    "datasets_num_private_threads",
    "Number",
    "threads"
   ]
  }
 },
 {
  "number": 5518,
  "sha": "b98409cb5fc09d51e8aaee7d294efd23bdf47b58",
  "author": "tfboyd",
  "participant": "robieta",
  "created_at": "2018-10-13 15:03:09",
  "merged_at": "2018-10-18 18:54:07",
  "merged_by": "tfboyd",
  "file_path": "official/resnet/cifar10_main.py",
  "condition": [
   "num_gpus=num_gpus,",
   "\texamples_per_epoch=_NUM_IMAGES['train'] if is_training else None,",
   "      $0=$0"
  ],
  "consequent": [
   "$0=$0,",
   "\tdatasets_num_private_threads=datasets_num_private_threads,",
   "      num_parallel_batches=num_parallel_batches"
  ],
  "identifiers": {
   "condition": [
    "is_training",
    "num_gpus",
    "examples_per_epoch",
    "_NUM_IMAGES"
   ],
   "consequent": [
    "datasets_num_private_threads",
    "num_parallel_batches"
   ]
  }
 },
 {
  "number": 5518,
  "sha": "b98409cb5fc09d51e8aaee7d294efd23bdf47b58",
  "author": "tfboyd",
  "participant": "robieta",
  "created_at": "2018-10-13 15:03:09",
  "merged_at": "2018-10-18 18:54:07",
  "merged_by": "tfboyd",
  "file_path": "official/resnet/resnet_run_loop.py",
  "condition": [
   "num_parallel_calls=$0,"
  ],
  "consequent": [
   "$0=$0,"
  ],
  "identifiers": {
   "condition": [
    "num_parallel_calls"
   ],
   "consequent": []
  }
 },
 {
  "number": 5518,
  "sha": "b98409cb5fc09d51e8aaee7d294efd23bdf47b58",
  "author": "tfboyd",
  "participant": "robieta",
  "created_at": "2018-10-13 15:03:09",
  "merged_at": "2018-10-18 18:54:07",
  "merged_by": "tfboyd",
  "file_path": "official/resnet/resnet_run_loop.py",
  "condition": [
   "def set_environment_vars($0):"
  ],
  "consequent": [
   "tf.logging.info('datasets_num_private_threads: %s',                     datasets_num_private_threads)",
   "def override_flags_and_set_envars_for_gpu_thread_pool($0):"
  ],
  "identifiers": {
   "condition": [
    "set_environment_vars"
   ],
   "consequent": [
    "tf",
    "info",
    "logging",
    "override_flags_and_set_envars_for_gpu_thread_pool",
    "datasets_num_private_threads"
   ]
  }
 },
 {
  "number": 5518,
  "sha": "b98409cb5fc09d51e8aaee7d294efd23bdf47b58",
  "author": "tfboyd",
  "participant": "robieta",
  "created_at": "2018-10-13 15:03:09",
  "merged_at": "2018-10-18 18:54:07",
  "merged_by": "tfboyd",
  "file_path": "official/resnet/resnet_run_loop.py",
  "condition": [
   "\"\"\"Adjust $0 and $1 $2 for $3."
  ],
  "consequent": [
   "\"\"\"Override $0 and $1 $2 for $3."
  ],
  "identifiers": {
   "condition": [
    "Adjust"
   ],
   "consequent": [
    "Override"
   ]
  }
 },
 {
  "number": 5518,
  "sha": "b98409cb5fc09d51e8aaee7d294efd23bdf47b58",
  "author": "tfboyd",
  "participant": "robieta",
  "created_at": "2018-10-13 15:03:09",
  "merged_at": "2018-10-18 18:54:07",
  "merged_by": "tfboyd",
  "file_path": "official/resnet/resnet_run_loop.py",
  "condition": [
   "$0 $1 $2 private $3 $4 for GPU with `$5=$6`"
  ],
  "consequent": [
   "$0 $1 $2 gpu $3 $4 with `$5=$6` may perform"
  ],
  "identifiers": {
   "condition": [
    "private",
    "GPU"
   ],
   "consequent": [
    "gpu",
    "perform",
    "may"
   ]
  }
 },
 {
  "number": 5518,
  "sha": "b98409cb5fc09d51e8aaee7d294efd23bdf47b58",
  "author": "tfboyd",
  "participant": "robieta",
  "created_at": "2018-10-13 15:03:09",
  "merged_at": "2018-10-18 18:54:07",
  "merged_by": "tfboyd",
  "file_path": "official/resnet/resnet_run_loop.py",
  "condition": [
   "may perform $0."
  ],
  "consequent": [
   "$0."
  ],
  "identifiers": {
   "condition": [
    "perform",
    "may"
   ],
   "consequent": []
  }
 },
 {
  "number": 5518,
  "sha": "b98409cb5fc09d51e8aaee7d294efd23bdf47b58",
  "author": "tfboyd",
  "participant": "robieta",
  "created_at": "2018-10-13 15:03:09",
  "merged_at": "2018-10-18 18:54:07",
  "merged_by": "tfboyd",
  "file_path": "official/resnet/resnet_run_loop.py",
  "condition": [
   "Returns:",
   "\ttf.ConfigProto: session_config proto to add to the session.",
   "  if flags_obj.tf_gpu_thread_mode in ['gpu_private']:",
   "\t$0 = $1.$0()"
  ],
  "consequent": [
   "$0 = $1.$0()"
  ],
  "identifiers": {
   "condition": [
    "ConfigProto",
    "session",
    "flags_obj",
    "tf_gpu_thread_mode",
    "Returns",
    "tf",
    "to",
    "add",
    "session_config",
    "proto",
    "the"
   ],
   "consequent": []
  }
 },
 {
  "number": 5518,
  "sha": "b98409cb5fc09d51e8aaee7d294efd23bdf47b58",
  "author": "tfboyd",
  "participant": "robieta",
  "created_at": "2018-10-13 15:03:09",
  "merged_at": "2018-10-18 18:54:07",
  "merged_by": "tfboyd",
  "file_path": "official/resnet/resnet_run_loop.py",
  "condition": [
   "print('Logical CPU cores:', $0)"
  ],
  "consequent": [
   "tf.logging.info('Logical CPU cores: %s', $0)"
  ],
  "identifiers": {
   "condition": [
    "print"
   ],
   "consequent": [
    "tf",
    "logging",
    "info"
   ]
  }
 },
 {
  "number": 5518,
  "sha": "b98409cb5fc09d51e8aaee7d294efd23bdf47b58",
  "author": "tfboyd",
  "participant": "robieta",
  "created_at": "2018-10-13 15:03:09",
  "merged_at": "2018-10-18 18:54:07",
  "merged_by": "tfboyd",
  "file_path": "official/resnet/resnet_run_loop.py",
  "condition": [
   "print('TF_GPU_THREAD_COUNT:', $0.$1['TF_GPU_THREAD_COUNT'])"
  ],
  "consequent": [
   "tf.logging.info('TF_GPU_THREAD_COUNT: %s', $0.$1['TF_GPU_THREAD_COUNT'])",
   "\ttf.logging.info('TF_GPU_THREAD_MODE: %s', $0.$1['TF_GPU_THREAD_MODE'])"
  ],
  "identifiers": {
   "condition": [
    "print"
   ],
   "consequent": [
    "tf",
    "logging",
    "info"
   ]
  }
 },
 {
  "number": 5518,
  "sha": "b98409cb5fc09d51e8aaee7d294efd23bdf47b58",
  "author": "tfboyd",
  "participant": "robieta",
  "created_at": "2018-10-13 15:03:09",
  "merged_at": "2018-10-18 18:54:07",
  "merged_by": "tfboyd",
  "file_path": "official/resnet/resnet_run_loop.py",
  "condition": [
   "num_private_threads = ($0 - total_gpu_thread_count"
  ],
  "consequent": [
   "flags_obj.datasets_num_private_threads = ($0 - total_gpu_thread_count"
  ],
  "identifiers": {
   "condition": [
    "total_gpu_thread_count",
    "num_private_threads"
   ],
   "consequent": [
    "total_gpu_thread_count",
    "datasets_num_private_threads",
    "flags_obj"
   ]
  }
 },
 {
  "number": 5518,
  "sha": "b98409cb5fc09d51e8aaee7d294efd23bdf47b58",
  "author": "tfboyd",
  "participant": "robieta",
  "created_at": "2018-10-13 15:03:09",
  "merged_at": "2018-10-18 18:54:07",
  "merged_by": "tfboyd",
  "file_path": "official/resnet/resnet_run_loop.py",
  "condition": [
   "flags_obj.datasets_num_private_threads = num_private_threads ",
   "\tprint('inter_op_parallelism_threads:', flags_obj.inter_op_parallelism_threads)",
   "  print('intra_op_parallelism_threads:', flags_obj.intra_op_parallelism_threads)",
   "  print('datasets_num_private_threads:', flags_obj.datasets_num_private_threads)                                                                                                                                                                                                                                                      ",
   "  session_config = $0.ConfigProto(       inter_op_parallelism_threads=flags_obj.inter_op_parallelism_threads,       intra_op_parallelism_threads=flags_obj.intra_op_parallelism_threads,       allow_soft_placement=True)",
   "  return session_config                                                                      "
  ],
  "consequent": [
   "accuracy_top_5 = $0.metrics.mean($0.nn.in_top_k(predictions=logits,"
  ],
  "identifiers": {
   "condition": [
    "intra_op_parallelism_threads",
    "ConfigProto",
    "allow_soft_placement",
    "flags_obj",
    "inter_op_parallelism_threads",
    "num_private_threads",
    "print",
    "session_config",
    "datasets_num_private_threads"
   ],
   "consequent": [
    "metrics",
    "predictions",
    "mean",
    "logits",
    "in_top_k",
    "nn",
    "accuracy_top_5"
   ]
  }
 },
 {
  "number": 5518,
  "sha": "b98409cb5fc09d51e8aaee7d294efd23bdf47b58",
  "author": "tfboyd",
  "participant": "robieta",
  "created_at": "2018-10-13 15:03:09",
  "merged_at": "2018-10-18 18:54:07",
  "merged_by": "tfboyd",
  "file_path": "official/resnet/resnet_run_loop.py",
  "condition": [
   "$0 = set_environment_vars($1)"
  ],
  "consequent": [
   "                                                                       ",
   "\tif $1.tf_gpu_thread_mode:",
   "\toverride_flags_and_set_envars_for_gpu_thread_pool($1)                                                                                                                            ",
   "  $0 = tf.ConfigProto(       inter_op_parallelism_threads=$1.inter_op_parallelism_threads,       intra_op_parallelism_threads=$1.intra_op_parallelism_threads,       allow_soft_placement=True)"
  ],
  "identifiers": {
   "condition": [
    "set_environment_vars"
   ],
   "consequent": [
    "intra_op_parallelism_threads",
    "ConfigProto",
    "allow_soft_placement",
    "tf_gpu_thread_mode",
    "inter_op_parallelism_threads",
    "tf",
    "override_flags_and_set_envars_for_gpu_thread_pool"
   ]
  }
 },
 {
  "number": 5518,
  "sha": "b98409cb5fc09d51e8aaee7d294efd23bdf47b58",
  "author": "tfboyd",
  "participant": "robieta",
  "created_at": "2018-10-13 15:03:09",
  "merged_at": "2018-10-18 18:54:07",
  "merged_by": "tfboyd",
  "file_path": "official/resnet/resnet_run_loop.py",
  "condition": [
   "$0=$1.num_parallel_calls)"
  ],
  "consequent": [
   "$0=$1.datasets_num_parallel_batches)"
  ],
  "identifiers": {
   "condition": [
    "num_parallel_calls"
   ],
   "consequent": [
    "datasets_num_parallel_batches"
   ]
  }
 },
 {
  "number": 5518,
  "sha": "b98409cb5fc09d51e8aaee7d294efd23bdf47b58",
  "author": "tfboyd",
  "participant": "robieta",
  "created_at": "2018-10-13 15:03:09",
  "merged_at": "2018-10-18 18:54:07",
  "merged_by": "tfboyd",
  "file_path": "official/resnet/resnet_run_loop.py",
  "condition": [
   "$0.define_performance()"
  ],
  "consequent": [
   "$0.define_performance(num_parallel_calls=False,                                 tf_gpu_thread_mode=True,                                 datasets_num_private_threads=True,                                 datasets_num_parallel_batches=True)"
  ],
  "identifiers": {
   "condition": [
    "define_performance"
   ],
   "consequent": [
    "tf_gpu_thread_mode",
    "num_parallel_calls",
    "datasets_num_parallel_batches",
    "define_performance",
    "datasets_num_private_threads"
   ]
  }
 },
 {
  "number": 5518,
  "sha": "b98409cb5fc09d51e8aaee7d294efd23bdf47b58",
  "author": "tfboyd",
  "participant": "robieta",
  "created_at": "2018-10-13 15:03:09",
  "merged_at": "2018-10-18 18:54:07",
  "merged_by": "tfboyd",
  "file_path": "official/utils/flags/_performance.py",
  "condition": [
   "$0=True):"
  ],
  "consequent": [
   "$0=False,",
   "\tdatasets_num_parallel_batches=False):"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "datasets_num_parallel_batches"
   ]
  }
 },
 {
  "number": 5518,
  "sha": "b98409cb5fc09d51e8aaee7d294efd23bdf47b58",
  "author": "tfboyd",
  "participant": "robieta",
  "created_at": "2018-10-13 15:03:09",
  "merged_at": "2018-10-18 18:54:07",
  "merged_by": "tfboyd",
  "file_path": "official/utils/flags/_performance.py",
  "condition": [
   "$0=1,"
  ],
  "consequent": [
   "datasets_num_parallel_batches: Determines how many batches to process in",
   "\tparallel when using map and batch from tf.data. ",
   "\t$0=multiprocessing.cpu_count(),"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "using",
    "multiprocessing",
    "parallel",
    "process",
    "batches",
    "when",
    "Determines",
    "many",
    "data",
    "to",
    "map",
    "tf",
    "datasets_num_parallel_batches",
    "how",
    "batch",
    "cpu_count"
   ]
  }
 },
 {
  "number": 5518,
  "sha": "b98409cb5fc09d51e8aaee7d294efd23bdf47b58",
  "author": "tfboyd",
  "participant": "robieta",
  "created_at": "2018-10-13 15:03:09",
  "merged_at": "2018-10-18 18:54:07",
  "merged_by": "tfboyd",
  "file_path": "official/utils/flags/_performance.py",
  "condition": [
   "$0=\"datasets_num_private_threads\", short_name=\"dataset_thread_count\","
  ],
  "consequent": [
   "$0=\"datasets_num_private_threads\","
  ],
  "identifiers": {
   "condition": [
    "short_name"
   ],
   "consequent": []
  }
 },
 {
  "number": 5518,
  "sha": "b98409cb5fc09d51e8aaee7d294efd23bdf47b58",
  "author": "tfboyd",
  "participant": "robieta",
  "created_at": "2018-10-13 15:03:09",
  "merged_at": "2018-10-18 18:54:07",
  "merged_by": "tfboyd",
  "file_path": "official/utils/misc/distribution_utils.py",
  "condition": [
   "$0, $1=num_gpus))"
  ],
  "consequent": [
   "$0, $1=2))"
  ],
  "identifiers": {
   "condition": [
    "num_gpus"
   ],
   "consequent": []
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/astro_cnn_model/astro_cnn_model.py",
  "condition": [
   "def __init__(self, features, labels, hparams, mode):",
   "\t\"\"\"Basic setup. The actual TensorFlow graph is constructed in build().",
   "",
   "    Args:",
   "      features: A dictionary containing \"time_series_features\" and",
   "          \"aux_features\", each of which is a dictionary of named input Tensors.",
   "          All features have dtype float32 and shape [batch_size, length].",
   "      labels: An int64 Tensor with shape [batch_size]. May be None if mode is",
   "          tf.estimator.ModeKeys.PREDICT.",
   "      hparams: A ConfigDict of hyperparameters for building the model.",
   "      mode: A tf.estimator.ModeKeys to specify whether the graph should be built",
   "          for training, evaluation or prediction.",
   "",
   "    Raises:",
   "      ValueError: If mode is invalid.",
   "    \"\"\"",
   "    super(AstroCNNModel, self).__init__(features, labels, hparams, mode) ",
   "\twith $0.variable_scope(\"block_%d\" % ($1 + 1)):"
  ],
  "consequent": [
   "with $0.variable_scope(\"block_{}\".format($1 + 1)):"
  ],
  "identifiers": {
   "condition": [
    "variable_scope",
    "mode",
    "__init__",
    "self",
    "super",
    "features",
    "hparams",
    "labels",
    "AstroCNNModel"
   ],
   "consequent": [
    "variable_scope",
    "format"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/astro_cnn_model/astro_cnn_model.py",
  "condition": [
   "$0=\"conv_%d\" % ($1 + 1))"
  ],
  "consequent": [
   "$0=\"conv_{}\".format($1 + 1))"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "format"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/astro_cnn_model/astro_cnn_model_test.py",
  "condition": [
   "$0: $1.$2, $1.$3, $4 $5 or anything that can"
  ],
  "consequent": [
   "$0: $1.$2, $1.$3, or $4 $5."
  ],
  "identifiers": {
   "condition": [
    "anything",
    "that",
    "can"
   ],
   "consequent": []
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/astro_fc_model/astro_fc_model.py",
  "condition": [
   "def __init__(self, features, labels, $0, mode):",
   "\t\"\"\"Basic setup. The actual TensorFlow graph is constructed in build().",
   "",
   "    Args:",
   "      features: A dictionary containing \"time_series_features\" and",
   "          \"aux_features\", each of which is a dictionary of named input Tensors.",
   "          All features have dtype float32 and shape [batch_size, length].",
   "      labels: An int64 Tensor with shape [batch_size]. May be None if mode is",
   "          tf.estimator.ModeKeys.PREDICT.",
   "      hparams: A ConfigDict of hyperparameters for building the model.",
   "      mode: A tf.estimator.ModeKeys to specify whether the graph should be built",
   "          for training, evaluation or prediction.",
   "",
   "    Raises:",
   "      ValueError: If mode is invalid.",
   "    \"\"\"",
   "    super(AstroFCModel, self).__init__(features, labels, $0, mode) ",
   "\traise ValueError(               \"Unrecognized pooling_type: %s\" % $0.$1)"
  ],
  "consequent": [
   "raise ValueError(\"Unrecognized pooling_type: {}\".format(               $0.$1))"
  ],
  "identifiers": {
   "condition": [
    "mode",
    "AstroFCModel",
    "__init__",
    "self",
    "super",
    "ValueError",
    "features",
    "labels"
   ],
   "consequent": [
    "ValueError",
    "format"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/astro_fc_model/astro_fc_model.py",
  "condition": [
   "$0=\"fully_connected_%d\" % ($1 + 1))"
  ],
  "consequent": [
   "$0=\"fully_connected_{}\".format($1 + 1))"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "format"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/astro_fc_model/astro_fc_model_test.py",
  "condition": [
   "$0: $1.$2, $1.$3, $4 $5 or anything that can"
  ],
  "consequent": [
   "$0: $1.$2, $1.$3, or $4 $5."
  ],
  "identifiers": {
   "condition": [
    "anything",
    "that",
    "can"
   ],
   "consequent": []
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/astro_model/astro_model.py",
  "condition": [
   "raise ValueError(\"Expected mode in %s. Got: %s\" % ($0, $1))"
  ],
  "consequent": [
   "raise ValueError(\"Expected mode in {}. Got: {}\".format($0, $1))"
  ],
  "identifiers": {
   "condition": [
    "ValueError"
   ],
   "consequent": [
    "ValueError",
    "format"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/astro_model/astro_model.py",
  "condition": [
   "$0=\"fully_connected_%s\" % ($1 + 1))"
  ],
  "consequent": [
   "$0=\"fully_connected_{}\".format($1 + 1))"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "format"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/astro_model/astro_model_test.py",
  "condition": [
   "$0: $1.$2, $1.$3, $4 $5 or anything that can"
  ],
  "consequent": [
   "$0: $1.$2, $1.$3, or $4 $5."
  ],
  "identifiers": {
   "condition": [
    "anything",
    "that",
    "can"
   ],
   "consequent": []
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/data/generate_input_records.py",
  "condition": [
   "\"tce_time0bk. Download from: %s\" % $0)"
  ],
  "consequent": [
   "\"tce_time0bk. Download from: {}\".format($0))"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "format"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/data/generate_input_records.py",
  "condition": [
   "$0.append(($1[$2:$3], $4.$5.join("
  ],
  "consequent": [
   "filename = $4.$5.join(         FLAGS.output_dir, \"train-{:05d}-of-{:05d}\".format(             i, FLAGS.num_train_shards))",
   "\t$0.append(($1[$2:$3], filename))"
  ],
  "identifiers": {
   "condition": [
    "append",
    "join"
   ],
   "consequent": [
    "filename",
    "FLAGS",
    "i",
    "num_train_shards",
    "join",
    "append",
    "output_dir",
    "format"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/data/generate_input_records.py",
  "condition": [
   "$0.$1, \"train-%.5d-of-%.5d\" % (i, $0.num_train_shards))))",
   "\t$2.append(($3, $4.$5.join($0.$1,",
   "\t\"val-00000-of-00001\")))",
   "  $2.append(($6, $4.$5.join($0.$1,",
   "\t\"test-00000-of-00001\")))"
  ],
  "consequent": [
   "$2.append(($3,                       $4.$5.join($0.$1, \"val-00000-of-00001\")))",
   "\t$2.append(($6,                       $4.$5.join($0.$1, \"test-00000-of-00001\")))"
  ],
  "identifiers": {
   "condition": [
    "i",
    "num_train_shards",
    "append",
    "join"
   ],
   "consequent": [
    "append",
    "join"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/data/preprocess.py",
  "condition": [
   "raise IOError(\"Failed to find .fits files in %s for Kepler ID %s\" %"
  ],
  "consequent": [
   "raise IOError(\"Failed to find .fits files in {} for Kepler ID {}\".format("
  ],
  "identifiers": {
   "condition": [
    "IOError"
   ],
   "consequent": [
    "format",
    "IOError"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/evaluate.py",
  "condition": [
   "estimator_util.evaluate($0, $1, $2=$3.$2)"
  ],
  "consequent": [
   "from astronet.util import estimator_runner",
   "\teval_steps = None                                           ",
   "  eval_args = {$3.$2: ($1, eval_steps)}",
   "  estimator_runner.evaluate($0, eval_args)"
  ],
  "identifiers": {
   "condition": [
    "estimator_util",
    "evaluate"
   ],
   "consequent": [
    "eval_steps",
    "eval_args",
    "estimator_runner",
    "astronet",
    "evaluate",
    "util"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/models.py",
  "condition": [
   "raise ValueError(\"Unrecognized model name: %s\" % $0)"
  ],
  "consequent": [
   "raise ValueError(\"Unrecognized model name: {}\".format($0))"
  ],
  "identifiers": {
   "condition": [
    "ValueError"
   ],
   "consequent": [
    "ValueError",
    "format"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/models.py",
  "condition": [
   "raise ValueError(\"Unrecognized model name: %s\" % $0)"
  ],
  "consequent": [
   "raise ValueError(\"Unrecognized model name: {}\".format($0))"
  ],
  "identifiers": {
   "condition": [
    "ValueError"
   ],
   "consequent": [
    "ValueError",
    "format"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/models.py",
  "condition": [
   "raise ValueError(\"Config name '%s' not found in configuration module: %s\" %"
  ],
  "consequent": [
   "raise ValueError(         \"Config name '{}' not found in configuration module: {}\".format("
  ],
  "identifiers": {
   "condition": [
    "ValueError"
   ],
   "consequent": [
    "ValueError",
    "format"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/ops/dataset_ops.py",
  "condition": [
   "raise ValueError(\"Unknown input type: %s\" % $0)"
  ],
  "consequent": [
   "raise ValueError(\"Unknown input type: {}\".format($0))"
  ],
  "identifiers": {
   "condition": [
    "ValueError"
   ],
   "consequent": [
    "ValueError",
    "format"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/ops/dataset_ops.py",
  "condition": [
   "raise ValueError(\"Unknown input type: %s\" % $0)"
  ],
  "consequent": [
   "raise ValueError(\"Unknown input type: {}\".format($0))"
  ],
  "identifiers": {
   "condition": [
    "ValueError"
   ],
   "consequent": [
    "ValueError",
    "format"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/ops/dataset_ops.py",
  "condition": [
   "raise ValueError(\"Found no input files matching %s\" % $0)"
  ],
  "consequent": [
   "raise ValueError(\"Found no input files matching {}\".format($0))"
  ],
  "identifiers": {
   "condition": [
    "ValueError"
   ],
   "consequent": [
    "ValueError",
    "format"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/ops/dataset_ops.py",
  "condition": [
   "\"Label IDs must be contiguous integers starting at 0. Got: %s\" %"
  ],
  "consequent": [
   "\"Label IDs must be contiguous integers starting at 0. Got: {}\".format("
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "format"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/ops/input_ops.py",
  "condition": [
   "$0 is $1 $2 $3 $4 $5 $6 $3 shape"
  ],
  "consequent": [
   "$0 is $1 $2 $3 $4 $5 $6 $3 shape [batch_size, length]."
  ],
  "identifiers": {
   "condition": [
    "shape"
   ],
   "consequent": [
    "shape",
    "batch_size",
    "length"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/ops/input_ops.py",
  "condition": [
   "[batch_size, length].",
   "\tTensor (if None, $0 $1 is $2)."
  ],
  "consequent": [
   "Tensor (if None, $0 $1 is $2)."
  ],
  "identifiers": {
   "condition": [
    "batch_size",
    "Tensor",
    "length"
   ],
   "consequent": [
    "Tensor"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/ops/metrics.py",
  "condition": [
   "def _build_metrics($0, $1, $2, $3):"
  ],
  "consequent": [
   "def _build_metrics($0, $1, $2, $3, output_dim=1):"
  ],
  "identifiers": {
   "condition": [
    "_build_metrics"
   ],
   "consequent": [
    "_build_metrics",
    "output_dim"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/ops/metrics.py",
  "condition": [
   "$0 = (predictions.shape[1] == 1)"
  ],
  "consequent": [
   "output_dim: Dimension of model output",
   "\t$0 = output_dim == 1"
  ],
  "identifiers": {
   "condition": [
    "shape",
    "predictions"
   ],
   "consequent": [
    "of",
    "output_dim",
    "Dimension",
    "output",
    "model"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/ops/metrics.py",
  "condition": [
   "predicted_labels = tf.cast(predicted_labels, dtype=tf.bool)               ",
   "\tdef _count_condition(name, labels_value, predicted_value):",
   "\t\"\"\"Creates a counter for given values of predictions and labels.\"\"\"",
   "        count = _metric_variable(name, [], tf.float32)",
   "        is_equal = tf.to_float(             tf.logical_and(                 tf.equal($0, labels_value),                 tf.equal(predicted_labels, predicted_value)))",
   "        update_op = tf.assign_add(count, tf.reduce_sum($1 * is_equal))",
   "        return count.read_value(), update_op                                   ",
   "      metrics[\"confusion_matrix/true_positives\"] = _count_condition(           \"true_positives\", labels_value=True, predicted_value=True)",
   "      metrics[\"confusion_matrix/false_positives\"] = _count_condition(           \"false_positives\", labels_value=False, predicted_value=True)",
   "      metrics[\"confusion_matrix/true_negatives\"] = _count_condition(           \"true_negatives\", labels_value=False, predicted_value=False)",
   "      metrics[\"confusion_matrix/false_negatives\"] = _count_condition(           \"false_negatives\", labels_value=True, predicted_value=False)",
   "    return _build_metrics($0, $2, $1, $3)"
  ],
  "consequent": [
   "return _build_metrics(         $0,         $2,         $1,         $3,         output_dim=model.hparams.output_dim)"
  ],
  "identifiers": {
   "condition": [
    "dtype",
    "reduce_sum",
    "_metric_variable",
    "_count_condition",
    "update_op",
    "logical_and",
    "metrics",
    "labels_value",
    "name",
    "bool",
    "to_float",
    "cast",
    "is_equal",
    "predicted_labels",
    "_build_metrics",
    "predicted_value",
    "tf",
    "assign_add",
    "read_value",
    "count",
    "equal",
    "float32"
   ],
   "consequent": [
    "model",
    "_build_metrics",
    "output_dim",
    "hparams"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/ops/metrics_test.py",
  "condition": [
   "def __init__($0, $1, $2, $3, $4):"
  ],
  "consequent": [
   "class _MockHparams(object):",
   "\t\"\"\"Mock Hparams class to support accessing with dot notation.\"\"\" ",
   "  pass  ",
   "  def __init__($0, $1, $2, $3, $4, output_dim):"
  ],
  "identifiers": {
   "condition": [
    "__init__"
   ],
   "consequent": [
    "output_dim",
    "_MockHparams",
    "__init__",
    "object"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/ops/metrics_test.py",
  "condition": [
   "[0.0, 0.0, 0.0, 1.0],"
  ],
  "consequent": [
   "self.hparams = _MockHparams()",
   "\tself.hparams.output_dim = output_dim",
   "\t[0.0, 0.0, 0.0, 1.0],                      "
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "hparams",
    "_MockHparams",
    "output_dim",
    "self"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/ops/metrics_test.py",
  "condition": [
   "$0 = _MockModel($1, $2, $3, $4)"
  ],
  "consequent": [
   "$0 = _MockModel($1, $2, $3, $4, output_dim=4)"
  ],
  "identifiers": {
   "condition": [
    "_MockModel"
   ],
   "consequent": [
    "_MockModel",
    "output_dim"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/ops/metrics_test.py",
  "condition": [
   "$0 = _MockModel($1, $2, $3, $4)"
  ],
  "consequent": [
   "$0 = _MockModel($1, $2, $3, $4, output_dim=4)"
  ],
  "identifiers": {
   "condition": [
    "_MockModel"
   ],
   "consequent": [
    "_MockModel",
    "output_dim"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/ops/metrics_test.py",
  "condition": [
   "}, sess.run(value_ops))"
  ],
  "consequent": [
   "\"confusion_matrix/label_0_pred_0\": 0,",
   "\t\"confusion_matrix/label_0_pred_1\": 0,",
   "          \"confusion_matrix/label_0_pred_2\": 0,",
   "          \"confusion_matrix/label_0_pred_3\": 0,",
   "          \"confusion_matrix/label_1_pred_0\": 0,",
   "          \"confusion_matrix/label_1_pred_1\": 1,",
   "          \"confusion_matrix/label_1_pred_2\": 0,",
   "          \"confusion_matrix/label_1_pred_3\": 0,",
   "          \"confusion_matrix/label_2_pred_0\": 0,",
   "          \"confusion_matrix/label_2_pred_1\": 0,",
   "          \"confusion_matrix/label_2_pred_2\": 0,",
   "          \"confusion_matrix/label_2_pred_3\": 0,",
   "          \"confusion_matrix/label_3_pred_0\": 0,",
   "          \"confusion_matrix/label_3_pred_1\": 0,",
   "          \"confusion_matrix/label_3_pred_2\": 1,",
   "          \"confusion_matrix/label_3_pred_3\": 0"
  ],
  "identifiers": {
   "condition": [
    "sess",
    "value_ops",
    "run"
   ],
   "consequent": []
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/ops/metrics_test.py",
  "condition": [
   "$0.run($1)"
  ],
  "consequent": [
   "}, $0.run(value_ops)) ",
   "\t$0.run($1)"
  ],
  "identifiers": {
   "condition": [
    "run"
   ],
   "consequent": [
    "value_ops",
    "run"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/ops/metrics_test.py",
  "condition": [
   "$0 = _MockModel($1, $2, $3, $4)"
  ],
  "consequent": [
   "\"confusion_matrix/label_0_pred_0\": 0,",
   "\t\"confusion_matrix/label_0_pred_1\": 0,",
   "          \"confusion_matrix/label_0_pred_2\": 0,",
   "          \"confusion_matrix/label_0_pred_3\": 0,",
   "          \"confusion_matrix/label_1_pred_0\": 0,",
   "          \"confusion_matrix/label_1_pred_1\": 2,",
   "          \"confusion_matrix/label_1_pred_2\": 0,",
   "          \"confusion_matrix/label_1_pred_3\": 0,",
   "          \"confusion_matrix/label_2_pred_0\": 0,",
   "          \"confusion_matrix/label_2_pred_1\": 0,",
   "          \"confusion_matrix/label_2_pred_2\": 0,",
   "          \"confusion_matrix/label_2_pred_3\": 0,",
   "          \"confusion_matrix/label_3_pred_0\": 0,",
   "          \"confusion_matrix/label_3_pred_1\": 0,",
   "          \"confusion_matrix/label_3_pred_2\": 2,",
   "          \"confusion_matrix/label_3_pred_3\": 0",
   "    $0 = _MockModel($1, $2, $3, $4, output_dim=1)"
  ],
  "identifiers": {
   "condition": [
    "_MockModel"
   ],
   "consequent": [
    "_MockModel",
    "output_dim"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/ops/metrics_test.py",
  "condition": [
   "$0 = _MockModel($1, $2, $3, $4)"
  ],
  "consequent": [
   "$0 = _MockModel($1, $2, $3, $4, output_dim=1)"
  ],
  "identifiers": {
   "condition": [
    "_MockModel"
   ],
   "consequent": [
    "_MockModel",
    "output_dim"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/ops/testing.py",
  "condition": [
   "$0 = {}",
   "\t$0[\"time_series_features\"] = {"
  ],
  "consequent": [
   "$0 = {\"time_series_features\": {}, \"aux_features\": {}}",
   "\tfor name, spec in feature_spec.items():",
   "\tftype = \"time_series_features\" if spec[\"is_time_series\"] else \"aux_features\""
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "spec",
    "name",
    "ftype",
    "feature_spec",
    "items"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/ops/testing.py",
  "condition": [
   "$0: $1.$2.$2([$3, $4[\"length\"]])"
  ],
  "consequent": [
   "features[ftype][$0] = $1.$2.$2([$3, $4[\"length\"]])"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "features",
    "ftype"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/ops/training.py",
  "condition": [
   "raise ValueError(\"Unknown optimizer: %s\" % $0.$1)"
  ],
  "consequent": [
   "raise ValueError(\"Unknown optimizer: {}\".format($0.$1))"
  ],
  "identifiers": {
   "condition": [
    "ValueError"
   ],
   "consequent": [
    "ValueError",
    "format"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/train.py",
  "condition": [
   "for $0 in estimator_util.continuous_train_and_eval("
  ],
  "consequent": [
   "from astronet.util import estimator_runner",
   "\tfor $0 in estimator_runner.continuous_train_and_eval("
  ],
  "identifiers": {
   "condition": [
    "estimator_util",
    "continuous_train_and_eval"
   ],
   "consequent": [
    "astronet",
    "util",
    "continuous_train_and_eval",
    "estimator_runner"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/util/config_util.py",
  "condition": [
   "raise ValueError(\"Unable to parse the content of the json file %s. \""
  ],
  "consequent": [
   "raise ValueError(\"Unable to parse the content of the json file {}. \"                        \"Parsing error: {}.\".format("
  ],
  "identifiers": {
   "condition": [
    "ValueError"
   ],
   "consequent": [
    "ValueError",
    "format"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/util/config_util.py",
  "condition": [
   "\"JSON parsing error: %s\\n\\n Input parameter:\\n%s.\" %"
  ],
  "consequent": [
   "\"JSON parsing error: {}\\n\\n Input parameter:\\n{}.\".format("
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "format"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/util/estimator_util.py",
  "condition": [
   "\"/tmp/train-?????-of-00100\". $0 $1 $2 $3 $4-$5 $6 $7 file"
  ],
  "consequent": [
   "class _InputFn(object):",
   "\t\"\"\"Class that acts as a callable input function for Estimator train / eval.\"\"\" ",
   "  def __init__(self,                file_pattern,                input_config,                mode,                shuffle_values_buffer=0,                repeat=1):",
   "\t\"\"\"Initializes the input function.",
   "",
   "    Args:",
   "      file_pattern: File pattern matching input TFRecord files, e.g.",
   "        \"/tmp/train-?????-of-00100\". May also be a comma-separated list of file",
   "        patterns.",
   "      input_config: ConfigDict containing feature and label specifications.",
   "      mode: A tf.estimator.ModeKeys.",
   "      shuffle_values_buffer: If > 0, shuffle examples using a buffer of this",
   "        size.",
   "      repeat: The number of times to repeat the dataset. If None or -1 the",
   "        elements will be repeated indefinitely.",
   "    \"\"\"",
   "    self._file_pattern = file_pattern",
   "    self._input_config = input_config",
   "    self._mode = mode",
   "    self._shuffle_values_buffer = shuffle_values_buffer",
   "    self._repeat = repeat ",
   "  def __call__(self, config, params):",
   "\t\"\"\"Builds the input pipeline.\"\"\"                                                                                                       ",
   "    use_tpu = isinstance(config, tf.contrib.tpu.RunConfig) ",
   "    mode = self._mode",
   "    include_labels = (         mode in [tf.estimator.ModeKeys.TRAIN, tf.estimator.ModeKeys.EVAL])",
   "    reverse_time_series_prob = 0.5 if mode == tf.estimator.ModeKeys.TRAIN else 0",
   "    shuffle_filenames = (mode == tf.estimator.ModeKeys.TRAIN)",
   "    dataset = dataset_ops.build_dataset(         file_pattern=self._file_pattern,         input_config=self._input_config,         batch_size=params[\"batch_size\"],         include_labels=include_labels,         reverse_time_series_prob=reverse_time_series_prob,         shuffle_filenames=shuffle_filenames,         shuffle_values_buffer=self._shuffle_values_buffer,         repeat=self._repeat,         use_tpu=use_tpu) ",
   "    return dataset",
   "\t\"/tmp/train-?????-of-00100\". $0 $1 $2 $3 $4-$5 $6 $7 file"
  ],
  "identifiers": {
   "condition": [
    "file"
   ],
   "consequent": [
    "mode",
    "include_labels",
    "_input_config",
    "self",
    "config",
    "contrib",
    "file_pattern",
    "tpu",
    "RunConfig",
    "shuffle_values_buffer",
    "dataset_ops",
    "_shuffle_values_buffer",
    "_file_pattern",
    "__call__",
    "batch_size",
    "input_config",
    "_mode",
    "__init__",
    "file",
    "isinstance",
    "TRAIN",
    "EVAL",
    "params",
    "_InputFn",
    "_repeat",
    "use_tpu",
    "dataset",
    "tf",
    "object",
    "repeat",
    "estimator",
    "ModeKeys",
    "shuffle_filenames",
    "build_dataset",
    "reverse_time_series_prob"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/util/estimator_util.py",
  "condition": [
   "$0 $1 $2 $3 an $4 $5 and returns (features, labels)."
  ],
  "consequent": [
   "$0 $1 $2 $3 the $4 $5 and returns a tf.data.Dataset",
   "\tobject."
  ],
  "identifiers": {
   "condition": [
    "an",
    "labels",
    "features",
    "returns"
   ],
   "consequent": [
    "returns",
    "Dataset",
    "data",
    "tf",
    "a",
    "the",
    "object"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/util/estimator_util.py",
  "condition": [
   "include_labels = (       $0 in [tf.estimator.ModeKeys.TRAIN, tf.estimator.ModeKeys.EVAL])",
   "\treverse_time_series_prob = 0.5 if $0 == tf.estimator.ModeKeys.TRAIN else 0",
   "  shuffle_filenames = ($0 == tf.estimator.ModeKeys.TRAIN)"
  ],
  "consequent": [
   "return _InputFn(file_pattern, input_config, $0, shuffle_values_buffer,                   repeat)"
  ],
  "identifiers": {
   "condition": [
    "estimator",
    "ModeKeys",
    "EVAL",
    "include_labels",
    "tf",
    "TRAIN",
    "shuffle_filenames",
    "reverse_time_series_prob"
   ],
   "consequent": [
    "repeat",
    "_InputFn",
    "input_config",
    "file_pattern",
    "shuffle_values_buffer"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/util/estimator_util.py",
  "condition": [
   "def input_fn(config, params):",
   "\t\"\"\"Builds an input pipeline that reads a dataset from TFRecord files.\"\"\"                                                                                                       ",
   "    use_tpu = isinstance(config, tf.contrib.tpu.RunConfig)"
  ],
  "consequent": [
   "class _ModelFn(object):",
   "\t\"\"\"Class that acts as a callable model function for Estimator train / eval.\"\"\""
  ],
  "identifiers": {
   "condition": [
    "params",
    "input_fn",
    "use_tpu",
    "config",
    "tf",
    "contrib",
    "tpu",
    "isinstance",
    "RunConfig"
   ],
   "consequent": [
    "_ModelFn",
    "object"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/util/estimator_util.py",
  "condition": [
   "dataset = dataset_ops.build_dataset(         file_pattern=file_pattern,         input_config=input_config,         batch_size=params[\"batch_size\"],         include_labels=include_labels,         reverse_time_series_prob=reverse_time_series_prob,         shuffle_filenames=shuffle_filenames,         shuffle_values_buffer=shuffle_values_buffer,         repeat=repeat,         $0=$0)",
   "\treturn dataset ",
   "  return input_fn  ",
   "def create_model_fn($1, $2, $0=False):"
  ],
  "consequent": [
   "def __init__(self, $1, $2, $0=False):"
  ],
  "identifiers": {
   "condition": [
    "repeat",
    "batch_size",
    "params",
    "dataset",
    "input_config",
    "include_labels",
    "input_fn",
    "shuffle_values_buffer",
    "create_model_fn",
    "file_pattern",
    "shuffle_filenames",
    "build_dataset",
    "dataset_ops",
    "reverse_time_series_prob"
   ],
   "consequent": [
    "__init__",
    "self"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/util/estimator_util.py",
  "condition": [
   "\"\"\"Wraps model_class as an Estimator or TPUEstimator model_fn."
  ],
  "consequent": [
   "\"\"\"Initializes the model function."
  ],
  "identifiers": {
   "condition": [
    "Estimator",
    "model_class",
    "model_fn",
    "TPUEstimator",
    "Wraps",
    "an"
   ],
   "consequent": [
    "model",
    "Initializes",
    "the",
    "function"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/util/estimator_util.py",
  "condition": [
   "$0: AstroModel or a subclass."
  ],
  "consequent": [
   "$0: Model class."
  ],
  "identifiers": {
   "condition": [
    "AstroModel",
    "subclass",
    "a"
   ],
   "consequent": [
    "Model"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/util/estimator_util.py",
  "condition": [
   "$0: $1 of configuration parameters for $2 $3 $4."
  ],
  "consequent": [
   "$0: $1 containing hyperparameters for $2 and training",
   "\t$3 $4."
  ],
  "identifiers": {
   "condition": [
    "of",
    "parameters",
    "configuration"
   ],
   "consequent": [
    "training",
    "hyperparameters",
    "containing"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/util/estimator_util.py",
  "condition": [
   "$0: $1 True, $2 $3 model_fn is $4. $5 an"
  ],
  "consequent": [
   "$0: $1 True, $2 $3 will be $4. $5 an Estimator",
   "\twill be $4."
  ],
  "identifiers": {
   "condition": [
    "an",
    "model_fn"
   ],
   "consequent": [
    "Estimator",
    "an",
    "be",
    "will"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/util/estimator_util.py",
  "condition": [
   "Estimator model_fn is returned. ",
   "\tReturns:",
   "\tmodel_fn: A callable that constructs the model and returns a",
   "\tTPUEstimatorSpec if use_tpu is True, otherwise an EstimatorSpec.",
   "  \"\"\""
  ],
  "consequent": [
   "\"\"\""
  ],
  "identifiers": {
   "condition": [
    "returned",
    "returns",
    "model_fn",
    "Estimator",
    "TPUEstimatorSpec",
    "EstimatorSpec",
    "constructs",
    "callable",
    "that",
    "use_tpu",
    "otherwise",
    "Returns",
    "a",
    "the",
    "model",
    "an",
    "A"
   ],
   "consequent": []
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/util/estimator_util.py",
  "condition": [
   "$0 = copy.deepcopy($0)"
  ],
  "consequent": [
   "self._model_class = model_class",
   "\tself._base_hparams = $0",
   "    self._use_tpu = use_tpu"
  ],
  "identifiers": {
   "condition": [
    "copy",
    "deepcopy"
   ],
   "consequent": [
    "_model_class",
    "model_class",
    "_use_tpu",
    "_base_hparams",
    "use_tpu",
    "self"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/util/estimator_util.py",
  "condition": [
   "def model_fn($0, $1, $2, $3):"
  ],
  "consequent": [
   "def __call__(self, $0, $1, $2, $3):"
  ],
  "identifiers": {
   "condition": [
    "model_fn"
   ],
   "consequent": [
    "__call__",
    "self"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/util/estimator_util.py",
  "condition": [
   "\"Conflicting labels: features['labels'] = %s, labels = %s\" %"
  ],
  "consequent": [
   "\"Conflicting labels: features['labels'] = {}, labels = {}\".format("
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "format"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/util/estimator_util.py",
  "condition": [
   "$0 = model_class($1, $2, $3, $4)"
  ],
  "consequent": [
   "$0 = self._model_class($1, $2, $3, $4)"
  ],
  "identifiers": {
   "condition": [
    "model_class"
   ],
   "consequent": [
    "_model_class",
    "self"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/util/estimator_util.py",
  "condition": [
   "return model_fn"
  ],
  "consequent": [
   "use_tpu = self._use_tpu ",
   "def create_model_fn(model_class, hparams, use_tpu=False):",
   "\t\"\"\"Wraps model_class as an Estimator or TPUEstimator model_fn.",
   "",
   "  Args:",
   "    model_class: AstroModel or a subclass.",
   "    hparams: ConfigDict of configuration parameters for building the model.",
   "    use_tpu: If True, a TPUEstimator model_fn is returned. Otherwise an",
   "      Estimator model_fn is returned.",
   "",
   "  Returns:",
   "    model_fn: A callable that constructs the model and returns a",
   "        TPUEstimatorSpec if use_tpu is True, otherwise an EstimatorSpec.",
   "  \"\"\"",
   "  return _ModelFn(model_class, hparams, use_tpu)"
  ],
  "identifiers": {
   "condition": [
    "model_fn"
   ],
   "consequent": [
    "model_class",
    "_ModelFn",
    "_use_tpu",
    "use_tpu",
    "self",
    "create_model_fn",
    "hparams"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/util/example_util.py",
  "condition": [
   "raise TypeError(\"Requested %s, but Feature has %s\" % ($0, $1))"
  ],
  "consequent": [
   "raise TypeError(\"Requested {}, but Feature has {}\".format(         $0, $1))"
  ],
  "identifiers": {
   "condition": [
    "TypeError"
   ],
   "consequent": [
    "format",
    "TypeError"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/util/example_util.py",
  "condition": [
   "def set_feature($0, $1, $2, $3=None, $4=False):"
  ],
  "consequent": [
   "def set_feature($0,                 $1,                 $2,                 $3=None,                 $4=False,                 bytes_encoding=\"latin-1\"):"
  ],
  "identifiers": {
   "condition": [
    "set_feature"
   ],
   "consequent": [
    "set_feature",
    "bytes_encoding"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/util/example_util.py",
  "condition": [
   "\"Attempting to set duplicate feature with name: %s\" % $0)"
  ],
  "consequent": [
   "bytes_encoding: Codec for encoding strings when kind = 'bytes_list'.",
   "\t\"Attempting to overwrite feature with name: {}. \"",
   "          \"Set allow_overwrite=True if this is desired.\".format($0))"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "strings",
    "encoding",
    "kind",
    "bytes_encoding",
    "Codec",
    "when",
    "format"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/util/example_util.py",
  "condition": [
   "$0 = [str($1).encode(\"latin-1\") for $1 in $0]"
  ],
  "consequent": [
   "$0 = [str($1).encode(bytes_encoding) for $1 in $0]"
  ],
  "identifiers": {
   "condition": [
    "encode",
    "str"
   ],
   "consequent": [
    "encode",
    "str",
    "bytes_encoding"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/util/example_util.py",
  "condition": [
   "raise ValueError(\"Unrecognized kind: %s\" % $0)"
  ],
  "consequent": [
   "raise ValueError(\"Unrecognized kind: {}\".format($0))"
  ],
  "identifiers": {
   "condition": [
    "ValueError"
   ],
   "consequent": [
    "ValueError",
    "format"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/util/example_util.py",
  "condition": [
   "def set_bytes_feature($0, $1, $2, $3=False):"
  ],
  "consequent": [
   "def set_bytes_feature($0,                       $1,                       $2,                       $3=False,                       bytes_encoding=\"latin-1\"):"
  ],
  "identifiers": {
   "condition": [
    "set_bytes_feature"
   ],
   "consequent": [
    "set_bytes_feature",
    "bytes_encoding"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/astronet/util/example_util.py",
  "condition": [
   "set_feature($0, $1, $2, \"bytes_list\", $3)"
  ],
  "consequent": [
   "set_feature($0, $1, $2, \"bytes_list\", $3, bytes_encoding)"
  ],
  "identifiers": {
   "condition": [
    "set_feature"
   ],
   "consequent": [
    "set_feature",
    "bytes_encoding"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/cc/python/postproc.py",
  "condition": [
   "raise ValueError(\"Expected 2 or more output_args. Got: %d\" % $0)"
  ],
  "consequent": [
   "raise ValueError(         \"Expected 2 or more output_args. Got: {}\".format($0))"
  ],
  "identifiers": {
   "condition": [
    "ValueError"
   ],
   "consequent": [
    "ValueError",
    "format"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/kepler_io.py",
  "condition": [
   "LONG_CADENCE_TIME_DELTA_DAYS = 0.02043422"
  ],
  "consequent": [
   "from light_curve_util import util"
  ],
  "identifiers": {
   "condition": [
    "LONG_CADENCE_TIME_DELTA_DAYS"
   ],
   "consequent": [
    "util",
    "light_curve_util"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/kepler_io.py",
  "condition": [
   "$0 $1."
  ],
  "consequent": [
   "                                                                                                                                     ",
   "SIMULATED_DATA_SCRAMBLE_ORDERS = {     \"SCR1\": [0, 13, 14, 15, 16, 9, 10, 11, 12, 5, 6, 7, 8, 1, 2, 3, 4, 17],     \"SCR2\": [0, 1, 2, 3, 4, 13, 14, 15, 16, 9, 10, 11, 12, 5, 6, 7, 8, 17],     \"SCR3\": [0, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 17], } ",
   "\t$0 $1."
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "SIMULATED_DATA_SCRAMBLE_ORDERS"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/kepler_io.py",
  "condition": [
   "$0 = \"%.9d\" % int($0)"
  ],
  "consequent": [
   "$0 = \"{:09d}\".format(int($0))"
  ],
  "identifiers": {
   "condition": [
    "int"
   ],
   "consequent": [
    "int",
    "format"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/kepler_io.py",
  "condition": [
   "$0 = \"kplr%s-%s_INJECTED-%s_%s.fits\" % ($1, $2,                                                        $3,                                                        $4)"
  ],
  "consequent": [
   "$0 = \"kplr{}-{}_INJECTED-{}_{}.fits\".format(             $1, $2, $3, $4)"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "format"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/kepler_io.py",
  "condition": [
   "$0 = \"kplr%s-%s_%s.fits\" % ($1, $2,"
  ],
  "consequent": [
   "$0 = \"kplr{}-{}_{}.fits\".format($1, $2,"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "format"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/kepler_io.py",
  "condition": [
   "invert=False):"
  ],
  "consequent": [
   "def scramble_light_curve(all_time, all_flux, all_quarters, scramble_type):",
   "\t\"\"\"Scrambles a light curve according to a given scrambling procedure.",
   "",
   "  Args:",
   "    all_time: List holding arrays of time values, each containing a quarter of",
   "      time data.",
   "    all_flux: List holding arrays of flux values, each containing a quarter of",
   "      flux data.",
   "    all_quarters: List of integers specifying which quarters are present in",
   "      the light curve (max is 18: Q0...Q17).",
   "    scramble_type: String specifying the scramble order, one of {'SCR1', 'SCR2',",
   "      'SCR3'}.",
   "",
   "  Returns:",
   "    scr_flux: Scrambled flux values; the same list as the input flux in another",
   "      order.",
   "    scr_time: Time values, re-partitioned to match sizes of the scr_flux lists.",
   "  \"\"\"",
   "  order = SIMULATED_DATA_SCRAMBLE_ORDERS[scramble_type]",
   "  scr_flux = []",
   "  for quarter in order:                                                     ",
   "\tif quarter in all_quarters:",
   "\tscr_flux.append(all_flux[all_quarters.index(quarter)]) ",
   "  scr_time = util.reshard_arrays(all_time, scr_flux) ",
   "  return scr_time, scr_flux  ",
   "\tscramble_type=None,",
   "                            interpolate_missing_time=False):"
  ],
  "identifiers": {
   "condition": [
    "invert"
   ],
   "consequent": [
    "scramble_light_curve",
    "scramble_type",
    "quarter",
    "SIMULATED_DATA_SCRAMBLE_ORDERS",
    "all_time",
    "all_quarters",
    "append",
    "scr_flux",
    "interpolate_missing_time",
    "index",
    "scr_time",
    "reshard_arrays",
    "util",
    "order",
    "all_flux"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/kepler_io.py",
  "condition": [
   "invert: $0 $1 invert $2 $3 measurements by multiplying by -1."
  ],
  "consequent": [
   "scramble_type: What scrambling procedure $1 use: 'SCR1', 'SCR2', or 'SCR3'",
   "\t(pg 9: https://exoplanetarchive.ipac.caltech.edu/docs/KSCI-19114-002.pdf).",
   "    interpolate_missing_time: $0 $1 interpolate missing (NaN) time values.",
   "\tThis should only affect $2 output if scramble_type is specified (NaN time       values typically come with NaN $3 values, which are removed anyway, but       scrambing decouples NaN time values from NaN $3 values)."
  ],
  "identifiers": {
   "condition": [
    "invert",
    "measurements",
    "multiplying",
    "by"
   ],
   "consequent": [
    "pdf",
    "scramble_type",
    "procedure",
    "use",
    "output",
    "interpolate_missing_time",
    "https",
    "pg",
    "interpolate",
    "NaN",
    "caltech",
    "time",
    "scrambling",
    "docs",
    "which",
    "anyway",
    "should",
    "come",
    "are",
    "but",
    "removed",
    "edu",
    "This",
    "typically",
    "decouples",
    "What",
    "specified",
    "KSCI",
    "exoplanetarchive",
    "affect",
    "scrambing",
    "missing",
    "ipac",
    "values",
    "only"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/kepler_io.py",
  "condition": [
   "$0: $1 $2 $3 $4 $5 corresponding to $6 time $5 in",
   "\tall_time."
  ],
  "consequent": [
   "$0: $1 $2 $3 $4 $5; $6 flux values $3 $6 light curve."
  ],
  "identifiers": {
   "condition": [
    "to",
    "time",
    "corresponding",
    "all_time"
   ],
   "consequent": [
    "curve",
    "values",
    "light",
    "flux"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/kepler_io.py",
  "condition": [
   "$0 = $1.TIME"
  ],
  "consequent": [
   "all_quarters = []",
   "\tquarter = hdu_list[\"PRIMARY\"].header[\"QUARTER\"] ",
   "    $0 = $1.TIME"
  ],
  "identifiers": {
   "condition": [
    "TIME"
   ],
   "consequent": [
    "quarter",
    "all_quarters",
    "header",
    "TIME",
    "hdu_list"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/kepler_io.py",
  "condition": [
   "                         ",
   "\tvalid_indices = np.where(np.isfinite(flux))",
   "    $0 = $0[valid_indices]",
   "    flux = flux[valid_indices] ",
   "    if invert:",
   "\tflux *= -1 ",
   "    if $0.$1:"
  ],
  "consequent": [
   "if not $0.$1:",
   "\tcontinue                                                             ",
   "    if interpolate_missing_time:",
   "\t$0 = util.interpolate_missing_time($0, light_curve.CADENCENO)"
  ],
  "identifiers": {
   "condition": [
    "isfinite",
    "flux",
    "invert",
    "where",
    "np",
    "valid_indices"
   ],
   "consequent": [
    "util",
    "CADENCENO",
    "light_curve",
    "interpolate_missing_time"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/kepler_io.py",
  "condition": [
   "$0.append($1)"
  ],
  "consequent": [
   "$0.append($1)",
   "\tall_quarters.append(quarter) ",
   "  if scramble_type:",
   "\tall_time, $0 = scramble_light_curve(all_time, $0, all_quarters,                                               scramble_type)                                                     ",
   "  for i, (time, $1) in enumerate(zip(all_time, $0)):",
   "\tflux_and_time_finite = np.logical_and(np.isfinite($1), np.isfinite(time))",
   "    all_time[i] = time[flux_and_time_finite]",
   "    $0[i] = $1[flux_and_time_finite]"
  ],
  "identifiers": {
   "condition": [
    "append"
   ],
   "consequent": [
    "zip",
    "scramble_light_curve",
    "flux_and_time_finite",
    "quarter",
    "scramble_type",
    "isfinite",
    "i",
    "all_quarters",
    "append",
    "all_time",
    "enumerate",
    "np",
    "logical_and",
    "time"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/kepler_io_test.py",
  "condition": [
   "$0.$1.join($2.$3, \"0114/011442793/kplr011442793-%s_llc.fits\")"
  ],
  "consequent": [
   "import numpy as np ",
   "\tdef testScrambleLightCurve($2):",
   "\tall_flux = [[11, 12], [21], [np.nan, np.nan, 33], [41, 42]]",
   "    all_time = [[101, 102], [201], [301, 302, 303], [401, 402]]",
   "    all_quarters = [3, 4, 7, 14]",
   "    scramble_type = \"SCR1\"                                           ",
   "    scr_time, scr_flux = kepler_io.scramble_light_curve(         all_time, all_flux, all_quarters, scramble_type)                                              ",
   "    gold_flux = [[41, 42], [np.nan, np.nan, 33], [11, 12], [21]]",
   "    gold_time = [[101, 102], [201, 301, 302], [303, 401], [402]] ",
   "    $2.assertEqual(len(gold_flux), len(scr_flux))",
   "    $2.assertEqual(len(gold_time), len(scr_time)) ",
   "    for i in range(len(gold_flux)):",
   "\tnp.testing.assert_array_equal(gold_flux[i], scr_flux[i])",
   "      np.testing.assert_array_equal(gold_time[i], scr_time[i])",
   "\t$0.$1.join($2.$3,                      \"0114/011442793/kplr011442793-{}_llc.fits\".format(q))"
  ],
  "identifiers": {
   "condition": [
    "join"
   ],
   "consequent": [
    "testScrambleLightCurve",
    "scramble_type",
    "kepler_io",
    "all_flux",
    "scramble_light_curve",
    "all_quarters",
    "len",
    "testing",
    "nan",
    "i",
    "format",
    "range",
    "scr_flux",
    "assertEqual",
    "gold_time",
    "numpy",
    "all_time",
    "join",
    "scr_time",
    "np",
    "q",
    "assert_array_equal",
    "gold_flux"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/kepler_io_test.py",
  "condition": [
   "$0.$1.join($2.$3, \"0114/011442793/kplr011442793-%s_llc.fits\")"
  ],
  "consequent": [
   "$0.$1.join($2.$3,                      \"0114/011442793/kplr011442793-{}_llc.fits\".format(q))"
  ],
  "identifiers": {
   "condition": [
    "join"
   ],
   "consequent": [
    "join",
    "q",
    "format"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/median_filter.py",
  "condition": [
   "raise ValueError(\"num_bins must be at least 2. Got: %d\" % $0)"
  ],
  "consequent": [
   "raise ValueError(\"num_bins must be at least 2. Got: {}\".format($0))"
  ],
  "identifiers": {
   "condition": [
    "ValueError"
   ],
   "consequent": [
    "ValueError",
    "format"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/median_filter.py",
  "condition": [
   "raise ValueError(\"len(x) must be at least 2. Got: %s\" % $0)"
  ],
  "consequent": [
   "raise ValueError(\"len(x) must be at least 2. Got: {}\".format($0))"
  ],
  "identifiers": {
   "condition": [
    "ValueError"
   ],
   "consequent": [
    "ValueError",
    "format"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/median_filter.py",
  "condition": [
   "raise ValueError(\"len(x) (got: %d) must equal len(y) (got: %d)\" % (x_len,"
  ],
  "consequent": [
   "raise ValueError(\"len(x) (got: {}) must equal len(y) (got: {})\".format("
  ],
  "identifiers": {
   "condition": [
    "ValueError",
    "x_len"
   ],
   "consequent": [
    "ValueError",
    "format"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/median_filter.py",
  "condition": [
   "len($0)))"
  ],
  "consequent": [
   "x_len, len($0)))"
  ],
  "identifiers": {
   "condition": [
    "len"
   ],
   "consequent": [
    "len",
    "x_len"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/median_filter.py",
  "condition": [
   "raise ValueError(\"x_min (got: %d) must be less than x_max (got: %d)\" %"
  ],
  "consequent": [
   "raise ValueError(\"x_min (got: {}) must be less than x_max (got: {})\".format("
  ],
  "identifiers": {
   "condition": [
    "ValueError"
   ],
   "consequent": [
    "ValueError",
    "format"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/median_filter.py",
  "condition": [
   "\"(got: %d)\" % ($0, $1[-1]))"
  ],
  "consequent": [
   "\"(got: {})\".format($0, $1[-1]))"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "format"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/median_filter.py",
  "condition": [
   "raise ValueError(\"bin_width must be positive. Got: %d\" % $0)"
  ],
  "consequent": [
   "raise ValueError(\"bin_width must be positive. Got: {}\".format($0))"
  ],
  "identifiers": {
   "condition": [
    "ValueError"
   ],
   "consequent": [
    "ValueError",
    "format"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/median_filter.py",
  "condition": [
   "\"bin_width (got: %d) must be less than x_max - x_min (got: %d)\" %"
  ],
  "consequent": [
   "\"bin_width (got: {}) must be less than x_max - x_min (got: {})\".format("
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "format"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/util.py",
  "condition": [
   "$0 $1."
  ],
  "consequent": [
   "import scipy.interpolate",
   "\t$0 $1."
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "scipy",
    "interpolate"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/util.py",
  "condition": [
   "with $0 $1 missing ($2)."
  ],
  "consequent": [
   "def interpolate_missing_time(time, cadence_no=None, fill_value=\"extrapolate\"):",
   "\t\"\"\"Interpolates missing (NaN or Inf) time values.",
   "",
   "  Args:",
   "    time: A numpy array of monotonically increasing values, with missing values",
   "      denoted by NaN or Inf.",
   "    cadence_no: Optional numpy array of cadence numbers corresponding to the",
   "      time values. If not provided, missing time values are assumed to be evenly",
   "      spaced between present time values.",
   "    fill_value: Specifies how missing time values should be treated at the",
   "      beginning and end of the array. See scipy.interpolate.interp1d.",
   "",
   "  Returns:",
   "    A numpy array of the same length as the input time array, with NaN/Inf",
   "    values replaced with interpolated values.",
   "",
   "  Raises:",
   "    ValueError: If fewer than 2 values of time are finite.",
   "  \"\"\"",
   "  if cadence_no is None:",
   "\tcadence_no = np.arange(len(time)) ",
   "  is_finite = np.isfinite(time)",
   "  num_finite = np.sum(is_finite)",
   "  if num_finite < 2:",
   "\traise ValueError(         \"Cannot interpolate time with fewer than 2 finite values. Got \"         \"len(time) = {} with {} finite values.\".format(len(time), num_finite)) ",
   "  interpolate_fn = scipy.interpolate.interp1d(       cadence_no[is_finite],       time[is_finite],       copy=False,       bounds_error=False,       fill_value=fill_value,       assume_sorted=True) ",
   "  return interpolate_fn(cadence_no)  ",
   "\twith $0 $1 missing ($2)."
  ],
  "identifiers": {
   "condition": [
    "missing"
   ],
   "consequent": [
    "is_finite",
    "isfinite",
    "scipy",
    "interpolate_missing_time",
    "ValueError",
    "interpolate",
    "interp1d",
    "time",
    "len",
    "interpolate_fn",
    "fill_value",
    "bounds_error",
    "arange",
    "copy",
    "cadence_no",
    "missing",
    "sum",
    "np",
    "num_finite",
    "assume_sorted",
    "format"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/util.py",
  "condition": [
   "for $0, $1, $2 in zip("
  ],
  "consequent": [
   "for $0, $1, $2 in zip(all_time, all_masked_time,"
  ],
  "identifiers": {
   "condition": [
    "zip"
   ],
   "consequent": [
    "all_time",
    "zip",
    "all_masked_time"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/util.py",
  "condition": [
   "all_time, all_masked_time, $0):"
  ],
  "consequent": [
   "$0):"
  ],
  "identifiers": {
   "condition": [
    "all_time",
    "all_masked_time"
   ],
   "consequent": []
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/util.py",
  "condition": [
   "\"Too many transits! Time range is [%.2f, %.2f] and period is %.2e.\" %"
  ],
  "consequent": [
   "def reshard_arrays(xs, ys):",
   "\t\"\"\"Reshards arrays in xs to match the lengths of arrays in ys.",
   "",
   "  Args:",
   "    xs: List of 1d numpy arrays with the same total length as ys.",
   "    ys: List of 1d numpy arrays with the same total length as xs.",
   "",
   "  Returns:",
   "    A list of numpy arrays containing the same elements as xs, in the same",
   "    order, but with array lengths matching the pairwise array in ys.",
   "",
   "  Raises:",
   "    ValueError: If xs and ys do not have the same total length.",
   "  \"\"\"                                                                                 ",
   "  boundaries = np.cumsum([len(y) for y in ys])",
   "  concat_x = np.concatenate(xs)",
   "  if len(concat_x) != boundaries[-1]:",
   "\traise ValueError(         \"xs and ys do not have the same total length ({} vs. {}).\".format(             len(concat_x), boundaries[-1]))",
   "  boundaries = boundaries[:-1]                                  ",
   "  return np.split(concat_x, boundaries)  ",
   "def uniform_cadence_light_curve(cadence_no, time, flux):",
   "\t\"\"\"Combines data into a single light curve with uniform cadence numbers.",
   "",
   "  Args:",
   "    cadence_no: numpy array; the cadence numbers of the light curve.",
   "    time: numpy array; the time values of the light curve.",
   "    flux: numpy array; the flux values of the light curve.",
   "",
   "  Returns:",
   "    cadence_no: numpy array; the cadence numbers of the light curve with no",
   "      gaps. It starts and ends at the minimum and maximum cadence numbers in the",
   "      input light curve, respectively.",
   "    time: numpy array; the time values of the light curve. Missing data points",
   "      have value zero and correspond to a False value in the mask.",
   "    flux: numpy array; the time values of the light curve. Missing data points",
   "      have value zero and correspond to a False value in the mask.",
   "    mask: Boolean numpy array; False indicates missing data points, where",
   "      missing data points are those that have no corresponding cadence number in",
   "      the input or those where at least one of the cadence number, time value,",
   "      or flux value is NaN/Inf.",
   "",
   "  Raises:",
   "    ValueError: If there are duplicate cadence numbers in the input.",
   "  \"\"\"",
   "  min_cadence_no = np.min(cadence_no)",
   "  max_cadence_no = np.max(cadence_no) ",
   "  out_cadence_no = np.arange(       min_cadence_no, max_cadence_no + 1, dtype=cadence_no.dtype)",
   "  out_time = np.zeros_like(out_cadence_no, dtype=time.dtype)",
   "  out_flux = np.zeros_like(out_cadence_no, dtype=flux.dtype)",
   "  out_mask = np.zeros_like(out_cadence_no, dtype=np.bool) ",
   "  for c, t, f in zip(cadence_no, time, flux):",
   "\tif np.isfinite(c) and np.isfinite(t) and np.isfinite(f):",
   "\ti = int(c - min_cadence_no)",
   "      if out_mask[i]:",
   "\traise ValueError(\"Duplicate cadence number: {}\".format(c))",
   "      out_time[i] = t",
   "      out_flux[i] = f",
   "      out_mask[i] = True ",
   "  return out_cadence_no, out_time, out_flux, out_mask  ",
   "\t\"Too many transits! Time range is [{:.4f}, {:.4f}] and period is \""
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "out_flux",
    "boundaries",
    "isfinite",
    "uniform_cadence_light_curve",
    "concat_x",
    "concatenate",
    "zeros_like",
    "dtype",
    "f",
    "ys",
    "ValueError",
    "out_time",
    "time",
    "split",
    "max",
    "bool",
    "len",
    "max_cadence_no",
    "zip",
    "i",
    "int",
    "y",
    "xs",
    "min_cadence_no",
    "reshard_arrays",
    "out_cadence_no",
    "flux",
    "min",
    "arange",
    "c",
    "cadence_no",
    "t",
    "np",
    "out_mask",
    "format",
    "cumsum"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/util.py",
  "condition": [
   "($0, $1, $2.$3))"
  ],
  "consequent": [
   "\"{:.4e}.\".format($0, $1, $2.$3))"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "format"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/third_party/kepler_spline/kepler_spline.py",
  "condition": [
   "\"Cannot fit a spline on less than 4 points. Got %d points.\" % len($0))"
  ],
  "consequent": [
   "\"Cannot fit a spline on less than 4 points. Got {} points.\".format(             len($0)))"
  ],
  "identifiers": {
   "condition": [
    "len"
   ],
   "consequent": [
    "len",
    "format"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/third_party/kepler_spline/kepler_spline.py",
  "condition": [
   "\"outliers, got %d points.\" % $0.sum($1))"
  ],
  "consequent": [
   "\"outliers, got {} points.\".format($0.sum($1)))"
  ],
  "identifiers": {
   "condition": [
    "sum"
   ],
   "consequent": [
    "sum",
    "format"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/third_party/kepler_spline/kepler_spline.py",
  "condition": [
   "\"points to fit the spline in one of the intervals.\" % $0)"
  ],
  "consequent": [
   "\"points to fit the spline in one of the intervals.\".format($0))"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "format"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/third_party/kepler_spline/kepler_spline.py",
  "condition": [
   "$0: $1 $2 $3 for $4 $5 $6 $7 in $4"
  ],
  "consequent": [
   "$0: $1 $2 $3 for $4 $5 $6 $7 in $4 Bayesian"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "Bayesian"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/third_party/kepler_spline/kepler_spline.py",
  "condition": [
   "Bayesian $0 $1."
  ],
  "consequent": [
   "$0 $1."
  ],
  "identifiers": {
   "condition": [
    "Bayesian"
   ],
   "consequent": []
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/third_party/kepler_spline/kepler_spline.py",
  "condition": [
   "$0 $1 $2 $3. $4 $5 $6 $7 allow"
  ],
  "consequent": [
   "$0 $1 $2 $3. $4 $5 $6 $7 allow more"
  ],
  "identifiers": {
   "condition": [
    "allow"
   ],
   "consequent": [
    "more",
    "allow"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/third_party/kepler_spline/kepler_spline.py",
  "condition": [
   "more $0 $1 $2 used ($3.$4. $5 break-$6 $7), and"
  ],
  "consequent": [
   "$0 $1 $2 used ($3.$4. $5 break-$6 $7), and vice-versa."
  ],
  "identifiers": {
   "condition": [
    "used",
    "more"
   ],
   "consequent": [
    "used",
    "versa",
    "vice"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/third_party/kepler_spline/kepler_spline.py",
  "condition": [
   "vice-versa.",
   "\t$0 $1 values ($2 $3 $4) $5 $6 $7 $8"
  ],
  "consequent": [
   "$0 $1 values ($2 $3 $4) $5 $6 $7 $8 logging"
  ],
  "identifiers": {
   "condition": [
    "versa",
    "values",
    "vice"
   ],
   "consequent": [
    "values",
    "logging"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/third_party/kepler_spline/kepler_spline.py",
  "condition": [
   "logging $0 if $1 $2 $3 for $4 $5 $6."
  ],
  "consequent": [
   "$0 if $1 $2 $3 for $4 $5 $6."
  ],
  "identifiers": {
   "condition": [
    "logging"
   ],
   "consequent": []
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/third_party/kepler_spline/kepler_spline.py",
  "condition": [
   "$0.warn(\"Bad bkspace %.4f: %s\" % ($1, $2))"
  ],
  "consequent": [
   "$0.warn(\"Bad bkspace {}: {}\".format($1, $2))"
  ],
  "identifiers": {
   "condition": [
    "warn"
   ],
   "consequent": [
    "format",
    "warn"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/third_party/kepler_spline/kepler_spline.py",
  "condition": [
   "$0 $1 $2 $3. $4 $5 $6 $7 allow"
  ],
  "consequent": [
   "$0 $1 $2 $3. $4 $5 $6 $7 allow more"
  ],
  "identifiers": {
   "condition": [
    "allow"
   ],
   "consequent": [
    "more",
    "allow"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/third_party/kepler_spline/kepler_spline.py",
  "condition": [
   "more $0 $1 $2 used ($3.$4. $5 break-$6 $7), and"
  ],
  "consequent": [
   "$0 $1 $2 used ($3.$4. $5 break-$6 $7), and vice-versa."
  ],
  "identifiers": {
   "condition": [
    "used",
    "more"
   ],
   "consequent": [
    "used",
    "versa",
    "vice"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/third_party/kepler_spline/kepler_spline.py",
  "condition": [
   "vice-versa.",
   "\t$0 $1 values ($2 $3 $4) $5 $6 $7 $8"
  ],
  "consequent": [
   "$0 $1 values ($2 $3 $4) $5 $6 $7 $8 logging"
  ],
  "identifiers": {
   "condition": [
    "versa",
    "values",
    "vice"
   ],
   "consequent": [
    "values",
    "logging"
   ]
  }
 },
 {
  "number": 5546,
  "sha": "763663dea9e1ac54ecb0f11178a6f814a95a3737",
  "author": "cshallue",
  "participant": "googlebot",
  "created_at": "2018-10-16 18:01:00",
  "merged_at": "2018-10-16 18:52:07",
  "merged_by": "cshallue",
  "file_path": "research/astronet/third_party/kepler_spline/kepler_spline.py",
  "condition": [
   "logging $0 if $1 $2 $3 for $4 $5 $6."
  ],
  "consequent": [
   "$0 if $1 $2 $3 for $4 $5 $6."
  ],
  "identifiers": {
   "condition": [
    "logging"
   ],
   "consequent": []
  }
 },
 {
  "number": 5557,
  "sha": "3ec25e5dc3baa2d7efd7db24f5aa82a4c63d1570",
  "author": "shizhiw",
  "participant": "robieta",
  "created_at": "2018-10-17 22:50:24",
  "merged_at": "2018-10-18 00:37:17",
  "merged_by": "shizhiw",
  "file_path": "official/recommendation/neumf_model.py",
  "condition": [
   "import google3",
   "from google3.third_party.tensorflow_models.$0.$1 import movielens"
  ],
  "consequent": [
   "from $0.$1 import movielens"
  ],
  "identifiers": {
   "condition": [
    "tensorflow_models",
    "google3",
    "movielens",
    "third_party"
   ],
   "consequent": [
    "movielens"
   ]
  }
 },
 {
  "number": 5557,
  "sha": "3ec25e5dc3baa2d7efd7db24f5aa82a4c63d1570",
  "author": "shizhiw",
  "participant": "robieta",
  "created_at": "2018-10-17 22:50:24",
  "merged_at": "2018-10-18 00:37:17",
  "merged_by": "shizhiw",
  "file_path": "official/recommendation/neumf_model.py",
  "condition": [
   "from google3.third_party.tensorflow_models.$0.$1 import $2 as $3",
   "from google3.third_party.tensorflow_models.$0.$1 import stat_utils"
  ],
  "consequent": [
   "from $0.$1 import $2 as $3",
   "from $0.$1 import stat_utils"
  ],
  "identifiers": {
   "condition": [
    "tensorflow_models",
    "google3",
    "stat_utils",
    "third_party"
   ],
   "consequent": [
    "stat_utils"
   ]
  }
 },
 {
  "number": 5598,
  "sha": "c5dbd487bb9278ba821f087874bdcf4e404f49bd",
  "author": "josh11b",
  "participant": "robieta",
  "created_at": "2018-10-24 18:59:23",
  "merged_at": "2018-10-25 20:13:41",
  "merged_by": "josh11b",
  "file_path": "official/utils/misc/distribution_utils.py",
  "condition": [
   "$0 $1.$2.$3.$4 for $5 algorithms."
  ],
  "consequent": [
   "$0 $1.$2.$3.$4 for $5"
  ],
  "identifiers": {
   "condition": [
    "algorithms"
   ],
   "consequent": []
  }
 },
 {
  "number": 5598,
  "sha": "c5dbd487bb9278ba821f087874bdcf4e404f49bd",
  "author": "josh11b",
  "participant": "robieta",
  "created_at": "2018-10-24 18:59:23",
  "merged_at": "2018-10-25 20:13:41",
  "merged_by": "josh11b",
  "file_path": "official/utils/misc/distribution_utils.py",
  "condition": [
   "$0 None, $1 $2 $3 $4 $5 $6 $7."
  ],
  "consequent": [
   "algorithms. $0 None, $1 $2 $3 $4 $5 $6",
   "\t$7."
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "algorithms"
   ]
  }
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "merged_at": "2019-01-08 22:38:10",
  "merged_by": "robieta",
  "file_path": "official/recommendation/data_pipeline.py",
  "condition": [
   "import collections",
   "import pickle",
   "import struct"
  ],
  "consequent": [
   "import typing"
  ],
  "identifiers": {
   "condition": [
    "struct",
    "pickle",
    "collections"
   ],
   "consequent": [
    "typing"
   ]
  }
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "merged_at": "2019-01-08 22:38:10",
  "merged_by": "robieta",
  "file_path": "official/recommendation/data_pipeline.py",
  "condition": [
   "$0=None):"
  ],
  "consequent": [
   "$0=None, deterministic=False):                                                                  ",
   "\t\"\"\"Constructs a `DatasetManager` instance.",
   "    Args:",
   "      is_training: Boolean of whether the data provided is training or",
   "        evaluation data. This determines whether to reuse the data",
   "        (if is_training=False) and the exact structure to use when storing and",
   "        yielding data.",
   "      stream_files: Boolean indicating whether data should be serialized and",
   "        written to file shards.",
   "      batches_per_epoch: The number of batches in a single epoch.",
   "      shard_root: The base directory to be used when stream_files=True.",
   "      deterministic: Forgo non-deterministic speedups. (i.e. sloppy=True)",
   "    \"\"\""
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "deterministic"
   ]
  }
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "merged_at": "2019-01-08 22:38:10",
  "merged_by": "robieta",
  "file_path": "official/recommendation/data_pipeline.py",
  "condition": [
   "$0.$1.put(($2, $2.pop(\"labels\")))",
   "\telse:",
   "\t$0._result_reuse.append($2)"
  ],
  "consequent": [
   "$0._deterministic = deterministic",
   "\t$2 = ($2, $2.pop(\"labels\"))",
   "      $0.$1.put($2)"
  ],
  "identifiers": {
   "condition": [
    "append",
    "put",
    "pop",
    "_result_reuse"
   ],
   "consequent": [
    "put",
    "_deterministic",
    "pop",
    "deterministic"
   ]
  }
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "merged_at": "2019-01-08 22:38:10",
  "merged_by": "robieta",
  "file_path": "official/recommendation/data_pipeline.py",
  "condition": [
   "elif not $0.$1:",
   "\t$0._result_queue.put(True)                 "
  ],
  "consequent": [
   "assert $0.$1 or epochs_between_evals == 1"
  ],
  "identifiers": {
   "condition": [
    "_result_queue",
    "put"
   ],
   "consequent": [
    "epochs_between_evals"
   ]
  }
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "merged_at": "2019-01-08 22:38:10",
  "merged_by": "robieta",
  "file_path": "official/recommendation/data_pipeline.py",
  "condition": [
   "                                            ",
   "\t$0._result_queue.put($0._result_queue.get(timeout=300))",
   "      assert len($0.$1) == $0.$2"
  ],
  "consequent": [
   "if $0.$1:",
   "\tassert len($0.$1) == $0.$2"
  ],
  "identifiers": {
   "condition": [
    "get",
    "put",
    "_result_queue",
    "timeout",
    "len"
   ],
   "consequent": [
    "len"
   ]
  }
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "merged_at": "2019-01-08 22:38:10",
  "merged_by": "robieta",
  "file_path": "official/recommendation/data_pipeline.py",
  "condition": [
   "assert epochs_between_evals == 1"
  ],
  "consequent": [],
  "identifiers": {
   "condition": [
    "epochs_between_evals"
   ],
   "consequent": []
  }
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "merged_at": "2019-01-08 22:38:10",
  "merged_by": "robieta",
  "file_path": "official/recommendation/data_pipeline.py",
  "condition": [
   "yield i"
  ],
  "consequent": [
   "yield i",
   "\telse:                       ",
   "\tfor _ in range(self._batches_per_epoch * epochs_between_evals):",
   "\tresult = self._result_queue.get(timeout=300)",
   "          self._result_reuse.append(result)",
   "          yield result"
  ],
  "identifiers": {
   "condition": [
    "i"
   ],
   "consequent": [
    "_batches_per_epoch",
    "_",
    "result",
    "get",
    "i",
    "_result_queue",
    "timeout",
    "append",
    "range",
    "self",
    "_result_reuse",
    "epochs_between_evals"
   ]
  }
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "merged_at": "2019-01-08 22:38:10",
  "merged_by": "robieta",
  "file_path": "official/recommendation/data_pipeline.py",
  "condition": [
   "$0=$1.$2, $3=1)"
  ],
  "consequent": [
   "$0=$1.$2, $3=1,",
   "\tsloppy=not self._deterministic)"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "sloppy",
    "_deterministic",
    "self"
   ]
  }
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "merged_at": "2019-01-08 22:38:10",
  "merged_by": "robieta",
  "file_path": "official/recommendation/data_pipeline.py",
  "condition": [
   "stream_files"
  ],
  "consequent": [
   "stream_files,                        ",
   "\tdeterministic=False                 "
  ],
  "identifiers": {
   "condition": [
    "stream_files"
   ],
   "consequent": [
    "stream_files",
    "deterministic"
   ]
  }
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "merged_at": "2019-01-08 22:38:10",
  "merged_by": "robieta",
  "file_path": "official/recommendation/data_pipeline.py",
  "condition": [
   "True, $0, $1.$2, $1.$3)"
  ],
  "consequent": [
   "$1._shuffle_with_forkpool = not $0",
   "\tTrue, $0, $1.$2, $1.$3,",
   "        deterministic)"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "_shuffle_with_forkpool",
    "deterministic"
   ]
  }
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "merged_at": "2019-01-08 22:38:10",
  "merged_by": "robieta",
  "file_path": "official/recommendation/data_pipeline.py",
  "condition": [
   "False, $0, $1.$2, $1.$3)"
  ],
  "consequent": [
   "False, $0, $1.$2, $1.$3,",
   "\tdeterministic)"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "deterministic"
   ]
  }
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "merged_at": "2019-01-08 22:38:10",
  "merged_by": "robieta",
  "file_path": "official/recommendation/data_pipeline.py",
  "condition": [
   "$0._current_epoch_order_lock = threading.RLock()"
  ],
  "consequent": [
   "$0.deterministic = deterministic"
  ],
  "identifiers": {
   "condition": [
    "_current_epoch_order_lock",
    "RLock",
    "threading"
   ],
   "consequent": [
    "deterministic"
   ]
  }
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "merged_at": "2019-01-08 22:38:10",
  "merged_by": "robieta",
  "file_path": "official/recommendation/data_pipeline.py",
  "condition": [
   "def __repr__($0):"
  ],
  "consequent": [
   "def __str__($0):"
  ],
  "identifiers": {
   "condition": [
    "__repr__"
   ],
   "consequent": [
    "__str__"
   ]
  }
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "merged_at": "2019-01-08 22:38:10",
  "merged_by": "robieta",
  "file_path": "official/recommendation/data_pipeline.py",
  "condition": [
   "return super($0, $1).__repr__() + \"\\n\" + summary"
  ],
  "consequent": [
   "return super($0, $1).__str__() + \"\\n\" + summary"
  ],
  "identifiers": {
   "condition": [
    "__repr__",
    "super",
    "summary"
   ],
   "consequent": [
    "__str__",
    "super",
    "summary"
   ]
  }
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "merged_at": "2019-01-08 22:38:10",
  "merged_by": "robieta",
  "file_path": "official/recommendation/data_pipeline.py",
  "condition": [
   "def _get_order_chunk(self):",
   "\twith self._current_epoch_order_lock:",
   "\tbatch_indices, self._current_epoch_order = (           self._current_epoch_order[:self.train_batch_size],           self._current_epoch_order[self.train_batch_size:]) ",
   "      return batch_indices"
  ],
  "consequent": [
   "\"\"\"Determine the number of batches, rounding up to fill all devices.\"\"\""
  ],
  "identifiers": {
   "condition": [
    "batch_indices",
    "train_batch_size",
    "_current_epoch_order_lock",
    "_get_order_chunk",
    "_current_epoch_order",
    "self"
   ],
   "consequent": []
  }
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "merged_at": "2019-01-08 22:38:10",
  "merged_by": "robieta",
  "file_path": "official/recommendation/data_pipeline.py",
  "condition": [
   "print($0.format_exc(), file=sys.stderr)"
  ],
  "consequent": [
   "self.stop_loop()",
   "\t$0.print_exc()"
  ],
  "identifiers": {
   "condition": [
    "sys",
    "stderr",
    "file",
    "print",
    "format_exc"
   ],
   "consequent": [
    "stop_loop",
    "print_exc",
    "self"
   ]
  }
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "merged_at": "2019-01-08 22:38:10",
  "merged_by": "robieta",
  "file_path": "official/recommendation/data_pipeline.py",
  "condition": [
   "$0 = $1.get_forkpool(3, $2=False)"
  ],
  "consequent": [
   "if self._shuffle_with_forkpool:",
   "\t$0 = $1.get_forkpool(3, $2=False)",
   "    else:",
   "\t$0 = $1.get_threadpool(1, $2=False)"
  ],
  "identifiers": {
   "condition": [
    "get_forkpool"
   ],
   "consequent": [
    "get_threadpool",
    "get_forkpool",
    "_shuffle_with_forkpool",
    "self"
   ]
  }
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "merged_at": "2019-01-08 22:38:10",
  "merged_by": "robieta",
  "file_path": "official/recommendation/data_pipeline.py",
  "condition": [
   "$0.$1 = $2.imap_unordered($3.$4, $5)"
  ],
  "consequent": [
   "imap = $2.imap if $0.deterministic else $2.imap_unordered",
   "\t$0.$1 = imap($3.$4, $5)"
  ],
  "identifiers": {
   "condition": [
    "imap_unordered"
   ],
   "consequent": [
    "imap_unordered",
    "imap",
    "deterministic"
   ]
  }
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "merged_at": "2019-01-08 22:38:10",
  "merged_by": "robieta",
  "file_path": "official/recommendation/data_pipeline.py",
  "condition": [
   "$0 = $1._get_order_chunk()"
  ],
  "consequent": [
   "$0 = $1._current_epoch_order[i * $1.train_batch_size:                                               (i + 1) * $1.train_batch_size]"
  ],
  "identifiers": {
   "condition": [
    "_get_order_chunk"
   ],
   "consequent": [
    "i",
    "_current_epoch_order",
    "train_batch_size"
   ]
  }
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "merged_at": "2019-01-08 22:38:10",
  "merged_by": "robieta",
  "file_path": "official/recommendation/data_pipeline.py",
  "condition": [
   "$0 = $1.logical_not($2).astype($1.bool)"
  ],
  "consequent": [
   "$0 = $1.logical_not($2)"
  ],
  "identifiers": {
   "condition": [
    "astype",
    "bool",
    "logical_not"
   ],
   "consequent": [
    "logical_not"
   ]
  }
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "merged_at": "2019-01-08 22:38:10",
  "merged_by": "robieta",
  "file_path": "official/recommendation/data_pipeline.py",
  "condition": [
   "assert not $0.$1.shape[0]",
   "\t$0.$1 = six.next($0.$2)"
  ],
  "consequent": [
   "$0.$1 = next($0.$2)"
  ],
  "identifiers": {
   "condition": [
    "shape",
    "next",
    "six"
   ],
   "consequent": [
    "next"
   ]
  }
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "merged_at": "2019-01-08 22:38:10",
  "merged_by": "robieta",
  "file_path": "official/recommendation/data_pipeline.py",
  "condition": [
   "with $0.get_threadpool(6) as $1:"
  ],
  "consequent": [
   "get_pool = ($0.get_fauxpool if self.deterministic else                 $0.get_threadpool)",
   "\twith get_pool(6) as $1:"
  ],
  "identifiers": {
   "condition": [
    "get_threadpool"
   ],
   "consequent": [
    "get_fauxpool",
    "self",
    "get_pool",
    "get_threadpool",
    "deterministic"
   ]
  }
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "merged_at": "2019-01-08 22:38:10",
  "merged_by": "robieta",
  "file_path": "official/recommendation/data_pipeline.py",
  "condition": [
   "with $0.get_threadpool(6) as $1:"
  ],
  "consequent": [
   "get_pool = ($0.get_fauxpool if self.deterministic else                 $0.get_threadpool)",
   "\twith get_pool(6) as $1:"
  ],
  "identifiers": {
   "condition": [
    "get_threadpool"
   ],
   "consequent": [
    "get_fauxpool",
    "self",
    "get_pool",
    "get_threadpool",
    "deterministic"
   ]
  }
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "merged_at": "2019-01-08 22:38:10",
  "merged_by": "robieta",
  "file_path": "official/recommendation/data_pipeline.py",
  "condition": [
   "$0 $1 $2 $3 $4 $5 $6 $7 $1 $8 which are not used equal"
  ],
  "consequent": [
   "$0 $1 $2 $3 $4 $5 a number of unused $6 $7 $1 $8 equal"
  ],
  "identifiers": {
   "condition": [
    "which",
    "are",
    "used",
    "equal"
   ],
   "consequent": [
    "of",
    "number",
    "a",
    "equal",
    "unused"
   ]
  }
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "merged_at": "2019-01-08 22:38:10",
  "merged_by": "robieta",
  "file_path": "official/recommendation/data_preprocessing.py",
  "condition": [
   "import atexit",
   "import contextlib",
   "import gc",
   "import hashlib",
   "import json",
   "import signal",
   "import socket",
   "import subprocess",
   "import threading",
   "from absl import app as absl_app",
   "from absl import flags",
   "import six",
   "from official.recommendation import stat_utils",
   "\t$0.$1, $0.$2, $0.$3, \"match_mlperf\")"
  ],
  "consequent": [
   "$0.$1, $0.$2, $0.$3)"
  ],
  "identifiers": {
   "condition": [
    "hashlib",
    "recommendation",
    "official",
    "app",
    "gc",
    "subprocess",
    "absl",
    "threading",
    "signal",
    "atexit",
    "absl_app",
    "six",
    "socket",
    "flags",
    "json",
    "contextlib",
    "stat_utils"
   ],
   "consequent": []
  }
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "merged_at": "2019-01-08 22:38:10",
  "merged_by": "robieta",
  "file_path": "official/recommendation/data_preprocessing.py",
  "condition": [
   "def _filter_index_sort($0, $1, match_mlperf):"
  ],
  "consequent": [
   "def _filter_index_sort($0, $1):"
  ],
  "identifiers": {
   "condition": [
    "match_mlperf",
    "_filter_index_sort"
   ],
   "consequent": [
    "_filter_index_sort"
   ]
  }
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "merged_at": "2019-01-08 22:38:10",
  "merged_by": "robieta",
  "file_path": "official/recommendation/data_preprocessing.py",
  "condition": [
   "match_mlperf: If True, change the sorting algorithm to match the MLPerf",
   "\treference implementation.",
   "    if cached_data[\"match_mlperf\"] != match_mlperf:",
   "\tvalid_cache = False ",
   "    mlperf_helper.ncf_print(         key=mlperf_helper.TAGS.PREPROC_HP_SAMPLE_EVAL_REPLACEMENT,         value=match_mlperf)",
   "\t\"match_mlperf\": match_mlperf,",
   "def instantiate_pipeline($0, $1, $2, $3):"
  ],
  "consequent": [
   "def instantiate_pipeline($0, $1, $3, constructor_type=None,                          $2=False):"
  ],
  "identifiers": {
   "condition": [
    "match_mlperf",
    "If",
    "instantiate_pipeline",
    "algorithm",
    "ncf_print",
    "reference",
    "key",
    "to",
    "TAGS",
    "implementation",
    "MLPerf",
    "valid_cache",
    "cached_data",
    "mlperf_helper",
    "sorting",
    "match",
    "PREPROC_HP_SAMPLE_EVAL_REPLACEMENT",
    "value",
    "change",
    "the"
   ],
   "consequent": [
    "instantiate_pipeline",
    "constructor_type"
   ]
  }
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "merged_at": "2019-01-08 22:38:10",
  "merged_by": "robieta",
  "file_path": "official/recommendation/data_preprocessing.py",
  "condition": [
   "$0: Try $1 enforce repeatable behavior, even at $2 cost $3",
   "\tperformance."
  ],
  "consequent": [
   "params: dict $3 parameters for $2 run.",
   "\tconstructor_type: The name $3 $2 constructor subclass that should be used",
   "\tfor $2 input pipeline.",
   "    $0: Tell $2 data constructor $1 produce deterministically."
  ],
  "identifiers": {
   "condition": [
    "Try",
    "at",
    "even",
    "repeatable",
    "enforce",
    "performance",
    "behavior",
    "cost"
   ],
   "consequent": [
    "parameters",
    "used",
    "constructor",
    "data",
    "constructor_type",
    "dict",
    "that",
    "name",
    "input",
    "should",
    "run",
    "be",
    "params",
    "deterministically",
    "produce",
    "Tell",
    "pipeline",
    "subclass",
    "The"
   ]
  }
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "merged_at": "2019-01-08 22:38:10",
  "merged_by": "robieta",
  "file_path": "official/recommendation/data_preprocessing.py",
  "condition": [
   "params[\"match_mlperf\"])"
  ],
  "consequent": [
   "producer = data_pipeline.get_constructor(constructor_type or \"materialized\")("
  ],
  "identifiers": {
   "condition": [
    "params"
   ],
   "consequent": [
    "constructor_type",
    "get_constructor",
    "data_pipeline",
    "producer"
   ]
  }
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "merged_at": "2019-01-08 22:38:10",
  "merged_by": "robieta",
  "file_path": "official/recommendation/data_preprocessing.py",
  "condition": [
   "if $0:",
   "\traise NotImplementedError(\"Fixed seed behavior has not been implemented.\") ",
   "  producer = data_pipeline.MaterializedDataConstructor(       $1=$2[\"use_tpu\"]"
  ],
  "consequent": [
   "$1=$2[\"use_tpu\"],",
   "\t$0=$0"
  ],
  "identifiers": {
   "condition": [
    "data_pipeline",
    "NotImplementedError",
    "MaterializedDataConstructor",
    "producer"
   ],
   "consequent": []
  }
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "merged_at": "2019-01-08 22:38:10",
  "merged_by": "robieta",
  "file_path": "official/recommendation/data_test.py",
  "condition": [
   "import pickle"
  ],
  "consequent": [
   "import hashlib ",
   "import mock"
  ],
  "identifiers": {
   "condition": [
    "pickle"
   ],
   "consequent": [
    "hashlib",
    "mock"
   ]
  }
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "merged_at": "2019-01-08 22:38:10",
  "merged_by": "robieta",
  "file_path": "official/recommendation/data_test.py",
  "condition": [
   "import time ",
   "import pandas as pd",
   "from $0.$1 import stat_utils"
  ],
  "consequent": [
   "from $0.$1 import popen_helper"
  ],
  "identifiers": {
   "condition": [
    "pandas",
    "time",
    "pd",
    "stat_utils"
   ],
   "consequent": [
    "popen_helper"
   ]
  }
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "merged_at": "2019-01-08 22:38:10",
  "merged_by": "robieta",
  "file_path": "official/recommendation/data_test.py",
  "condition": [
   "for match_mlperf in [True, False]:",
   "\t$0 = $1.$2.join($3.$4, \"test_cache.pickle\")"
  ],
  "consequent": [
   "$0 = $1.$2.join($3.$4, \"test_cache.pickle\")"
  ],
  "identifiers": {
   "condition": [
    "match_mlperf",
    "join"
   ],
   "consequent": [
    "join"
   ]
  }
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "merged_at": "2019-01-08 22:38:10",
  "merged_by": "robieta",
  "file_path": "official/recommendation/data_test.py",
  "condition": [
   "match_mlperf=match_mlperf)",
   "\tassert len($0[$1.$2]) == $3"
  ],
  "consequent": [
   "assert len($0[$1.$2]) == $3"
  ],
  "identifiers": {
   "condition": [
    "len",
    "match_mlperf"
   ],
   "consequent": [
    "len"
   ]
  }
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "merged_at": "2019-01-08 22:38:10",
  "merged_by": "robieta",
  "file_path": "official/recommendation/data_test.py",
  "condition": [
   "assert not valid_cache",
   "\tdef test_end_to_end($0):"
  ],
  "consequent": [
   "def _test_end_to_end($0, constructor_type):"
  ],
  "identifiers": {
   "condition": [
    "valid_cache",
    "test_end_to_end"
   ],
   "consequent": [
    "constructor_type",
    "_test_end_to_end"
   ]
  }
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "merged_at": "2019-01-08 22:38:10",
  "merged_by": "robieta",
  "file_path": "official/recommendation/data_test.py",
  "condition": [
   "$0=$1, $2=$3.$4, deterministic=False,"
  ],
  "consequent": [
   "$0=$1, $2=$3.$4, params=params,"
  ],
  "identifiers": {
   "condition": [
    "deterministic"
   ],
   "consequent": [
    "params"
   ]
  }
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "merged_at": "2019-01-08 22:38:10",
  "merged_by": "robieta",
  "file_path": "official/recommendation/data_test.py",
  "condition": [
   "params=params)"
  ],
  "consequent": [
   "constructor_type=constructor_type, deterministic=True)"
  ],
  "identifiers": {
   "condition": [
    "params"
   ],
   "consequent": [
    "constructor_type",
    "deterministic"
   ]
  }
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "merged_at": "2019-01-08 22:38:10",
  "merged_by": "robieta",
  "file_path": "official/recommendation/data_test.py",
  "condition": [
   "for u, i, v, l in zip("
  ],
  "consequent": [
   "md5 = hashlib.md5()",
   "\tdata_list = ["
  ],
  "identifiers": {
   "condition": [
    "u",
    "zip",
    "i",
    "v",
    "l"
   ],
   "consequent": [
    "hashlib",
    "md5",
    "data_list"
   ]
  }
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "merged_at": "2019-01-08 22:38:10",
  "merged_by": "robieta",
  "file_path": "official/recommendation/data_test.py",
  "condition": [
   "$0[$1.$2], $3):"
  ],
  "consequent": [
   "$0[$1.$2], $3]",
   "\tfor i in data_list:",
   "\tmd5.update(i.tobytes()) ",
   "      for u, i, v, l in zip(*data_list):"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "u",
    "zip",
    "i",
    "v",
    "tobytes",
    "data_list",
    "l",
    "md5",
    "update"
   ]
  }
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "merged_at": "2019-01-08 22:38:10",
  "merged_by": "robieta",
  "file_path": "official/recommendation/data_test.py",
  "condition": [
   "for $0, ($1, $2, $3) in enumerate(zip($4[$5.$6],                                           $4[$5.$7],                                           $4[$8.$9])):"
  ],
  "consequent": [
   "md5 = hashlib.md5()",
   "\tdata_list = [           $4[$5.$6], $4[$5.$7],           $4[$8.$9]]",
   "      for $2 in data_list:",
   "\tmd5.update($2.tobytes()) ",
   "      for $0, ($1, $2, $3) in enumerate(zip(*data_list)):"
  ],
  "identifiers": {
   "condition": [
    "zip",
    "enumerate"
   ],
   "consequent": [
    "hashlib",
    "zip",
    "enumerate",
    "tobytes",
    "data_list",
    "md5",
    "update"
   ]
  }
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "merged_at": "2019-01-08 22:38:10",
  "merged_by": "robieta",
  "file_path": "official/recommendation/data_test.py",
  "condition": [
   "def test_fresh_randomness($0):"
  ],
  "consequent": [
   "$0.assertRegexpMatches(md5.hexdigest(), END_TO_END_EVAL_MD5) ",
   "\tdef _test_fresh_randomness($0, constructor_type):"
  ],
  "identifiers": {
   "condition": [
    "test_fresh_randomness"
   ],
   "consequent": [
    "_test_fresh_randomness",
    "hexdigest",
    "constructor_type",
    "assertRegexpMatches",
    "md5",
    "END_TO_END_EVAL_MD5"
   ]
  }
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "merged_at": "2019-01-08 22:38:10",
  "merged_by": "robieta",
  "file_path": "official/recommendation/data_test.py",
  "condition": [
   "$0=$1, $2=$3.$4, deterministic=False,"
  ],
  "consequent": [
   "$0=$1, $2=$3.$4, params=params,"
  ],
  "identifiers": {
   "condition": [
    "deterministic"
   ],
   "consequent": [
    "params"
   ]
  }
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "merged_at": "2019-01-08 22:38:10",
  "merged_by": "robieta",
  "file_path": "official/recommendation/data_test.py",
  "condition": [
   "params=params)"
  ],
  "consequent": [
   "constructor_type=constructor_type, deterministic=True)"
  ],
  "identifiers": {
   "condition": [
    "params"
   ],
   "consequent": [
    "constructor_type",
    "deterministic"
   ]
  }
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "merged_at": "2019-01-08 22:38:10",
  "merged_by": "robieta",
  "file_path": "official/recommendation/data_test.py",
  "condition": [
   "for u, i, v, l in zip("
  ],
  "consequent": [
   "md5 = hashlib.md5()",
   "\tdata_list = ["
  ],
  "identifiers": {
   "condition": [
    "u",
    "zip",
    "i",
    "v",
    "l"
   ],
   "consequent": [
    "hashlib",
    "md5",
    "data_list"
   ]
  }
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "merged_at": "2019-01-08 22:38:10",
  "merged_by": "robieta",
  "file_path": "official/recommendation/data_test.py",
  "condition": [
   "$0[$1.$2], $3):"
  ],
  "consequent": [
   "$0[$1.$2], $3]",
   "\tfor i in data_list:",
   "\tmd5.update(i.tobytes()) ",
   "      for u, i, v, l in zip(*data_list):"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "u",
    "zip",
    "i",
    "v",
    "tobytes",
    "data_list",
    "l",
    "md5",
    "update"
   ]
  }
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "merged_at": "2019-01-08 22:38:10",
  "merged_by": "robieta",
  "file_path": "official/recommendation/ncf_main.py",
  "condition": [
   "$0, 100, params[\"batches_per_step\"])"
  ],
  "consequent": [
   "$0, steps_per_run=100)"
  ],
  "identifiers": {
   "condition": [
    "params"
   ],
   "consequent": [
    "steps_per_run"
   ]
  }
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "merged_at": "2019-01-08 22:38:10",
  "merged_by": "robieta",
  "file_path": "official/recommendation/ncf_main.py",
  "condition": [
   "$0 = distribution_utils.per_device_batch_size(       (int($1.$0) + $2 - 1) //       $2 * $2, $2)"
  ],
  "consequent": [
   "$0 = ($1.$0 + $2 - 1) // $2"
  ],
  "identifiers": {
   "condition": [
    "int",
    "distribution_utils",
    "per_device_batch_size"
   ],
   "consequent": []
  }
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "merged_at": "2019-01-08 22:38:10",
  "merged_by": "robieta",
  "file_path": "official/recommendation/ncf_main.py",
  "condition": [
   "$0 = int($1.$0 or $1.$2 or 1)"
  ],
  "consequent": [
   "$0 = $1.$0 or $1.$2"
  ],
  "identifiers": {
   "condition": [
    "int"
   ],
   "consequent": []
  }
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "merged_at": "2019-01-08 22:38:10",
  "merged_by": "robieta",
  "file_path": "official/recommendation/ncf_main.py",
  "condition": [
   "$0 = distribution_utils.per_device_batch_size(       ($0 + $1 - 1) //"
  ],
  "consequent": [
   "$0 = (($0 + $1 - 1) //"
  ],
  "identifiers": {
   "condition": [
    "distribution_utils",
    "per_device_batch_size"
   ],
   "consequent": []
  }
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "merged_at": "2019-01-08 22:38:10",
  "merged_by": "robieta",
  "file_path": "official/recommendation/ncf_main.py",
  "condition": [
   "\"hash_pipeline\": flags_obj.hash_pipeline,",
   "\t$0=$1.$0, $2=$1.$2,"
  ],
  "consequent": [
   "$0=$1.$0, $2=$1.$2, params=params,",
   "\tconstructor_type=$1.constructor_type,"
  ],
  "identifiers": {
   "condition": [
    "hash_pipeline",
    "flags_obj"
   ],
   "consequent": [
    "params",
    "constructor_type"
   ]
  }
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "merged_at": "2019-01-08 22:38:10",
  "merged_by": "robieta",
  "file_path": "official/recommendation/ncf_main.py",
  "condition": [
   "$0=$1.$2 is not None, params=params)"
  ],
  "consequent": [
   "$0=$1.$2 is not None)"
  ],
  "identifiers": {
   "condition": [
    "params"
   ],
   "consequent": []
  }
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "merged_at": "2019-01-08 22:38:10",
  "merged_by": "robieta",
  "file_path": "official/recommendation/ncf_main.py",
  "condition": [
   "$0.DEFINE_string("
  ],
  "consequent": [
   "$0.DEFINE_integer("
  ],
  "identifiers": {
   "condition": [
    "DEFINE_string"
   ],
   "consequent": [
    "DEFINE_integer"
   ]
  }
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "merged_at": "2019-01-08 22:38:10",
  "merged_by": "robieta",
  "file_path": "official/recommendation/ncf_main.py",
  "condition": [
   "$0.DEFINE_bool(       $1=\"hash_pipeline\", $2=False, $3=$4.help_wrap(           \"This flag will perform a separate run of the pipeline and hash \"           \"batches as they are produced. \\nNOTE: this will significantly slow \"           \"training. However it is useful to confirm that a random seed is \"           \"does indeed make the data pipeline deterministic.\"))"
  ],
  "consequent": [
   "$0.DEFINE_enum(       $1=\"constructor_type\", $2=\"bisection\",       enum_values=[\"bisection\", \"materialized\"], case_sensitive=False,       $3=$4.help_wrap(           \"Strategy to use for generating false negatives. materialized has a\"           \"precompute that scales badly, but a faster per-epoch construction\"           \"time and can be faster on very large systems.\"))"
  ],
  "identifiers": {
   "condition": [
    "DEFINE_bool",
    "help_wrap"
   ],
   "consequent": [
    "case_sensitive",
    "DEFINE_enum",
    "help_wrap",
    "enum_values"
   ]
  }
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "merged_at": "2019-01-08 22:38:10",
  "merged_by": "robieta",
  "file_path": "official/recommendation/stat_utils.py",
  "condition": [
   "import atexit",
   "from collections import deque",
   "import multiprocessing",
   "import struct",
   "import sys",
   "import threading",
   "import time ",
   "from official.recommendation import popen_helper"
  ],
  "consequent": [
   "\"\"\"Fork safe permutation function.",
   "",
   "  This function can be called within a multiprocessing worker and give",
   "  appropriately random results.",
   "",
   "  Args:",
   "    args: A size two tuple that will unpacked into the size of the permutation",
   "      and the random seed. This form is used because starmap is not universally",
   "      available.",
   "",
   "  returns:",
   "    A NumPy array containing a random permutation.",
   "  \"\"\""
  ],
  "identifiers": {
   "condition": [
    "multiprocessing",
    "official",
    "recommendation",
    "sys",
    "deque",
    "threading",
    "popen_helper",
    "struct",
    "atexit",
    "collections",
    "time"
   ],
   "consequent": []
  }
 },
 {
  "number": 5786,
  "sha": "7021ac1c735a0632ee86c9dcbde4ca5786014565",
  "author": "robieta",
  "participant": "googlebot",
  "created_at": "2018-11-20 01:53:16",
  "merged_at": "2019-01-08 22:38:10",
  "merged_by": "robieta",
  "file_path": "official/recommendation/stat_utils.py",
  "condition": [
   "seed = seed or struct.unpack(\"<L\", os.urandom(4))[0]"
  ],
  "consequent": [],
  "identifiers": {
   "condition": [
    "os",
    "unpack",
    "struct",
    "urandom",
    "seed"
   ],
   "consequent": []
  }
 },
 {
  "number": 5815,
  "sha": "e7e842937ba8be4b3a7ba9fd3ee66ff865be5230",
  "author": "dreamdragon",
  "participant": "robieta",
  "created_at": "2018-11-26 22:52:46",
  "merged_at": "2018-11-26 23:32:44",
  "merged_by": "robieta",
  "file_path": "research/lstm_object_detection/lstm/lstm_cells.py",
  "condition": [
   "import google3",
   "import $0.google as tf"
  ],
  "consequent": [
   "import $0 as tf"
  ],
  "identifiers": {
   "condition": [
    "google3",
    "google",
    "tf"
   ],
   "consequent": [
    "tf"
   ]
  }
 },
 {
  "number": 5815,
  "sha": "e7e842937ba8be4b3a7ba9fd3ee66ff865be5230",
  "author": "dreamdragon",
  "participant": "robieta",
  "created_at": "2018-11-26 22:52:46",
  "merged_at": "2018-11-26 23:32:44",
  "merged_by": "robieta",
  "file_path": "research/lstm_object_detection/lstm/lstm_cells.py",
  "condition": [
   "import google3.learning.brain.$0.$1 as $1"
  ],
  "consequent": [
   "$1 = tf.$0.$1"
  ],
  "identifiers": {
   "condition": [
    "google3",
    "learning",
    "brain"
   ],
   "consequent": [
    "tf"
   ]
  }
 },
 {
  "number": 5815,
  "sha": "e7e842937ba8be4b3a7ba9fd3ee66ff865be5230",
  "author": "dreamdragon",
  "participant": "robieta",
  "created_at": "2018-11-26 22:52:46",
  "merged_at": "2018-11-26 23:32:44",
  "merged_by": "robieta",
  "file_path": "research/lstm_object_detection/lstm/lstm_cells.py",
  "condition": [
   "return $0.$1.pack_sequence_as($2=[1, 1], $3=$4)"
  ],
  "consequent": [
   "return $0.contrib.framework.$1.pack_sequence_as(         $2=[1, 1], $3=$4)"
  ],
  "identifiers": {
   "condition": [
    "pack_sequence_as"
   ],
   "consequent": [
    "framework",
    "contrib",
    "pack_sequence_as"
   ]
  }
 },
 {
  "number": 5815,
  "sha": "e7e842937ba8be4b3a7ba9fd3ee66ff865be5230",
  "author": "dreamdragon",
  "participant": "robieta",
  "created_at": "2018-11-26 22:52:46",
  "merged_at": "2018-11-26 23:32:44",
  "merged_by": "robieta",
  "file_path": "research/lstm_object_detection/seq_dataset_builder.py",
  "condition": [
   "from google3.learning.brain.$0.$1.data import parallel_reader"
  ],
  "consequent": [
   "parallel_reader = tf.$0.$1.parallel_reader"
  ],
  "identifiers": {
   "condition": [
    "parallel_reader",
    "data",
    "brain",
    "learning",
    "google3"
   ],
   "consequent": [
    "tf",
    "parallel_reader"
   ]
  }
 },
 {
  "number": 5815,
  "sha": "e7e842937ba8be4b3a7ba9fd3ee66ff865be5230",
  "author": "dreamdragon",
  "participant": "robieta",
  "created_at": "2018-11-26 22:52:46",
  "merged_at": "2018-11-26 23:32:44",
  "merged_by": "robieta",
  "file_path": "research/lstm_object_detection/seq_dataset_builder.py",
  "condition": [
   "$0 = $1.TfSequenceExampleDecoder()"
  ],
  "consequent": [
   "$0 = $1.TFSequenceExampleDecoder()"
  ],
  "identifiers": {
   "condition": [
    "TfSequenceExampleDecoder"
   ],
   "consequent": [
    "TFSequenceExampleDecoder"
   ]
  }
 },
 {
  "number": 5815,
  "sha": "e7e842937ba8be4b3a7ba9fd3ee66ff865be5230",
  "author": "dreamdragon",
  "participant": "robieta",
  "created_at": "2018-11-26 22:52:46",
  "merged_at": "2018-11-26 23:32:44",
  "merged_by": "robieta",
  "file_path": "research/lstm_object_detection/tf_sequence_example_decoder.py",
  "condition": [
   "from google3.learning.brain.$0.$1.data import $2",
   "slim_example_decoder = $3.$0.$1.$2"
  ],
  "consequent": [
   "$2 = $3.$0.$1.$2"
  ],
  "identifiers": {
   "condition": [
    "slim_example_decoder",
    "data",
    "brain",
    "learning",
    "google3"
   ],
   "consequent": []
  }
 },
 {
  "number": 5815,
  "sha": "e7e842937ba8be4b3a7ba9fd3ee66ff865be5230",
  "author": "dreamdragon",
  "participant": "robieta",
  "created_at": "2018-11-26 22:52:46",
  "merged_at": "2018-11-26 23:32:44",
  "merged_by": "robieta",
  "file_path": "research/lstm_object_detection/tf_sequence_example_decoder.py",
  "condition": [
   "class TfSequenceExampleDecoder($0.$1):"
  ],
  "consequent": [
   "class BoundingBoxSequence(tfexample_decoder.ItemHandler):",
   "\t\"\"\"An ItemHandler that concatenates SparseTensors to Bounding Boxes.",
   "  \"\"\" ",
   "  def __init__(self, keys=None, prefix=None, return_dense=True,                default_value=-1.0):",
   "\t\"\"\"Initialize the bounding box handler.",
   "",
   "    Args:",
   "      keys: A list of four key names representing the ymin, xmin, ymax, xmax",
   "        in the Example or SequenceExample.",
   "      prefix: An optional prefix for each of the bounding box keys in the",
   "        Example or SequenceExample. If provided, `prefix` is prepended to each",
   "        key in `keys`.",
   "      return_dense: if True, returns a dense tensor; if False, returns as",
   "        sparse tensor.",
   "      default_value: The value used when the `tensor_key` is not found in a",
   "        particular `TFExample`.",
   "",
   "    Raises:",
   "      ValueError: if keys is not `None` and also not a list of exactly 4 keys",
   "    \"\"\"",
   "    if keys is None:",
   "\tkeys = ['ymin', 'xmin', 'ymax', 'xmax']",
   "    elif len(keys) != 4:",
   "\traise ValueError('BoundingBoxSequence expects 4 keys but got {}'.format(           len(keys)))",
   "    self._prefix = prefix",
   "    self._keys = keys",
   "    self._full_keys = [prefix + k for k in keys]",
   "    self._return_dense = return_dense",
   "    self._default_value = default_value",
   "    super(BoundingBoxSequence, self).__init__(self._full_keys) ",
   "  def tensors_to_item(self, keys_to_tensors):",
   "\t\"\"\"Maps the given dictionary of tensors to a concatenated list of bboxes.",
   "",
   "    Args:",
   "      keys_to_tensors: a mapping of TF-Example keys to parsed tensors.",
   "",
   "    Returns:",
   "      [time, num_boxes, 4] tensor of bounding box coordinates, in order",
   "          [y_min, x_min, y_max, x_max]. Whether the tensor is a SparseTensor",
   "          or a dense Tensor is determined by the return_dense parameter. Empty",
   "          positions in the sparse tensor are filled with -1.0 values.",
   "    \"\"\"",
   "    sides = []",
   "    for key in self._full_keys:",
   "\tvalue = keys_to_tensors[key]",
   "      expanded_dims = tf.concat(           [tf.to_int64(tf.shape(value)),            tf.constant([1], dtype=tf.int64)], 0)",
   "      side = tf.sparse_reshape(value, expanded_dims)",
   "      sides.append(side)",
   "    bounding_boxes = tf.sparse_concat(2, sides)",
   "    if self._return_dense:",
   "\tbounding_boxes = tf.sparse_tensor_to_dense(           bounding_boxes, default_value=self._default_value)",
   "    return bounding_boxes  ",
   "class TFSequenceExampleDecoder($0.$1):"
  ],
  "identifiers": {
   "condition": [
    "TfSequenceExampleDecoder"
   ],
   "consequent": [
    "concat",
    "return_dense",
    "dtype",
    "self",
    "sparse_reshape",
    "ValueError",
    "_prefix",
    "prefix",
    "sides",
    "tensors_to_item",
    "__init__",
    "key",
    "len",
    "keys",
    "default_value",
    "_return_dense",
    "tfexample_decoder",
    "k",
    "_default_value",
    "side",
    "to_int64",
    "shape",
    "append",
    "sparse_tensor_to_dense",
    "ItemHandler",
    "tf",
    "bounding_boxes",
    "keys_to_tensors",
    "_full_keys",
    "constant",
    "_keys",
    "TFSequenceExampleDecoder",
    "BoundingBoxSequence",
    "super",
    "int64",
    "sparse_concat",
    "value",
    "expanded_dims",
    "format"
   ]
  }
 },
 {
  "number": 5815,
  "sha": "e7e842937ba8be4b3a7ba9fd3ee66ff865be5230",
  "author": "dreamdragon",
  "participant": "robieta",
  "created_at": "2018-11-26 22:52:46",
  "merged_at": "2018-11-26 23:32:44",
  "merged_by": "robieta",
  "file_path": "research/lstm_object_detection/tf_sequence_example_decoder.py",
  "condition": [
   "slim_example_decoder.Image("
  ],
  "consequent": [
   "tfexample_decoder.Image("
  ],
  "identifiers": {
   "condition": [
    "slim_example_decoder",
    "Image"
   ],
   "consequent": [
    "Image",
    "tfexample_decoder"
   ]
  }
 },
 {
  "number": 5815,
  "sha": "e7e842937ba8be4b3a7ba9fd3ee66ff865be5230",
  "author": "dreamdragon",
  "participant": "robieta",
  "created_at": "2018-11-26 22:52:46",
  "merged_at": "2018-11-26 23:32:44",
  "merged_by": "robieta",
  "file_path": "research/lstm_object_detection/tf_sequence_example_decoder.py",
  "condition": [
   "slim_example_decoder.Tensor('image/source_id')),"
  ],
  "consequent": [
   "tfexample_decoder.Tensor('image/source_id')),"
  ],
  "identifiers": {
   "condition": [
    "slim_example_decoder",
    "Tensor"
   ],
   "consequent": [
    "tfexample_decoder",
    "Tensor"
   ]
  }
 },
 {
  "number": 5815,
  "sha": "e7e842937ba8be4b3a7ba9fd3ee66ff865be5230",
  "author": "dreamdragon",
  "participant": "robieta",
  "created_at": "2018-11-26 22:52:46",
  "merged_at": "2018-11-26 23:32:44",
  "merged_by": "robieta",
  "file_path": "research/lstm_object_detection/tf_sequence_example_decoder.py",
  "condition": [
   "slim_example_decoder.Tensor('image/key/sha256')),"
  ],
  "consequent": [
   "tfexample_decoder.Tensor('image/key/sha256')),"
  ],
  "identifiers": {
   "condition": [
    "slim_example_decoder",
    "Tensor"
   ],
   "consequent": [
    "tfexample_decoder",
    "Tensor"
   ]
  }
 },
 {
  "number": 5815,
  "sha": "e7e842937ba8be4b3a7ba9fd3ee66ff865be5230",
  "author": "dreamdragon",
  "participant": "robieta",
  "created_at": "2018-11-26 22:52:46",
  "merged_at": "2018-11-26 23:32:44",
  "merged_by": "robieta",
  "file_path": "research/lstm_object_detection/tf_sequence_example_decoder.py",
  "condition": [
   "slim_example_decoder.Tensor('image/filename')),"
  ],
  "consequent": [
   "tfexample_decoder.Tensor('image/filename')),"
  ],
  "identifiers": {
   "condition": [
    "slim_example_decoder",
    "Tensor"
   ],
   "consequent": [
    "tfexample_decoder",
    "Tensor"
   ]
  }
 },
 {
  "number": 5815,
  "sha": "e7e842937ba8be4b3a7ba9fd3ee66ff865be5230",
  "author": "dreamdragon",
  "participant": "robieta",
  "created_at": "2018-11-26 22:52:46",
  "merged_at": "2018-11-26 23:32:44",
  "merged_by": "robieta",
  "file_path": "research/lstm_object_detection/tf_sequence_example_decoder.py",
  "condition": [
   "tfexample_decoder.BoundingBoxSequence($0='bbox/'),"
  ],
  "consequent": [
   "BoundingBoxSequence($0='bbox/'),"
  ],
  "identifiers": {
   "condition": [
    "BoundingBoxSequence",
    "tfexample_decoder"
   ],
   "consequent": [
    "BoundingBoxSequence"
   ]
  }
 },
 {
  "number": 5815,
  "sha": "e7e842937ba8be4b3a7ba9fd3ee66ff865be5230",
  "author": "dreamdragon",
  "participant": "robieta",
  "created_at": "2018-11-26 22:52:46",
  "merged_at": "2018-11-26 23:32:44",
  "merged_by": "robieta",
  "file_path": "research/lstm_object_detection/tf_sequence_example_decoder.py",
  "condition": [
   "slim_example_decoder.Tensor('bbox/label/index')),"
  ],
  "consequent": [
   "tfexample_decoder.Tensor('bbox/label/index')),"
  ],
  "identifiers": {
   "condition": [
    "slim_example_decoder",
    "Tensor"
   ],
   "consequent": [
    "tfexample_decoder",
    "Tensor"
   ]
  }
 },
 {
  "number": 5815,
  "sha": "e7e842937ba8be4b3a7ba9fd3ee66ff865be5230",
  "author": "dreamdragon",
  "participant": "robieta",
  "created_at": "2018-11-26 22:52:46",
  "merged_at": "2018-11-26 23:32:44",
  "merged_by": "robieta",
  "file_path": "research/lstm_object_detection/tf_sequence_example_decoder.py",
  "condition": [
   "slim_example_decoder.Tensor('area'),"
  ],
  "consequent": [
   "tfexample_decoder.Tensor('area'),"
  ],
  "identifiers": {
   "condition": [
    "slim_example_decoder",
    "Tensor"
   ],
   "consequent": [
    "tfexample_decoder",
    "Tensor"
   ]
  }
 },
 {
  "number": 5815,
  "sha": "e7e842937ba8be4b3a7ba9fd3ee66ff865be5230",
  "author": "dreamdragon",
  "participant": "robieta",
  "created_at": "2018-11-26 22:52:46",
  "merged_at": "2018-11-26 23:32:44",
  "merged_by": "robieta",
  "file_path": "research/lstm_object_detection/tf_sequence_example_decoder.py",
  "condition": [
   "slim_example_decoder.Tensor('is_crowd')),"
  ],
  "consequent": [
   "tfexample_decoder.Tensor('is_crowd')),"
  ],
  "identifiers": {
   "condition": [
    "slim_example_decoder",
    "Tensor"
   ],
   "consequent": [
    "tfexample_decoder",
    "Tensor"
   ]
  }
 },
 {
  "number": 5815,
  "sha": "e7e842937ba8be4b3a7ba9fd3ee66ff865be5230",
  "author": "dreamdragon",
  "participant": "robieta",
  "created_at": "2018-11-26 22:52:46",
  "merged_at": "2018-11-26 23:32:44",
  "merged_by": "robieta",
  "file_path": "research/lstm_object_detection/tf_sequence_example_decoder.py",
  "condition": [
   "slim_example_decoder.Tensor('difficult')),"
  ],
  "consequent": [
   "tfexample_decoder.Tensor('difficult')),"
  ],
  "identifiers": {
   "condition": [
    "slim_example_decoder",
    "Tensor"
   ],
   "consequent": [
    "tfexample_decoder",
    "Tensor"
   ]
  }
 },
 {
  "number": 5815,
  "sha": "e7e842937ba8be4b3a7ba9fd3ee66ff865be5230",
  "author": "dreamdragon",
  "participant": "robieta",
  "created_at": "2018-11-26 22:52:46",
  "merged_at": "2018-11-26 23:32:44",
  "merged_by": "robieta",
  "file_path": "research/lstm_object_detection/tf_sequence_example_decoder.py",
  "condition": [
   "slim_example_decoder.Tensor('group_of'))"
  ],
  "consequent": [
   "tfexample_decoder.Tensor('group_of'))"
  ],
  "identifiers": {
   "condition": [
    "slim_example_decoder",
    "Tensor"
   ],
   "consequent": [
    "tfexample_decoder",
    "Tensor"
   ]
  }
 },
 {
  "number": 5815,
  "sha": "e7e842937ba8be4b3a7ba9fd3ee66ff865be5230",
  "author": "dreamdragon",
  "participant": "robieta",
  "created_at": "2018-11-26 22:52:46",
  "merged_at": "2018-11-26 23:32:44",
  "merged_by": "robieta",
  "file_path": "research/lstm_object_detection/tf_sequence_example_decoder_test.py",
  "condition": [
   "class TfSequenceExampleDecoderTest($0.$1.$2):"
  ],
  "consequent": [
   "from tensorflow.python.framework import dtypes",
   "from tensorflow.python.ops import parsing_ops",
   "class TFSequenceExampleDecoderTest($0.$1.$2):"
  ],
  "identifiers": {
   "condition": [
    "TfSequenceExampleDecoderTest"
   ],
   "consequent": [
    "framework",
    "TFSequenceExampleDecoderTest",
    "python",
    "tensorflow",
    "dtypes",
    "parsing_ops",
    "ops"
   ]
  }
 },
 {
  "number": 5815,
  "sha": "e7e842937ba8be4b3a7ba9fd3ee66ff865be5230",
  "author": "dreamdragon",
  "participant": "robieta",
  "created_at": "2018-11-26 22:52:46",
  "merged_at": "2018-11-26 23:32:44",
  "merged_by": "robieta",
  "file_path": "research/lstm_object_detection/tf_sequence_example_decoder_test.py",
  "condition": [
   "$0 = $1.TfSequenceExampleDecoder()"
  ],
  "consequent": [
   "$0 = $1.TFSequenceExampleDecoder()"
  ],
  "identifiers": {
   "condition": [
    "TfSequenceExampleDecoder"
   ],
   "consequent": [
    "TFSequenceExampleDecoder"
   ]
  }
 },
 {
  "number": 5838,
  "sha": "17c2f0ccec49e8087f100796027d75ea7fdca41c",
  "author": "cshallue",
  "participant": "rsepassi",
  "created_at": "2018-11-30 02:02:00",
  "merged_at": "2018-11-30 02:05:13",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/cc/python/median_filter_test.py",
  "condition": [
   "from light_curve_util.cc.$0 import median_filter"
  ],
  "consequent": [
   "from light_curve.fast_ops.$0 import median_filter"
  ],
  "identifiers": {
   "condition": [
    "median_filter",
    "light_curve_util",
    "cc"
   ],
   "consequent": [
    "fast_ops",
    "light_curve",
    "median_filter"
   ]
  }
 },
 {
  "number": 5838,
  "sha": "17c2f0ccec49e8087f100796027d75ea7fdca41c",
  "author": "cshallue",
  "participant": "rsepassi",
  "created_at": "2018-11-30 02:02:00",
  "merged_at": "2018-11-30 02:05:13",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/cc/python/phase_fold_test.py",
  "condition": [
   "from light_curve_util.cc.$0 import phase_fold"
  ],
  "consequent": [
   "from light_curve.fast_ops.$0 import phase_fold"
  ],
  "identifiers": {
   "condition": [
    "phase_fold",
    "light_curve_util",
    "cc"
   ],
   "consequent": [
    "fast_ops",
    "light_curve",
    "phase_fold"
   ]
  }
 },
 {
  "number": 5838,
  "sha": "17c2f0ccec49e8087f100796027d75ea7fdca41c",
  "author": "cshallue",
  "participant": "rsepassi",
  "created_at": "2018-11-30 02:02:00",
  "merged_at": "2018-11-30 02:05:13",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/cc/python/view_generator_test.py",
  "condition": [
   "from light_curve_util.cc.$0 import view_generator"
  ],
  "consequent": [
   "from light_curve.fast_ops.$0 import view_generator"
  ],
  "identifiers": {
   "condition": [
    "light_curve_util",
    "cc",
    "view_generator"
   ],
   "consequent": [
    "fast_ops",
    "light_curve",
    "view_generator"
   ]
  }
 },
 {
  "number": 5838,
  "sha": "17c2f0ccec49e8087f100796027d75ea7fdca41c",
  "author": "cshallue",
  "participant": "rsepassi",
  "created_at": "2018-11-30 02:02:00",
  "merged_at": "2018-11-30 02:05:13",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/kepler_io.py",
  "condition": [
   "from light_curve_util import util"
  ],
  "consequent": [
   "from light_curve import util"
  ],
  "identifiers": {
   "condition": [
    "util",
    "light_curve_util"
   ],
   "consequent": [
    "util",
    "light_curve"
   ]
  }
 },
 {
  "number": 5838,
  "sha": "17c2f0ccec49e8087f100796027d75ea7fdca41c",
  "author": "cshallue",
  "participant": "rsepassi",
  "created_at": "2018-11-30 02:02:00",
  "merged_at": "2018-11-30 02:05:13",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/kepler_io_test.py",
  "condition": [
   "from light_curve_util import kepler_io"
  ],
  "consequent": [
   "from light_curve import kepler_io"
  ],
  "identifiers": {
   "condition": [
    "light_curve_util",
    "kepler_io"
   ],
   "consequent": [
    "light_curve",
    "kepler_io"
   ]
  }
 },
 {
  "number": 5838,
  "sha": "17c2f0ccec49e8087f100796027d75ea7fdca41c",
  "author": "cshallue",
  "participant": "rsepassi",
  "created_at": "2018-11-30 02:02:00",
  "merged_at": "2018-11-30 02:05:13",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/kepler_io_test.py",
  "condition": [
   "$0.assertEqual(len($1), len($2))"
  ],
  "consequent": [
   "super(KeplerIoTest, $0).setUp()",
   "\t$0.assertLen($1, len($2))"
  ],
  "identifiers": {
   "condition": [
    "len",
    "assertEqual"
   ],
   "consequent": [
    "setUp",
    "super",
    "len",
    "assertLen",
    "KeplerIoTest"
   ]
  }
 },
 {
  "number": 5838,
  "sha": "17c2f0ccec49e8087f100796027d75ea7fdca41c",
  "author": "cshallue",
  "participant": "rsepassi",
  "created_at": "2018-11-30 02:02:00",
  "merged_at": "2018-11-30 02:05:13",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/kepler_io_test.py",
  "condition": [
   "$0.assertEqual(len($1), len($2))"
  ],
  "consequent": [
   "$0.assertLen($1, len($2))"
  ],
  "identifiers": {
   "condition": [
    "len",
    "assertEqual"
   ],
   "consequent": [
    "len",
    "assertLen"
   ]
  }
 },
 {
  "number": 5838,
  "sha": "17c2f0ccec49e8087f100796027d75ea7fdca41c",
  "author": "cshallue",
  "participant": "rsepassi",
  "created_at": "2018-11-30 02:02:00",
  "merged_at": "2018-11-30 02:05:13",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/kepler_io_test.py",
  "condition": [
   "$0.assertItemsEqual(["
  ],
  "consequent": [
   "$0.assertCountEqual(["
  ],
  "identifiers": {
   "condition": [
    "assertItemsEqual"
   ],
   "consequent": [
    "assertCountEqual"
   ]
  }
 },
 {
  "number": 5838,
  "sha": "17c2f0ccec49e8087f100796027d75ea7fdca41c",
  "author": "cshallue",
  "participant": "rsepassi",
  "created_at": "2018-11-30 02:02:00",
  "merged_at": "2018-11-30 02:05:13",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/kepler_io_test.py",
  "condition": [
   "$0.assertItemsEqual(["
  ],
  "consequent": [
   "$0.assertCountEqual(["
  ],
  "identifiers": {
   "condition": [
    "assertItemsEqual"
   ],
   "consequent": [
    "assertCountEqual"
   ]
  }
 },
 {
  "number": 5838,
  "sha": "17c2f0ccec49e8087f100796027d75ea7fdca41c",
  "author": "cshallue",
  "participant": "rsepassi",
  "created_at": "2018-11-30 02:02:00",
  "merged_at": "2018-11-30 02:05:13",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/kepler_io_test.py",
  "condition": [
   "$0.assertItemsEqual(["
  ],
  "consequent": [
   "$0.assertCountEqual(["
  ],
  "identifiers": {
   "condition": [
    "assertItemsEqual"
   ],
   "consequent": [
    "assertCountEqual"
   ]
  }
 },
 {
  "number": 5838,
  "sha": "17c2f0ccec49e8087f100796027d75ea7fdca41c",
  "author": "cshallue",
  "participant": "rsepassi",
  "created_at": "2018-11-30 02:02:00",
  "merged_at": "2018-11-30 02:05:13",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/kepler_io_test.py",
  "condition": [
   "$0.assertItemsEqual(["
  ],
  "consequent": [
   "$0.assertCountEqual(["
  ],
  "identifiers": {
   "condition": [
    "assertItemsEqual"
   ],
   "consequent": [
    "assertCountEqual"
   ]
  }
 },
 {
  "number": 5838,
  "sha": "17c2f0ccec49e8087f100796027d75ea7fdca41c",
  "author": "cshallue",
  "participant": "rsepassi",
  "created_at": "2018-11-30 02:02:00",
  "merged_at": "2018-11-30 02:05:13",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/kepler_io_test.py",
  "condition": [
   "$0.assertItemsEqual($1, $2)"
  ],
  "consequent": [
   "$0.assertCountEqual($1, $2)"
  ],
  "identifiers": {
   "condition": [
    "assertItemsEqual"
   ],
   "consequent": [
    "assertCountEqual"
   ]
  }
 },
 {
  "number": 5838,
  "sha": "17c2f0ccec49e8087f100796027d75ea7fdca41c",
  "author": "cshallue",
  "participant": "rsepassi",
  "created_at": "2018-11-30 02:02:00",
  "merged_at": "2018-11-30 02:05:13",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/median_filter_test.py",
  "condition": [
   "from light_curve_util import median_filter"
  ],
  "consequent": [
   "from light_curve import median_filter"
  ],
  "identifiers": {
   "condition": [
    "median_filter",
    "light_curve_util"
   ],
   "consequent": [
    "light_curve",
    "median_filter"
   ]
  }
 },
 {
  "number": 5838,
  "sha": "17c2f0ccec49e8087f100796027d75ea7fdca41c",
  "author": "cshallue",
  "participant": "rsepassi",
  "created_at": "2018-11-30 02:02:00",
  "merged_at": "2018-11-30 02:05:13",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/periodic_event_test.py",
  "condition": [
   "from light_curve_util.$0 import Event"
  ],
  "consequent": [
   "from light_curve.$0 import Event"
  ],
  "identifiers": {
   "condition": [
    "Event",
    "light_curve_util"
   ],
   "consequent": [
    "Event",
    "light_curve"
   ]
  }
 },
 {
  "number": 5838,
  "sha": "17c2f0ccec49e8087f100796027d75ea7fdca41c",
  "author": "cshallue",
  "participant": "rsepassi",
  "created_at": "2018-11-30 02:02:00",
  "merged_at": "2018-11-30 02:05:13",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/util_test.py",
  "condition": [
   "from light_curve_util import periodic_event"
  ],
  "consequent": [
   "from light_curve import periodic_event"
  ],
  "identifiers": {
   "condition": [
    "periodic_event",
    "light_curve_util"
   ],
   "consequent": [
    "periodic_event",
    "light_curve"
   ]
  }
 },
 {
  "number": 5838,
  "sha": "17c2f0ccec49e8087f100796027d75ea7fdca41c",
  "author": "cshallue",
  "participant": "rsepassi",
  "created_at": "2018-11-30 02:02:00",
  "merged_at": "2018-11-30 02:05:13",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/util_test.py",
  "condition": [
   "from light_curve_util import util"
  ],
  "consequent": [
   "from light_curve import util"
  ],
  "identifiers": {
   "condition": [
    "util",
    "light_curve_util"
   ],
   "consequent": [
    "util",
    "light_curve"
   ]
  }
 },
 {
  "number": 5838,
  "sha": "17c2f0ccec49e8087f100796027d75ea7fdca41c",
  "author": "cshallue",
  "participant": "rsepassi",
  "created_at": "2018-11-30 02:02:00",
  "merged_at": "2018-11-30 02:05:13",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/util_test.py",
  "condition": [
   "$0.assertEqual(len($1), 2)"
  ],
  "consequent": [
   "$0.assertLen($1, 2)"
  ],
  "identifiers": {
   "condition": [
    "len",
    "assertEqual"
   ],
   "consequent": [
    "assertLen"
   ]
  }
 },
 {
  "number": 5838,
  "sha": "17c2f0ccec49e8087f100796027d75ea7fdca41c",
  "author": "cshallue",
  "participant": "rsepassi",
  "created_at": "2018-11-30 02:02:00",
  "merged_at": "2018-11-30 02:05:13",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/util_test.py",
  "condition": [
   "$0.assertEqual(len($1[0]), 25)"
  ],
  "consequent": [
   "$0.assertLen($1[0], 25)"
  ],
  "identifiers": {
   "condition": [
    "len",
    "assertEqual"
   ],
   "consequent": [
    "assertLen"
   ]
  }
 },
 {
  "number": 5838,
  "sha": "17c2f0ccec49e8087f100796027d75ea7fdca41c",
  "author": "cshallue",
  "participant": "rsepassi",
  "created_at": "2018-11-30 02:02:00",
  "merged_at": "2018-11-30 02:05:13",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/util_test.py",
  "condition": [
   "$0.assertEqual(len($1[1]), 10)"
  ],
  "consequent": [
   "$0.assertLen($1[1], 10)"
  ],
  "identifiers": {
   "condition": [
    "len",
    "assertEqual"
   ],
   "consequent": [
    "assertLen"
   ]
  }
 },
 {
  "number": 5838,
  "sha": "17c2f0ccec49e8087f100796027d75ea7fdca41c",
  "author": "cshallue",
  "participant": "rsepassi",
  "created_at": "2018-11-30 02:02:00",
  "merged_at": "2018-11-30 02:05:13",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/util_test.py",
  "condition": [
   "$0.assertEqual(len($1), 2)"
  ],
  "consequent": [
   "$0.assertLen($1, 2)"
  ],
  "identifiers": {
   "condition": [
    "len",
    "assertEqual"
   ],
   "consequent": [
    "assertLen"
   ]
  }
 },
 {
  "number": 5838,
  "sha": "17c2f0ccec49e8087f100796027d75ea7fdca41c",
  "author": "cshallue",
  "participant": "rsepassi",
  "created_at": "2018-11-30 02:02:00",
  "merged_at": "2018-11-30 02:05:13",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/util_test.py",
  "condition": [
   "$0.assertEqual(len($1[0]), 25)"
  ],
  "consequent": [
   "$0.assertLen($1[0], 25)"
  ],
  "identifiers": {
   "condition": [
    "len",
    "assertEqual"
   ],
   "consequent": [
    "assertLen"
   ]
  }
 },
 {
  "number": 5838,
  "sha": "17c2f0ccec49e8087f100796027d75ea7fdca41c",
  "author": "cshallue",
  "participant": "rsepassi",
  "created_at": "2018-11-30 02:02:00",
  "merged_at": "2018-11-30 02:05:13",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/util_test.py",
  "condition": [
   "$0.assertEqual(len($1[1]), 10)"
  ],
  "consequent": [
   "$0.assertLen($1[1], 10)"
  ],
  "identifiers": {
   "condition": [
    "len",
    "assertEqual"
   ],
   "consequent": [
    "assertLen"
   ]
  }
 },
 {
  "number": 5838,
  "sha": "17c2f0ccec49e8087f100796027d75ea7fdca41c",
  "author": "cshallue",
  "participant": "rsepassi",
  "created_at": "2018-11-30 02:02:00",
  "merged_at": "2018-11-30 02:05:13",
  "merged_by": "cshallue",
  "file_path": "research/astronet/light_curve_util/util_test.py",
  "condition": [
   "$0.assertEqual(5, len($1))"
  ],
  "consequent": [
   "$0.assertLen($1, 5)"
  ],
  "identifiers": {
   "condition": [
    "len",
    "assertEqual"
   ],
   "consequent": [
    "assertLen"
   ]
  }
 },
 {
  "number": 5987,
  "sha": "2fbba5ff135580bfb9b9aa0c402257e98e3537d7",
  "author": "seemuch",
  "participant": "guptapriya",
  "created_at": "2019-01-03 21:46:21",
  "merged_at": "2019-01-04 00:02:39",
  "merged_by": "seemuch",
  "file_path": "official/resnet/keras/keras_cifar_main.py",
  "condition": [
   "with $0.scope():"
  ],
  "consequent": [
   "strategy_scope = keras_common.get_strategy_scope($0) ",
   "\twith strategy_scope:"
  ],
  "identifiers": {
   "condition": [
    "scope"
   ],
   "consequent": [
    "strategy_scope",
    "get_strategy_scope",
    "keras_common"
   ]
  }
 },
 {
  "number": 5987,
  "sha": "2fbba5ff135580bfb9b9aa0c402257e98e3537d7",
  "author": "seemuch",
  "participant": "guptapriya",
  "created_at": "2019-01-03 21:46:21",
  "merged_at": "2019-01-04 00:02:39",
  "merged_by": "seemuch",
  "file_path": "official/resnet/keras/keras_imagenet_main.py",
  "condition": [
   "with $0.scope():"
  ],
  "consequent": [
   "strategy_scope = keras_common.get_strategy_scope($0) ",
   "\twith strategy_scope:"
  ],
  "identifiers": {
   "condition": [
    "scope"
   ],
   "consequent": [
    "strategy_scope",
    "get_strategy_scope",
    "keras_common"
   ]
  }
 },
 {
  "number": 6327,
  "sha": "6d4bfdc1d58630522b55416ee2665fd58729259f",
  "author": "pkanwar23",
  "participant": "robieta",
  "created_at": "2019-03-08 19:27:08",
  "merged_at": "2019-03-11 17:16:00",
  "merged_by": "pkanwar23",
  "file_path": "official/resnet/resnet_run_loop.py",
  "condition": [
   "current_epoch: `Tensor` for $0 epoch.",
   "\tpoly_rate: Polynomial decay rate."
  ],
  "consequent": [
   "global_step: the $0 global_step"
  ],
  "identifiers": {
   "condition": [
    "current_epoch",
    "poly_rate",
    "epoch",
    "Polynomial",
    "decay",
    "Tensor",
    "rate"
   ],
   "consequent": [
    "the",
    "global_step"
   ]
  }
 },
 {
  "number": 6327,
  "sha": "6d4bfdc1d58630522b55416ee2665fd58729259f",
  "author": "pkanwar23",
  "participant": "robieta",
  "created_at": "2019-03-08 19:27:08",
  "merged_at": "2019-03-11 17:16:00",
  "merged_by": "pkanwar23",
  "file_path": "official/resnet/resnet_run_loop.py",
  "condition": [
   "A scaled `Tensor` for $0 $1 $2."
  ],
  "consequent": [
   "returns the $0 $1 $2"
  ],
  "identifiers": {
   "condition": [
    "scaled",
    "Tensor",
    "A"
   ],
   "consequent": [
    "returns",
    "the"
   ]
  }
 },
 {
  "number": 6327,
  "sha": "6d4bfdc1d58630522b55416ee2665fd58729259f",
  "author": "pkanwar23",
  "participant": "robieta",
  "created_at": "2019-03-08 19:27:08",
  "merged_at": "2019-03-11 17:16:00",
  "merged_by": "pkanwar23",
  "file_path": "official/resnet/resnet_run_loop.py",
  "condition": [
   "if $0.$1.$2 == 16384:"
  ],
  "consequent": [
   "if $0.$1.$2 < 8192:",
   "\tplr = 5.0",
   "      w_epochs = 5",
   "    elif $0.$1.$2 < 16384:",
   "\tplr = 10.0",
   "      w_epochs = 5",
   "    elif $0.$1.$2 < 32768:"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "plr",
    "w_epochs"
   ]
  }
 },
 {
  "number": 6327,
  "sha": "6d4bfdc1d58630522b55416ee2665fd58729259f",
  "author": "pkanwar23",
  "participant": "robieta",
  "created_at": "2019-03-08 19:27:08",
  "merged_at": "2019-03-11 17:16:00",
  "merged_by": "pkanwar23",
  "file_path": "official/resnet/resnet_run_loop.py",
  "condition": [
   "elif flags.FLAGS.batch_size == 32768:"
  ],
  "consequent": [
   "else:"
  ],
  "identifiers": {
   "condition": [
    "batch_size",
    "flags",
    "FLAGS"
   ],
   "consequent": []
  }
 },
 {
  "number": 6327,
  "sha": "6d4bfdc1d58630522b55416ee2665fd58729259f",
  "author": "pkanwar23",
  "participant": "robieta",
  "created_at": "2019-03-08 19:27:08",
  "merged_at": "2019-03-11 17:16:00",
  "merged_by": "pkanwar23",
  "file_path": "official/resnet/resnet_run_loop.py",
  "condition": [
   "elif flags.FLAGS.batch_size == 8192:",
   "\t$0 = 10.0",
   "      w_epochs = 5",
   "    else:",
   "\t$0 = 5.0",
   "      w_epochs = 5",
   "    $1 = (       $0 * $2.cast($3, $2.$4) / $2.cast("
  ],
  "consequent": [
   "$1 = ($0 * $2.cast($3, $2.$4) / $2.cast("
  ],
  "identifiers": {
   "condition": [
    "FLAGS",
    "batch_size",
    "cast",
    "flags",
    "w_epochs"
   ],
   "consequent": [
    "cast"
   ]
  }
 },
 {
  "number": 6508,
  "sha": "7a98fa2bdff1d7a7856fcaaa685d5ac97f81f48d",
  "author": "rxsang",
  "participant": "haoyuz",
  "created_at": "2019-04-02 18:35:45",
  "merged_at": "2019-04-02 22:24:29",
  "merged_by": "rxsang",
  "file_path": "official/resnet/imagenet_main.py",
  "condition": [
   "$0=None):"
  ],
  "consequent": [
   "$0=None,",
   "\tdrop_remainder=False):"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "drop_remainder"
   ]
  }
 },
 {
  "number": 6508,
  "sha": "7a98fa2bdff1d7a7856fcaaa685d5ac97f81f48d",
  "author": "rxsang",
  "participant": "haoyuz",
  "created_at": "2019-04-02 18:35:45",
  "merged_at": "2019-04-02 22:24:29",
  "merged_by": "rxsang",
  "file_path": "official/resnet/imagenet_main.py",
  "condition": [
   "$0=$0"
  ],
  "consequent": [
   "drop_remainder: A boolean indicates whether to drop the remainder of the",
   "\tbatches. If True, the batch dimension will be static.",
   "      $0=$0,",
   "      drop_remainder=drop_remainder"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "boolean",
    "If",
    "of",
    "will",
    "be",
    "drop_remainder",
    "batches",
    "indicates",
    "whether",
    "remainder",
    "dimension",
    "static",
    "to",
    "the",
    "drop",
    "batch",
    "A"
   ]
  }
 },
 {
  "number": 6508,
  "sha": "7a98fa2bdff1d7a7856fcaaa685d5ac97f81f48d",
  "author": "rxsang",
  "participant": "haoyuz",
  "created_at": "2019-04-02 18:35:45",
  "merged_at": "2019-04-02 22:24:29",
  "merged_by": "rxsang",
  "file_path": "official/resnet/keras/keras_common.py",
  "condition": [
   "$0=$1.$2):"
  ],
  "consequent": [
   "$0=$1.$2, drop_remainder=True):"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "drop_remainder"
   ]
  }
 },
 {
  "number": 6508,
  "sha": "7a98fa2bdff1d7a7856fcaaa685d5ac97f81f48d",
  "author": "rxsang",
  "participant": "haoyuz",
  "created_at": "2019-04-02 18:35:45",
  "merged_at": "2019-04-02 22:24:29",
  "merged_by": "rxsang",
  "file_path": "official/resnet/keras/keras_common.py",
  "condition": [
   "$0 = $0.batch($1, $2=True)"
  ],
  "consequent": [
   "$2: A boolean indicates whether to drop the remainder of the",
   "\tbatches. If True, the batch dimension will be static.",
   "    $0 = $0.batch($1, $2=$2)"
  ],
  "identifiers": {
   "condition": [
    "batch"
   ],
   "consequent": [
    "boolean",
    "If",
    "of",
    "will",
    "be",
    "batches",
    "indicates",
    "whether",
    "remainder",
    "dimension",
    "static",
    "to",
    "the",
    "drop",
    "batch",
    "A"
   ]
  }
 },
 {
  "number": 6508,
  "sha": "7a98fa2bdff1d7a7856fcaaa685d5ac97f81f48d",
  "author": "rxsang",
  "participant": "haoyuz",
  "created_at": "2019-04-02 18:35:45",
  "merged_at": "2019-04-02 22:24:29",
  "merged_by": "rxsang",
  "file_path": "official/resnet/keras/keras_imagenet_main.py",
  "condition": [
   "$0=$0)"
  ],
  "consequent": [
   "$0=$0,",
   "\tdrop_remainder=True)"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "drop_remainder"
   ]
  }
 },
 {
  "number": 6508,
  "sha": "7a98fa2bdff1d7a7856fcaaa685d5ac97f81f48d",
  "author": "rxsang",
  "participant": "haoyuz",
  "created_at": "2019-04-02 18:35:45",
  "merged_at": "2019-04-02 22:24:29",
  "merged_by": "rxsang",
  "file_path": "official/resnet/keras/keras_imagenet_main.py",
  "condition": [
   "$0=$0)"
  ],
  "consequent": [
   "                                                                                                                                       ",
   "\tdrop_remainder = flags_obj.enable_xla",
   "\t$0=$0,",
   "      drop_remainder=drop_remainder)"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "enable_xla",
    "flags_obj",
    "drop_remainder"
   ]
  }
 },
 {
  "number": 6508,
  "sha": "7a98fa2bdff1d7a7856fcaaa685d5ac97f81f48d",
  "author": "rxsang",
  "participant": "haoyuz",
  "created_at": "2019-04-02 18:35:45",
  "merged_at": "2019-04-02 22:24:29",
  "merged_by": "rxsang",
  "file_path": "official/resnet/keras/keras_imagenet_main.py",
  "condition": [
   "$0=$0)"
  ],
  "consequent": [
   "$0=$0,",
   "\tdrop_remainder=drop_remainder)"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "drop_remainder"
   ]
  }
 },
 {
  "number": 6508,
  "sha": "7a98fa2bdff1d7a7856fcaaa685d5ac97f81f48d",
  "author": "rxsang",
  "participant": "haoyuz",
  "created_at": "2019-04-02 18:35:45",
  "merged_at": "2019-04-02 22:24:29",
  "merged_by": "rxsang",
  "file_path": "official/resnet/keras/keras_imagenet_main.py",
  "condition": [
   "$0 = $1.resnet50($2=$3.$4,                                     $5=$5)"
  ],
  "consequent": [
   "if flags_obj.enable_xla:",
   "\tif strategy:",
   "\tper_replica_batch_size = (               flags_obj.batch_size // strategy.num_replicas_in_sync)",
   "      else:",
   "\tper_replica_batch_size = flags_obj.batch_size",
   "    else:",
   "\tper_replica_batch_size = None ",
   "      $0 = $1.resnet50(           $2=$3.$4,           $5=$5,           batch_size=per_replica_batch_size)"
  ],
  "identifiers": {
   "condition": [
    "resnet50"
   ],
   "consequent": [
    "strategy",
    "num_replicas_in_sync",
    "flags_obj",
    "batch_size",
    "per_replica_batch_size",
    "resnet50",
    "enable_xla"
   ]
  }
 },
 {
  "number": 6508,
  "sha": "7a98fa2bdff1d7a7856fcaaa685d5ac97f81f48d",
  "author": "rxsang",
  "participant": "haoyuz",
  "created_at": "2019-04-02 18:35:45",
  "merged_at": "2019-04-02 22:24:29",
  "merged_by": "rxsang",
  "file_path": "official/resnet/resnet_run_loop.py",
  "condition": [
   "$0=1):"
  ],
  "consequent": [
   "$0=1,",
   "\tdrop_remainder=False):"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "drop_remainder"
   ]
  }
 },
 {
  "number": 6508,
  "sha": "7a98fa2bdff1d7a7856fcaaa685d5ac97f81f48d",
  "author": "rxsang",
  "participant": "haoyuz",
  "created_at": "2019-04-02 18:35:45",
  "merged_at": "2019-04-02 22:24:29",
  "merged_by": "rxsang",
  "file_path": "official/resnet/resnet_run_loop.py",
  "condition": [
   "$0 = $0.batch($1, $2=False)"
  ],
  "consequent": [
   "$2: A boolean indicates whether to drop the remainder of the",
   "\tbatches. If True, the batch dimension will be static.",
   "  $0 = $0.batch($1, $2=$2)"
  ],
  "identifiers": {
   "condition": [
    "batch"
   ],
   "consequent": [
    "boolean",
    "If",
    "of",
    "will",
    "be",
    "batches",
    "indicates",
    "whether",
    "remainder",
    "dimension",
    "static",
    "to",
    "the",
    "drop",
    "batch",
    "A"
   ]
  }
 },
 {
  "number": 6558,
  "sha": "be09c9ee99cac6a802505b28b51170d608d355e1",
  "author": "rxsang",
  "participant": "tfboyd",
  "created_at": "2019-04-10 20:21:32",
  "merged_at": "2019-04-11 04:04:11",
  "merged_by": "tfboyd",
  "file_path": "official/resnet/keras/keras_imagenet_main.py",
  "condition": [
   "if $0.$1:"
  ],
  "consequent": [
   "if $0.$1 and not $0.enable_eager:"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "enable_eager"
   ]
  }
 },
 {
  "number": 6598,
  "sha": "d5466cce345c17fc8ff8953ff64af8341b978c9c",
  "author": "rxsang",
  "participant": "haoyuz",
  "created_at": "2019-04-17 21:58:21",
  "merged_at": "2019-04-17 22:20:41",
  "merged_by": "rxsang",
  "file_path": "official/resnet/keras/keras_imagenet_main.py",
  "condition": [
   "per_replica_batch_size = None"
  ],
  "consequent": [
   "input_layer_batch_size = None"
  ],
  "identifiers": {
   "condition": [
    "per_replica_batch_size"
   ],
   "consequent": [
    "input_layer_batch_size"
   ]
  }
 },
 {
  "number": 6598,
  "sha": "d5466cce345c17fc8ff8953ff64af8341b978c9c",
  "author": "rxsang",
  "participant": "haoyuz",
  "created_at": "2019-04-17 21:58:21",
  "merged_at": "2019-04-17 22:20:41",
  "merged_by": "rxsang",
  "file_path": "official/resnet/keras/keras_imagenet_main.py",
  "condition": [
   "per_replica_batch_size = $0.batch_size"
  ],
  "consequent": [
   "input_layer_batch_size = $0.batch_size"
  ],
  "identifiers": {
   "condition": [
    "batch_size",
    "per_replica_batch_size"
   ],
   "consequent": [
    "input_layer_batch_size",
    "batch_size"
   ]
  }
 },
 {
  "number": 6598,
  "sha": "d5466cce345c17fc8ff8953ff64af8341b978c9c",
  "author": "rxsang",
  "participant": "haoyuz",
  "created_at": "2019-04-17 21:58:21",
  "merged_at": "2019-04-17 22:20:41",
  "merged_by": "rxsang",
  "file_path": "official/resnet/keras/keras_imagenet_main.py",
  "condition": [
   "per_replica_batch_size = None"
  ],
  "consequent": [
   "input_layer_batch_size = None"
  ],
  "identifiers": {
   "condition": [
    "per_replica_batch_size"
   ],
   "consequent": [
    "input_layer_batch_size"
   ]
  }
 },
 {
  "number": 6598,
  "sha": "d5466cce345c17fc8ff8953ff64af8341b978c9c",
  "author": "rxsang",
  "participant": "haoyuz",
  "created_at": "2019-04-17 21:58:21",
  "merged_at": "2019-04-17 22:20:41",
  "merged_by": "rxsang",
  "file_path": "official/resnet/keras/keras_imagenet_main.py",
  "condition": [
   "$0=per_replica_batch_size)"
  ],
  "consequent": [
   "$0=input_layer_batch_size)"
  ],
  "identifiers": {
   "condition": [
    "per_replica_batch_size"
   ],
   "consequent": [
    "input_layer_batch_size"
   ]
  }
 },
 {
  "number": 6862,
  "sha": "625387380fc912b78e0d99ce01c0be823e4bcf31",
  "author": "rxsang",
  "participant": "guptapriya",
  "created_at": "2019-05-23 04:10:43",
  "merged_at": "2019-05-23 21:22:40",
  "merged_by": "rxsang",
  "file_path": "official/resnet/keras/keras_imagenet_benchmark.py",
  "condition": [
   "def benchmark_xla_8_gpu_fp16_tweaked_get_next_as_optional($0):"
  ],
  "consequent": [
   "def benchmark_xla_8_gpu_fp16_tweaked_optional_next($0):"
  ],
  "identifiers": {
   "condition": [
    "benchmark_xla_8_gpu_fp16_tweaked_get_next_as_optional"
   ],
   "consequent": [
    "benchmark_xla_8_gpu_fp16_tweaked_optional_next"
   ]
  }
 },
 {
  "number": 6943,
  "sha": "ffdafe109091d25197e711374a7285b9ab9efaf8",
  "author": "guptapriya",
  "participant": "tfboyd",
  "created_at": "2019-06-02 23:10:26",
  "merged_at": "2019-06-03 21:31:13",
  "merged_by": "tfboyd",
  "file_path": "official/recommendation/ncf_keras_benchmark.py",
  "condition": [
   "def benchmark_2_gpu_ctl($0):"
  ],
  "consequent": [
   "def benchmark_2_gpus_ctl($0):"
  ],
  "identifiers": {
   "condition": [
    "benchmark_2_gpu_ctl"
   ],
   "consequent": [
    "benchmark_2_gpus_ctl"
   ]
  }
 },
 {
  "number": 6961,
  "sha": "8bf50eaf9d3b2473fa802eedce35c8b13035cce0",
  "author": "guptapriya",
  "participant": "tfboyd",
  "created_at": "2019-06-05 05:40:18",
  "merged_at": "2019-06-05 23:44:30",
  "merged_by": "guptapriya",
  "file_path": "official/transformer/v2/data_pipeline.py",
  "condition": [
   "return $0.generate_synthetic_data("
  ],
  "consequent": [
   "dataset = $0.generate_synthetic_data("
  ],
  "identifiers": {
   "condition": [
    "generate_synthetic_data"
   ],
   "consequent": [
    "generate_synthetic_data",
    "dataset"
   ]
  }
 },
 {
  "number": 6961,
  "sha": "8bf50eaf9d3b2473fa802eedce35c8b13035cce0",
  "author": "guptapriya",
  "participant": "tfboyd",
  "created_at": "2019-06-05 05:40:18",
  "merged_at": "2019-06-05 23:44:30",
  "merged_by": "guptapriya",
  "file_path": "official/transformer/v2/data_pipeline.py",
  "condition": [
   "$0=$1.TensorShape([batch, $2]),"
  ],
  "consequent": [
   "$0=$1.TensorShape([$2]),"
  ],
  "identifiers": {
   "condition": [
    "batch",
    "TensorShape"
   ],
   "consequent": [
    "TensorShape"
   ]
  }
 },
 {
  "number": 6961,
  "sha": "8bf50eaf9d3b2473fa802eedce35c8b13035cce0",
  "author": "guptapriya",
  "participant": "tfboyd",
  "created_at": "2019-06-05 05:40:18",
  "merged_at": "2019-06-05 23:44:30",
  "merged_by": "guptapriya",
  "file_path": "official/transformer/v2/data_pipeline.py",
  "condition": [
   "$0=$1.TensorShape([batch, $2]),"
  ],
  "consequent": [
   "$0=$1.TensorShape([$2]),"
  ],
  "identifiers": {
   "condition": [
    "batch",
    "TensorShape"
   ],
   "consequent": [
    "TensorShape"
   ]
  }
 },
 {
  "number": 6961,
  "sha": "8bf50eaf9d3b2473fa802eedce35c8b13035cce0",
  "author": "guptapriya",
  "participant": "tfboyd",
  "created_at": "2019-06-05 05:40:18",
  "merged_at": "2019-06-05 23:44:30",
  "merged_by": "guptapriya",
  "file_path": "official/transformer/v2/transformer_main.py",
  "condition": [
   "$0._load_weights_if_possible($1, $2.init_weight_path)"
  ],
  "consequent": [
   "print(\"Running transformer with num_gpus =\", num_gpus)",
   "\tif $0.distribution_strategy:",
   "\tprint(\"For training, using distribution strategy: \",             $0.distribution_strategy)",
   "    else:",
   "\tprint(\"Not using any distribution strategy.\")",
   "      $0._load_weights_if_possible(           $1, tf.train.latest_checkpoint($0.$2.model_dir))"
  ],
  "identifiers": {
   "condition": [
    "init_weight_path",
    "_load_weights_if_possible"
   ],
   "consequent": [
    "distribution_strategy",
    "train",
    "model_dir",
    "_load_weights_if_possible",
    "num_gpus",
    "tf",
    "print",
    "latest_checkpoint"
   ]
  }
 },
 {
  "number": 6961,
  "sha": "8bf50eaf9d3b2473fa802eedce35c8b13035cce0",
  "author": "guptapriya",
  "participant": "tfboyd",
  "created_at": "2019-06-05 05:40:18",
  "merged_at": "2019-06-05 23:44:30",
  "merged_by": "guptapriya",
  "file_path": "official/transformer/v2/transformer_main_test.py",
  "condition": [
   "$0.$1 = $2",
   "\t$0.init_logdir_timestamp = $3",
   "    $0.$4 = $4 = \"tiny\""
  ],
  "consequent": [
   "$0.$1 = os.path.join($2, $3)",
   "\t$0.$4 = \"tiny\""
  ],
  "identifiers": {
   "condition": [
    "init_logdir_timestamp"
   ],
   "consequent": [
    "os",
    "join",
    "path"
   ]
  }
 },
 {
  "number": 6961,
  "sha": "8bf50eaf9d3b2473fa802eedce35c8b13035cce0",
  "author": "guptapriya",
  "participant": "tfboyd",
  "created_at": "2019-06-05 05:40:18",
  "merged_at": "2019-06-05 23:44:30",
  "merged_by": "guptapriya",
  "file_path": "official/transformer/v2/transformer_main_test.py",
  "condition": [
   "$0.steps_per_epoch = 1"
  ],
  "consequent": [
   "$0.steps_between_evals = 1",
   "\t$0.train_steps = 2"
  ],
  "identifiers": {
   "condition": [
    "steps_per_epoch"
   ],
   "consequent": [
    "train_steps",
    "steps_between_evals"
   ]
  }
 },
 {
  "number": 6961,
  "sha": "8bf50eaf9d3b2473fa802eedce35c8b13035cce0",
  "author": "guptapriya",
  "participant": "tfboyd",
  "created_at": "2019-06-05 05:40:18",
  "merged_at": "2019-06-05 23:44:30",
  "merged_by": "guptapriya",
  "file_path": "official/transformer/v2/transformer_main_test.py",
  "condition": [
   "$0.train_epochs = 1",
   "\t$0.init_weight_path = None",
   "    $1.cur_log_dir = os.path.join($2, FIXED_TIMESTAMP)"
  ],
  "consequent": [
   "$0.num_gpus = 1",
   "\t$0.distribution_strategy = \"off\"",
   "    $1.model_dir = $0.model_dir",
   "    $1.$2 = $2"
  ],
  "identifiers": {
   "condition": [
    "os",
    "join",
    "path",
    "init_weight_path",
    "FIXED_TIMESTAMP",
    "train_epochs",
    "cur_log_dir"
   ],
   "consequent": [
    "distribution_strategy",
    "num_gpus",
    "model_dir"
   ]
  }
 },
 {
  "number": 6961,
  "sha": "8bf50eaf9d3b2473fa802eedce35c8b13035cce0",
  "author": "guptapriya",
  "participant": "tfboyd",
  "created_at": "2019-06-05 05:40:18",
  "merged_at": "2019-06-05 23:44:30",
  "merged_by": "guptapriya",
  "file_path": "official/transformer/v2/transformer_main_test.py",
  "condition": [
   "$0.$1 = $2.$3.join($0.cur_log_dir, \"vocab\")"
  ],
  "consequent": [
   "$0.$1 = $2.$3.join(temp_dir, \"vocab\")"
  ],
  "identifiers": {
   "condition": [
    "join",
    "cur_log_dir"
   ],
   "consequent": [
    "join",
    "temp_dir"
   ]
  }
 },
 {
  "number": 6961,
  "sha": "8bf50eaf9d3b2473fa802eedce35c8b13035cce0",
  "author": "guptapriya",
  "participant": "tfboyd",
  "created_at": "2019-06-05 05:40:18",
  "merged_at": "2019-06-05 23:44:30",
  "merged_by": "guptapriya",
  "file_path": "official/transformer/v2/transformer_main_test.py",
  "condition": [
   "$0.$1 = $2.get_model_params($3, 0)[\"vocab_size\"]"
  ],
  "consequent": [
   "$0.$1 = $2.get_model_params(FLAGS.$3, 0)[\"vocab_size\"]"
  ],
  "identifiers": {
   "condition": [
    "get_model_params"
   ],
   "consequent": [
    "get_model_params",
    "FLAGS"
   ]
  }
 },
 {
  "number": 6961,
  "sha": "8bf50eaf9d3b2473fa802eedce35c8b13035cce0",
  "author": "guptapriya",
  "participant": "tfboyd",
  "created_at": "2019-06-05 05:40:18",
  "merged_at": "2019-06-05 23:44:30",
  "merged_by": "guptapriya",
  "file_path": "official/transformer/v2/transformer_main_test.py",
  "condition": [
   "$0.$1 = $2.$3.join($0.cur_log_dir, \"bleu_source\")"
  ],
  "consequent": [
   "$0.$1 = $2.$3.join(temp_dir, \"bleu_source\")"
  ],
  "identifiers": {
   "condition": [
    "join",
    "cur_log_dir"
   ],
   "consequent": [
    "join",
    "temp_dir"
   ]
  }
 },
 {
  "number": 6961,
  "sha": "8bf50eaf9d3b2473fa802eedce35c8b13035cce0",
  "author": "guptapriya",
  "participant": "tfboyd",
  "created_at": "2019-06-05 05:40:18",
  "merged_at": "2019-06-05 23:44:30",
  "merged_by": "guptapriya",
  "file_path": "official/transformer/v2/transformer_main_test.py",
  "condition": [
   "$0.$1 = $2.$3.join($0.cur_log_dir, \"bleu_ref\")"
  ],
  "consequent": [
   "$0.$1 = $2.$3.join(temp_dir, \"bleu_ref\")"
  ],
  "identifiers": {
   "condition": [
    "join",
    "cur_log_dir"
   ],
   "consequent": [
    "join",
    "temp_dir"
   ]
  }
 },
 {
  "number": 6961,
  "sha": "8bf50eaf9d3b2473fa802eedce35c8b13035cce0",
  "author": "guptapriya",
  "participant": "tfboyd",
  "created_at": "2019-06-05 05:40:18",
  "merged_at": "2019-06-05 23:44:30",
  "merged_by": "guptapriya",
  "file_path": "official/transformer/v2/transformer_main_test.py",
  "condition": [
   "$0.flags_file = os.path.join($0.cur_log_dir, \"flags\")                      ",
   "\t$0._assert_exists($0.cur_log_dir)                          ",
   "    $0._assert_exists(         os.path.join($0.cur_log_dir, \"saves-model-weights.hdf5\"))",
   "    $0._assert_exists(os.path.join($0.cur_log_dir, \"saves-model.hdf5\"))                                              ",
   "    $0._assert_exists(os.path.join($0.cur_log_dir, \"logs\"))                      ",
   "    $0._assert_exists(os.path.join($0.cur_log_dir, \"result.csv\"))                       ",
   "    filenames = os.listdir($0.cur_log_dir)",
   "    matched_weight_file = any([WEIGHT_PATTERN.match(f) for f in filenames])",
   "    $0.assertTrue(matched_weight_file)"
  ],
  "consequent": [
   "def test_train_static_batch($0):",
   "\tFLAGS.static_batch = True",
   "    t = tm.TransformerTask(FLAGS)",
   "    t.train() ",
   "  def test_train_1_gpu_with_dist_strat($0):",
   "\tFLAGS.distribution_strategy = \"one_device\"",
   "    t = tm.TransformerTask(FLAGS)",
   "    t.train() ",
   "  def test_train_2_gpu($0):",
   "\tFLAGS.distribution_strategy = \"mirrored\"",
   "    FLAGS.num_gpus = 2",
   "    FLAGS.param_set = \"base\"",
   "    t = tm.TransformerTask(FLAGS)",
   "    t.train()"
  ],
  "identifiers": {
   "condition": [
    "os",
    "match",
    "assertTrue",
    "flags_file",
    "any",
    "_assert_exists",
    "filenames",
    "join",
    "listdir",
    "f",
    "path",
    "WEIGHT_PATTERN",
    "matched_weight_file",
    "cur_log_dir"
   ],
   "consequent": [
    "train",
    "distribution_strategy",
    "test_train_1_gpu_with_dist_strat",
    "param_set",
    "FLAGS",
    "test_train_2_gpu",
    "tm",
    "num_gpus",
    "t",
    "static_batch",
    "test_train_static_batch",
    "TransformerTask"
   ]
  }
 },
 {
  "number": 6961,
  "sha": "8bf50eaf9d3b2473fa802eedce35c8b13035cce0",
  "author": "guptapriya",
  "participant": "tfboyd",
  "created_at": "2019-06-05 05:40:18",
  "merged_at": "2019-06-05 23:44:30",
  "merged_by": "guptapriya",
  "file_path": "official/transformer/v2/transformer_main_test.py",
  "condition": [
   "if not $0.$1.exists($2.cur_log_dir):"
  ],
  "consequent": [
   "if not $0.$1.exists($2.temp_dir):"
  ],
  "identifiers": {
   "condition": [
    "exists",
    "cur_log_dir"
   ],
   "consequent": [
    "exists",
    "temp_dir"
   ]
  }
 },
 {
  "number": 6961,
  "sha": "8bf50eaf9d3b2473fa802eedce35c8b13035cce0",
  "author": "guptapriya",
  "participant": "tfboyd",
  "created_at": "2019-06-05 05:40:18",
  "merged_at": "2019-06-05 23:44:30",
  "merged_by": "guptapriya",
  "file_path": "official/transformer/v2/transformer_main_test.py",
  "condition": [
   "$0.makedirs($1.cur_log_dir)"
  ],
  "consequent": [
   "$0.makedirs($1.temp_dir)"
  ],
  "identifiers": {
   "condition": [
    "makedirs",
    "cur_log_dir"
   ],
   "consequent": [
    "makedirs",
    "temp_dir"
   ]
  }
 },
 {
  "number": 6997,
  "sha": "2027521661348414c4f84f57d7ac5b95dc656a4c",
  "author": "guptapriya",
  "participant": "bfontain",
  "created_at": "2019-06-11 20:59:28",
  "merged_at": "2019-06-13 05:09:09",
  "merged_by": "guptapriya",
  "file_path": "official/recommendation/ncf_common.py",
  "condition": [
   "\"turn_off_distribution_strategy\": FLAGS.turn_off_distribution_strategy,",
   "\tif params[\"turn_off_distribution_strategy\"]:",
   "\treturn None ",
   "  flags.DEFINE_boolean(       name=\"turn_off_distribution_strategy\",       default=False,       help=flags_core.help_wrap(           \"If set, do not use any distribution strategy.\"))"
  ],
  "consequent": [
   "def is_tf_v2():",
   "\t\"\"\"Returns whether it is v2.\"\"\"",
   "  from tensorflow.python import tf2 as tf2_internal",
   "  return tf2_internal.enabled()"
  ],
  "identifiers": {
   "condition": [
    "help_wrap",
    "FLAGS",
    "flags_core",
    "params",
    "name",
    "help",
    "turn_off_distribution_strategy",
    "default",
    "flags",
    "DEFINE_boolean"
   ],
   "consequent": [
    "enabled",
    "python",
    "is_tf_v2",
    "tf2_internal",
    "tensorflow",
    "tf2"
   ]
  }
 },
 {
  "number": 6997,
  "sha": "2027521661348414c4f84f57d7ac5b95dc656a4c",
  "author": "guptapriya",
  "participant": "bfontain",
  "created_at": "2019-06-11 20:59:28",
  "merged_at": "2019-06-13 05:09:09",
  "merged_by": "guptapriya",
  "file_path": "official/recommendation/ncf_keras_main.py",
  "condition": [
   "- Distributed $0 with keras fit does not support extra $1. The",
   "\tcurrent implementation for fit does not use $2 VALID_POINT_MASK in $2",
   "      input, which makes it extra, $3 it needs to be removed when using keras",
   "      fit."
  ],
  "consequent": [
   "- We need $2 same $1 for $0 and eval $3 adding fake $1",
   "\tfor DUPLICATE_MASK in $0 data."
  ],
  "identifiers": {
   "condition": [
    "use",
    "needs",
    "support",
    "does",
    "keras",
    "when",
    "which",
    "to",
    "input",
    "implementation",
    "fit",
    "using",
    "be",
    "removed",
    "extra",
    "Distributed",
    "VALID_POINT_MASK",
    "it",
    "makes",
    "current",
    "The"
   ],
   "consequent": [
    "DUPLICATE_MASK",
    "fake",
    "same",
    "need",
    "data",
    "eval",
    "We",
    "adding"
   ]
  }
 },
 {
  "number": 6997,
  "sha": "2027521661348414c4f84f57d7ac5b95dc656a4c",
  "author": "guptapriya",
  "participant": "bfontain",
  "created_at": "2019-06-11 20:59:28",
  "merged_at": "2019-06-13 05:09:09",
  "merged_by": "guptapriya",
  "file_path": "official/recommendation/ncf_keras_main.py",
  "condition": [
   "return $0, labels"
  ],
  "consequent": [
   "if params[\"distribute_strategy\"] or not ncf_common.is_tf_v2():",
   "\treturn $0",
   "    else:                    ",
   "\treturn ($0,)"
  ],
  "identifiers": {
   "condition": [
    "labels"
   ],
   "consequent": [
    "ncf_common",
    "params",
    "is_tf_v2"
   ]
  }
 },
 {
  "number": 6997,
  "sha": "2027521661348414c4f84f57d7ac5b95dc656a4c",
  "author": "guptapriya",
  "participant": "bfontain",
  "created_at": "2019-06-11 20:59:28",
  "merged_at": "2019-06-13 05:09:09",
  "merged_by": "guptapriya",
  "file_path": "official/recommendation/ncf_keras_main.py",
  "condition": [
   "$0 is $1 because:"
  ],
  "consequent": [
   "$0 is $1 becasue:"
  ],
  "identifiers": {
   "condition": [
    "because"
   ],
   "consequent": [
    "becasue"
   ]
  }
 },
 {
  "number": 6997,
  "sha": "2027521661348414c4f84f57d7ac5b95dc656a4c",
  "author": "guptapriya",
  "participant": "bfontain",
  "created_at": "2019-06-11 20:59:28",
  "merged_at": "2019-06-13 05:09:09",
  "merged_by": "guptapriya",
  "file_path": "official/recommendation/ncf_keras_main.py",
  "condition": [
   "- Distributed $0 with keras fit does not support extra $1. The",
   "\tcurrent implementation for fit does not use $2 DUPLICATE_MASK in $2",
   "      input, which makes it extra, $3 it needs to be removed when using keras",
   "      fit."
  ],
  "consequent": [
   "- We need $2 same $1 for $0 and eval $3 adding fake $1",
   "\tfor VALID_PT_MASK in eval data."
  ],
  "identifiers": {
   "condition": [
    "use",
    "needs",
    "support",
    "does",
    "keras",
    "when",
    "which",
    "to",
    "input",
    "implementation",
    "fit",
    "using",
    "be",
    "removed",
    "extra",
    "Distributed",
    "DUPLICATE_MASK",
    "it",
    "makes",
    "current",
    "The"
   ],
   "consequent": [
    "fake",
    "same",
    "need",
    "data",
    "eval",
    "VALID_PT_MASK",
    "We",
    "adding"
   ]
  }
 },
 {
  "number": 6997,
  "sha": "2027521661348414c4f84f57d7ac5b95dc656a4c",
  "author": "guptapriya",
  "participant": "bfontain",
  "created_at": "2019-06-11 20:59:28",
  "merged_at": "2019-06-13 05:09:09",
  "merged_by": "guptapriya",
  "file_path": "official/recommendation/ncf_keras_main.py",
  "condition": [
   "fake_valit_pt_mask = $0.cast("
  ],
  "consequent": [
   "fake_valid_pt_mask = $0.cast("
  ],
  "identifiers": {
   "condition": [
    "fake_valit_pt_mask",
    "cast"
   ],
   "consequent": [
    "fake_valid_pt_mask",
    "cast"
   ]
  }
 },
 {
  "number": 6997,
  "sha": "2027521661348414c4f84f57d7ac5b95dc656a4c",
  "author": "guptapriya",
  "participant": "bfontain",
  "created_at": "2019-06-11 20:59:28",
  "merged_at": "2019-06-13 05:09:09",
  "merged_by": "guptapriya",
  "file_path": "official/recommendation/ncf_keras_main.py",
  "condition": [
   "$0[$1.$2] = fake_valit_pt_mask"
  ],
  "consequent": [
   "$0[$1.$2] = fake_valid_pt_mask"
  ],
  "identifiers": {
   "condition": [
    "fake_valit_pt_mask"
   ],
   "consequent": [
    "fake_valid_pt_mask"
   ]
  }
 },
 {
  "number": 6997,
  "sha": "2027521661348414c4f84f57d7ac5b95dc656a4c",
  "author": "guptapriya",
  "participant": "bfontain",
  "created_at": "2019-06-11 20:59:28",
  "merged_at": "2019-06-13 05:09:09",
  "merged_by": "guptapriya",
  "file_path": "official/recommendation/ncf_keras_main.py",
  "condition": [
   "return $0, labels"
  ],
  "consequent": [
   "if params[\"distribute_strategy\"] or not ncf_common.is_tf_v2():",
   "\treturn $0",
   "    else:                    ",
   "\treturn ($0,)"
  ],
  "identifiers": {
   "condition": [
    "labels"
   ],
   "consequent": [
    "ncf_common",
    "params",
    "is_tf_v2"
   ]
  }
 },
 {
  "number": 6997,
  "sha": "2027521661348414c4f84f57d7ac5b95dc656a4c",
  "author": "guptapriya",
  "participant": "bfontain",
  "created_at": "2019-06-11 20:59:28",
  "merged_at": "2019-06-13 05:09:09",
  "merged_by": "guptapriya",
  "file_path": "official/recommendation/ncf_keras_main.py",
  "condition": [
   "loss_scale_factor = ($0 *                        tf.distribute.get_strategy().num_replicas_in_sync)",
   "\t$1=$2) * 1.0 / loss_scale_factor)"
  ],
  "consequent": [
   "$1=$2) * 1.0 / $0)"
  ],
  "identifiers": {
   "condition": [
    "loss_scale_factor",
    "get_strategy",
    "num_replicas_in_sync",
    "distribute",
    "tf"
   ],
   "consequent": []
  }
 },
 {
  "number": 6997,
  "sha": "2027521661348414c4f84f57d7ac5b95dc656a4c",
  "author": "guptapriya",
  "participant": "bfontain",
  "created_at": "2019-06-11 20:59:28",
  "merged_at": "2019-06-13 05:09:09",
  "merged_by": "guptapriya",
  "file_path": "official/recommendation/ncf_keras_main.py",
  "condition": [
   "if $0[\"keras_use_ctl\"] and int(tf.__version__.split(\".\")[0]) == 1:"
  ],
  "consequent": [
   "strategy = distribution_utils.get_distribution_strategy(       distribution_strategy=FLAGS.distribution_strategy,       num_gpus=FLAGS.num_gpus)",
   "\t$0[\"distribute_strategy\"] = strategy ",
   "  if ($0[\"keras_use_ctl\"] and (       not ncf_common.is_tf_v2() or strategy is None)):"
  ],
  "identifiers": {
   "condition": [
    "tf",
    "int",
    "__version__",
    "split"
   ],
   "consequent": [
    "distribution_strategy",
    "strategy",
    "distribution_utils",
    "FLAGS",
    "is_tf_v2",
    "num_gpus",
    "get_distribution_strategy",
    "ncf_common"
   ]
  }
 },
 {
  "number": 6997,
  "sha": "2027521661348414c4f84f57d7ac5b95dc656a4c",
  "author": "guptapriya",
  "participant": "bfontain",
  "created_at": "2019-06-11 20:59:28",
  "merged_at": "2019-06-13 05:09:09",
  "merged_by": "guptapriya",
  "file_path": "official/recommendation/ncf_keras_main.py",
  "condition": [
   "strategy = ncf_common.get_distribution_strategy(params)"
  ],
  "consequent": [],
  "identifiers": {
   "condition": [
    "ncf_common",
    "params",
    "strategy",
    "get_distribution_strategy"
   ],
   "consequent": []
  }
 },
 {
  "number": 6997,
  "sha": "2027521661348414c4f84f57d7ac5b95dc656a4c",
  "author": "guptapriya",
  "participant": "bfontain",
  "created_at": "2019-06-11 20:59:28",
  "merged_at": "2019-06-13 05:09:09",
  "merged_by": "guptapriya",
  "file_path": "official/recommendation/ncf_keras_main.py",
  "condition": [
   "$0 = $1.$2.SparseCategoricalCrossentropy("
  ],
  "consequent": [
   "$0 = $1.keras.$2.SparseCategoricalCrossentropy("
  ],
  "identifiers": {
   "condition": [
    "SparseCategoricalCrossentropy"
   ],
   "consequent": [
    "keras",
    "SparseCategoricalCrossentropy"
   ]
  }
 },
 {
  "number": 6997,
  "sha": "2027521661348414c4f84f57d7ac5b95dc656a4c",
  "author": "guptapriya",
  "participant": "bfontain",
  "created_at": "2019-06-11 20:59:28",
  "merged_at": "2019-06-13 05:09:09",
  "merged_by": "guptapriya",
  "file_path": "official/recommendation/ncf_keras_main.py",
  "condition": [
   "def step_fn(inputs):"
  ],
  "consequent": [
   "def step_fn(features):"
  ],
  "identifiers": {
   "condition": [
    "step_fn",
    "inputs"
   ],
   "consequent": [
    "step_fn",
    "features"
   ]
  }
 },
 {
  "number": 6997,
  "sha": "2027521661348414c4f84f57d7ac5b95dc656a4c",
  "author": "guptapriya",
  "participant": "bfontain",
  "created_at": "2019-06-11 20:59:28",
  "merged_at": "2019-06-13 05:09:09",
  "merged_by": "guptapriya",
  "file_path": "official/recommendation/ncf_keras_main.py",
  "condition": [
   "$0, $1 = inputs"
  ],
  "consequent": [
   "$1 = $0[rconst.TRAIN_LABEL_KEY]"
  ],
  "identifiers": {
   "condition": [
    "inputs"
   ],
   "consequent": [
    "TRAIN_LABEL_KEY",
    "rconst"
   ]
  }
 },
 {
  "number": 6997,
  "sha": "2027521661348414c4f84f57d7ac5b95dc656a4c",
  "author": "guptapriya",
  "participant": "bfontain",
  "created_at": "2019-06-11 20:59:28",
  "merged_at": "2019-06-13 05:09:09",
  "merged_by": "guptapriya",
  "file_path": "official/recommendation/ncf_keras_main.py",
  "condition": [
   "def step_fn(inputs):"
  ],
  "consequent": [
   "def step_fn(features):"
  ],
  "identifiers": {
   "condition": [
    "step_fn",
    "inputs"
   ],
   "consequent": [
    "step_fn",
    "features"
   ]
  }
 },
 {
  "number": 6997,
  "sha": "2027521661348414c4f84f57d7ac5b95dc656a4c",
  "author": "guptapriya",
  "participant": "bfontain",
  "created_at": "2019-06-11 20:59:28",
  "merged_at": "2019-06-13 05:09:09",
  "merged_by": "guptapriya",
  "file_path": "official/recommendation/ncf_test.py",
  "condition": [
   "def test_end_to_end_keras($0):"
  ],
  "consequent": [
   "def test_end_to_end_keras_no_dist_strat($0):"
  ],
  "identifiers": {
   "condition": [
    "test_end_to_end_keras"
   ],
   "consequent": [
    "test_end_to_end_keras_no_dist_strat"
   ]
  }
 },
 {
  "number": 6997,
  "sha": "2027521661348414c4f84f57d7ac5b95dc656a4c",
  "author": "guptapriya",
  "participant": "bfontain",
  "created_at": "2019-06-11 20:59:28",
  "merged_at": "2019-06-13 05:09:09",
  "merged_by": "guptapriya",
  "file_path": "official/recommendation/ncf_test.py",
  "condition": [
   "def test_end_to_end_keras_mlperf($0):"
  ],
  "consequent": [
   "def test_end_to_end_keras_dist_strat($0):"
  ],
  "identifiers": {
   "condition": [
    "test_end_to_end_keras_mlperf"
   ],
   "consequent": [
    "test_end_to_end_keras_dist_strat"
   ]
  }
 },
 {
  "number": 6997,
  "sha": "2027521661348414c4f84f57d7ac5b95dc656a4c",
  "author": "guptapriya",
  "participant": "bfontain",
  "created_at": "2019-06-11 20:59:28",
  "merged_at": "2019-06-13 05:09:09",
  "merged_by": "guptapriya",
  "file_path": "official/recommendation/ncf_test.py",
  "condition": [
   "$0=$1.$2 +"
  ],
  "consequent": [
   "$0=$1.$2 + ['-num_gpus', '0']) ",
   "\t@mock.patch.object(rconst, \"SYNTHETIC_BATCHES_PER_EPOCH\", 100)",
   "  def test_end_to_end_keras_dist_strat_ctl($1):",
   "\tflags = ($1.$2 +"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "patch",
    "rconst",
    "mock",
    "test_end_to_end_keras_dist_strat_ctl",
    "flags",
    "object"
   ]
  }
 },
 {
  "number": 6997,
  "sha": "2027521661348414c4f84f57d7ac5b95dc656a4c",
  "author": "guptapriya",
  "participant": "bfontain",
  "created_at": "2019-06-11 20:59:28",
  "merged_at": "2019-06-13 05:09:09",
  "merged_by": "guptapriya",
  "file_path": "official/recommendation/ncf_test.py",
  "condition": [
   "['-ml_perf', 'True',          '-distribution_strategy', 'off'])"
  ],
  "consequent": [
   "['-num_gpus', '0'] +",
   "\t['-keras_use_ctl', 'True'])",
   "    integration.run_synthetic(",
   "\tncf_keras_main.main, tmp_root=self.get_temp_dir(), max_train=None,",
   "        extra_flags=flags)"
  ],
  "identifiers": {
   "condition": [],
   "consequent": [
    "tmp_root",
    "run_synthetic",
    "self",
    "main",
    "ncf_keras_main",
    "max_train",
    "integration",
    "get_temp_dir",
    "extra_flags",
    "flags"
   ]
  }
 },
 {
  "number": 6997,
  "sha": "2027521661348414c4f84f57d7ac5b95dc656a4c",
  "author": "guptapriya",
  "participant": "bfontain",
  "created_at": "2019-06-11 20:59:28",
  "merged_at": "2019-06-13 05:09:09",
  "merged_by": "guptapriya",
  "file_path": "official/recommendation/ncf_test.py",
  "condition": [
   "def test_end_to_end_keras_1_gpu($0):"
  ],
  "consequent": [
   "def test_end_to_end_keras_1_gpu_dist_strat($0):"
  ],
  "identifiers": {
   "condition": [
    "test_end_to_end_keras_1_gpu"
   ],
   "consequent": [
    "test_end_to_end_keras_1_gpu_dist_strat"
   ]
  }
 },
 {
  "number": 7075,
  "sha": "c4227ed1c1747738255b34c550db3fbdd9cff83f",
  "author": "guptapriya",
  "participant": "tfboyd",
  "created_at": "2019-06-21 02:11:10",
  "merged_at": "2019-06-21 17:47:48",
  "merged_by": "tfboyd",
  "file_path": "official/transformer/v2/metrics.py",
  "condition": [
   "rc = tf.distribute.get_replica_context()",
   "\tdef merge_fn(_):",
   "\treturn 1",
   "    if rc:",
   "\tpass                                                                                                  "
  ],
  "consequent": [
   "for mean, fn in self.metric_mean_fns:"
  ],
  "identifiers": {
   "condition": [
    "_",
    "distribute",
    "rc",
    "tf",
    "get_replica_context",
    "merge_fn"
   ],
   "consequent": [
    "self",
    "metric_mean_fns",
    "fn",
    "mean"
   ]
  }
 },
 {
  "number": 7075,
  "sha": "c4227ed1c1747738255b34c550db3fbdd9cff83f",
  "author": "guptapriya",
  "participant": "tfboyd",
  "created_at": "2019-06-21 02:11:10",
  "merged_at": "2019-06-21 17:47:48",
  "merged_by": "tfboyd",
  "file_path": "official/transformer/v2/transformer.py",
  "condition": [
   "$0 = $1.MetricLayer($2)([$0, $3])"
  ],
  "consequent": [
   "if params[\"enable_metrics_in_training\"]:",
   "\t$0 = $1.MetricLayer($2)([$0, $3])"
  ],
  "identifiers": {
   "condition": [
    "MetricLayer"
   ],
   "consequent": [
    "params",
    "MetricLayer"
   ]
  }
 },
 {
  "number": 7075,
  "sha": "c4227ed1c1747738255b34c550db3fbdd9cff83f",
  "author": "guptapriya",
  "participant": "tfboyd",
  "created_at": "2019-06-21 02:11:10",
  "merged_at": "2019-06-21 17:47:48",
  "merged_by": "tfboyd",
  "file_path": "official/transformer/v2/transformer_main.py",
  "condition": [
   "print(\"Model.losses=\", model.losses)"
  ],
  "consequent": [
   "params[\"enable_metrics_in_training\"] = flags_obj.enable_metrics_in_training"
  ],
  "identifiers": {
   "condition": [
    "model",
    "losses",
    "print"
   ],
   "consequent": [
    "params",
    "enable_metrics_in_training",
    "flags_obj"
   ]
  }
 },
 {
  "number": 7257,
  "sha": "a2fdbdeba4230e01a4b6ba10f5015829ec186334",
  "author": "guptapriya",
  "participant": "tfboyd",
  "created_at": "2019-07-19 05:26:11",
  "merged_at": "2019-07-24 02:03:11",
  "merged_by": "guptapriya",
  "file_path": "official/transformer/v2/data_pipeline.py",
  "condition": [
   "$0=$1.int32,"
  ],
  "consequent": [
   "$0=$1.int64,"
  ],
  "identifiers": {
   "condition": [
    "int32"
   ],
   "consequent": [
    "int64"
   ]
  }
 },
 {
  "number": 7257,
  "sha": "a2fdbdeba4230e01a4b6ba10f5015829ec186334",
  "author": "guptapriya",
  "participant": "tfboyd",
  "created_at": "2019-07-19 05:26:11",
  "merged_at": "2019-07-24 02:03:11",
  "merged_by": "guptapriya",
  "file_path": "official/transformer/v2/data_pipeline.py",
  "condition": [
   "$0=$1.int32,"
  ],
  "consequent": [
   "$0=$1.int64,"
  ],
  "identifiers": {
   "condition": [
    "int32"
   ],
   "consequent": [
    "int64"
   ]
  }
 },
 {
  "number": 7257,
  "sha": "a2fdbdeba4230e01a4b6ba10f5015829ec186334",
  "author": "guptapriya",
  "participant": "tfboyd",
  "created_at": "2019-07-19 05:26:11",
  "merged_at": "2019-07-24 02:03:11",
  "merged_by": "guptapriya",
  "file_path": "official/transformer/v2/transformer_main_test.py",
  "condition": [
   "def test_train($0):"
  ],
  "consequent": [
   "def test_train_no_dist_strat($0):"
  ],
  "identifiers": {
   "condition": [
    "test_train"
   ],
   "consequent": [
    "test_train_no_dist_strat"
   ]
  }
 },
 {
  "number": 7257,
  "sha": "a2fdbdeba4230e01a4b6ba10f5015829ec186334",
  "author": "guptapriya",
  "participant": "tfboyd",
  "created_at": "2019-07-19 05:26:11",
  "merged_at": "2019-07-24 02:03:11",
  "merged_by": "guptapriya",
  "file_path": "official/transformer/v2/transformer_main_test.py",
  "condition": [
   "@unittest.skipUnless(keras_utils.is_v2_0(), 'TF 2.0 only test.')"
  ],
  "consequent": [
   "FLAGS.distribution_strategy = 'one_device'"
  ],
  "identifiers": {
   "condition": [
    "is_v2_0",
    "unittest",
    "keras_utils",
    "skipUnless"
   ],
   "consequent": [
    "distribution_strategy",
    "FLAGS"
   ]
  }
 }
]