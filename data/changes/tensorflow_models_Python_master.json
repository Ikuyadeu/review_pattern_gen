[
 {
  "sha": "9e680d187113aa8f87c7b7a33ff9573df02895d0",
  "author": "Yuki Ueda",
  "created_at": "2019-07-31 15:07:43",
  "file_path": "research/deep_speech/deep_speech_model.py",
  "condition": [
   "    \"lstm\": tf.contrib.rnn.BasicLSTMCell,"
  ],
  "consequent": [
   "    \"lstm\": tf.nn.rnn_cell.BasicLSTMCell,"
  ]
 },
 {
  "sha": "9e680d187113aa8f87c7b7a33ff9573df02895d0",
  "author": "Yuki Ueda",
  "created_at": "2019-07-31 15:07:43",
  "file_path": "research/deep_speech/deep_speech_model.py",
  "condition": [
   "    \"rnn\": tf.contrib.rnn.RNNCell,"
  ],
  "consequent": [
   "    \"rnn\": tf.nn.rnn_cell.RNNCell,"
  ]
 },
 {
  "sha": "9e680d187113aa8f87c7b7a33ff9573df02895d0",
  "author": "Yuki Ueda",
  "created_at": "2019-07-31 15:07:43",
  "file_path": "research/deep_speech/deep_speech_model.py",
  "condition": [
   "    \"gru\": tf.contrib.rnn.GRUCell,"
  ],
  "consequent": [
   "    \"gru\": tf.nn.rnn_cell.GRUCell,"
  ]
 },
 {
  "sha": "c6183922cc5ff35ab2cbd12b9b6704e4792264da",
  "author": "Mark Daoust",
  "created_at": "2019-07-31 07:21:39",
  "file_path": "samples/cookbook/regression/automobile_data.py",
  "condition": [
   "        return dataset"
  ],
  "consequent": [
   "        return dataset.make_one_shot_iterator().get_next()"
  ]
 },
 {
  "sha": "c45213c91d39c57b856b918559c4d73398eb8652",
  "author": "jianchao-li",
  "created_at": "2018-12-17 12:41:30",
  "file_path": "samples/outreach/blogs/blog_custom_estimators.py",
  "condition": [
   "assert StrictVersion(\"1.4\") <= StrictVersion(tf_version), \"TensorFlow r1.4 or later is needed\""
  ],
  "consequent": [
   "assert \"1.4\" <= tf_version, \"TensorFlow r1.4 or later is needed\""
  ]
 },
 {
  "sha": "c45213c91d39c57b856b918559c4d73398eb8652",
  "author": "jianchao-li",
  "created_at": "2018-12-17 12:41:30",
  "file_path": "samples/outreach/blogs/blog_estimators_dataset.py",
  "condition": [
   "assert StrictVersion(\"1.4\") <= StrictVersion(tf_version), \"TensorFlow r1.4 or later is needed\""
  ],
  "consequent": [
   "assert \"1.4\" <= tf_version, \"TensorFlow r1.4 or later is needed\""
  ]
 },
 {
  "sha": "c45213c91d39c57b856b918559c4d73398eb8652",
  "author": "jianchao-li",
  "created_at": "2018-12-17 12:41:30",
  "file_path": "tutorials/rnn/ptb/ptb_word_lm.py",
  "condition": [
   "  if FLAGS.num_gpus != 1 or StrictVersion(tf.__version__) < StrictVersion(\"1.3.0\") :"
  ],
  "consequent": [
   "  if FLAGS.num_gpus != 1 or tf.__version__ < \"1.3.0\" :"
  ]
 },
 {
  "sha": "c45213c91d39c57b856b918559c4d73398eb8652",
  "author": "jianchao-li",
  "created_at": "2018-12-17 12:41:30",
  "file_path": "tutorials/rnn/ptb/ptb_word_lm.py",
  "condition": [
   "    if StrictVersion(tf.__version__) < StrictVersion(\"1.1.0\") and FLAGS.num_gpus > 1:"
  ],
  "consequent": [
   "    if tf.__version__ < \"1.1.0\" and FLAGS.num_gpus > 1:"
  ]
 },
 {
  "sha": "2533c6978e9b57d8d8dfd6f11bcedcdd73d2f15d",
  "author": "Toby Boyd",
  "created_at": "2019-07-25 09:45:33",
  "file_path": "official/recommendation/ncf_keras_benchmark.py",
  "condition": [
   "    self._run_and_report_benchmark(hr_at_10_min=0.61, hr_at_10_max=0.65)"
  ],
  "consequent": [
   "    self._run_and_report_benchmark(hr_at_10_min=0.61)"
  ]
 },
 {
  "sha": "1c509f1951deee7bf61a4fffc6b91a6423365ab5",
  "author": "Toby Boyd",
  "created_at": "2019-07-25 09:45:18",
  "file_path": "official/staging/shakespeare/shakespeare_benchmark.py",
  "condition": [
   "  def benchmark_1_gpu_no_ds(self):"
  ],
  "consequent": [
   "  def benchmark_1_gpu_no_ds_run_eagerly(self):"
  ]
 },
 {
  "sha": "9fb1a1b671969af6fb7029bb446835394ccdc4a9",
  "author": "Soroush Radpour",
  "created_at": "2019-07-25 07:30:28",
  "file_path": "official/resnet/keras/keras_imagenet_main.py",
  "condition": [
   "    run(flags.FLAGS)"
  ],
  "consequent": [
   "    return run(flags.FLAGS)"
  ]
 },
 {
  "sha": "c612d8c7c58cdfdd2e2e27bbf831a1154b5ca095",
  "author": "Toby Boyd",
  "created_at": "2019-07-25 01:34:33",
  "file_path": "official/recommendation/ncf_keras_benchmark.py",
  "condition": [
   "    self._run_and_report_benchmark(hr_at_10_min=0.61)"
  ],
  "consequent": [
   "    super(NCFKerasAccuracy, self)._run_and_report_benchmark(hr_at_10_min=0.61)"
  ]
 },
 {
  "sha": "c612d8c7c58cdfdd2e2e27bbf831a1154b5ca095",
  "author": "Toby Boyd",
  "created_at": "2019-07-25 01:34:33",
  "file_path": "official/recommendation/ncf_keras_benchmark.py",
  "condition": [
   "        hr_at_10_min=hr_at_10_min,"
  ],
  "consequent": [
   "        top_1_min=hr_at_10_min,"
  ]
 },
 {
  "sha": "c612d8c7c58cdfdd2e2e27bbf831a1154b5ca095",
  "author": "Toby Boyd",
  "created_at": "2019-07-25 01:34:33",
  "file_path": "official/recommendation/ncf_keras_benchmark.py",
  "condition": [
   "        hr_at_10_max=hr_at_10_max)"
  ],
  "consequent": [
   "        top_1_max=hr_at_10_max)"
  ]
 },
 {
  "sha": "d09994b26ac8592765be45dc8a8444ead55eb32b",
  "author": "Toby Boyd",
  "created_at": "2019-07-24 14:06:21",
  "file_path": "official/resnet/keras/keras_imagenet_benchmark.py",
  "condition": [
   "  def benchmark_1_gpu_no_dist_strat_force_v2_run_eagerly(self):"
  ],
  "consequent": [
   "  def benchmark_1_gpu_force_dist_strat_run_eagerly(self):"
  ]
 },
 {
  "sha": "d09994b26ac8592765be45dc8a8444ead55eb32b",
  "author": "Toby Boyd",
  "created_at": "2019-07-24 14:06:21",
  "file_path": "official/resnet/keras/keras_imagenet_benchmark.py",
  "condition": [
   "    \"\"\"Forced v2 execution in tf.compile path and force eager.\"\"\""
  ],
  "consequent": [
   "    \"\"\"No dist strat but forced ds tf.compile path and force eager.\"\"\""
  ]
 },
 {
  "sha": "d09994b26ac8592765be45dc8a8444ead55eb32b",
  "author": "Toby Boyd",
  "created_at": "2019-07-24 14:06:21",
  "file_path": "official/resnet/keras/keras_imagenet_benchmark.py",
  "condition": [
   "    FLAGS.force_v2_in_keras_compile = True"
  ],
  "consequent": [
   "    FLAGS.force_run_distributed = True"
  ]
 },
 {
  "sha": "d09994b26ac8592765be45dc8a8444ead55eb32b",
  "author": "Toby Boyd",
  "created_at": "2019-07-24 14:06:21",
  "file_path": "official/resnet/keras/keras_imagenet_benchmark.py",
  "condition": [
   "  def benchmark_1_gpu_no_dist_strat_force_v2(self):"
  ],
  "consequent": [
   "  def benchmark_1_gpu_force_dist_strat(self):"
  ]
 },
 {
  "sha": "d09994b26ac8592765be45dc8a8444ead55eb32b",
  "author": "Toby Boyd",
  "created_at": "2019-07-24 14:06:21",
  "file_path": "official/resnet/keras/keras_imagenet_benchmark.py",
  "condition": [
   "    \"\"\"No dist strat but forced v2 execution tf.compile path.\"\"\""
  ],
  "consequent": [
   "    \"\"\"No dist strat but forced ds tf.compile path.\"\"\""
  ]
 },
 {
  "sha": "d09994b26ac8592765be45dc8a8444ead55eb32b",
  "author": "Toby Boyd",
  "created_at": "2019-07-24 14:06:21",
  "file_path": "official/resnet/keras/keras_imagenet_benchmark.py",
  "condition": [
   "    FLAGS.force_v2_in_keras_compile = True"
  ],
  "consequent": [
   "    FLAGS.force_run_distributed = True"
  ]
 },
 {
  "sha": "829190e67385b93d462440fd8ca133890d8f6284",
  "author": "Toby Boyd",
  "created_at": "2019-07-24 14:06:06",
  "file_path": "official/recommendation/ncf_keras_benchmark.py",
  "condition": [
   "  def _run_and_report_benchmark(self, hr_at_10_min=0, hr_at_10_max=0):"
  ],
  "consequent": [
   "  def _run_and_report_benchmark(self):"
  ]
 },
 {
  "sha": "829190e67385b93d462440fd8ca133890d8f6284",
  "author": "Toby Boyd",
  "created_at": "2019-07-24 14:06:06",
  "file_path": "official/recommendation/ncf_keras_benchmark.py",
  "condition": [
   "    metrics = []",
   "    metrics.append({'name': 'exp_per_second',",
   "                    'value': stats['avg_exp_per_second']})",
   "",
   "    if hr_at_10_min > 0:",
   "      metrics.append({'name': 'hr_at_10',",
   "                      'value': stats['eval_hit_rate'],",
   "                      'min_value': hr_at_10_min,",
   "                      'max_value': hr_at_10_max})",
   "",
   "      metrics.append({'name': 'train_loss',",
   "                      'value': stats['loss']})",
   ""
  ],
  "consequent": [
   "    metrics = self._extract_benchmark_report_extras(stats)"
  ]
 },
 {
  "sha": "829190e67385b93d462440fd8ca133890d8f6284",
  "author": "Toby Boyd",
  "created_at": "2019-07-24 14:06:06",
  "file_path": "official/recommendation/ncf_keras_benchmark.py",
  "condition": [
   "  def _run_and_report_benchmark_mlperf_like(self):",
   "    \"\"\"Run test and report results."
  ],
  "consequent": [
   "  def _extract_benchmark_report_extras(self, stats):",
   "    metrics = []",
   "    metrics.append({'name': 'exp_per_second',",
   "                    'value': stats['avg_exp_per_second']})"
  ]
 },
 {
  "sha": "829190e67385b93d462440fd8ca133890d8f6284",
  "author": "Toby Boyd",
  "created_at": "2019-07-24 14:06:06",
  "file_path": "official/recommendation/ncf_keras_benchmark.py",
  "condition": [
   "    Note: MLPerf like tests are not tuned to hit a specific hr@10 value, but",
   "    we want it recorded.",
   "    \"\"\"",
   "    super(NCFKerasAccuracy, self)._run_and_report_benchmark(hr_at_10_min=0.61)",
   "",
   "  def _run_and_report_benchmark(self, hr_at_10_min=0.630, hr_at_10_max=0.640):",
   "    \"\"\"Run test and report results.",
   "",
   "    Note: Target is 0.635, but some runs are below that level. Until we have"
  ],
  "consequent": [
   "    # Target is 0.635, but some runs are below that level. Until we have"
  ]
 },
 {
  "sha": "829190e67385b93d462440fd8ca133890d8f6284",
  "author": "Toby Boyd",
  "created_at": "2019-07-24 14:06:06",
  "file_path": "official/recommendation/ncf_keras_benchmark.py",
  "condition": [
   "    multi-run tests, we have to accept a lower target."
  ],
  "consequent": [
   "    # multi-run tests, we have to accept a lower target.",
   "    metrics.append({'name': 'hr_at_10',",
   "                    'value': stats['eval_hit_rate'],",
   "                    'min_value': 0.630,",
   "                    'max_value': 0.640})"
  ]
 },
 {
  "sha": "829190e67385b93d462440fd8ca133890d8f6284",
  "author": "Toby Boyd",
  "created_at": "2019-07-24 14:06:06",
  "file_path": "official/recommendation/ncf_keras_benchmark.py",
  "condition": [
   "    Args:",
   "      hr_at_10_min: Minimum acceptable hr@10 value.",
   "      hr_at_10_max: Maximum acceptable hr@10 value.",
   "    \"\"\"",
   "    super(NCFKerasAccuracy, self)._run_and_report_benchmark(",
   "        top_1_min=hr_at_10_min,",
   "        top_1_max=hr_at_10_max)"
  ],
  "consequent": [
   "    metrics.append({'name': 'train_loss',",
   "                    'value': stats['loss']})",
   "",
   "    return metrics"
  ]
 },
 {
  "sha": "829190e67385b93d462440fd8ca133890d8f6284",
  "author": "Toby Boyd",
  "created_at": "2019-07-24 14:06:06",
  "file_path": "official/recommendation/ncf_keras_benchmark.py",
  "condition": [
   "    self._run_and_report_benchmark_mlperf_like()"
  ],
  "consequent": [
   "    self._run_and_report_benchmark()"
  ]
 },
 {
  "sha": "829190e67385b93d462440fd8ca133890d8f6284",
  "author": "Toby Boyd",
  "created_at": "2019-07-24 14:06:06",
  "file_path": "official/recommendation/ncf_keras_benchmark.py",
  "condition": [
   "    self._run_and_report_benchmark_mlperf_like()"
  ],
  "consequent": [
   "    self._run_and_report_benchmark()"
  ]
 },
 {
  "sha": "829190e67385b93d462440fd8ca133890d8f6284",
  "author": "Toby Boyd",
  "created_at": "2019-07-24 14:06:06",
  "file_path": "official/recommendation/ncf_keras_benchmark.py",
  "condition": [
   "    self._run_and_report_benchmark_mlperf_like()"
  ],
  "consequent": [
   "    self._run_and_report_benchmark()"
  ]
 },
 {
  "sha": "829190e67385b93d462440fd8ca133890d8f6284",
  "author": "Toby Boyd",
  "created_at": "2019-07-24 14:06:06",
  "file_path": "official/recommendation/ncf_keras_benchmark.py",
  "condition": [
   "    self._run_and_report_benchmark_mlperf_like()"
  ],
  "consequent": [
   "    self._run_and_report_benchmark()"
  ]
 },
 {
  "sha": "829190e67385b93d462440fd8ca133890d8f6284",
  "author": "Toby Boyd",
  "created_at": "2019-07-24 14:06:06",
  "file_path": "official/recommendation/ncf_keras_benchmark.py",
  "condition": [
   "    self._run_and_report_benchmark_mlperf_like()"
  ],
  "consequent": [
   "    self._run_and_report_benchmark()"
  ]
 },
 {
  "sha": "829190e67385b93d462440fd8ca133890d8f6284",
  "author": "Toby Boyd",
  "created_at": "2019-07-24 14:06:06",
  "file_path": "official/recommendation/ncf_keras_benchmark.py",
  "condition": [
   "    self._run_and_report_benchmark_mlperf_like()"
  ],
  "consequent": [
   "    self._run_and_report_benchmark()"
  ]
 },
 {
  "sha": "829190e67385b93d462440fd8ca133890d8f6284",
  "author": "Toby Boyd",
  "created_at": "2019-07-24 14:06:06",
  "file_path": "official/recommendation/ncf_keras_benchmark.py",
  "condition": [
   "    self._run_and_report_benchmark_mlperf_like()"
  ],
  "consequent": [
   "    self._run_and_report_benchmark()"
  ]
 },
 {
  "sha": "829190e67385b93d462440fd8ca133890d8f6284",
  "author": "Toby Boyd",
  "created_at": "2019-07-24 14:06:06",
  "file_path": "official/recommendation/ncf_keras_benchmark.py",
  "condition": [
   "    self._run_and_report_benchmark_mlperf_like()"
  ],
  "consequent": [
   "    self._run_and_report_benchmark()"
  ]
 },
 {
  "sha": "829190e67385b93d462440fd8ca133890d8f6284",
  "author": "Toby Boyd",
  "created_at": "2019-07-24 14:06:06",
  "file_path": "official/recommendation/ncf_keras_benchmark.py",
  "condition": [
   "    self._run_and_report_benchmark_mlperf_like()"
  ],
  "consequent": [
   "    self._run_and_report_benchmark()"
  ]
 },
 {
  "sha": "829190e67385b93d462440fd8ca133890d8f6284",
  "author": "Toby Boyd",
  "created_at": "2019-07-24 14:06:06",
  "file_path": "official/recommendation/ncf_keras_benchmark.py",
  "condition": [
   "    self._run_and_report_benchmark_mlperf_like()"
  ],
  "consequent": [
   "    self._run_and_report_benchmark()"
  ]
 },
 {
  "sha": "296d0d3fc8efd5f165c10a71a9e1235b5889bb90",
  "author": "guptapriya",
  "created_at": "2019-07-19 14:29:43",
  "file_path": "official/transformer/v2/transformer_main_test.py",
  "condition": [
   "  def test_train_no_dist_strat(self):"
  ],
  "consequent": [
   "  def test_train(self):"
  ]
 },
 {
  "sha": "ffbada72cc34f2006be511974fd27b4cf8c0280e",
  "author": "guptapriya",
  "created_at": "2019-07-19 14:26:58",
  "file_path": "official/transformer/v2/data_pipeline.py",
  "condition": [
   "      input_dtype=tf.int64,"
  ],
  "consequent": [
   "      input_dtype=tf.int32,"
  ]
 },
 {
  "sha": "ffbada72cc34f2006be511974fd27b4cf8c0280e",
  "author": "guptapriya",
  "created_at": "2019-07-19 14:26:58",
  "file_path": "official/transformer/v2/data_pipeline.py",
  "condition": [
   "      label_dtype=tf.int64,"
  ],
  "consequent": [
   "      label_dtype=tf.int32,"
  ]
 },
 {
  "sha": "13cc0f70e9951d6e64b5c37877ccf3aaaae44032",
  "author": "guptapriya",
  "created_at": "2019-07-19 14:26:04",
  "file_path": "official/transformer/v2/transformer.py",
  "condition": [
   "      model = tf.keras.Model([inputs, targets], logits)"
  ],
  "consequent": [
   "      return tf.keras.Model([inputs, targets], logits)"
  ]
 },
 {
  "sha": "9d8c9aa4b4370dd6a1145cbb1624ab995a64dbbb",
  "author": "Toby Boyd",
  "created_at": "2019-07-24 08:27:23",
  "file_path": "official/recommendation/ncf_common.py",
  "condition": [
   "      enable_xla=True,"
  ],
  "consequent": [
   "      enable_xla=True"
  ]
 },
 {
  "sha": "9d8c9aa4b4370dd6a1145cbb1624ab995a64dbbb",
  "author": "Toby Boyd",
  "created_at": "2019-07-24 08:27:23",
  "file_path": "official/recommendation/ncf_keras_benchmark.py",
  "condition": [
   "  def benchmark_1_gpu_no_dist_strat_force_v2_early_stop(self):"
  ],
  "consequent": [
   "  def benchmark_1_gpu_no_dist_strat_run_eagerly_early_stop(self):"
  ]
 },
 {
  "sha": "9d8c9aa4b4370dd6a1145cbb1624ab995a64dbbb",
  "author": "Toby Boyd",
  "created_at": "2019-07-24 08:27:23",
  "file_path": "official/recommendation/ncf_keras_main.py",
  "condition": [
   "                          run_eagerly=FLAGS.run_eagerly,"
  ],
  "consequent": [
   "                          run_eagerly=FLAGS.run_eagerly)"
  ]
 },
 {
  "sha": "9d8c9aa4b4370dd6a1145cbb1624ab995a64dbbb",
  "author": "Toby Boyd",
  "created_at": "2019-07-24 08:27:23",
  "file_path": "official/resnet/keras/keras_cifar_benchmark.py",
  "condition": [
   "MIN_TOP_1_ACCURACY = 0.929"
  ],
  "consequent": [
   "MIN_TOP_1_ACCURACY = 0.925"
  ]
 },
 {
  "sha": "9d8c9aa4b4370dd6a1145cbb1624ab995a64dbbb",
  "author": "Toby Boyd",
  "created_at": "2019-07-24 08:27:23",
  "file_path": "official/resnet/keras/keras_cifar_main.py",
  "condition": [
   "                  run_eagerly=flags_obj.run_eagerly,"
  ],
  "consequent": [
   "                  run_eagerly=flags_obj.run_eagerly)"
  ]
 },
 {
  "sha": "9d8c9aa4b4370dd6a1145cbb1624ab995a64dbbb",
  "author": "Toby Boyd",
  "created_at": "2019-07-24 08:27:23",
  "file_path": "official/resnet/keras/keras_common.py",
  "condition": [
   "                                enable_xla=True,"
  ],
  "consequent": [
   "                                enable_xla=True)"
  ]
 },
 {
  "sha": "9d8c9aa4b4370dd6a1145cbb1624ab995a64dbbb",
  "author": "Toby Boyd",
  "created_at": "2019-07-24 08:27:23",
  "file_path": "official/resnet/keras/keras_imagenet_benchmark.py",
  "condition": [
   "    self._run_and_report_benchmark(top_1_min=0.736)"
  ],
  "consequent": [
   "    self._run_and_report_benchmark()"
  ]
 },
 {
  "sha": "9d8c9aa4b4370dd6a1145cbb1624ab995a64dbbb",
  "author": "Toby Boyd",
  "created_at": "2019-07-24 08:27:23",
  "file_path": "official/resnet/keras/keras_imagenet_benchmark.py",
  "condition": [
   "    self._run_and_report_benchmark(top_1_min=0.736)"
  ],
  "consequent": [
   "    self._run_and_report_benchmark()"
  ]
 },
 {
  "sha": "9d8c9aa4b4370dd6a1145cbb1624ab995a64dbbb",
  "author": "Toby Boyd",
  "created_at": "2019-07-24 08:27:23",
  "file_path": "official/resnet/keras/keras_imagenet_benchmark.py",
  "condition": [
   "    self._run_and_report_benchmark(top_1_min=0.736)"
  ],
  "consequent": [
   "    self._run_and_report_benchmark()"
  ]
 },
 {
  "sha": "9d8c9aa4b4370dd6a1145cbb1624ab995a64dbbb",
  "author": "Toby Boyd",
  "created_at": "2019-07-24 08:27:23",
  "file_path": "official/resnet/keras/keras_imagenet_benchmark.py",
  "condition": [
   "  def _run_and_report_benchmark(self,"
  ],
  "consequent": [
   "  def _run_and_report_benchmark(self):"
  ]
 },
 {
  "sha": "9d8c9aa4b4370dd6a1145cbb1624ab995a64dbbb",
  "author": "Toby Boyd",
  "created_at": "2019-07-24 08:27:23",
  "file_path": "official/resnet/keras/keras_imagenet_benchmark.py",
  "condition": [
   "        top_1_min=top_1_min,",
   "        top_1_max=top_1_max,"
  ],
  "consequent": [
   "        top_1_min=MIN_TOP_1_ACCURACY,",
   "        top_1_max=MAX_TOP_1_ACCURACY,"
  ]
 },
 {
  "sha": "9d8c9aa4b4370dd6a1145cbb1624ab995a64dbbb",
  "author": "Toby Boyd",
  "created_at": "2019-07-24 08:27:23",
  "file_path": "official/resnet/keras/keras_imagenet_main.py",
  "condition": [
   "                  run_eagerly=flags_obj.run_eagerly,"
  ],
  "consequent": [
   "                  run_eagerly=flags_obj.run_eagerly)"
  ]
 },
 {
  "sha": "9d8c9aa4b4370dd6a1145cbb1624ab995a64dbbb",
  "author": "Toby Boyd",
  "created_at": "2019-07-24 08:27:23",
  "file_path": "official/staging/shakespeare/shakespeare_benchmark.py",
  "condition": [
   "    \"\"\"Benchmark 1 gpu without distribution strategies.\"\"\""
  ],
  "consequent": [
   "    \"\"\"Benchmark 1 gpu.\"\"\""
  ]
 },
 {
  "sha": "9d8c9aa4b4370dd6a1145cbb1624ab995a64dbbb",
  "author": "Toby Boyd",
  "created_at": "2019-07-24 08:27:23",
  "file_path": "official/staging/shakespeare/shakespeare_main.py",
  "condition": [
   "                                enable_xla=True,"
  ],
  "consequent": [
   "                                enable_xla=True)"
  ]
 },
 {
  "sha": "9d8c9aa4b4370dd6a1145cbb1624ab995a64dbbb",
  "author": "Toby Boyd",
  "created_at": "2019-07-24 08:27:23",
  "file_path": "official/staging/shakespeare/shakespeare_main.py",
  "condition": [
   "                  run_eagerly=flags_obj.run_eagerly,"
  ],
  "consequent": [
   "                  run_eagerly=flags_obj.run_eagerly)"
  ]
 },
 {
  "sha": "9d8c9aa4b4370dd6a1145cbb1624ab995a64dbbb",
  "author": "Toby Boyd",
  "created_at": "2019-07-24 08:27:23",
  "file_path": "official/transformer/v2/misc.py",
  "condition": [
   "      enable_xla=True,"
  ],
  "consequent": [
   "      enable_xla=True"
  ]
 },
 {
  "sha": "9d8c9aa4b4370dd6a1145cbb1624ab995a64dbbb",
  "author": "Toby Boyd",
  "created_at": "2019-07-24 08:27:23",
  "file_path": "official/utils/flags/_performance.py",
  "condition": [
   "                       tf_data_experimental_slack=False, enable_xla=False,"
  ],
  "consequent": [
   "                       tf_data_experimental_slack=False, enable_xla=False):"
  ]
 },
 {
  "sha": "8390b3622284499df8f94f12ce27564b92c9c7c0",
  "author": "Toby Boyd",
  "created_at": "2019-07-24 00:45:46",
  "file_path": "official/staging/shakespeare/shakespeare_benchmark.py",
  "condition": [
   "        top_1_train_min=None, log_steps=FLAGS.log_steps)"
  ],
  "consequent": [
   "        top_1_train_min=None)"
  ]
 },
 {
  "sha": "8390b3622284499df8f94f12ce27564b92c9c7c0",
  "author": "Toby Boyd",
  "created_at": "2019-07-24 00:45:46",
  "file_path": "official/staging/shakespeare/shakespeare_main.py",
  "condition": [
   "  time_callback = keras_utils.TimeHistory(flags_obj.batch_size,"
  ],
  "consequent": [
   "  time_callback = keras_utils.TimeHistory(flags_obj.batch_size, 100)"
  ]
 },
 {
  "sha": "448c31b6c688f93082ae5e51e9d5f0d1652b0ac1",
  "author": "Zongwei Zhou",
  "created_at": "2019-07-13 02:27:50",
  "file_path": "official/transformer/v2/attention_layer.py",
  "condition": [
   "    # Note that softmax internally performs math operations using float32",
   "    # for numeric stability. When training with float16, we keep the input",
   "    # and output in float16 for better performance.",
   "    weights = tf.nn.softmax(logits, name=\"attention_weights\")"
  ],
  "consequent": [
   "    weights = _float32_softmax(logits, name=\"attention_weights\")"
  ]
 },
 {
  "sha": "49b90e86b0b31d3e6b03373e097809d0e10016b9",
  "author": "Toby Boyd",
  "created_at": "2019-07-20 03:15:25",
  "file_path": "official/utils/misc/keras_utils.py",
  "condition": [
   "  return tf2.enabled()"
  ],
  "consequent": [
   "  if hasattr(tf, 'contrib'):",
   "    return False",
   "  else:",
   "    return True"
  ]
 },
 {
  "sha": "308c79344c144290d431f777fc47deb5c94ccc80",
  "author": "Toby Boyd",
  "created_at": "2019-07-20 03:09:41",
  "file_path": "official/recommendation/ncf_keras_main.py",
  "condition": [
   "  if not keras_utils.is_v2_0() and strategy is not None:"
  ],
  "consequent": [
   "  if keras_utils.is_v2_0() and strategy is not None:"
  ]
 },
 {
  "sha": "2569fa9a88738b37d665b3459333133e8607dd83",
  "author": "Toby Boyd",
  "created_at": "2019-07-19 23:03:02",
  "file_path": "official/utils/misc/keras_utils.py",
  "condition": [
   "  if hasattr(tf, 'contrib'):",
   "    return False",
   "  else:",
   "    return True"
  ],
  "consequent": [
   "  from tensorflow.python import tf2",
   "  return tf2.enabled()"
  ]
 },
 {
  "sha": "283de38b29e304afb918fef58b96ef50d328c0b9",
  "author": "guptapriya",
  "created_at": "2019-07-19 13:40:05",
  "file_path": "official/recommendation/ncf_keras_main.py",
  "condition": [
   ""
  ],
  "consequent": [
   "  "
  ]
 },
 {
  "sha": "712f473e47dc3df04cc4d0e761869e38bf3e175b",
  "author": "guptapriya",
  "created_at": "2019-07-19 09:54:54",
  "file_path": "official/utils/misc/keras_utils.py",
  "condition": [
   "  from tensorflow.python import tf2",
   "  return tf2.enabled()"
  ],
  "consequent": [
   "  if hasattr(tf, 'contrib'):",
   "    return False",
   "  else:",
   "    return True"
  ]
 },
 {
  "sha": "e0a2b8c35815e93c4c8abade84a56c1f092b411c",
  "author": "Toby Boyd",
  "created_at": "2019-07-19 07:04:22",
  "file_path": "official/staging/shakespeare/shakespeare_main.py",
  "condition": [
   "import numpy as np"
  ],
  "consequent": [
   ""
  ]
 },
 {
  "sha": "e0a2b8c35815e93c4c8abade84a56c1f092b411c",
  "author": "Toby Boyd",
  "created_at": "2019-07-19 07:04:22",
  "file_path": "official/staging/shakespeare/shakespeare_main.py",
  "condition": [
   "  flags_core.define_base(data_dir=False,",
   "                         clean=False,",
   "                         train_epochs=True,",
   "                         epochs_between_evals=False,",
   "                         stop_threshold=False,",
   "                         hooks=False,",
   "                         export_dir=False,",
   "                         run_eagerly=True)",
   "",
   "  flags_core.define_performance(num_parallel_calls=False,",
   "                                inter_op=False,",
   "                                intra_op=False,",
   "                                synthetic_data=False,",
   "                                max_train_steps=False,",
   "                                dtype=False,",
   "                                enable_xla=True)",
   "",
   "  flags_core.set_defaults(train_epochs=43,",
   "                          batch_size=64)",
   "",
   "  flags.DEFINE_boolean(name='enable_eager', default=True, help='Enable eager?')"
  ],
  "consequent": [
   "  flags.DEFINE_string(",
   "      name='model_dir', default=None,",
   "      help='Directory for model check points.')"
  ]
 },
 {
  "sha": "e0a2b8c35815e93c4c8abade84a56c1f092b411c",
  "author": "Toby Boyd",
  "created_at": "2019-07-19 07:04:22",
  "file_path": "official/staging/shakespeare/shakespeare_main.py",
  "condition": [
   "def get_dataset(path_to_file, batch_size=None, seq_length=SEQ_LENGTH):"
  ],
  "consequent": [
   "def get_dataset(path_to_file, seq_length=SEQ_LENGTH):"
  ]
 },
 {
  "sha": "e0a2b8c35815e93c4c8abade84a56c1f092b411c",
  "author": "Toby Boyd",
  "created_at": "2019-07-19 07:04:22",
  "file_path": "official/staging/shakespeare/shakespeare_main.py",
  "condition": [
   "  with open(path_to_file, 'rb') as train_data:",
   "    text = train_data.read().decode(encoding='utf-8')"
  ],
  "consequent": [
   "  text = open(path_to_file, 'rb').read().decode(encoding='utf-8')"
  ]
 },
 {
  "sha": "e0a2b8c35815e93c4c8abade84a56c1f092b411c",
  "author": "Toby Boyd",
  "created_at": "2019-07-19 07:04:22",
  "file_path": "official/staging/shakespeare/shakespeare_main.py",
  "condition": [
   "  dataset = dataset.shuffle(10000).repeat()",
   "  dataset = dataset.batch(batch_size, drop_remainder=True)"
  ],
  "consequent": [
   "  dataset = dataset.shuffle(10000).batch(BATCH_SIZE, drop_remainder=True)"
  ]
 },
 {
  "sha": "e0a2b8c35815e93c4c8abade84a56c1f092b411c",
  "author": "Toby Boyd",
  "created_at": "2019-07-19 07:04:22",
  "file_path": "official/staging/shakespeare/shakespeare_main.py",
  "condition": [
   "                batch_size=None,"
  ],
  "consequent": [
   "                batch_size=BATCH_SIZE,"
  ]
 },
 {
  "sha": "e0a2b8c35815e93c4c8abade84a56c1f092b411c",
  "author": "Toby Boyd",
  "created_at": "2019-07-19 07:04:22",
  "file_path": "official/staging/shakespeare/shakespeare_main.py",
  "condition": [
   "def train_model(flags_obj, dataset, vocab_size, strategy, checkpoint_dir=None):"
  ],
  "consequent": [
   "def train_model(dataset, vocab_size, checkpoint_dir=None):"
  ]
 },
 {
  "sha": "e0a2b8c35815e93c4c8abade84a56c1f092b411c",
  "author": "Toby Boyd",
  "created_at": "2019-07-19 07:04:22",
  "file_path": "official/staging/shakespeare/shakespeare_main.py",
  "condition": [
   "    The training history and callbacks."
  ],
  "consequent": [
   "    The training history."
  ]
 },
 {
  "sha": "e0a2b8c35815e93c4c8abade84a56c1f092b411c",
  "author": "Toby Boyd",
  "created_at": "2019-07-19 07:04:22",
  "file_path": "official/staging/shakespeare/shakespeare_main.py",
  "condition": [
   "  train_steps = BATCHES_PER_EPOCH // flags_obj.batch_size",
   "  strategy_scope = distribution_utils.get_strategy_scope(strategy)"
  ],
  "consequent": [
   "  strategy = tf.distribute.MirroredStrategy()"
  ]
 },
 {
  "sha": "e0a2b8c35815e93c4c8abade84a56c1f092b411c",
  "author": "Toby Boyd",
  "created_at": "2019-07-19 07:04:22",
  "file_path": "official/staging/shakespeare/shakespeare_main.py",
  "condition": [
   "  with strategy_scope:"
  ],
  "consequent": [
   "  with strategy.scope():"
  ]
 },
 {
  "sha": "e0a2b8c35815e93c4c8abade84a56c1f092b411c",
  "author": "Toby Boyd",
  "created_at": "2019-07-19 07:04:22",
  "file_path": "official/staging/shakespeare/shakespeare_main.py",
  "condition": [
   "    model = build_model(vocab_size=vocab_size, batch_size=flags_obj.batch_size)"
  ],
  "consequent": [
   "    model = build_model(vocab_size=vocab_size)"
  ]
 },
 {
  "sha": "e0a2b8c35815e93c4c8abade84a56c1f092b411c",
  "author": "Toby Boyd",
  "created_at": "2019-07-19 07:04:22",
  "file_path": "official/staging/shakespeare/shakespeare_main.py",
  "condition": [
   "                      tf.keras.metrics.Recall(top_k=5, name='RecallAt5')],"
  ],
  "consequent": [
   "                      tf.keras.metrics.Recall(top_k=5, name='RecallAt5')])"
  ]
 },
 {
  "sha": "e0a2b8c35815e93c4c8abade84a56c1f092b411c",
  "author": "Toby Boyd",
  "created_at": "2019-07-19 07:04:22",
  "file_path": "official/staging/shakespeare/shakespeare_main.py",
  "condition": [
   "  time_callback = keras_utils.TimeHistory(flags_obj.batch_size, 100)",
   "  callbacks.append(time_callback)",
   "  history = model.fit(dataset,",
   "                      epochs=flags_obj.train_epochs,",
   "                      steps_per_epoch=train_steps,",
   "                      callbacks=callbacks,",
   "                      verbose=2)",
   "  return history, callbacks"
  ],
  "consequent": [
   "",
   "  return model.fit(dataset, epochs=EPOCHS, callbacks=callbacks)"
  ]
 },
 {
  "sha": "e0a2b8c35815e93c4c8abade84a56c1f092b411c",
  "author": "Toby Boyd",
  "created_at": "2019-07-19 07:04:22",
  "file_path": "official/staging/shakespeare/shakespeare_main.py",
  "condition": [
   "def run(flags_obj):",
   "  \"\"\"Run Shakespeare training and predict."
  ],
  "consequent": [
   "def main(_):",
   "  flags_obj = flags.FLAGS"
  ]
 },
 {
  "sha": "e0a2b8c35815e93c4c8abade84a56c1f092b411c",
  "author": "Toby Boyd",
  "created_at": "2019-07-19 07:04:22",
  "file_path": "official/staging/shakespeare/shakespeare_main.py",
  "condition": [
   "",
   "  keras_utils.set_session_config(",
   "      enable_eager=flags_obj.enable_eager,",
   "      enable_xla=flags_obj.enable_xla)",
   "",
   "  strategy = distribution_utils.get_distribution_strategy(",
   "      distribution_strategy=flags_obj.distribution_strategy,",
   "      num_gpus=flags_obj.num_gpus)",
   "",
   "  dataset, idx2char, char2idx = get_dataset(flags_obj.training_data,"
  ],
  "consequent": [
   "  dataset, idx2char, char2idx = get_dataset(flags_obj.training_data)",
   ""
  ]
 },
 {
  "sha": "e0a2b8c35815e93c4c8abade84a56c1f092b411c",
  "author": "Toby Boyd",
  "created_at": "2019-07-19 07:04:22",
  "file_path": "official/staging/shakespeare/shakespeare_main.py",
  "condition": [
   "    history, callbacks = train_model(flags_obj, dataset,",
   "                                     len(idx2char), strategy,",
   "                                     checkpoint_dir=flags_obj.model_dir)",
   "",
   "    stats['history'] = history.history",
   "    stats['callbacks'] = callbacks"
  ],
  "consequent": [
   "    train_model(dataset, len(idx2char), flags_obj.model_dir)"
  ]
 },
 {
  "sha": "e0a2b8c35815e93c4c8abade84a56c1f092b411c",
  "author": "Toby Boyd",
  "created_at": "2019-07-19 07:04:22",
  "file_path": "official/utils/misc/keras_utils.py",
  "condition": [
   "    \"\"\"Callback for logging performance."
  ],
  "consequent": [
   "    \"\"\"Callback for logging performance (# examples/second)."
  ]
 },
 {
  "sha": "e0a2b8c35815e93c4c8abade84a56c1f092b411c",
  "author": "Toby Boyd",
  "created_at": "2019-07-19 07:04:22",
  "file_path": "official/utils/misc/keras_utils.py",
  "condition": [
   "      log_steps: Interval of steps between logging of batch level stats."
  ],
  "consequent": [
   "      log_steps: Interval of time history logs."
  ]
 },
 {
  "sha": "dd5a91d3c0c5df38e78c2700d997c9b7dc56d268",
  "author": "Haoyu Zhang",
  "created_at": "2019-07-19 03:04:37",
  "file_path": "official/resnet/cifar10_main.py",
  "condition": [
   "             input_context=None,"
  ],
  "consequent": [
   "             input_context=None):"
  ]
 },
 {
  "sha": "dd5a91d3c0c5df38e78c2700d997c9b7dc56d268",
  "author": "Haoyu Zhang",
  "created_at": "2019-07-19 03:04:37",
  "file_path": "official/resnet/cifar10_main.py",
  "condition": [
   "      datasets_num_private_threads=datasets_num_private_threads,"
  ],
  "consequent": [
   "      datasets_num_private_threads=datasets_num_private_threads"
  ]
 },
 {
  "sha": "dd5a91d3c0c5df38e78c2700d997c9b7dc56d268",
  "author": "Haoyu Zhang",
  "created_at": "2019-07-19 03:04:37",
  "file_path": "official/resnet/keras/keras_cifar_main.py",
  "condition": [
   "  keras_utils.set_session_config(",
   "      enable_eager=flags_obj.enable_eager,",
   "      enable_xla=flags_obj.enable_xla,",
   "      enable_grappler_layout_optimizer=",
   "      flags_obj.enable_grappler_layout_optimizer)",
   "",
   "  # Execute flag override logic for better model performance",
   "  if flags_obj.tf_gpu_thread_mode:",
   "    keras_common.set_gpu_thread_mode_and_count(flags_obj)",
   "  keras_common.set_cudnn_batchnorm_mode()"
  ],
  "consequent": [
   "  keras_utils.set_session_config(enable_eager=flags_obj.enable_eager,",
   "                                 enable_xla=flags_obj.enable_xla)"
  ]
 },
 {
  "sha": "dd5a91d3c0c5df38e78c2700d997c9b7dc56d268",
  "author": "Haoyu Zhang",
  "created_at": "2019-07-19 03:04:37",
  "file_path": "official/resnet/keras/keras_cifar_main.py",
  "condition": [
   "        dtype=flags_core.get_tf_dtype(flags_obj),"
  ],
  "consequent": [
   "        dtype=flags_core.get_tf_dtype(flags_obj))"
  ]
 },
 {
  "sha": "dd5a91d3c0c5df38e78c2700d997c9b7dc56d268",
  "author": "Haoyu Zhang",
  "created_at": "2019-07-19 03:04:37",
  "file_path": "official/resnet/keras/keras_cifar_main.py",
  "condition": [
   "      dtype=dtype,"
  ],
  "consequent": [
   "      dtype=dtype)"
  ]
 },
 {
  "sha": "492f8c92a24cda084861307f2b8757aee192fba8",
  "author": "nnigania",
  "created_at": "2019-07-17 02:34:12",
  "file_path": "official/recommendation/ncf_keras_main.py",
  "condition": [
   "  \"\"\"CTL does metric calculation as part of eval_step function\"\"\"",
   "  if not params[\"keras_use_ctl\"]:",
   "    softmax_logits = MetricLayer(params)([softmax_logits, dup_mask_input])"
  ],
  "consequent": [
   "  softmax_logits = MetricLayer(params)([softmax_logits, dup_mask_input])"
  ]
 },
 {
  "sha": "492f8c92a24cda084861307f2b8757aee192fba8",
  "author": "nnigania",
  "created_at": "2019-07-17 02:34:12",
  "file_path": "official/recommendation/ncf_keras_main.py",
  "condition": [
   "  # drop_remainder = True, as we would like batch call to return a fixed shape",
   "  # vs None, this prevents a expensive broadcast during weighted_loss",
   "  train_input_dataset = train_input_dataset.batch(batches_per_step,"
  ],
  "consequent": [
   "  train_input_dataset = train_input_dataset.batch(batches_per_step)"
  ]
 },
 {
  "sha": "492f8c92a24cda084861307f2b8757aee192fba8",
  "author": "nnigania",
  "created_at": "2019-07-17 02:34:12",
  "file_path": "official/recommendation/ncf_keras_main.py",
  "condition": [
   "                                                  drop_remainder=True)",
   "  eval_input_dataset = eval_input_dataset.batch(batches_per_step,"
  ],
  "consequent": [
   "  eval_input_dataset = eval_input_dataset.batch(batches_per_step)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/builders/calibration_builder.py",
  "condition": [
   "      Predictions scores are linearly interpolated based on a class-agnostic"
  ],
  "consequent": [
   "      Predictions scores are linearly interpolated based on class-agnostic"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/builders/calibration_builder.py",
  "condition": [
   "      function approximation. Note that the 0-indexed background class is also"
  ],
  "consequent": [
   "      function approximations. Note that the 0-indexed background class may"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/builders/calibration_builder.py",
  "condition": [
   "      transformed."
  ],
  "consequent": [
   "      also transformed."
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/builders/calibration_builder.py",
  "condition": [
   "        tf.float32 tensor of the same shape as the input with values on the",
   "        interval [0, 1]."
  ],
  "consequent": [
   "        tf.float32 tensor of shape [batch_size, num_anchors, num_classes] if",
   "        background class is not present (else shape is",
   "        [batch_size, num_anchors, num_classes + 1]) on the interval [0, 1]."
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/builders/calibration_builder.py",
  "condition": [
   "  elif (calibration_config.WhichOneof('calibrator') ==",
   "        'class_id_function_approximations'):",
   "",
   "    def calibration_fn(class_predictions_with_background):",
   "      \"\"\"Calibrate predictions per class via 1-d linear interpolation.",
   "",
   "      Prediction scores are linearly interpolated with class-specific function",
   "      approximations. Note that after calibration, an anchor's class scores will",
   "      not necessarily sum to 1, and score ordering may change, depending on each",
   "      class' calibration parameters.",
   "",
   "      Args:",
   "        class_predictions_with_background: tf.float32 tensor of shape",
   "          [batch_size, num_anchors, num_classes + 1] containing scores on the",
   "          interval [0,1]. This is usually produced by a sigmoid or softmax layer",
   "          and the result of calling the `predict` method of a detection model.",
   "",
   "      Returns:",
   "        tf.float32 tensor of the same shape as the input with values on the",
   "        interval [0, 1].",
   "",
   "      Raises:",
   "        KeyError: Calibration parameters are not present for a class.",
   "      \"\"\"",
   "      class_id_function_dict = _get_class_id_function_dict(calibration_config)",
   "",
   "      # Tensors are split by class and then recombined at the end to recover",
   "      # the input's original shape. If a class id does not have calibration",
   "      # parameters, it is left unchanged.",
   "      class_tensors = tf.unstack(class_predictions_with_background, axis=-1)",
   "      calibrated_class_tensors = []",
   "      for class_id, class_tensor in enumerate(class_tensors):",
   "        flat_class_tensor = tf.reshape(class_tensor, shape=[-1])",
   "        if class_id in class_id_function_dict:",
   "          output_tensor = _tf_linear_interp1d(",
   "              x_to_interpolate=flat_class_tensor,",
   "              fn_x=class_id_function_dict[class_id][0],",
   "              fn_y=class_id_function_dict[class_id][1])",
   "        else:",
   "          tf.logging.info(",
   "              'Calibration parameters for class id `%d` not not found',",
   "              class_id)",
   "          output_tensor = flat_class_tensor",
   "        calibrated_class_tensors.append(output_tensor)",
   "",
   "      combined_calibrated_tensor = tf.stack(calibrated_class_tensors, axis=1)",
   "      input_shape = shape_utils.combined_static_and_dynamic_shape(",
   "          class_predictions_with_background)",
   "      calibrated_class_predictions_with_background = tf.reshape(",
   "          combined_calibrated_tensor,",
   "          shape=input_shape,",
   "          name='calibrate_scores')",
   "      return calibrated_class_predictions_with_background",
   "",
   "  # TODO(zbeaver): Add sigmoid calibration."
  ],
  "consequent": [
   "  # TODO(zbeaver): Add sigmoid calibration and per-class isotonic regression."
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/builders/calibration_builder_test.py",
  "condition": [
   "                                                       x_array, y_array,"
  ],
  "consequent": [
   "                                                       x_array,",
   "                                                       y_array,"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/builders/calibration_builder_test.py",
  "condition": [
   "                                                       class_id):"
  ],
  "consequent": [
   "                                                       class_label):"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/builders/calibration_builder_test.py",
  "condition": [
   "    \"\"\"Adds a function approximation to calibration proto for a class id.\"\"\""
  ],
  "consequent": [
   "    \"\"\"Adds a function approximation to calibration proto for a class label.\"\"\""
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/builders/calibration_builder_test.py",
  "condition": [
   "    if class_id is not None:",
   "      function_approximation = (",
   "          calibration_proto.class_id_function_approximations",
   "          .class_id_xy_pairs_map[class_id])"
  ],
  "consequent": [
   "    if class_label:",
   "      label_function_approximation = (calibration_proto",
   "                                      .label_function_approximations",
   "                                      .label_xy_pairs_map[class_label])"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/builders/calibration_builder_test.py",
  "condition": [
   "      function_approximation = (",
   "          calibration_proto.function_approximation.x_y_pairs)",
   ""
  ],
  "consequent": [
   "      label_function_approximation = (calibration_proto",
   "                                      .function_approximation",
   "                                      .x_y_pairs)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/builders/calibration_builder_test.py",
  "condition": [
   "      x_y_pair_message = function_approximation.x_y_pair.add()"
  ],
  "consequent": [
   "      x_y_pair_message = label_function_approximation.x_y_pair.add()"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/builders/calibration_builder_test.py",
  "condition": [
   "    \"\"\"Tests that calibration produces correct class-agnostic values.\"\"\""
  ],
  "consequent": [
   "    \"\"\"Ensures that calibration appropriate values, regardless of class.\"\"\""
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/builders/calibration_builder_test.py",
  "condition": [
   "    self._add_function_approximation_to_calibration_proto("
  ],
  "consequent": [
   "    self._add_function_approximation_to_calibration_proto(calibration_config,"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/builders/calibration_builder_test.py",
  "condition": [
   "        calibration_config, class_agnostic_x, class_agnostic_y, class_id=None)"
  ],
  "consequent": [
   "                                                          class_agnostic_x,",
   "                                                          class_agnostic_y,",
   "                                                          class_label=None)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/builders/post_processing_builder.py",
  "condition": [
   "      max_total_detections and max_detections_per_class or on negative"
  ],
  "consequent": [
   "      max_total_detections and max_detections_per_class."
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/builders/post_processing_builder.py",
  "condition": [
   "      max_classes_per_detection=nms_config.max_classes_per_detection,"
  ],
  "consequent": [
   "      max_classes_per_detection=nms_config.max_classes_per_detection)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/core/anchor_generator.py",
  "condition": [
   "class AnchorGenerator(six.with_metaclass(ABCMeta, object)):"
  ],
  "consequent": [
   "class AnchorGenerator(object):"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/core/batch_multiclass_nms_test.py",
  "condition": [
   "class BatchMulticlassNonMaxSuppressionTest(test_case.TestCase,"
  ],
  "consequent": [
   "class BatchMulticlassNonMaxSuppressionTest(test_case.TestCase):"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/core/batch_multiclass_nms_test.py",
  "condition": [
   "  @parameterized.named_parameters(('', False), ('_use_static_shapes', True))",
   "  def test_batch_multiclass_nms_with_batch_size_1(self, use_static_shapes):"
  ],
  "consequent": [
   "  def test_batch_multiclass_nms_with_batch_size_1(self):"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/core/batch_multiclass_nms_test.py",
  "condition": [
   "     nmsed_additional_fields,"
  ],
  "consequent": [
   "     nmsed_additional_fields, num_detections"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/core/batch_multiclass_nms_test.py",
  "condition": [
   "     num_detections) = post_processing.batch_multiclass_non_max_suppression("
  ],
  "consequent": [
   "    ) = post_processing.batch_multiclass_non_max_suppression(",
   "        boxes, scores, score_thresh, iou_thresh,",
   "        max_size_per_class=max_output_size, max_total_size=max_output_size)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/core/box_coder.py",
  "condition": [
   "class BoxCoder(six.with_metaclass(ABCMeta, object)):"
  ],
  "consequent": [
   "class BoxCoder(object):"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/core/class_agnostic_nms_test.py",
  "condition": [
   "class ClassAgnosticNonMaxSuppressionTest(test_case.TestCase,"
  ],
  "consequent": [
   "class ClassAgnosticNonMaxSuppressionTest(test_case.TestCase):"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/core/class_agnostic_nms_test.py",
  "condition": [
   "  # Two cases will be tested here: using / not using static shapes.",
   "  # Named the two test cases for easier control during testing, with a flag of",
   "  # '--test_filter=ClassAgnosticNonMaxSuppressionTest.test_batch_classagnostic_nms_with_batch_size_1'",
   "  # or",
   "  # '--test_filter=ClassAgnosticNonMaxSuppressionTest.test_batch_classagnostic_nms_with_batch_size_1_use_static_shapes'.",
   "  @parameterized.named_parameters(('', False), ('_use_static_shapes', True))",
   "  def test_batch_classagnostic_nms_with_batch_size_1(self,"
  ],
  "consequent": [
   "  def test_batch_classagnostic_nms_with_batch_size_1(self):"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/core/data_decoder.py",
  "condition": [
   "class DataDecoder(six.with_metaclass(ABCMeta, object)):"
  ],
  "consequent": [
   "class DataDecoder(object):"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/core/data_parser.py",
  "condition": [
   "class DataToNumpyParser(six.with_metaclass(ABCMeta, object)):",
   "  \"\"\"Abstract interface for data parser that produces numpy arrays.\"\"\""
  ],
  "consequent": [
   "class DataToNumpyParser(object):",
   "  __metaclass__ = ABCMeta"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/core/losses.py",
  "condition": [
   "class Loss(six.with_metaclass(abc.ABCMeta, object)):"
  ],
  "consequent": [
   "class Loss(object):"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/core/matcher.py",
  "condition": [
   "class Matcher(six.with_metaclass(abc.ABCMeta, object)):"
  ],
  "consequent": [
   "class Matcher(object):"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/core/minibatch_sampler.py",
  "condition": [
   "class MinibatchSampler(six.with_metaclass(ABCMeta, object)):"
  ],
  "consequent": [
   "class MinibatchSampler(object):"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/core/model.py",
  "condition": [
   "class DetectionModel(six.with_metaclass(abc.ABCMeta, _BaseClass)):"
  ],
  "consequent": [
   "class DetectionModel(_BaseClass):"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/core/post_processing.py",
  "condition": [
   "  if shape_utils.get_dim_as_int(scores.shape[1]) is None:"
  ],
  "consequent": [
   "  if scores.shape[1].value is None:"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/core/post_processing.py",
  "condition": [
   "  if shape_utils.get_dim_as_int(boxes.shape[2]) != 4:"
  ],
  "consequent": [
   "  if boxes.shape[2].value != 4:"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/core/post_processing.py",
  "condition": [
   "        (selected_indices, num_valid_nms_boxes,"
  ],
  "consequent": [
   "        selected_indices, num_valid_nms_boxes = ("
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/core/post_processing.py",
  "condition": [
   "         boxlist_and_class_scores.data['boxes'],",
   "         boxlist_and_class_scores.data['scores'],",
   "         _) = partitioned_non_max_suppression_padded("
  ],
  "consequent": [
   "            tf.image.non_max_suppression_padded("
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/core/post_processing.py",
  "condition": [
   "             boxlist_and_class_scores.get(),"
  ],
  "consequent": [
   "                boxlist_and_class_scores.get(),"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/core/post_processing.py",
  "condition": [
   "             boxlist_and_class_scores.get_field(fields.BoxListFields.scores),"
  ],
  "consequent": [
   "                boxlist_and_class_scores.get_field(fields.BoxListFields.scores),"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/core/post_processing.py",
  "condition": [
   "             max_selection_size,"
  ],
  "consequent": [
   "                max_selection_size,"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/core/post_processing.py",
  "condition": [
   "             iou_threshold=iou_thresh,"
  ],
  "consequent": [
   "                iou_threshold=iou_thresh,"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/core/post_processing.py",
  "condition": [
   "             score_threshold=score_thresh)"
  ],
  "consequent": [
   "                score_threshold=score_thresh,",
   "                pad_to_max_output_size=True))"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/core/post_processing.py",
  "condition": [
   "        if (hasattr(tf.image, 'non_max_suppression_with_scores') and",
   "            tf.compat.forward_compatible(2019, 6, 6)):",
   "          (selected_indices, selected_scores",
   "          ) = tf.image.non_max_suppression_with_scores(",
   "              boxlist_and_class_scores.get(),"
  ],
  "consequent": [
   "        selected_indices = tf.image.non_max_suppression(",
   "            boxlist_and_class_scores.get(),"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/core/post_processing.py",
  "condition": [
   "              boxlist_and_class_scores.get_field(fields.BoxListFields.scores),"
  ],
  "consequent": [
   "            boxlist_and_class_scores.get_field(fields.BoxListFields.scores),"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/core/post_processing.py",
  "condition": [
   "              max_selection_size,"
  ],
  "consequent": [
   "            max_selection_size,"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/core/post_processing.py",
  "condition": [
   "              iou_threshold=iou_thresh,"
  ],
  "consequent": [
   "            iou_threshold=iou_thresh,"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/core/post_processing.py",
  "condition": [
   "              score_threshold=score_thresh,"
  ],
  "consequent": [
   "            score_threshold=score_thresh)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/core/post_processing.py",
  "condition": [
   "              soft_nms_sigma=soft_nms_sigma)",
   "          num_valid_nms_boxes = tf.shape(selected_indices)[0]"
  ],
  "consequent": [
   "        num_valid_nms_boxes = tf.shape(selected_indices)[0]"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/core/post_processing.py",
  "condition": [
   "          selected_indices = tf.concat("
  ],
  "consequent": [
   "        selected_indices = tf.concat("
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/core/post_processing.py",
  "condition": [
   "              [selected_indices,"
  ],
  "consequent": [
   "            [selected_indices,"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/core/post_processing.py",
  "condition": [
   "               tf.zeros(max_selection_size-num_valid_nms_boxes, tf.int32)], 0)"
  ],
  "consequent": [
   "             tf.zeros(max_selection_size-num_valid_nms_boxes, tf.int32)], 0)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/core/post_processing.py",
  "condition": [
   "          selected_scores = tf.concat(",
   "              [selected_scores,",
   "               tf.zeros(max_selection_size-num_valid_nms_boxes,",
   "                        tf.float32)], -1)",
   "          nms_result = box_list_ops.gather(boxlist_and_class_scores,"
  ],
  "consequent": [
   "      nms_result = box_list_ops.gather(boxlist_and_class_scores,"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/core/post_processing.py",
  "condition": [
   "                                           selected_indices)"
  ],
  "consequent": [
   "                                       selected_indices)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/core/post_processing.py",
  "condition": [
   "      valid_nms_boxes_indices = tf.less("
  ],
  "consequent": [
   "      valid_nms_boxes_indx = tf.less("
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/core/post_processing.py",
  "condition": [
   "",
   "      nms_result.add_field(",
   "          fields.BoxListFields.scores,",
   "          tf.where(valid_nms_boxes_indices,"
  ],
  "consequent": [
   "      nms_scores = nms_result.get_field(fields.BoxListFields.scores)",
   "      nms_result.add_field(fields.BoxListFields.scores,",
   "                           tf.where(valid_nms_boxes_indx,"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/core/post_processing.py",
  "condition": [
   "                   selected_scores, -1*tf.ones(max_selection_size)))"
  ],
  "consequent": [
   "                                    nms_scores, -1*tf.ones(max_selection_size)))"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/core/post_processing.py",
  "condition": [
   "      a valid scores field or if non-zero soft_nms_sigma is provided when",
   "      pad_to_max_output_size is True."
  ],
  "consequent": [
   "      a valid scores field."
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/core/post_processing.py",
  "condition": [
   "  q = shape_utils.get_dim_as_int(boxes.shape[1])"
  ],
  "consequent": [
   "  q = boxes.shape[1].value"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/core/post_processing.py",
  "condition": [
   "      (selected_indices, num_valid_nms_boxes,"
  ],
  "consequent": [
   "      selected_indices, num_valid_nms_boxes = (",
   "          tf.image.non_max_suppression_padded("
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/core/post_processing.py",
  "condition": [
   "       boxlist_and_class_scores.data['boxes'],",
   "       boxlist_and_class_scores.data['scores'],",
   "       argsort_ids) = partitioned_non_max_suppression_padded(",
   "           boxlist_and_class_scores.get(),"
  ],
  "consequent": [
   "              boxlist_and_class_scores.get(),"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/core/post_processing.py",
  "condition": [
   "           boxlist_and_class_scores.get_field(fields.BoxListFields.scores),"
  ],
  "consequent": [
   "              boxlist_and_class_scores.get_field(fields.BoxListFields.scores),"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/core/post_processing.py",
  "condition": [
   "           max_selection_size,"
  ],
  "consequent": [
   "              max_selection_size,"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/core/post_processing.py",
  "condition": [
   "           iou_threshold=iou_thresh,"
  ],
  "consequent": [
   "              iou_threshold=iou_thresh,"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/core/post_processing.py",
  "condition": [
   "           score_threshold=score_thresh)"
  ],
  "consequent": [
   "              score_threshold=score_thresh,",
   "              pad_to_max_output_size=True))"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/core/post_processing.py",
  "condition": [
   "      if (hasattr(tf.image, 'non_max_suppression_with_scores') and",
   "          tf.compat.forward_compatible(2019, 6, 6)):",
   "        (selected_indices, selected_scores",
   "        ) = tf.image.non_max_suppression_with_scores(",
   "            boxlist_and_class_scores.get(),"
  ],
  "consequent": [
   "      selected_indices = tf.image.non_max_suppression(",
   "          boxlist_and_class_scores.get(),"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/core/post_processing.py",
  "condition": [
   "            boxlist_and_class_scores.get_field(fields.BoxListFields.scores),"
  ],
  "consequent": [
   "          boxlist_and_class_scores.get_field(fields.BoxListFields.scores),"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/core/post_processing.py",
  "condition": [
   "            max_selection_size,"
  ],
  "consequent": [
   "          max_selection_size,"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/core/post_processing.py",
  "condition": [
   "            iou_threshold=iou_thresh,"
  ],
  "consequent": [
   "          iou_threshold=iou_thresh,"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/core/post_processing.py",
  "condition": [
   "            score_threshold=score_thresh,"
  ],
  "consequent": [
   "          score_threshold=score_thresh)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/core/post_processing.py",
  "condition": [
   "            soft_nms_sigma=soft_nms_sigma)",
   "        num_valid_nms_boxes = tf.shape(selected_indices)[0]"
  ],
  "consequent": [
   "      num_valid_nms_boxes = tf.shape(selected_indices)[0]"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/core/post_processing.py",
  "condition": [
   "        selected_indices = tf.concat(["
  ],
  "consequent": [
   "      selected_indices = tf.concat(["
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/core/post_processing.py",
  "condition": [
   "            selected_indices,"
  ],
  "consequent": [
   "          selected_indices,"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/core/post_processing.py",
  "condition": [
   "            tf.zeros(max_selection_size - num_valid_nms_boxes, tf.int32)"
  ],
  "consequent": [
   "          tf.zeros(max_selection_size - num_valid_nms_boxes, tf.int32)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/core/post_processing.py",
  "condition": [
   "        ], 0)"
  ],
  "consequent": [
   "      ], 0)",
   ""
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/core/post_processing.py",
  "condition": [
   "        selected_scores = tf.concat(",
   "            [selected_scores,",
   "             tf.zeros(max_selection_size-num_valid_nms_boxes, tf.float32)], -1)",
   "        nms_result = box_list_ops.gather(boxlist_and_class_scores,"
  ],
  "consequent": [
   "    nms_result = box_list_ops.gather(boxlist_and_class_scores, selected_indices)",
   ""
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/core/post_processing.py",
  "condition": [
   "                                         selected_indices)",
   "      else:",
   "        if soft_nms_sigma != 0:",
   "          raise ValueError('Soft NMS not supported in current TF version!')",
   "        selected_indices = tf.image.non_max_suppression(",
   "            boxlist_and_class_scores.get(),",
   "            boxlist_and_class_scores.get_field(fields.BoxListFields.scores),",
   "            max_selection_size,",
   "            iou_threshold=iou_thresh,",
   "            score_threshold=score_thresh)",
   "        num_valid_nms_boxes = tf.shape(selected_indices)[0]",
   "        selected_indices = tf.concat(",
   "            [selected_indices,",
   "             tf.zeros(max_selection_size-num_valid_nms_boxes, tf.int32)], 0)",
   "        nms_result = box_list_ops.gather(boxlist_and_class_scores,",
   "                                         selected_indices)",
   "        selected_scores = nms_result.get_field(fields.BoxListFields.scores)",
   "    valid_nms_boxes_indices = tf.less("
  ],
  "consequent": [
   "    valid_nms_boxes_indx = tf.less("
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/core/post_processing.py",
  "condition": [
   "        tf.where(valid_nms_boxes_indices,"
  ],
  "consequent": [
   "        tf.where(valid_nms_boxes_indx, nms_scores,"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/core/post_processing.py",
  "condition": [
   "                 selected_scores, -1*tf.ones(max_selection_size)))"
  ],
  "consequent": [
   "                 -1 * tf.ones(max_selection_size)))"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/core/post_processing.py",
  "condition": [
   "            additional_fields=per_image_additional_fields,"
  ],
  "consequent": [
   "            additional_fields=per_image_additional_fields)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/core/post_processing.py",
  "condition": [
   "            additional_fields=per_image_additional_fields,"
  ],
  "consequent": [
   "            additional_fields=per_image_additional_fields)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/core/preprocessor.py",
  "condition": [
   "    if preprocess_vars_cache is not None:"
  ],
  "consequent": [
   "    if (preprocess_vars_cache is not None and"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/core/preprocessor.py",
  "condition": [
   "      if six.PY2:",
   "        # pylint: disable=deprecated-method",
   "        arg_spec = inspect.getargspec(func)",
   "        # pylint: enable=deprecated-method",
   "      else:",
   "        arg_spec = inspect.getfullargspec(func)",
   "      if 'preprocess_vars_cache' in arg_spec.args:"
  ],
  "consequent": [
   "        'preprocess_vars_cache' in inspect.getargspec(func).args):"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/core/preprocessor.py",
  "condition": [
   "        params['preprocess_vars_cache'] = preprocess_vars_cache"
  ],
  "consequent": [
   "      params['preprocess_vars_cache'] = preprocess_vars_cache"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/core/region_similarity_calculator.py",
  "condition": [
   "class RegionSimilarityCalculator(six.with_metaclass(ABCMeta, object)):"
  ],
  "consequent": [
   "class RegionSimilarityCalculator(object):"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/data_decoders/tf_example_decoder_test.py",
  "condition": [
   "                    dataset_util.bytes_feature(six.b('jpeg')),"
  ],
  "consequent": [
   "                    dataset_util.bytes_feature('jpeg'),"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/data_decoders/tf_example_decoder_test.py",
  "condition": [
   "                    dataset_util.bytes_feature(six.b('image_id')),"
  ],
  "consequent": [
   "                    dataset_util.bytes_feature('image_id'),"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/data_decoders/tf_example_decoder_test.py",
  "condition": [
   "                'image/encoded':",
   "                    dataset_util.bytes_feature(encoded_jpeg),"
  ],
  "consequent": [
   "                'image/encoded': dataset_util.bytes_feature(encoded_jpeg),"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/data_decoders/tf_example_decoder_test.py",
  "condition": [
   "                'image/format':",
   "                    dataset_util.bytes_feature(six.b('jpeg')),"
  ],
  "consequent": [
   "                'image/format': dataset_util.bytes_feature('jpeg'),"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/data_decoders/tf_example_decoder_test.py",
  "condition": [
   "                'image/source_id':",
   "                    dataset_util.bytes_feature(six.b('image_id')),"
  ],
  "consequent": [
   "                'image/source_id': dataset_util.bytes_feature('image_id'),"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/data_decoders/tf_example_decoder_test.py",
  "condition": [
   "    self.assertEqual(",
   "        six.b('image_id'), tensor_dict[fields.InputDataFields.source_id])"
  ],
  "consequent": [
   "    self.assertEqual('image_id', tensor_dict[fields.InputDataFields.source_id])"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/data_decoders/tf_example_decoder_test.py",
  "condition": [
   "                'image/key/sha256': dataset_util.bytes_feature(six.b('abc')),"
  ],
  "consequent": [
   "                'image/key/sha256': dataset_util.bytes_feature('abc'),"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/data_decoders/tf_example_decoder_test.py",
  "condition": [
   "                'image/filename': dataset_util.bytes_feature(six.b('filename'))"
  ],
  "consequent": [
   "                'image/filename': dataset_util.bytes_feature('filename')"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/data_decoders/tf_example_decoder_test.py",
  "condition": [
   "    self.assertEqual(six.b('abc'), tensor_dict[fields.InputDataFields.key])"
  ],
  "consequent": [
   "    self.assertEqual('abc', tensor_dict[fields.InputDataFields.key])"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/data_decoders/tf_example_decoder_test.py",
  "condition": [
   "    self.assertEqual(",
   "        six.b('filename'), tensor_dict[fields.InputDataFields.filename])"
  ],
  "consequent": [
   "    self.assertEqual('filename', tensor_dict[fields.InputDataFields.filename])"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/data_decoders/tf_example_decoder_test.py",
  "condition": [
   "                'image/format': dataset_util.bytes_feature(six.b('png')),"
  ],
  "consequent": [
   "                'image/format': dataset_util.bytes_feature('png'),"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/data_decoders/tf_example_decoder_test.py",
  "condition": [
   "                'image/source_id': dataset_util.bytes_feature("
  ],
  "consequent": [
   "                'image/source_id': dataset_util.bytes_feature('image_id')"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/data_decoders/tf_example_decoder_test.py",
  "condition": [
   "    self.assertEqual(",
   "        six.b('image_id'), tensor_dict[fields.InputDataFields.source_id])"
  ],
  "consequent": [
   "    self.assertEqual('image_id', tensor_dict[fields.InputDataFields.source_id])"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/data_decoders/tf_example_decoder_test.py",
  "condition": [
   "                    dataset_util.bytes_feature(six.b('jpeg')),"
  ],
  "consequent": [
   "                    dataset_util.bytes_feature('jpeg'),"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/data_decoders/tf_example_decoder_test.py",
  "condition": [
   "                    dataset_util.bytes_feature(six.b('jpeg')),"
  ],
  "consequent": [
   "                    dataset_util.bytes_feature('jpeg'),"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/data_decoders/tf_example_decoder_test.py",
  "condition": [
   "                    dataset_util.bytes_feature(six.b('jpeg')),"
  ],
  "consequent": [
   "                    dataset_util.bytes_feature('jpeg'),"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/data_decoders/tf_example_decoder_test.py",
  "condition": [
   "                    dataset_util.bytes_feature(six.b('jpeg')),"
  ],
  "consequent": [
   "                    dataset_util.bytes_feature('jpeg'),"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/data_decoders/tf_example_decoder_test.py",
  "condition": [
   "                    dataset_util.bytes_feature(six.b('jpeg')),"
  ],
  "consequent": [
   "                    dataset_util.bytes_feature('jpeg'),"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/data_decoders/tf_example_decoder_test.py",
  "condition": [
   "                    dataset_util.bytes_feature(six.b('jpeg')),"
  ],
  "consequent": [
   "                    dataset_util.bytes_feature('jpeg'),"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/data_decoders/tf_example_decoder_test.py",
  "condition": [
   "                    dataset_util.bytes_feature(six.b('jpeg')),"
  ],
  "consequent": [
   "                    dataset_util.bytes_feature('jpeg'),"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/data_decoders/tf_example_decoder_test.py",
  "condition": [
   "                    dataset_util.bytes_feature(six.b('jpeg')),"
  ],
  "consequent": [
   "                    dataset_util.bytes_feature('jpeg'),"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/data_decoders/tf_example_decoder_test.py",
  "condition": [
   "    bbox_classes_text = [six.b('cat'), six.b('dog')]"
  ],
  "consequent": [
   "    bbox_classes_text = ['cat', 'dog']"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/data_decoders/tf_example_decoder_test.py",
  "condition": [
   "                    dataset_util.bytes_feature(six.b('jpeg')),"
  ],
  "consequent": [
   "                    dataset_util.bytes_feature('jpeg'),"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/data_decoders/tf_example_decoder_test.py",
  "condition": [
   "    bbox_classes_text = [six.b('cat'), six.b('cheetah')]"
  ],
  "consequent": [
   "    bbox_classes_text = ['cat', 'cheetah']"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/data_decoders/tf_example_decoder_test.py",
  "condition": [
   "                'image/encoded':",
   "                    dataset_util.bytes_feature(encoded_jpeg),",
   "                'image/format':"
  ],
  "consequent": [
   "                'image/encoded':",
   "                    dataset_util.bytes_feature(encoded_jpeg),",
   "                'image/format':"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/data_decoders/tf_example_decoder_test.py",
  "condition": [
   "                    dataset_util.bytes_feature(six.b('jpeg')),"
  ],
  "consequent": [
   "                    dataset_util.bytes_feature('jpeg'),"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/data_decoders/tf_example_decoder_test.py",
  "condition": [
   "    bbox_classes_text = [six.b('cat'), six.b('dog')]"
  ],
  "consequent": [
   "    bbox_classes_text = ['cat', 'dog']"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/data_decoders/tf_example_decoder_test.py",
  "condition": [
   "                'image/encoded':",
   "                    dataset_util.bytes_feature(encoded_jpeg),",
   "                'image/format':"
  ],
  "consequent": [
   "                'image/encoded':",
   "                    dataset_util.bytes_feature(encoded_jpeg),",
   "                'image/format':"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/data_decoders/tf_example_decoder_test.py",
  "condition": [
   "                    dataset_util.bytes_feature(six.b('jpeg')),"
  ],
  "consequent": [
   "                    dataset_util.bytes_feature('jpeg'),"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/data_decoders/tf_example_decoder_test.py",
  "condition": [
   "    bbox_classes_text = [six.b('cat'), six.b('cheetah')]"
  ],
  "consequent": [
   "    bbox_classes_text = ['cat', 'cheetah']"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/data_decoders/tf_example_decoder_test.py",
  "condition": [
   "                    dataset_util.bytes_feature(six.b('jpeg')),"
  ],
  "consequent": [
   "                    dataset_util.bytes_feature('jpeg'),"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/data_decoders/tf_example_decoder_test.py",
  "condition": [
   "    bbox_classes_text = [six.b('cat'), six.b('dog')]"
  ],
  "consequent": [
   "    bbox_classes_text = ['cat', 'dog']"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/data_decoders/tf_example_decoder_test.py",
  "condition": [
   "                'image/encoded':",
   "                    dataset_util.bytes_feature(encoded_jpeg),",
   "                'image/format':"
  ],
  "consequent": [
   "                'image/encoded':",
   "                    dataset_util.bytes_feature(encoded_jpeg),",
   "                'image/format':"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/data_decoders/tf_example_decoder_test.py",
  "condition": [
   "                    dataset_util.bytes_feature(six.b('jpeg')),"
  ],
  "consequent": [
   "                    dataset_util.bytes_feature('jpeg'),"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/data_decoders/tf_example_decoder_test.py",
  "condition": [
   "                    dataset_util.bytes_feature(six.b('jpeg')),"
  ],
  "consequent": [
   "                    dataset_util.bytes_feature('jpeg'),"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/data_decoders/tf_example_decoder_test.py",
  "condition": [
   "                    dataset_util.bytes_feature(six.b('jpeg')),"
  ],
  "consequent": [
   "                    dataset_util.bytes_feature('jpeg'),"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/data_decoders/tf_example_decoder_test.py",
  "condition": [
   "                    dataset_util.bytes_feature(six.b('jpeg')),"
  ],
  "consequent": [
   "                    dataset_util.bytes_feature('jpeg'),"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/data_decoders/tf_example_decoder_test.py",
  "condition": [
   "                    dataset_util.bytes_feature(six.b('jpeg')),"
  ],
  "consequent": [
   "                    dataset_util.bytes_feature('jpeg'),"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/data_decoders/tf_example_decoder_test.py",
  "condition": [
   "                    dataset_util.bytes_feature(six.b('jpeg')),"
  ],
  "consequent": [
   "                    dataset_util.bytes_feature('jpeg'),"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/data_decoders/tf_example_decoder_test.py",
  "condition": [
   "                    dataset_util.bytes_feature(six.b('jpeg')),"
  ],
  "consequent": [
   "                    dataset_util.bytes_feature('jpeg'),"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/data_decoders/tf_example_decoder_test.py",
  "condition": [
   "                    dataset_util.bytes_feature(six.b('jpeg')),"
  ],
  "consequent": [
   "                    dataset_util.bytes_feature('jpeg'),"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/data_decoders/tf_example_decoder_test.py",
  "condition": [
   "                'image/format': dataset_util.bytes_feature(six.b('jpeg')),"
  ],
  "consequent": [
   "                'image/format': dataset_util.bytes_feature('jpeg'),"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/data_decoders/tf_example_decoder_test.py",
  "condition": [
   "                    dataset_util.bytes_feature(six.b('jpeg')),"
  ],
  "consequent": [
   "                    dataset_util.bytes_feature('jpeg'),"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/data_decoders/tf_example_decoder_test.py",
  "condition": [
   "                    dataset_util.bytes_list_feature("
  ],
  "consequent": [
   "                    dataset_util.bytes_list_feature(['dog', 'cat']),"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/dataset_tools/oid_hierarchical_labels_expansion.py",
  "condition": [
   "r\"\"\"An executable to expand image-level labels, boxes and segments."
  ],
  "consequent": [
   "r\"\"\"An executable to expand hierarchically image-level labels and boxes."
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/dataset_tools/oid_hierarchical_labels_expansion.py",
  "condition": [
   "--annotation_type=<1 (for boxes and segments) or 2 (for image-level labels)>"
  ],
  "consequent": [
   "--annotation_type=<1 (for boxes) or 2 (for image-level labels)>"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/dataset_tools/oid_hierarchical_labels_expansion.py",
  "condition": [
   "import copy"
  ],
  "consequent": [
   "import argparse"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/dataset_tools/oid_hierarchical_labels_expansion.py",
  "condition": [
   "  for key, value_list in update.items():"
  ],
  "consequent": [
   "  for key, value_list in update.iteritems():"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/dataset_tools/oid_hierarchical_labels_expansion.py",
  "condition": [
   "      initial_dict[key].update(value_list)"
  ],
  "consequent": [
   "      initial_dict[key].extend(value_list)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/dataset_tools/oid_hierarchical_labels_expansion.py",
  "condition": [
   "      initial_dict[key] = set(value_list)"
  ],
  "consequent": [
   "      initial_dict[key] = value_list"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/dataset_tools/oid_hierarchical_labels_expansion.py",
  "condition": [
   "  all_children = set([])"
  ],
  "consequent": [
   "  all_children = []"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/dataset_tools/oid_hierarchical_labels_expansion.py",
  "condition": [
   "      all_children.update(children)"
  ],
  "consequent": [
   "      all_children.extend(children)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/dataset_tools/oid_hierarchical_labels_expansion.py",
  "condition": [
   "    all_keyed_parent[hierarchy['LabelName']] = copy.deepcopy(all_children)"
  ],
  "consequent": [
   "    all_keyed_parent[hierarchy['LabelName']] = all_children"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/dataset_tools/oid_hierarchical_labels_expansion.py",
  "condition": [
   "    all_children.add(hierarchy['LabelName'])"
  ],
  "consequent": [
   "    all_children = [hierarchy['LabelName']] + all_children"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/dataset_tools/oid_hierarchical_labels_expansion.py",
  "condition": [
   "    for child, _ in all_keyed_child.items():"
  ],
  "consequent": [
   "    for child, _ in all_keyed_child.iteritems():"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/dataset_tools/oid_hierarchical_labels_expansion.py",
  "condition": [
   "      all_keyed_child[child].add(hierarchy['LabelName'])"
  ],
  "consequent": [
   "      all_keyed_child[child].append(hierarchy['LabelName'])"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/dataset_tools/oid_hierarchical_labels_expansion.py",
  "condition": [
   "    all_keyed_child[hierarchy['LabelName']] = set([])"
  ],
  "consequent": [
   "    all_keyed_child[hierarchy['LabelName']] = []"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/dataset_tools/oid_hierarchical_labels_expansion.py",
  "condition": [
   "  def expand_boxes_or_segments_from_csv(self, csv_row,"
  ],
  "consequent": [
   "  def expand_boxes_from_csv(self, csv_row):"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/dataset_tools/oid_hierarchical_labels_expansion.py",
  "condition": [
   "                                        labelname_column_index=1):",
   "    \"\"\"Expands a row containing bounding boxes/segments from CSV file."
  ],
  "consequent": [
   "    \"\"\"Expands a row containing bounding boxes from CSV file."
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/dataset_tools/oid_hierarchical_labels_expansion.py",
  "condition": [
   "      Challenge 2018/2019 metrics."
  ],
  "consequent": [
   "      Challenge 2018 metric."
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/dataset_tools/oid_hierarchical_labels_expansion.py",
  "condition": [
   "    # Row header is expected to be the following for boxes:"
  ],
  "consequent": [
   "    # Row header is expected to be exactly:"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/dataset_tools/oid_hierarchical_labels_expansion.py",
  "condition": [
   "    # ImageID,LabelName,Confidence,XMin,XMax,YMin,YMax,IsGroupOf"
  ],
  "consequent": [
   "    # ImageID,Source,LabelName,Confidence,XMin,XMax,YMin,YMax,IsOccluded,",
   "    # IsTruncated,IsGroupOf,IsDepiction,IsInside"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/dataset_tools/oid_hierarchical_labels_expansion.py",
  "condition": [
   "    # Row header is expected to be the following for segments:",
   "    # ImageID,LabelName,ImageWidth,ImageHeight,XMin,XMax,YMin,YMax,",
   "    # IsGroupOf,Mask",
   "    split_csv_row = csv_row.split(',')"
  ],
  "consequent": [
   "    cvs_row_splitted = csv_row.split(',')",
   "    assert len(cvs_row_splitted) == 13"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/dataset_tools/oid_hierarchical_labels_expansion.py",
  "condition": [
   "    assert split_csv_row[",
   "        labelname_column_index] in self._hierarchy_keyed_child",
   "    parent_nodes = self._hierarchy_keyed_child["
  ],
  "consequent": [
   "    assert cvs_row_splitted[2] in self._hierarchy_keyed_child",
   "    parent_nodes = self._hierarchy_keyed_child[cvs_row_splitted[2]]"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/dataset_tools/oid_hierarchical_labels_expansion.py",
  "condition": [
   "      split_csv_row[labelname_column_index] = parent_node"
  ],
  "consequent": [
   "      cvs_row_splitted[2] = parent_node"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/dataset_tools/oid_hierarchical_labels_expansion.py",
  "condition": [
   "      result.append(','.join(split_csv_row))"
  ],
  "consequent": [
   "      result.append(','.join(cvs_row_splitted))"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/dataset_tools/oid_hierarchical_labels_expansion.py",
  "condition": [
   "  def expand_labels_from_csv(self,"
  ],
  "consequent": [
   "  def expand_labels_from_csv(self, csv_row):"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/dataset_tools/oid_hierarchical_labels_expansion.py",
  "condition": [
   "                             csv_row,",
   "                             labelname_column_index=1,",
   "                             confidence_column_index=2):",
   "    \"\"\"Expands a row containing labels from CSV file."
  ],
  "consequent": [
   "    \"\"\"Expands a row containing bounding boxes from CSV file."
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/dataset_tools/oid_hierarchical_labels_expansion.py",
  "condition": [
   "      Challenge 2018/2019 metrics."
  ],
  "consequent": [
   "      Challenge 2018 metric."
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/dataset_tools/oid_hierarchical_labels_expansion.py",
  "condition": [
   "    split_csv_row = csv_row.split(',')"
  ],
  "consequent": [
   "    cvs_row_splited = csv_row.split(',')",
   "    assert len(cvs_row_splited) == 4"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/dataset_tools/oid_hierarchical_labels_expansion.py",
  "condition": [
   "    if int(split_csv_row[confidence_column_index]) == 1:",
   "      assert split_csv_row[",
   "          labelname_column_index] in self._hierarchy_keyed_child",
   "      parent_nodes = self._hierarchy_keyed_child["
  ],
  "consequent": [
   "    if int(cvs_row_splited[3]) == 1:",
   "      assert cvs_row_splited[2] in self._hierarchy_keyed_child",
   "      parent_nodes = self._hierarchy_keyed_child[cvs_row_splited[2]]"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/dataset_tools/oid_hierarchical_labels_expansion.py",
  "condition": [
   "        split_csv_row[labelname_column_index] = parent_node"
  ],
  "consequent": [
   "        cvs_row_splited[2] = parent_node"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/dataset_tools/oid_hierarchical_labels_expansion.py",
  "condition": [
   "        result.append(','.join(split_csv_row))"
  ],
  "consequent": [
   "        result.append(','.join(cvs_row_splited))"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/dataset_tools/oid_hierarchical_labels_expansion.py",
  "condition": [
   "      assert split_csv_row[",
   "          labelname_column_index] in self._hierarchy_keyed_parent",
   "      child_nodes = self._hierarchy_keyed_parent["
  ],
  "consequent": [
   "      assert cvs_row_splited[2] in self._hierarchy_keyed_parent",
   "      child_nodes = self._hierarchy_keyed_parent[cvs_row_splited[2]]"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/dataset_tools/oid_hierarchical_labels_expansion.py",
  "condition": [
   "        split_csv_row[labelname_column_index] = child_node"
  ],
  "consequent": [
   "        cvs_row_splited[2] = child_node"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/dataset_tools/oid_hierarchical_labels_expansion.py",
  "condition": [
   "        result.append(','.join(split_csv_row))"
  ],
  "consequent": [
   "        result.append(','.join(cvs_row_splited))"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/dataset_tools/oid_hierarchical_labels_expansion.py",
  "condition": [
   "def main(unused_args):"
  ],
  "consequent": [
   "def main(parsed_args):"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/dataset_tools/oid_hierarchical_labels_expansion.py",
  "condition": [
   "  del unused_args",
   "",
   "  with open(FLAGS.json_hierarchy_file) as f:"
  ],
  "consequent": [
   "  with open(parsed_args.json_hierarchy_file) as f:"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/dataset_tools/oid_hierarchical_labels_expansion.py",
  "condition": [
   "  if FLAGS.annotation_type == 2:"
  ],
  "consequent": [
   "  if parsed_args.annotation_type == 2:"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/dataset_tools/oid_hierarchical_labels_expansion.py",
  "condition": [
   "  elif FLAGS.annotation_type != 1:"
  ],
  "consequent": [
   "  elif parsed_args.annotation_type != 1:"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/dataset_tools/oid_hierarchical_labels_expansion.py",
  "condition": [
   "  confidence_column_index = -1",
   "  labelname_column_index = -1",
   "  with open(FLAGS.input_annotations, 'r') as source:"
  ],
  "consequent": [
   "  with open(parsed_args.input_annotations, 'r') as source:"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/dataset_tools/oid_hierarchical_labels_expansion.py",
  "condition": [
   "    with open(FLAGS.output_annotations, 'w') as target:"
  ],
  "consequent": [
   "    with open(parsed_args.output_annotations, 'w') as target:",
   "      header = None"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/dataset_tools/oid_hierarchical_labels_expansion.py",
  "condition": [
   "          expanded_lines = expansion_generator.expand_labels_from_csv("
  ],
  "consequent": [
   "          expanded_lines = expansion_generator.expand_labels_from_csv(line)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/dataset_tools/oid_hierarchical_labels_expansion.py",
  "condition": [
   "          expanded_lines = (",
   "              expansion_generator.expand_boxes_or_segments_from_csv("
  ],
  "consequent": [
   "          expanded_lines = expansion_generator.expand_boxes_from_csv(line)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/dataset_tools/oid_hierarchical_labels_expansion.py",
  "condition": [
   "  app.run(main)"
  ],
  "consequent": [
   "  parser = argparse.ArgumentParser(",
   "      description='Hierarchically expand annotations (excluding root node).')",
   "  parser.add_argument(",
   "      '--json_hierarchy_file',",
   "      required=True,",
   "      help='Path to the file containing label hierarchy in JSON format.')",
   "  parser.add_argument(",
   "      '--input_annotations',",
   "      required=True,",
   "      help=\"\"\"Path to Open Images annotations file (either bounding boxes or",
   "      image-level labels).\"\"\")",
   "  parser.add_argument(",
   "      '--output_annotations',",
   "      required=True,",
   "      help=\"\"\"Path to the output file.\"\"\")",
   "  parser.add_argument(",
   "      '--annotation_type',",
   "      type=int,",
   "      required=True,",
   "      help=\"\"\"Type of the input annotations: 1 - boxes, 2 - image-level",
   "      labels\"\"\"",
   "  )",
   "  args = parser.parse_args()",
   "  main(args)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/dataset_tools/oid_hierarchical_labels_expansion_test.py",
  "condition": [
   "          'LabelName':"
  ],
  "consequent": [
   "          'LabelName': 'c',"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/dataset_tools/oid_hierarchical_labels_expansion_test.py",
  "condition": [
   "  segm_rows = [",
   "      '123,cc,b,100,100,0.1,0.2,0.1,0.2,0,MASK',",
   "      '123,cc,d,100,100,0.2,0.3,0.1,0.2,0,MASK',",
   "  ]",
   "  return hierarchy, bbox_rows, segm_rows, label_rows"
  ],
  "consequent": [
   "  return hierarchy, bbox_rows, label_rows"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/dataset_tools/oid_hierarchical_labels_expansion_test.py",
  "condition": [
   "    hierarchy, bbox_rows, _, _ = create_test_data()"
  ],
  "consequent": [
   "    hierarchy, bbox_rows, _ = create_test_data()"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/dataset_tools/oid_hierarchical_labels_expansion_test.py",
  "condition": [
   "      all_result_rows.extend(",
   "          expansion_generator.expand_boxes_or_segments_from_csv(row, 2))"
  ],
  "consequent": [
   "      all_result_rows.extend(expansion_generator.expand_boxes_from_csv(row))"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/dataset_tools/oid_hierarchical_labels_expansion_test.py",
  "condition": [
   "    hierarchy, _, _, label_rows = create_test_data()"
  ],
  "consequent": [
   "    hierarchy, _, label_rows = create_test_data()"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/dataset_tools/oid_hierarchical_labels_expansion_test.py",
  "condition": [
   "      all_result_rows.extend(",
   "          expansion_generator.expand_labels_from_csv(row, 2, 3))"
  ],
  "consequent": [
   "      all_result_rows.extend(expansion_generator.expand_labels_from_csv(row))"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/dataset_tools/oid_hierarchical_labels_expansion_test.py",
  "condition": [
   "        '123,verification,f,0', '123,verification,e,0', '124,verification,d,1',",
   "        '124,verification,f,1', '124,verification,c,1'"
  ],
  "consequent": [
   "        '123,verification,e,0', '124,verification,d,1', '124,verification,f,1',",
   "        '124,verification,c,1'"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/eval_util_test.py",
  "condition": [
   "      for key, (value_op, _) in six.iteritems(metric_ops):"
  ],
  "consequent": [
   "      for key, (value_op, _) in metric_ops.iteritems():"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/eval_util_test.py",
  "condition": [
   "      for key, (value_op, _) in six.iteritems(metric_ops):"
  ],
  "consequent": [
   "      for key, (value_op, _) in metric_ops.iteritems():"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/eval_util_test.py",
  "condition": [
   "      for key, (value_op, _) in six.iteritems(metric_ops):"
  ],
  "consequent": [
   "      for key, (value_op, _) in metric_ops.iteritems():"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/export_inference_graph.py",
  "condition": [
   "  * `detection_masks`: (Optional) Outputs float32 tensors of the form"
  ],
  "consequent": [
   "  * `detection_masks`: Outputs float32 tensors of the form"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/exporter.py",
  "condition": [
   "      add_type_name, inputs=[reshape_2_pattern, '*'], ordered_inputs=False)"
  ],
  "consequent": [
   "      'Add', inputs=[reshape_2_pattern, '*'], ordered_inputs=False)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/exporter_test.py",
  "condition": [
   "  def __init__(self, add_detection_keypoints=False, add_detection_masks=False,"
  ],
  "consequent": [
   "  def __init__(self, add_detection_keypoints=False, add_detection_masks=False):"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/exporter_test.py",
  "condition": [
   "    for v in variables_helper.get_global_variables_safely():"
  ],
  "consequent": [
   "    for v in tf.global_variables():"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/exporter_test.py",
  "condition": [
   "          add_detection_keypoints=True, add_detection_masks=True,"
  ],
  "consequent": [
   "          add_detection_keypoints=True, add_detection_masks=True)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/exporter_test.py",
  "condition": [
   "        (boxes_np, scores_np, multiclass_scores_np, classes_np, keypoints_np,"
  ],
  "consequent": [
   "        (boxes_np, scores_np, classes_np, keypoints_np, masks_np,"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/exporter_test.py",
  "condition": [
   "         masks_np, num_detections_np) = sess.run("
  ],
  "consequent": [
   "         num_detections_np) = sess.run("
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/exporter_test.py",
  "condition": [
   "             [boxes, scores, multiclass_scores, classes, keypoints, masks,"
  ],
  "consequent": [
   "             [boxes, scores, classes, keypoints, masks, num_detections],"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/inputs.py",
  "condition": [
   "    use_multiclass_scores: whether to use multiclass scores as class targets"
  ],
  "consequent": [
   "    use_multiclass_scores: whether to use multiclass scores as"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/inputs.py",
  "condition": [
   "      instead of one-hot encoding of `groundtruth_classes`. When"
  ],
  "consequent": [
   "      class targets instead of one-hot encoding of `groundtruth_classes`."
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/inputs.py",
  "condition": [
   "  out_tensor_dict = tensor_dict.copy()"
  ],
  "consequent": [
   "  # Reshape flattened multiclass scores tensor into a 2D tensor of shape",
   "  # [num_boxes, num_classes]."
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/inputs.py",
  "condition": [
   "  if fields.InputDataFields.multiclass_scores in out_tensor_dict:"
  ],
  "consequent": [
   "  if fields.InputDataFields.multiclass_scores in tensor_dict:",
   "    tensor_dict[fields.InputDataFields.multiclass_scores] = tf.reshape("
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/inputs.py",
  "condition": [
   "    out_tensor_dict[",
   "        fields.InputDataFields",
   "        .multiclass_scores] = _multiclass_scores_or_one_hot_labels(",
   "            out_tensor_dict[fields.InputDataFields.multiclass_scores],"
  ],
  "consequent": [
   "        tensor_dict[fields.InputDataFields.multiclass_scores], ["
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/inputs.py",
  "condition": [
   "            out_tensor_dict[fields.InputDataFields.groundtruth_boxes],"
  ],
  "consequent": [
   "            tf.shape(tensor_dict[fields.InputDataFields.groundtruth_boxes])[0],"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/inputs.py",
  "condition": [
   "            out_tensor_dict[fields.InputDataFields.groundtruth_classes],",
   "            num_classes)"
  ],
  "consequent": [
   "            num_classes"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/inputs.py",
  "condition": [
   ""
  ],
  "consequent": [
   "        ])"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/inputs.py",
  "condition": [
   "  if fields.InputDataFields.groundtruth_boxes in out_tensor_dict:"
  ],
  "consequent": [
   "  if fields.InputDataFields.groundtruth_boxes in tensor_dict:"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/inputs.py",
  "condition": [
   "    out_tensor_dict = util_ops.filter_groundtruth_with_nan_box_coordinates("
  ],
  "consequent": [
   "    tensor_dict = util_ops.filter_groundtruth_with_nan_box_coordinates("
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/inputs.py",
  "condition": [
   "        out_tensor_dict)"
  ],
  "consequent": [
   "        tensor_dict)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/inputs.py",
  "condition": [
   "    out_tensor_dict = util_ops.filter_unrecognized_classes(out_tensor_dict)"
  ],
  "consequent": [
   "    tensor_dict = util_ops.filter_unrecognized_classes(tensor_dict)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/inputs.py",
  "condition": [
   "    out_tensor_dict[fields.InputDataFields.original_image] = tf.cast("
  ],
  "consequent": [
   "    tensor_dict[fields.InputDataFields.original_image] = tf.cast("
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/inputs.py",
  "condition": [
   "        image_resizer_fn(out_tensor_dict[fields.InputDataFields.image],"
  ],
  "consequent": [
   "        image_resizer_fn(tensor_dict[fields.InputDataFields.image], None)[0],"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/inputs.py",
  "condition": [
   "                         None)[0], tf.uint8)"
  ],
  "consequent": [
   "        tf.uint8)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/inputs.py",
  "condition": [
   "  if fields.InputDataFields.image_additional_channels in out_tensor_dict:"
  ],
  "consequent": [
   "  if fields.InputDataFields.image_additional_channels in tensor_dict:"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/inputs.py",
  "condition": [
   "    channels = out_tensor_dict[fields.InputDataFields.image_additional_channels]"
  ],
  "consequent": [
   "    channels = tensor_dict[fields.InputDataFields.image_additional_channels]"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/inputs.py",
  "condition": [
   "    out_tensor_dict[fields.InputDataFields.image] = tf.concat("
  ],
  "consequent": [
   "    tensor_dict[fields.InputDataFields.image] = tf.concat("
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/inputs.py",
  "condition": [
   "        [out_tensor_dict[fields.InputDataFields.image], channels], axis=2)"
  ],
  "consequent": [
   "        [tensor_dict[fields.InputDataFields.image], channels], axis=2)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/inputs.py",
  "condition": [
   "    out_tensor_dict = data_augmentation_fn(out_tensor_dict)"
  ],
  "consequent": [
   "    tensor_dict = data_augmentation_fn(tensor_dict)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/inputs.py",
  "condition": [
   "  image = out_tensor_dict[fields.InputDataFields.image]"
  ],
  "consequent": [
   "  image = tensor_dict[fields.InputDataFields.image]"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/inputs.py",
  "condition": [
   "  out_tensor_dict[fields.InputDataFields.image] = tf.squeeze("
  ],
  "consequent": [
   "  tensor_dict[fields.InputDataFields.image] = tf.squeeze("
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/inputs.py",
  "condition": [
   "  out_tensor_dict[fields.InputDataFields.true_image_shape] = tf.squeeze("
  ],
  "consequent": [
   "  tensor_dict[fields.InputDataFields.true_image_shape] = tf.squeeze("
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/inputs.py",
  "condition": [
   "  if fields.InputDataFields.groundtruth_instance_masks in out_tensor_dict:"
  ],
  "consequent": [
   "  if fields.InputDataFields.groundtruth_instance_masks in tensor_dict:"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/inputs.py",
  "condition": [
   "    masks = out_tensor_dict[fields.InputDataFields.groundtruth_instance_masks]"
  ],
  "consequent": [
   "    masks = tensor_dict[fields.InputDataFields.groundtruth_instance_masks]"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/inputs.py",
  "condition": [
   "    out_tensor_dict["
  ],
  "consequent": [
   "    tensor_dict[fields.InputDataFields."
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/inputs.py",
  "condition": [
   "        fields.InputDataFields.groundtruth_instance_masks] = resized_masks"
  ],
  "consequent": [
   "                groundtruth_instance_masks] = resized_masks"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/inputs.py",
  "condition": [
   "  zero_indexed_groundtruth_classes = out_tensor_dict["
  ],
  "consequent": [
   "  zero_indexed_groundtruth_classes = tensor_dict["
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/inputs.py",
  "condition": [
   "    out_tensor_dict[",
   "        fields.InputDataFields.groundtruth_classes] = out_tensor_dict["
  ],
  "consequent": [
   "    tensor_dict[fields.InputDataFields.groundtruth_classes] = tensor_dict["
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/inputs.py",
  "condition": [
   "            fields.InputDataFields.multiclass_scores]"
  ],
  "consequent": [
   "        fields.InputDataFields.multiclass_scores]"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/inputs.py",
  "condition": [
   "  else:",
   "    out_tensor_dict[fields.InputDataFields.groundtruth_classes] = tf.one_hot(",
   "        zero_indexed_groundtruth_classes, num_classes)",
   "  out_tensor_dict.pop(fields.InputDataFields.multiclass_scores, None)"
  ],
  "consequent": [
   "  tensor_dict.pop(fields.InputDataFields.multiclass_scores, None)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/inputs.py",
  "condition": [
   "  if fields.InputDataFields.groundtruth_confidences in out_tensor_dict:"
  ],
  "consequent": [
   "  if fields.InputDataFields.groundtruth_confidences in tensor_dict:"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/inputs.py",
  "condition": [
   "    groundtruth_confidences = out_tensor_dict["
  ],
  "consequent": [
   "    groundtruth_confidences = tensor_dict["
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/inputs.py",
  "condition": [
   "    out_tensor_dict[fields.InputDataFields.groundtruth_confidences] = ("
  ],
  "consequent": [
   "    tensor_dict[fields.InputDataFields.groundtruth_confidences] = ("
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/inputs.py",
  "condition": [
   "        out_tensor_dict[fields.InputDataFields.groundtruth_classes])"
  ],
  "consequent": [
   "        tensor_dict[fields.InputDataFields.groundtruth_classes])"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/inputs.py",
  "condition": [
   "    out_tensor_dict[fields.InputDataFields.groundtruth_confidences] = ("
  ],
  "consequent": [
   "    tensor_dict[fields.InputDataFields.groundtruth_confidences] = ("
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/inputs.py",
  "condition": [
   "        out_tensor_dict[fields.InputDataFields.groundtruth_classes])"
  ],
  "consequent": [
   "        tensor_dict[fields.InputDataFields.groundtruth_classes])"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/inputs.py",
  "condition": [
   "            out_tensor_dict[fields.InputDataFields.groundtruth_boxes],"
  ],
  "consequent": [
   "            tensor_dict[fields.InputDataFields.groundtruth_boxes],"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/inputs.py",
  "condition": [
   "    out_tensor_dict[fields.InputDataFields.groundtruth_boxes] = merged_boxes"
  ],
  "consequent": [
   "    tensor_dict[fields.InputDataFields.groundtruth_boxes] = merged_boxes"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/inputs.py",
  "condition": [
   "    out_tensor_dict[fields.InputDataFields.groundtruth_classes] = merged_classes"
  ],
  "consequent": [
   "    tensor_dict[fields.InputDataFields.groundtruth_classes] = merged_classes"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/inputs.py",
  "condition": [
   "    out_tensor_dict[fields.InputDataFields.groundtruth_confidences] = ("
  ],
  "consequent": [
   "    tensor_dict[fields.InputDataFields.groundtruth_confidences] = ("
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/inputs.py",
  "condition": [
   "  if fields.InputDataFields.groundtruth_boxes in out_tensor_dict:"
  ],
  "consequent": [
   "  if fields.InputDataFields.groundtruth_boxes in tensor_dict:"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/inputs.py",
  "condition": [
   "    out_tensor_dict[fields.InputDataFields.num_groundtruth_boxes] = tf.shape("
  ],
  "consequent": [
   "    tensor_dict[fields.InputDataFields.num_groundtruth_boxes] = tf.shape("
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/inputs.py",
  "condition": [
   "        out_tensor_dict[fields.InputDataFields.groundtruth_boxes])[0]"
  ],
  "consequent": [
   "        tensor_dict[fields.InputDataFields.groundtruth_boxes])[0]"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/inputs.py",
  "condition": [
   "  return out_tensor_dict"
  ],
  "consequent": [
   "  return tensor_dict"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/meta_architectures/faster_rcnn_meta_arch.py",
  "condition": [
   "    for variable in variables_helper.get_global_variables_safely():"
  ],
  "consequent": [
   "    for variable in tf.global_variables():"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/meta_architectures/faster_rcnn_meta_arch.py",
  "condition": [
   "    for variable in variables_helper.get_global_variables_safely():"
  ],
  "consequent": [
   "    for variable in tf.global_variables():"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/meta_architectures/faster_rcnn_meta_arch.py",
  "condition": [
   "        detections_dict[",
   "            'detection_features'] = self._add_detection_features_output_node("
  ],
  "consequent": [
   "        self._add_detection_features_output_node("
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/meta_architectures/faster_rcnn_meta_arch.py",
  "condition": [
   "                detections_dict[fields.DetectionResultFields.detection_boxes],"
  ],
  "consequent": [
   "            detections_dict[fields.DetectionResultFields.detection_boxes],"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/meta_architectures/faster_rcnn_meta_arch.py",
  "condition": [
   "                prediction_dict['rpn_features_to_crop'])"
  ],
  "consequent": [
   "            prediction_dict['rpn_features_to_crop'])"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/meta_architectures/faster_rcnn_meta_arch.py",
  "condition": [
   "    \"\"\"Add detection features to outputs."
  ],
  "consequent": [
   "    \"\"\"Add the detection features to the output node."
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/meta_architectures/faster_rcnn_meta_arch.py",
  "condition": [
   "    This function extracts box features for each box in rpn_features_to_crop.",
   "    It returns the extracted box features, reshaped to",
   "    [batch size, max_detections, height, width, depth], and average pools",
   "    the extracted features across the spatial dimensions and adds a graph node",
   "    to the pooled features named 'pooled_detection_features'"
  ],
  "consequent": [
   "    The detection features are from cropping rpn_features with boxes.",
   "    Each bounding box has one feature vector of length depth, which comes from",
   "    mean_pooling of the cropped rpn_features."
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/meta_architectures/faster_rcnn_meta_arch.py",
  "condition": [
   "        [batch_size, max_detections, 4] which represents the bounding boxes."
  ],
  "consequent": [
   "        [batch_size, max_detection, 4] which represents the bounding boxes."
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/meta_architectures/faster_rcnn_meta_arch.py",
  "condition": [
   "      max_detections = tf.shape(detection_boxes)[1]"
  ],
  "consequent": [
   "      max_detection = tf.shape(detection_boxes)[1]"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/meta_architectures/faster_rcnn_meta_arch.py",
  "condition": [
   "      reshaped_detection_features_pool = tf.reshape("
  ],
  "consequent": [
   "      detection_features = tf.reshape("
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/meta_architectures/faster_rcnn_meta_arch.py",
  "condition": [
   "          [batch_size, max_detections, tf.shape(detection_features_pool)[-1]])"
  ],
  "consequent": [
   "          [batch_size, max_detection, tf.shape(detection_features_pool)[-1]])",
   ""
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/meta_architectures/faster_rcnn_meta_arch.py",
  "condition": [
   "      reshaped_detection_features_pool = tf.identity("
  ],
  "consequent": [
   "    detection_features = tf.identity("
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/meta_architectures/faster_rcnn_meta_arch.py",
  "condition": [
   "          reshaped_detection_features_pool, 'pooled_detection_features')"
  ],
  "consequent": [
   "        detection_features, 'detection_features')"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/meta_architectures/faster_rcnn_meta_arch.py",
  "condition": [
   "    variables_to_restore = variables_helper.get_global_variables_safely()"
  ],
  "consequent": [
   "    variables_to_restore = tf.global_variables()"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/meta_architectures/ssd_meta_arch.py",
  "condition": [
   "    for variable in variables_helper.get_global_variables_safely():"
  ],
  "consequent": [
   "    for variable in tf.global_variables():"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/meta_architectures/ssd_meta_arch.py",
  "condition": [
   "    for variable in self.variables:"
  ],
  "consequent": [
   "    for variable in tf.global_variables():"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/meta_architectures/ssd_meta_arch.py",
  "condition": [
   "      # variable.name includes \":0\" at the end, but the names in the checkpoint",
   "      # do not have the suffix \":0\". So, we strip it here.",
   "      var_name = variable.name[:-2]"
  ],
  "consequent": [
   "      var_name = variable.op.name"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/meta_architectures/ssd_meta_arch.py",
  "condition": [
   "      variables_to_restore[var_name] = variable"
  ],
  "consequent": [
   "        variables_to_restore[var_name] = variable"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/meta_architectures/ssd_meta_arch.py",
  "condition": [
   "      if tf.executing_eagerly():",
   "        for variable in self.variables:"
  ],
  "consequent": [
   "      for variable in tf.global_variables():"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/meta_architectures/ssd_meta_arch.py",
  "condition": [
   "          # variable.name includes \":0\" at the end, but the names in the",
   "          # checkpoint do not have the suffix \":0\". So, we strip it here.",
   "          var_name = variable.name[:-2]"
  ],
  "consequent": [
   "        var_name = variable.op.name"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/meta_architectures/ssd_meta_arch.py",
  "condition": [
   "          if load_all_detection_checkpoint_vars:"
  ],
  "consequent": [
   "        if load_all_detection_checkpoint_vars:",
   "          variables_to_restore[var_name] = variable",
   "        else:",
   "          if var_name.startswith(self._extract_features_scope):"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/metrics/oid_challenge_evaluation.py",
  "condition": [
   "        all_predictions.loc[all_predictions['ImageID'] == image_id],",
   "        class_label_map)"
  ],
  "consequent": [
   "        image_predictions, class_label_map)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/metrics/oid_challenge_evaluation_utils.py",
  "condition": [
   "    segments: pandas Series object containing either"
  ],
  "consequent": [
   "    segments: pandas Series object containing either None entries or strings",
   "    with COCO-encoded binary masks. All masks are expected to be the same size."
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/metrics/oid_challenge_evaluation_utils.py",
  "condition": [
   "    masks; for the None values, zero arrays of size WxH are created. If input"
  ],
  "consequent": [
   "    masks; for the None values, zero arrays of size WxH are created. if input"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/metrics/oid_challenge_evaluation_utils.py",
  "condition": [
   "    size = [int(image_heights[ind]), int(image_widths[ind])]"
  ],
  "consequent": [
   "    size = [int(image_heights.iloc[ind]), int(image_widths[ind])]"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/metrics/oid_challenge_evaluation_utils.py",
  "condition": [
   "    return np.zeros((segments.shape[0], 1, 1), dtype=np.uint8), np.zeros(",
   "        (segments.shape[0], 4), dtype=np.float32)",
   ""
  ],
  "consequent": [
   "    size = [1, 1]"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/metrics/oid_challenge_evaluation_utils.py",
  "condition": [
   "      compressed_mask = base64.b64decode(segment)",
   "      rle_encoded_mask = zlib.decompress(compressed_mask)",
   "      decoding_dict = {",
   "          'size': [im_height, im_width],",
   "          'counts': rle_encoded_mask",
   "      }",
   "      mask_tensor = coco_mask.decode(decoding_dict)"
  ],
  "consequent": [
   "      encoding_dict = {'size': [im_height, im_width], 'counts': segment}",
   "      mask_tensor = mask.decode(encoding_dict)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/metrics/oid_challenge_evaluation_utils_test.py",
  "condition": [
   "from pycocotools import mask as coco_mask"
  ],
  "consequent": [
   "from pycocotools import mask"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/metrics/oid_challenge_evaluation_utils_test.py",
  "condition": [
   "    encoding1 = encode_mask(mask1)",
   "    encoding2 = encode_mask(mask2)"
  ],
  "consequent": [
   "    encoding1 = mask.encode(np.asfortranarray(mask1))",
   "    encoding2 = mask.encode(np.asfortranarray(mask2))"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/metrics/oid_challenge_evaluation_utils_test.py",
  "condition": [
   "    vals = pd.Series([encoding1, encoding2])"
  ],
  "consequent": [
   "    vals = pd.Series([encoding1['counts'], encoding2['counts']])"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/metrics/oid_challenge_evaluation_utils_test.py",
  "condition": [
   "    encoding1 = encode_mask(mask1)",
   "    encoding2 = encode_mask(mask2)"
  ],
  "consequent": [
   "    encoding1 = mask.encode(np.asfortranarray(mask1))",
   "    encoding2 = mask.encode(np.asfortranarray(mask2))"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/metrics/oid_challenge_evaluation_utils_test.py",
  "condition": [
   "            0.0, 0.3, 0.5, 0.6, 0, None, encoding1"
  ],
  "consequent": [
   "            0.0, 0.3, 0.5, 0.6, 0, None, encoding1['counts']"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/metrics/oid_challenge_evaluation_utils_test.py",
  "condition": [
   "             0.5, 0.6, 0.8, 0.9, 0, None, encoding2"
  ],
  "consequent": [
   "             0.5, 0.6, 0.8, 0.9, 0, None, encoding2['counts']"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/metrics/oid_challenge_evaluation_utils_test.py",
  "condition": [
   "    encoding1 = encode_mask(mask1)",
   "    encoding2 = encode_mask(mask2)"
  ],
  "consequent": [
   "    encoding1 = mask.encode(np.asfortranarray(mask1))",
   "    encoding2 = mask.encode(np.asfortranarray(mask2))"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/metrics/oid_challenge_evaluation_utils_test.py",
  "condition": [
   "    np_data = pd.DataFrame([["
  ],
  "consequent": [
   "    np_data = pd.DataFrame(",
   "        [["
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/metrics/oid_challenge_evaluation_utils_test.py",
  "condition": [
   "        'fe58ec1b06db2bb7', mask1.shape[1], mask1.shape[0], '/m/04bcr3',"
  ],
  "consequent": [
   "            'fe58ec1b06db2bb7', mask1.shape[1], mask1.shape[0], '/m/04bcr3',"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/metrics/oid_challenge_evaluation_utils_test.py",
  "condition": [
   "        encoding1, 0.8"
  ],
  "consequent": [
   "            encoding1['counts'], 0.8"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/metrics/oid_challenge_evaluation_utils_test.py",
  "condition": [
   "    ],"
  ],
  "consequent": [
   "        ],",
   "         [",
   "             'fe58ec1b06db2bb7', mask2.shape[1], mask2.shape[0], '/m/02gy9n',",
   "             encoding2['counts'], 0.6",
   "         ]],",
   "        columns=[",
   "            'ImageID', 'ImageWidth', 'ImageHeight', 'LabelName', 'Mask', 'Score'",
   "        ])"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/model_lib.py",
  "condition": [
   "def provide_groundtruth(model, labels):"
  ],
  "consequent": [
   "def _provide_groundtruth(model, labels):"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/model_lib.py",
  "condition": [
   "      provide_groundtruth(detection_model, labels)"
  ],
  "consequent": [
   "      _provide_groundtruth(detection_model, labels)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/model_lib.py",
  "condition": [
   "                                sample_1_of_n_eval_examples=None,"
  ],
  "consequent": [
   "                                sample_1_of_n_eval_examples=1,"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/model_lib.py",
  "condition": [
   "        params=params if params else {})"
  ],
  "consequent": [
   "        params=params if params else {},",
   "        **kwargs)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/faster_rcnn_inception_resnet_v2_feature_extractor.py",
  "condition": [
   "    for variable in variables_helper.get_global_variables_safely():"
  ],
  "consequent": [
   "    for variable in tf.global_variables():"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/faster_rcnn_inception_resnet_v2_keras_feature_extractor.py",
  "condition": [
   "    for variable in variables_helper.get_global_variables_safely():"
  ],
  "consequent": [
   "    for variable in tf.global_variables():"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/faster_rcnn_nas_feature_extractor.py",
  "condition": [
   "    for variable in variables_helper.get_global_variables_safely():"
  ],
  "consequent": [
   "    for variable in tf.global_variables():"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/faster_rcnn_pnas_feature_extractor.py",
  "condition": [
   "    for variable in variables_helper.get_global_variables_safely():"
  ],
  "consequent": [
   "    for variable in tf.global_variables():"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/faster_rcnn_resnet_v1_feature_extractor.py",
  "condition": [
   "               weight_decay=0.0,"
  ],
  "consequent": [
   "               weight_decay=0.0):"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/faster_rcnn_resnet_v1_feature_extractor.py",
  "condition": [
   "    self._activation_fn = activation_fn",
   "    super(FasterRCNNResnetV1FeatureExtractor,"
  ],
  "consequent": [
   "    super(FasterRCNNResnetV1FeatureExtractor, self).__init__("
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/faster_rcnn_resnet_v1_feature_extractor.py",
  "condition": [
   "          self).__init__(is_training, first_stage_features_stride,",
   "                         batch_norm_trainable, reuse_weights, weight_decay)"
  ],
  "consequent": [
   "        is_training, first_stage_features_stride, batch_norm_trainable,",
   "        reuse_weights, weight_decay)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/faster_rcnn_resnet_v1_feature_extractor.py",
  "condition": [
   "               weight_decay=0.0,"
  ],
  "consequent": [
   "               weight_decay=0.0):"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/faster_rcnn_resnet_v1_feature_extractor.py",
  "condition": [
   "      is_training: See base class.",
   "      first_stage_features_stride: See base class.",
   "      batch_norm_trainable: See base class."
  ],
  "consequent": [
   "      is_training: See base class."
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/faster_rcnn_resnet_v1_feature_extractor.py",
  "condition": [
   "      reuse_weights: See base class."
  ],
  "consequent": [
   "      first_stage_features_stride: See base class.",
   "      batch_norm_trainable: See base class."
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/faster_rcnn_resnet_v1_feature_extractor.py",
  "condition": [
   "      weight_decay: See base class."
  ],
  "consequent": [
   "      reuse_weights: See base class."
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/faster_rcnn_resnet_v1_feature_extractor.py",
  "condition": [
   "      activation_fn: See base class."
  ],
  "consequent": [
   "      weight_decay: See base class."
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/faster_rcnn_resnet_v1_feature_extractor.py",
  "condition": [
   "    super(FasterRCNNResnet50FeatureExtractor,"
  ],
  "consequent": [
   "    super(FasterRCNNResnet50FeatureExtractor, self).__init__("
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/faster_rcnn_resnet_v1_feature_extractor.py",
  "condition": [
   "          self).__init__('resnet_v1_50', resnet_v1.resnet_v1_50, is_training,"
  ],
  "consequent": [
   "        'resnet_v1_50', resnet_v1.resnet_v1_50, is_training,"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/faster_rcnn_resnet_v1_feature_extractor.py",
  "condition": [
   "                         first_stage_features_stride, batch_norm_trainable,"
  ],
  "consequent": [
   "        first_stage_features_stride, batch_norm_trainable,"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/faster_rcnn_resnet_v1_feature_extractor.py",
  "condition": [
   "                         reuse_weights, weight_decay, activation_fn)"
  ],
  "consequent": [
   "        reuse_weights, weight_decay)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/faster_rcnn_resnet_v1_feature_extractor.py",
  "condition": [
   "               weight_decay=0.0,"
  ],
  "consequent": [
   "               weight_decay=0.0):"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/faster_rcnn_resnet_v1_feature_extractor.py",
  "condition": [
   "      is_training: See base class.",
   "      first_stage_features_stride: See base class.",
   "      batch_norm_trainable: See base class."
  ],
  "consequent": [
   "      is_training: See base class."
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/faster_rcnn_resnet_v1_feature_extractor.py",
  "condition": [
   "      reuse_weights: See base class."
  ],
  "consequent": [
   "      first_stage_features_stride: See base class.",
   "      batch_norm_trainable: See base class."
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/faster_rcnn_resnet_v1_feature_extractor.py",
  "condition": [
   "      weight_decay: See base class."
  ],
  "consequent": [
   "      reuse_weights: See base class."
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/faster_rcnn_resnet_v1_feature_extractor.py",
  "condition": [
   "      activation_fn: See base class."
  ],
  "consequent": [
   "      weight_decay: See base class."
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/faster_rcnn_resnet_v1_feature_extractor.py",
  "condition": [
   "    super(FasterRCNNResnet101FeatureExtractor,"
  ],
  "consequent": [
   "    super(FasterRCNNResnet101FeatureExtractor, self).__init__("
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/faster_rcnn_resnet_v1_feature_extractor.py",
  "condition": [
   "          self).__init__('resnet_v1_101', resnet_v1.resnet_v1_101, is_training,"
  ],
  "consequent": [
   "        'resnet_v1_101', resnet_v1.resnet_v1_101, is_training,"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/faster_rcnn_resnet_v1_feature_extractor.py",
  "condition": [
   "                         first_stage_features_stride, batch_norm_trainable,"
  ],
  "consequent": [
   "        first_stage_features_stride, batch_norm_trainable,"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/faster_rcnn_resnet_v1_feature_extractor.py",
  "condition": [
   "                         reuse_weights, weight_decay, activation_fn)"
  ],
  "consequent": [
   "        reuse_weights, weight_decay)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/faster_rcnn_resnet_v1_feature_extractor.py",
  "condition": [
   "               weight_decay=0.0,"
  ],
  "consequent": [
   "               weight_decay=0.0):"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/faster_rcnn_resnet_v1_feature_extractor.py",
  "condition": [
   "      is_training: See base class.",
   "      first_stage_features_stride: See base class.",
   "      batch_norm_trainable: See base class."
  ],
  "consequent": [
   "      is_training: See base class."
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/faster_rcnn_resnet_v1_feature_extractor.py",
  "condition": [
   "      reuse_weights: See base class."
  ],
  "consequent": [
   "      first_stage_features_stride: See base class.",
   "      batch_norm_trainable: See base class."
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/faster_rcnn_resnet_v1_feature_extractor.py",
  "condition": [
   "      weight_decay: See base class."
  ],
  "consequent": [
   "      reuse_weights: See base class."
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/faster_rcnn_resnet_v1_feature_extractor.py",
  "condition": [
   "      activation_fn: See base class."
  ],
  "consequent": [
   "      weight_decay: See base class."
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/faster_rcnn_resnet_v1_feature_extractor.py",
  "condition": [
   "    super(FasterRCNNResnet152FeatureExtractor,"
  ],
  "consequent": [
   "    super(FasterRCNNResnet152FeatureExtractor, self).__init__("
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/faster_rcnn_resnet_v1_feature_extractor.py",
  "condition": [
   "          self).__init__('resnet_v1_152', resnet_v1.resnet_v1_152, is_training,"
  ],
  "consequent": [
   "        'resnet_v1_152', resnet_v1.resnet_v1_152, is_training,"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/faster_rcnn_resnet_v1_feature_extractor.py",
  "condition": [
   "                         first_stage_features_stride, batch_norm_trainable,"
  ],
  "consequent": [
   "        first_stage_features_stride, batch_norm_trainable,"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/faster_rcnn_resnet_v1_feature_extractor.py",
  "condition": [
   "                         reuse_weights, weight_decay, activation_fn)"
  ],
  "consequent": [
   "        reuse_weights, weight_decay)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/feature_map_generators.py",
  "condition": [
   "    kwargs = conv_hyperparams.params()",
   "    # Both the regularizer and initializer apply to the depthwise layer,",
   "    # so we remap the kernel_* to depthwise_* here.",
   "    kwargs['depthwise_regularizer'] = kwargs['kernel_regularizer']",
   "    kwargs['depthwise_initializer'] = kwargs['kernel_initializer']",
   "    layers.append(",
   "        tf.keras.layers.SeparableConv2D("
  ],
  "consequent": [
   "    layers.append(tf.keras.layers.SeparableConv2D(",
   "        depth,"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/feature_map_generators.py",
  "condition": [
   "            depth, [kernel_size, kernel_size],"
  ],
  "consequent": [
   "        [kernel_size, kernel_size],"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/feature_map_generators.py",
  "condition": [
   "            depth_multiplier=1,"
  ],
  "consequent": [
   "        depth_multiplier=1,"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/feature_map_generators.py",
  "condition": [
   "            padding=padding,"
  ],
  "consequent": [
   "        padding=padding,"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/feature_map_generators.py",
  "condition": [
   "            strides=stride,"
  ],
  "consequent": [
   "        strides=stride,"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/feature_map_generators.py",
  "condition": [
   "            name=layer_name + '_depthwise_conv',"
  ],
  "consequent": [
   "        name=layer_name + '_depthwise_conv',"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/feature_map_generators.py",
  "condition": [
   "            **kwargs))"
  ],
  "consequent": [
   "        **conv_hyperparams.params()))"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_feature_extractor_test.py",
  "condition": [
   "  def _create_feature_extractor(self,",
   "                                depth_multiplier,",
   "                                pad_to_multiple,",
   "                                use_explicit_padding=False,"
  ],
  "consequent": [
   "  def _create_feature_extractor(self, depth_multiplier, pad_to_multiple,",
   "                                use_explicit_padding=False, use_keras=False):"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_feature_extractor_test.py",
  "condition": [
   "  def _extract_features(self,",
   "                        image_tensor,",
   "                        depth_multiplier,",
   "                        pad_to_multiple,",
   "                        use_explicit_padding=False,"
  ],
  "consequent": [
   "  def _extract_features(self, image_tensor, depth_multiplier, pad_to_multiple,",
   "                        use_explicit_padding=False, use_keras=False):",
   "    try:"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_feature_extractor_test.py",
  "condition": [
   "                        use_depthwise=False,",
   "                        num_layers=6,",
   "                        use_keras=False):",
   "    kwargs = {}",
   "    if use_explicit_padding:",
   "      kwargs.update({'use_explicit_padding': use_explicit_padding})",
   "    if use_depthwise:",
   "      kwargs.update({'use_depthwise': use_depthwise})",
   "    if num_layers != 6:",
   "      kwargs.update({'num_layers': num_layers})",
   "    if use_keras:",
   "      kwargs.update({'use_keras': use_keras})",
   "    feature_extractor = self._create_feature_extractor("
  ],
  "consequent": [
   "      feature_extractor = self._create_feature_extractor(depth_multiplier,"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_feature_extractor_test.py",
  "condition": [
   "        depth_multiplier,",
   "        pad_to_multiple,",
   "        **kwargs)"
  ],
  "consequent": [
   "                                                         pad_to_multiple,",
   "                                                         use_explicit_padding,",
   "                                                         use_keras=use_keras)",
   "    # If the unit test does not support a use_keras arg, it raises an error:",
   "    except TypeError:",
   "      feature_extractor = self._create_feature_extractor(depth_multiplier,",
   "                                                         pad_to_multiple,",
   "                                                         use_explicit_padding)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_feature_extractor_test.py",
  "condition": [
   "  def check_extract_features_returns_correct_shape(self,"
  ],
  "consequent": [
   "  def check_extract_features_returns_correct_shape(",
   "      self, batch_size, image_height, image_width, depth_multiplier,",
   "      pad_to_multiple, expected_feature_map_shapes, use_explicit_padding=False,",
   "      use_keras=False):"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_feature_extractor_test.py",
  "condition": [
   "      return self._extract_features("
  ],
  "consequent": [
   "      return self._extract_features(image_tensor,",
   "                                    depth_multiplier,",
   "                                    pad_to_multiple,",
   "                                    use_explicit_padding,",
   "                                    use_keras=use_keras)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_feature_extractor_test.py",
  "condition": [
   "      self,",
   "      batch_size,",
   "      image_height,",
   "      image_width,",
   "      depth_multiplier,",
   "      pad_to_multiple,",
   "      expected_feature_map_shapes,",
   "      use_explicit_padding=False,",
   "      num_layers=6,",
   "      use_keras=False,"
  ],
  "consequent": [
   "      self, batch_size, image_height, image_width, depth_multiplier,",
   "      pad_to_multiple, expected_feature_map_shapes, use_explicit_padding=False,",
   "      use_keras=False):"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_feature_extractor_test.py",
  "condition": [
   "      return self._extract_features("
  ],
  "consequent": [
   "      return self._extract_features(image_tensor,",
   "                                    depth_multiplier,",
   "                                    pad_to_multiple,",
   "                                    use_explicit_padding,",
   "                                    use_keras=use_keras)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_feature_extractor_test.py",
  "condition": [
   "      self,",
   "      image_height,",
   "      image_width,",
   "      depth_multiplier,",
   "      pad_to_multiple,",
   "      use_keras=False,"
  ],
  "consequent": [
   "      self, image_height, image_width, depth_multiplier, pad_to_multiple,",
   "      use_keras=False):"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_feature_extractor_test.py",
  "condition": [
   "    feature_maps = self._extract_features("
  ],
  "consequent": [
   "    feature_maps = self._extract_features(preprocessed_inputs,",
   "                                          depth_multiplier,",
   "                                          pad_to_multiple,",
   "                                          use_keras=use_keras)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_feature_extractor_test.py",
  "condition": [
   "  def check_feature_extractor_variables_under_scope(self,"
  ],
  "consequent": [
   "  def check_feature_extractor_variables_under_scope(",
   "      self, depth_multiplier, pad_to_multiple, scope_name, use_keras=False):"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_feature_extractor_test.py",
  "condition": [
   "        depth_multiplier,",
   "        pad_to_multiple,",
   "        use_keras=use_keras,",
   "        use_depthwise=use_depthwise)"
  ],
  "consequent": [
   "        depth_multiplier, pad_to_multiple, use_keras)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_feature_extractor_test.py",
  "condition": [
   "  def get_feature_extractor_variables(self,"
  ],
  "consequent": [
   "  def get_feature_extractor_variables(",
   "      self, depth_multiplier, pad_to_multiple, use_keras=False):"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_feature_extractor_test.py",
  "condition": [
   "      self._extract_features("
  ],
  "consequent": [
   "      self._extract_features(preprocessed_inputs,",
   "                             depth_multiplier,",
   "                             pad_to_multiple,",
   "                             use_keras=use_keras)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_inception_v2_feature_extractor.py",
  "condition": [
   "        'from_layer': ['Mixed_4c', 'Mixed_5c', '', '', '', ''"
  ],
  "consequent": [
   "        'from_layer': ['Mixed_4c', 'Mixed_5c', '', '', '', ''],"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_inception_v2_feature_extractor.py",
  "condition": [
   "                      ][:self._num_layers],",
   "        'layer_depth': [-1, -1, 512, 256, 256, 128][:self._num_layers],"
  ],
  "consequent": [
   "        'layer_depth': [-1, -1, 512, 256, 256, 128],"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_inception_v2_feature_extractor_test.py",
  "condition": [
   "  def _create_feature_extractor(self,",
   "                                depth_multiplier,",
   "                                pad_to_multiple,",
   "                                use_explicit_padding=False,",
   "                                num_layers=6,"
  ],
  "consequent": [
   "  def _create_feature_extractor(self, depth_multiplier, pad_to_multiple,"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_inception_v2_feature_extractor_test.py",
  "condition": [
   "        is_training,",
   "        depth_multiplier,",
   "        min_depth,",
   "        pad_to_multiple,"
  ],
  "consequent": [
   "        is_training, depth_multiplier, min_depth, pad_to_multiple,"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_inception_v3_feature_extractor.py",
  "condition": [
   "        'from_layer': ['Mixed_5d', 'Mixed_6e', 'Mixed_7c', '', '', ''"
  ],
  "consequent": [
   "        'from_layer': ['Mixed_5d', 'Mixed_6e', 'Mixed_7c', '', '', ''],"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_inception_v3_feature_extractor.py",
  "condition": [
   "                      ][:self._num_layers],",
   "        'layer_depth': [-1, -1, -1, 512, 256, 128][:self._num_layers],"
  ],
  "consequent": [
   "        'layer_depth': [-1, -1, -1, 512, 256, 128],"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_inception_v3_feature_extractor_test.py",
  "condition": [
   "  def _create_feature_extractor(self,",
   "                                depth_multiplier,",
   "                                pad_to_multiple,",
   "                                use_explicit_padding=False,",
   "                                num_layers=6,"
  ],
  "consequent": [
   "  def _create_feature_extractor(self, depth_multiplier, pad_to_multiple,"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_inception_v3_feature_extractor_test.py",
  "condition": [
   "        is_training,",
   "        depth_multiplier,",
   "        min_depth,",
   "        pad_to_multiple,"
  ],
  "consequent": [
   "        is_training, depth_multiplier, min_depth, pad_to_multiple,"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_mobilenet_v1_feature_extractor.py",
  "condition": [
   "                       '', ''][:self._num_layers],"
  ],
  "consequent": [
   "                       '', ''],"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_mobilenet_v1_feature_extractor.py",
  "condition": [
   "        'layer_depth': [-1, -1, 512, 256, 256, 128][:self._num_layers],"
  ],
  "consequent": [
   "        'layer_depth': [-1, -1, 512, 256, 256, 128],"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_mobilenet_v1_feature_extractor_test.py",
  "condition": [
   "  def _create_feature_extractor(self,",
   "                                depth_multiplier,",
   "                                pad_to_multiple,",
   "                                use_explicit_padding=False,"
  ],
  "consequent": [
   "  def _create_feature_extractor(self, depth_multiplier, pad_to_multiple,",
   "                                use_explicit_padding=False, is_training=False,"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_mobilenet_v1_feature_extractor_test.py",
  "condition": [
   "      return (ssd_mobilenet_v1_keras_feature_extractor"
  ],
  "consequent": [
   "      return (ssd_mobilenet_v1_keras_feature_extractor."
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_mobilenet_v1_feature_extractor_test.py",
  "condition": [
   "              .SSDMobileNetV1KerasFeatureExtractor("
  ],
  "consequent": [
   "              SSDMobileNetV1KerasFeatureExtractor("
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_mobilenet_v1_feature_extractor_test.py",
  "condition": [
   "          is_training,",
   "          depth_multiplier,",
   "          min_depth,",
   "          pad_to_multiple,"
  ],
  "consequent": [
   "          is_training, depth_multiplier, min_depth, pad_to_multiple,"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_mobilenet_v1_feature_extractor_test.py",
  "condition": [
   "          use_explicit_padding=use_explicit_padding,"
  ],
  "consequent": [
   "          use_explicit_padding=use_explicit_padding)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_mobilenet_v1_feature_extractor_test.py",
  "condition": [
   "        2,",
   "        image_height,",
   "        image_width,",
   "        depth_multiplier,",
   "        pad_to_multiple,",
   "        expected_feature_map_shape,",
   "        use_explicit_padding=False,"
  ],
  "consequent": [
   "        2, image_height, image_width, depth_multiplier, pad_to_multiple,",
   "        expected_feature_map_shape, use_explicit_padding=False,"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_mobilenet_v1_feature_extractor_test.py",
  "condition": [
   "        2,",
   "        image_height,",
   "        image_width,",
   "        depth_multiplier,",
   "        pad_to_multiple,",
   "        expected_feature_map_shape,",
   "        use_explicit_padding=True,"
  ],
  "consequent": [
   "        2, image_height, image_width, depth_multiplier, pad_to_multiple,",
   "        expected_feature_map_shape, use_explicit_padding=True,"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_mobilenet_v1_feature_extractor_test.py",
  "condition": [
   "        2,",
   "        image_height,",
   "        image_width,",
   "        depth_multiplier,",
   "        pad_to_multiple,",
   "        expected_feature_map_shape,",
   "        use_explicit_padding=False,"
  ],
  "consequent": [
   "        2, image_height, image_width, depth_multiplier, pad_to_multiple,",
   "        expected_feature_map_shape, use_explicit_padding=False,"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_mobilenet_v1_feature_extractor_test.py",
  "condition": [
   "        2,",
   "        image_height,",
   "        image_width,",
   "        depth_multiplier,",
   "        pad_to_multiple,",
   "        expected_feature_map_shape,",
   "        use_explicit_padding=True,"
  ],
  "consequent": [
   "        2, image_height, image_width, depth_multiplier, pad_to_multiple,",
   "        expected_feature_map_shape, use_explicit_padding=True,"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_mobilenet_v1_feature_extractor_test.py",
  "condition": [
   "        2,",
   "        image_height,",
   "        image_width,",
   "        depth_multiplier,",
   "        pad_to_multiple,",
   "        expected_feature_map_shape,",
   "        use_explicit_padding=False,"
  ],
  "consequent": [
   "        2, image_height, image_width, depth_multiplier, pad_to_multiple,",
   "        expected_feature_map_shape, use_explicit_padding=False,"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_mobilenet_v1_feature_extractor_test.py",
  "condition": [
   "        2,",
   "        image_height,",
   "        image_width,",
   "        depth_multiplier,",
   "        pad_to_multiple,",
   "        expected_feature_map_shape,",
   "        use_explicit_padding=True,"
  ],
  "consequent": [
   "        2, image_height, image_width, depth_multiplier, pad_to_multiple,",
   "        expected_feature_map_shape, use_explicit_padding=True,"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_mobilenet_v1_feature_extractor_test.py",
  "condition": [
   "                                  (2, 5, 5, 32), (2, 3, 3, 32), (2, 2, 2, 32),"
  ],
  "consequent": [
   "                                  (2, 5, 5, 32), (2, 3, 3, 32),"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_mobilenet_v1_feature_extractor_test.py",
  "condition": [
   "                                  (2, 1, 1, 32)]"
  ],
  "consequent": [
   "                                  (2, 2, 2, 32), (2, 1, 1, 32)]"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_mobilenet_v1_feature_extractor_test.py",
  "condition": [
   "        2,",
   "        image_height,",
   "        image_width,",
   "        depth_multiplier,",
   "        pad_to_multiple,",
   "        expected_feature_map_shape,",
   "        use_explicit_padding=False,"
  ],
  "consequent": [
   "        2, image_height, image_width, depth_multiplier, pad_to_multiple,",
   "        expected_feature_map_shape, use_explicit_padding=False,"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_mobilenet_v1_feature_extractor_test.py",
  "condition": [
   "        2,",
   "        image_height,",
   "        image_width,",
   "        depth_multiplier,",
   "        pad_to_multiple,",
   "        expected_feature_map_shape,",
   "        use_explicit_padding=True,"
  ],
  "consequent": [
   "        2, image_height, image_width, depth_multiplier, pad_to_multiple,",
   "        expected_feature_map_shape, use_explicit_padding=True,"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_mobilenet_v1_feature_extractor_test.py",
  "condition": [
   "        2,",
   "        image_height,",
   "        image_width,",
   "        depth_multiplier,",
   "        pad_to_multiple,",
   "        expected_feature_map_shape,",
   "        use_explicit_padding=False,"
  ],
  "consequent": [
   "        2, image_height, image_width, depth_multiplier, pad_to_multiple,",
   "        expected_feature_map_shape, use_explicit_padding=False,"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_mobilenet_v1_feature_extractor_test.py",
  "condition": [
   "        2,",
   "        image_height,",
   "        image_width,",
   "        depth_multiplier,",
   "        pad_to_multiple,",
   "        expected_feature_map_shape,",
   "        use_explicit_padding=True,"
  ],
  "consequent": [
   "        2, image_height, image_width, depth_multiplier, pad_to_multiple,",
   "        expected_feature_map_shape, use_explicit_padding=True,"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_mobilenet_v1_feature_extractor_test.py",
  "condition": [
   "        image_height,",
   "        image_width,",
   "        depth_multiplier,",
   "        pad_to_multiple,"
  ],
  "consequent": [
   "        image_height, image_width, depth_multiplier, pad_to_multiple,"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_mobilenet_v1_feature_extractor_test.py",
  "condition": [
   "    feature_extractor = self._create_feature_extractor("
  ],
  "consequent": [
   "    feature_extractor = self._create_feature_extractor(depth_multiplier,"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_mobilenet_v1_feature_extractor_test.py",
  "condition": [
   "        depth_multiplier, pad_to_multiple, use_keras=use_keras)"
  ],
  "consequent": [
   "                                                       pad_to_multiple,",
   "                                                       use_keras=use_keras)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_mobilenet_v1_feature_extractor_test.py",
  "condition": [
   "    self.assertTrue(",
   "        any('FusedBatchNorm' in op.type",
   "            for op in tf.get_default_graph().get_operations()))"
  ],
  "consequent": [
   "    self.assertTrue(any(op.type == 'FusedBatchNorm'",
   "                        for op in tf.get_default_graph().get_operations()))"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_mobilenet_v1_fpn_feature_extractor_test.py",
  "condition": [
   "        any('FusedBatchNorm' in op.type"
  ],
  "consequent": [
   "        any(op.type == 'FusedBatchNorm'"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_mobilenet_v1_keras_feature_extractor.py",
  "condition": [
   "                       '', ''][:self._num_layers],"
  ],
  "consequent": [
   "                       '', ''],"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_mobilenet_v1_keras_feature_extractor.py",
  "condition": [
   "        'layer_depth': [-1, -1, 512, 256, 256, 128][:self._num_layers],"
  ],
  "consequent": [
   "        'layer_depth': [-1, -1, 512, 256, 256, 128],"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_mobilenet_v1_ppn_feature_extractor_test.py",
  "condition": [
   "    self.assertTrue(any('FusedBatchNorm' in op.type"
  ],
  "consequent": [
   "    self.assertTrue(any(op.type == 'FusedBatchNorm'"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_mobilenet_v2_feature_extractor.py",
  "condition": [
   "        'from_layer': ['layer_15/expansion_output', 'layer_19', '', '', '', ''"
  ],
  "consequent": [
   "        'from_layer': ['layer_15/expansion_output', 'layer_19', '', '', '', ''],"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_mobilenet_v2_feature_extractor.py",
  "condition": [
   "                      ][:self._num_layers],",
   "        'layer_depth': [-1, -1, 512, 256, 256, 128][:self._num_layers],"
  ],
  "consequent": [
   "        'layer_depth': [-1, -1, 512, 256, 256, 128],"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_mobilenet_v2_feature_extractor_test.py",
  "condition": [
   "  def _create_feature_extractor(self,",
   "                                depth_multiplier,",
   "                                pad_to_multiple,",
   "                                use_explicit_padding=False,"
  ],
  "consequent": [
   "  def _create_feature_extractor(self, depth_multiplier, pad_to_multiple,",
   "                                use_explicit_padding=False, use_keras=False):"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_mobilenet_v2_feature_extractor_test.py",
  "condition": [
   "          use_explicit_padding=use_explicit_padding,"
  ],
  "consequent": [
   "          use_explicit_padding=use_explicit_padding)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_mobilenet_v2_feature_extractor_test.py",
  "condition": [
   "    self.assertTrue(any('FusedBatchNorm' in op.type"
  ],
  "consequent": [
   "    self.assertTrue(any(op.type == 'FusedBatchNorm'"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_mobilenet_v2_fpn_feature_extractor_test.py",
  "condition": [
   "    {",
   "        'use_depthwise': False,",
   "        'use_keras': True",
   "    },",
   "    {",
   "        'use_depthwise': True,",
   "        'use_keras': True",
   "    },",
   "    {",
   "        'use_depthwise': False,",
   "        'use_keras': False"
  ],
  "consequent": [
   "    {'use_keras': False},",
   "    {'use_keras': True},"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_mobilenet_v2_fpn_feature_extractor_test.py",
  "condition": [
   "  def _create_feature_extractor(self,",
   "                                depth_multiplier,",
   "                                pad_to_multiple,",
   "                                is_training=True,",
   "                                use_explicit_padding=False,"
  ],
  "consequent": [
   "  def _create_feature_extractor(self, depth_multiplier, pad_to_multiple,",
   "                                is_training=True, use_explicit_padding=False,"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_mobilenet_v2_fpn_feature_extractor_test.py",
  "condition": [
   "                                use_keras=False,"
  ],
  "consequent": [
   "                                use_keras=False):"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_mobilenet_v2_fpn_feature_extractor_test.py",
  "condition": [
   "      return (ssd_mobilenet_v2_fpn_keras_feature_extractor"
  ],
  "consequent": [
   "      return (ssd_mobilenet_v2_fpn_keras_feature_extractor."
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_mobilenet_v2_fpn_feature_extractor_test.py",
  "condition": [
   "              .SSDMobileNetV2FpnKerasFeatureExtractor("
  ],
  "consequent": [
   "              SSDMobileNetV2FpnKerasFeatureExtractor("
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_mobilenet_v2_fpn_feature_extractor_test.py",
  "condition": [
   "      return (ssd_mobilenet_v2_fpn_feature_extractor"
  ],
  "consequent": [
   "      return (ssd_mobilenet_v2_fpn_feature_extractor."
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_mobilenet_v2_fpn_feature_extractor_test.py",
  "condition": [
   "              .SSDMobileNetV2FpnFeatureExtractor("
  ],
  "consequent": [
   "              SSDMobileNetV2FpnFeatureExtractor("
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_mobilenet_v2_fpn_feature_extractor_test.py",
  "condition": [
   "  def test_extract_features_returns_correct_shapes_256(self, use_keras,"
  ],
  "consequent": [
   "  def test_extract_features_returns_correct_shapes_256(self, use_keras):"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_mobilenet_v2_fpn_feature_extractor_test.py",
  "condition": [
   "        2,",
   "        image_height,",
   "        image_width,",
   "        depth_multiplier,",
   "        pad_to_multiple,",
   "        expected_feature_map_shape,",
   "        use_explicit_padding=False,",
   "        use_keras=use_keras,"
  ],
  "consequent": [
   "        2, image_height, image_width, depth_multiplier, pad_to_multiple,",
   "        expected_feature_map_shape, use_explicit_padding=False,",
   "        use_keras=use_keras)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_mobilenet_v2_fpn_feature_extractor_test.py",
  "condition": [
   "        2,",
   "        image_height,",
   "        image_width,",
   "        depth_multiplier,",
   "        pad_to_multiple,",
   "        expected_feature_map_shape,",
   "        use_explicit_padding=True,",
   "        use_keras=use_keras,"
  ],
  "consequent": [
   "        2, image_height, image_width, depth_multiplier, pad_to_multiple,",
   "        expected_feature_map_shape, use_explicit_padding=True,",
   "        use_keras=use_keras)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_mobilenet_v2_fpn_feature_extractor_test.py",
  "condition": [
   "  def test_extract_features_returns_correct_shapes_384(self, use_keras,"
  ],
  "consequent": [
   "  def test_extract_features_returns_correct_shapes_384(self, use_keras):"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_mobilenet_v2_fpn_feature_extractor_test.py",
  "condition": [
   "        2,",
   "        image_height,",
   "        image_width,",
   "        depth_multiplier,",
   "        pad_to_multiple,",
   "        expected_feature_map_shape,",
   "        use_explicit_padding=False,",
   "        use_keras=use_keras,"
  ],
  "consequent": [
   "        2, image_height, image_width, depth_multiplier, pad_to_multiple,",
   "        expected_feature_map_shape, use_explicit_padding=False,",
   "        use_keras=use_keras)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_mobilenet_v2_fpn_feature_extractor_test.py",
  "condition": [
   "        2,",
   "        image_height,",
   "        image_width,",
   "        depth_multiplier,",
   "        pad_to_multiple,",
   "        expected_feature_map_shape,",
   "        use_explicit_padding=True,",
   "        use_keras=use_keras,"
  ],
  "consequent": [
   "        2, image_height, image_width, depth_multiplier, pad_to_multiple,",
   "        expected_feature_map_shape, use_explicit_padding=True,",
   "        use_keras=use_keras)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_mobilenet_v2_fpn_feature_extractor_test.py",
  "condition": [
   "  def test_extract_features_with_dynamic_image_shape(self, use_keras,"
  ],
  "consequent": [
   "  def test_extract_features_with_dynamic_image_shape(self, use_keras):"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_mobilenet_v2_fpn_feature_extractor_test.py",
  "condition": [
   "        2,",
   "        image_height,",
   "        image_width,",
   "        depth_multiplier,",
   "        pad_to_multiple,",
   "        expected_feature_map_shape,",
   "        use_explicit_padding=False,",
   "        use_keras=use_keras,"
  ],
  "consequent": [
   "        2, image_height, image_width, depth_multiplier, pad_to_multiple,",
   "        expected_feature_map_shape, use_explicit_padding=False,",
   "        use_keras=use_keras)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_mobilenet_v2_fpn_feature_extractor_test.py",
  "condition": [
   "        2,",
   "        image_height,",
   "        image_width,",
   "        depth_multiplier,",
   "        pad_to_multiple,",
   "        expected_feature_map_shape,",
   "        use_explicit_padding=True,",
   "        use_keras=use_keras,"
  ],
  "consequent": [
   "        2, image_height, image_width, depth_multiplier, pad_to_multiple,",
   "        expected_feature_map_shape, use_explicit_padding=True,",
   "        use_keras=use_keras)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_mobilenet_v2_fpn_feature_extractor_test.py",
  "condition": [
   "      self, use_keras, use_depthwise):"
  ],
  "consequent": [
   "      self, use_keras):"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_mobilenet_v2_fpn_feature_extractor_test.py",
  "condition": [
   "        2,",
   "        image_height,",
   "        image_width,",
   "        depth_multiplier,",
   "        pad_to_multiple,",
   "        expected_feature_map_shape,",
   "        use_explicit_padding=False,",
   "        use_keras=use_keras,"
  ],
  "consequent": [
   "        2, image_height, image_width, depth_multiplier, pad_to_multiple,",
   "        expected_feature_map_shape, use_explicit_padding=False,",
   "        use_keras=use_keras)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_mobilenet_v2_fpn_feature_extractor_test.py",
  "condition": [
   "        2,",
   "        image_height,",
   "        image_width,",
   "        depth_multiplier,",
   "        pad_to_multiple,",
   "        expected_feature_map_shape,",
   "        use_explicit_padding=True,",
   "        use_keras=use_keras,"
  ],
  "consequent": [
   "        2, image_height, image_width, depth_multiplier, pad_to_multiple,",
   "        expected_feature_map_shape, use_explicit_padding=True,",
   "        use_keras=use_keras)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_mobilenet_v2_fpn_feature_extractor_test.py",
  "condition": [
   "      self, use_keras, use_depthwise):"
  ],
  "consequent": [
   "      self, use_keras):"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_mobilenet_v2_fpn_feature_extractor_test.py",
  "condition": [
   "        2,",
   "        image_height,",
   "        image_width,",
   "        depth_multiplier,",
   "        pad_to_multiple,",
   "        expected_feature_map_shape,",
   "        use_explicit_padding=False,",
   "        use_keras=use_keras,"
  ],
  "consequent": [
   "        2, image_height, image_width, depth_multiplier, pad_to_multiple,",
   "        expected_feature_map_shape, use_explicit_padding=False,",
   "        use_keras=use_keras)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_mobilenet_v2_fpn_feature_extractor_test.py",
  "condition": [
   "        2,",
   "        image_height,",
   "        image_width,",
   "        depth_multiplier,",
   "        pad_to_multiple,",
   "        expected_feature_map_shape,",
   "        use_explicit_padding=True,",
   "        use_keras=use_keras,"
  ],
  "consequent": [
   "        2, image_height, image_width, depth_multiplier, pad_to_multiple,",
   "        expected_feature_map_shape, use_explicit_padding=True,",
   "        use_keras=use_keras)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_mobilenet_v2_fpn_feature_extractor_test.py",
  "condition": [
   "      self, use_keras, use_depthwise):"
  ],
  "consequent": [
   "      self, use_keras):"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_mobilenet_v2_fpn_feature_extractor_test.py",
  "condition": [
   "        image_height,",
   "        image_width,",
   "        depth_multiplier,",
   "        pad_to_multiple,",
   "        use_keras=use_keras,"
  ],
  "consequent": [
   "        image_height, image_width, depth_multiplier, pad_to_multiple,",
   "        use_keras=use_keras)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_mobilenet_v2_fpn_feature_extractor_test.py",
  "condition": [
   "  def test_preprocess_returns_correct_value_range(self, use_keras,"
  ],
  "consequent": [
   "  def test_preprocess_returns_correct_value_range(self, use_keras):"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_mobilenet_v2_fpn_feature_extractor_test.py",
  "condition": [
   "    feature_extractor = self._create_feature_extractor("
  ],
  "consequent": [
   "    feature_extractor = self._create_feature_extractor(depth_multiplier,",
   "                                                       pad_to_multiple,",
   "                                                       use_keras=use_keras)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_mobilenet_v2_fpn_feature_extractor_test.py",
  "condition": [
   "  def test_variables_only_created_in_scope(self, use_keras, use_depthwise):"
  ],
  "consequent": [
   "  def test_variables_only_created_in_scope(self, use_keras):"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_mobilenet_v2_fpn_feature_extractor_test.py",
  "condition": [
   "        depth_multiplier,",
   "        pad_to_multiple,",
   "        scope_name,",
   "        use_keras=use_keras,",
   "        use_depthwise=use_depthwise)"
  ],
  "consequent": [
   "        depth_multiplier, pad_to_multiple, scope_name, use_keras=use_keras)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_mobilenet_v2_fpn_feature_extractor_test.py",
  "condition": [
   "  def test_fused_batchnorm(self, use_keras, use_depthwise):"
  ],
  "consequent": [
   "  def test_fused_batchnorm(self, use_keras):"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_mobilenet_v2_fpn_feature_extractor_test.py",
  "condition": [
   "    feature_extractor = self._create_feature_extractor("
  ],
  "consequent": [
   "    feature_extractor = self._create_feature_extractor(depth_multiplier,",
   "                                                       pad_to_multiple,",
   "                                                       use_keras=use_keras)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_mobilenet_v2_fpn_feature_extractor_test.py",
  "condition": [
   "        any('FusedBatchNorm' in op.type"
  ],
  "consequent": [
   "        any(op.type == 'FusedBatchNorm'"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_mobilenet_v2_fpn_feature_extractor_test.py",
  "condition": [
   "  def test_variable_count(self, use_keras, use_depthwise):"
  ],
  "consequent": [
   "  def test_variable_count(self, use_keras):"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_mobilenet_v2_fpn_feature_extractor_test.py",
  "condition": [
   "        depth_multiplier,",
   "        pad_to_multiple,",
   "        use_keras=use_keras,",
   "        use_depthwise=use_depthwise)",
   "    expected_variables_len = 274",
   "    if use_depthwise:",
   "      expected_variables_len = 278",
   "    self.assertEqual(len(variables), expected_variables_len)"
  ],
  "consequent": [
   "        depth_multiplier, pad_to_multiple, use_keras=use_keras)",
   "    self.assertEqual(len(variables), 274)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_mobilenet_v2_fpn_feature_extractor_test.py",
  "condition": [
   "  def test_get_expected_feature_map_variable_names(self, use_keras,"
  ],
  "consequent": [
   "  def test_get_expected_feature_map_variable_names(self, use_keras):"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_mobilenet_v2_fpn_feature_extractor_test.py",
  "condition": [
   "          depth_multiplier,",
   "          pad_to_multiple,",
   "          use_keras=use_keras,",
   "          use_depthwise=use_depthwise)"
  ],
  "consequent": [
   "          depth_multiplier, pad_to_multiple, use_keras=use_keras)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_mobilenet_v2_fpn_feature_extractor_test.py",
  "condition": [
   "        _ = feature_extractor(preprocessed_inputs)"
  ],
  "consequent": [
   "        feature_extractor(preprocessed_inputs)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_mobilenet_v2_fpn_feature_extractor_test.py",
  "condition": [
   "        _ = feature_extractor.extract_features(preprocessed_inputs)"
  ],
  "consequent": [
   "        feature_extractor.extract_features(preprocessed_inputs)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_mobilenet_v2_fpn_keras_feature_extractor.py",
  "condition": [
   "  last_conv = model_utils.ConvDefs(conv_name='Conv_1', filters=256)"
  ],
  "consequent": [
   "  last_conv = mobilenet_v2.ConvDefs(conv_name='Conv_1', filters=256)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_mobilenet_v2_keras_feature_extractor.py",
  "condition": [
   "        'from_layer': ['layer_15/expansion_output', 'layer_19', '', '', '', ''"
  ],
  "consequent": [
   "        'from_layer': ['layer_15/expansion_output', 'layer_19', '', '', '', ''],"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_mobilenet_v2_keras_feature_extractor.py",
  "condition": [
   "                      ][:self._num_layers],",
   "        'layer_depth': [-1, -1, 512, 256, 256, 128][:self._num_layers],"
  ],
  "consequent": [
   "        'layer_depth': [-1, -1, 512, 256, 256, 128],"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_pnasnet_feature_extractor.py",
  "condition": [
   "        'from_layer': ['Cell_7', 'Cell_11', '', '', '', ''][:self._num_layers],"
  ],
  "consequent": [
   "        'from_layer': ['Cell_7', 'Cell_11', '', '', '', ''],"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_pnasnet_feature_extractor.py",
  "condition": [
   "        'layer_depth': [-1, -1, 512, 256, 256, 128][:self._num_layers],"
  ],
  "consequent": [
   "        'layer_depth': [-1, -1, 512, 256, 256, 128],"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_pnasnet_feature_extractor.py",
  "condition": [
   "    for variable in variables_helper.get_global_variables_safely():"
  ],
  "consequent": [
   "    for variable in tf.global_variables():"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_pnasnet_feature_extractor_test.py",
  "condition": [
   "  def _create_feature_extractor(self,",
   "                                depth_multiplier,",
   "                                pad_to_multiple,",
   "                                use_explicit_padding=False,"
  ],
  "consequent": [
   "  def _create_feature_extractor(self, depth_multiplier, pad_to_multiple,",
   "                                is_training=True, use_explicit_padding=False):"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_pnasnet_feature_extractor_test.py",
  "condition": [
   "        is_training,",
   "        depth_multiplier,",
   "        min_depth,",
   "        pad_to_multiple,"
  ],
  "consequent": [
   "        is_training, depth_multiplier, min_depth, pad_to_multiple,"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_pnasnet_feature_extractor_test.py",
  "condition": [
   "        use_explicit_padding=use_explicit_padding,"
  ],
  "consequent": [
   "        use_explicit_padding=use_explicit_padding)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_resnet_v1_fpn_feature_extractor_test.py",
  "condition": [
   "                                use_explicit_padding=False, min_depth=32,"
  ],
  "consequent": [
   "                                use_explicit_padding=False, min_depth=32):"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_resnet_v1_fpn_feature_extractor_test.py",
  "condition": [
   "    if use_keras:",
   "      return (ssd_resnet_v1_fpn_keras_feature_extractor.",
   "              SSDResNet50V1FpnKerasFeatureExtractor(",
   "                  is_training=is_training,",
   "                  depth_multiplier=depth_multiplier,",
   "                  min_depth=min_depth,",
   "                  pad_to_multiple=pad_to_multiple,",
   "                  conv_hyperparams=self._build_conv_hyperparams(",
   "                      add_batch_norm=False),",
   "                  freeze_batchnorm=False,",
   "                  inplace_batchnorm_update=False,",
   "                  name='ResNet50V1_FPN'))",
   "    else:",
   "      return (",
   "          ssd_resnet_v1_fpn_feature_extractor.SSDResnet50V1FpnFeatureExtractor("
  ],
  "consequent": [
   "    return ssd_resnet_v1_fpn_feature_extractor.SSDResnet50V1FpnFeatureExtractor("
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_resnet_v1_fpn_feature_extractor_test.py",
  "condition": [
   "              is_training, depth_multiplier, min_depth, pad_to_multiple,"
  ],
  "consequent": [
   "        is_training, depth_multiplier, min_depth, pad_to_multiple,"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_resnet_v1_fpn_feature_extractor_test.py",
  "condition": [
   "              self.conv_hyperparams_fn,",
   "              use_explicit_padding=use_explicit_padding))"
  ],
  "consequent": [
   "        self.conv_hyperparams_fn, use_explicit_padding=use_explicit_padding)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_resnet_v1_fpn_feature_extractor_test.py",
  "condition": [
   "  def _resnet_scope_name(self, use_keras=False):"
  ],
  "consequent": [
   "  def _resnet_scope_name(self):"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_resnet_v1_fpn_feature_extractor_test.py",
  "condition": [
   "                                use_explicit_padding=False, min_depth=32,"
  ],
  "consequent": [
   "                                use_explicit_padding=False, min_depth=32):"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_resnet_v1_fpn_feature_extractor_test.py",
  "condition": [
   "    if use_keras:",
   "      return (ssd_resnet_v1_fpn_keras_feature_extractor.",
   "              SSDResNet101V1FpnKerasFeatureExtractor(",
   "                  is_training=is_training,",
   "                  depth_multiplier=depth_multiplier,",
   "                  min_depth=min_depth,",
   "                  pad_to_multiple=pad_to_multiple,",
   "                  conv_hyperparams=self._build_conv_hyperparams(",
   "                      add_batch_norm=False),",
   "                  freeze_batchnorm=False,",
   "                  inplace_batchnorm_update=False,",
   "                  name='ResNet101V1_FPN'))",
   "    else:",
   "      return ("
  ],
  "consequent": [
   "    return ("
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_resnet_v1_fpn_feature_extractor_test.py",
  "condition": [
   "          ssd_resnet_v1_fpn_feature_extractor.SSDResnet101V1FpnFeatureExtractor("
  ],
  "consequent": [
   "        ssd_resnet_v1_fpn_feature_extractor.SSDResnet101V1FpnFeatureExtractor("
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_resnet_v1_fpn_feature_extractor_test.py",
  "condition": [
   "              is_training, depth_multiplier, min_depth, pad_to_multiple,"
  ],
  "consequent": [
   "            is_training,",
   "            depth_multiplier,",
   "            min_depth,",
   "            pad_to_multiple,"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_resnet_v1_fpn_feature_extractor_test.py",
  "condition": [
   "              self.conv_hyperparams_fn,"
  ],
  "consequent": [
   "            self.conv_hyperparams_fn,"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_resnet_v1_fpn_feature_extractor_test.py",
  "condition": [
   "              use_explicit_padding=use_explicit_padding))"
  ],
  "consequent": [
   "            use_explicit_padding=use_explicit_padding))"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_resnet_v1_fpn_feature_extractor_test.py",
  "condition": [
   "  def _resnet_scope_name(self, use_keras):"
  ],
  "consequent": [
   "  def _resnet_scope_name(self):"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_resnet_v1_fpn_feature_extractor_test.py",
  "condition": [
   "                                use_explicit_padding=False, min_depth=32,"
  ],
  "consequent": [
   "                                use_explicit_padding=False, min_depth=32):"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_resnet_v1_fpn_feature_extractor_test.py",
  "condition": [
   "    if use_keras:",
   "      return (ssd_resnet_v1_fpn_keras_feature_extractor.",
   "              SSDResNet152V1FpnKerasFeatureExtractor(",
   "                  is_training=is_training,",
   "                  depth_multiplier=depth_multiplier,",
   "                  min_depth=min_depth,",
   "                  pad_to_multiple=pad_to_multiple,",
   "                  conv_hyperparams=self._build_conv_hyperparams(",
   "                      add_batch_norm=False),",
   "                  freeze_batchnorm=False,",
   "                  inplace_batchnorm_update=False,",
   "                  name='ResNet152V1_FPN'))",
   "    else:",
   "      return ("
  ],
  "consequent": [
   "    return ("
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_resnet_v1_fpn_feature_extractor_test.py",
  "condition": [
   "          ssd_resnet_v1_fpn_feature_extractor.SSDResnet152V1FpnFeatureExtractor("
  ],
  "consequent": [
   "        ssd_resnet_v1_fpn_feature_extractor.SSDResnet152V1FpnFeatureExtractor("
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_resnet_v1_fpn_feature_extractor_test.py",
  "condition": [
   "              is_training, depth_multiplier, min_depth, pad_to_multiple,"
  ],
  "consequent": [
   "            is_training,",
   "            depth_multiplier,",
   "            min_depth,",
   "            pad_to_multiple,"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_resnet_v1_fpn_feature_extractor_test.py",
  "condition": [
   "              self.conv_hyperparams_fn,"
  ],
  "consequent": [
   "            self.conv_hyperparams_fn,"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_resnet_v1_fpn_feature_extractor_test.py",
  "condition": [
   "              use_explicit_padding=use_explicit_padding))"
  ],
  "consequent": [
   "            use_explicit_padding=use_explicit_padding))"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_resnet_v1_fpn_feature_extractor_test.py",
  "condition": [
   "  def _resnet_scope_name(self, use_keras):"
  ],
  "consequent": [
   "  def _resnet_scope_name(self):"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_resnet_v1_fpn_feature_extractor_testbase.py",
  "condition": [
   "  def _resnet_scope_name(self, use_keras):"
  ],
  "consequent": [
   "  def _resnet_scope_name(self):"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_resnet_v1_fpn_feature_extractor_testbase.py",
  "condition": [
   "                                min_depth=32,"
  ],
  "consequent": [
   "                                min_depth=32):"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_resnet_v1_fpn_feature_extractor_testbase.py",
  "condition": [
   "  def test_extract_features_returns_correct_shapes_256(self, use_keras):"
  ],
  "consequent": [
   "  def test_extract_features_returns_correct_shapes_256(self):"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_resnet_v1_fpn_feature_extractor_testbase.py",
  "condition": [
   "  def test_extract_features_returns_correct_shapes_with_dynamic_inputs("
  ],
  "consequent": [
   "  def test_extract_features_returns_correct_shapes_with_dynamic_inputs(self):"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_resnet_v1_fpn_feature_extractor_testbase.py",
  "condition": [
   "        expected_feature_map_shape, use_keras=use_keras)"
  ],
  "consequent": [
   "        expected_feature_map_shape)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_resnet_v1_fpn_feature_extractor_testbase.py",
  "condition": [
   "  def test_extract_features_returns_correct_shapes_with_depth_multiplier("
  ],
  "consequent": [
   "  def test_extract_features_returns_correct_shapes_with_depth_multiplier(self):"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_resnet_v1_fpn_feature_extractor_testbase.py",
  "condition": [
   "        expected_feature_map_shape, use_keras=use_keras)"
  ],
  "consequent": [
   "        expected_feature_map_shape)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_resnet_v1_fpn_feature_extractor_testbase.py",
  "condition": [
   "  def test_extract_features_returns_correct_shapes_with_min_depth("
  ],
  "consequent": [
   "  def test_extract_features_returns_correct_shapes_with_min_depth(self):"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_resnet_v1_fpn_feature_extractor_testbase.py",
  "condition": [
   "          depth_multiplier, pad_to_multiple, min_depth=min_depth,"
  ],
  "consequent": [
   "          depth_multiplier, pad_to_multiple, min_depth=min_depth)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_resnet_v1_fpn_feature_extractor_testbase.py",
  "condition": [
   "  def test_extract_features_returns_correct_shapes_with_pad_to_multiple("
  ],
  "consequent": [
   "  def test_extract_features_returns_correct_shapes_with_pad_to_multiple(self):"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_resnet_v1_fpn_feature_extractor_testbase.py",
  "condition": [
   "        expected_feature_map_shape, use_keras=use_keras)"
  ],
  "consequent": [
   "        expected_feature_map_shape)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_resnet_v1_fpn_feature_extractor_testbase.py",
  "condition": [
   "  def test_extract_features_raises_error_with_invalid_image_size("
  ],
  "consequent": [
   "  def test_extract_features_raises_error_with_invalid_image_size(self):"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_resnet_v1_fpn_feature_extractor_testbase.py",
  "condition": [
   "        image_height, image_width, depth_multiplier, pad_to_multiple,"
  ],
  "consequent": [
   "        image_height, image_width, depth_multiplier, pad_to_multiple)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_resnet_v1_fpn_feature_extractor_testbase.py",
  "condition": [
   "  def test_preprocess_returns_correct_value_range(self, use_keras):"
  ],
  "consequent": [
   "  def test_preprocess_returns_correct_value_range(self):"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_resnet_v1_fpn_feature_extractor_testbase.py",
  "condition": [
   "                                                       pad_to_multiple,"
  ],
  "consequent": [
   "                                                       pad_to_multiple)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_resnet_v1_fpn_feature_extractor_testbase.py",
  "condition": [
   "  def test_variables_only_created_in_scope(self, use_keras):"
  ],
  "consequent": [
   "  def test_variables_only_created_in_scope(self):"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/models/ssd_resnet_v1_fpn_feature_extractor_testbase.py",
  "condition": [
   "    scope_name = self._resnet_scope_name(use_keras)",
   "    self.check_feature_extractor_variables_under_scope(",
   "        depth_multiplier,",
   "        pad_to_multiple,",
   "        scope_name,",
   "        use_keras=use_keras)",
   "",
   "  def test_variable_count(self, use_keras):",
   "    depth_multiplier = 1",
   "    pad_to_multiple = 1",
   "    variables = self.get_feature_extractor_variables(",
   "        depth_multiplier,",
   "        pad_to_multiple,",
   "        use_keras=use_keras)",
   "    # The number of expected variables in resnet_v1_50, resnet_v1_101,",
   "    # and resnet_v1_152 is 279, 534, and 789 respectively.",
   "    expected_variables_len = 279",
   "    scope_name = self._resnet_scope_name(use_keras)",
   "    if scope_name in ('ResNet101V1_FPN', 'resnet_v1_101'):",
   "      expected_variables_len = 534",
   "    elif scope_name in ('ResNet152V1_FPN', 'resnet_v1_152'):",
   "      expected_variables_len = 789",
   "    self.assertEqual(len(variables), expected_variables_len)"
  ],
  "consequent": [
   "    g = tf.Graph()",
   "    with g.as_default():",
   "      feature_extractor = self._create_feature_extractor(",
   "          depth_multiplier, pad_to_multiple)",
   "      preprocessed_inputs = tf.placeholder(tf.float32, (4, None, None, 3))",
   "      feature_extractor.extract_features(preprocessed_inputs)",
   "      variables = g.get_collection(tf.GraphKeys.GLOBAL_VARIABLES)",
   "      for variable in variables:",
   "        self.assertTrue(",
   "            variable.name.startswith(self._resnet_scope_name())",
   "            or variable.name.startswith(self._fpn_scope_name()))"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/predictors/convolutional_keras_box_predictor.py",
  "condition": [
   "  def _predict(self, image_features, **kwargs):"
  ],
  "consequent": [
   "  def _predict(self, image_features):"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/predictors/convolutional_keras_box_predictor.py",
  "condition": [
   "                  self._depth, [self._kernel_size, self._kernel_size],"
  ],
  "consequent": [
   "                  self._depth,",
   "                  [self._kernel_size, self._kernel_size],"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/predictors/convolutional_keras_box_predictor.py",
  "condition": [
   "                  **kwargs))"
  ],
  "consequent": [
   "                  **self._conv_hyperparams.params(use_bias=use_bias)))"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/predictors/convolutional_keras_box_predictor.py",
  "condition": [
   "  def _predict(self, image_features, **kwargs):"
  ],
  "consequent": [
   "  def _predict(self, image_features):"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/predictors/mask_rcnn_keras_box_predictor.py",
  "condition": [
   "               prediction_stage=2,"
  ],
  "consequent": [
   "               prediction_stage=2):"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/predictors/rfcn_keras_box_predictor.py",
  "condition": [
   "  def _predict(self, image_features, proposal_boxes, **kwargs):"
  ],
  "consequent": [
   "  def _predict(self, image_features, proposal_boxes):"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/tpu_exporters/faster_rcnn.py",
  "condition": [
   "  detection_model = INPUT_BUILDER_UTIL_MAP['model_build']("
  ],
  "consequent": [
   "  detection_model = model_builder.build("
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/tpu_exporters/faster_rcnn.py",
  "condition": [
   "  detection_model = INPUT_BUILDER_UTIL_MAP['model_build']("
  ],
  "consequent": [
   "  detection_model = model_builder.build("
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/tpu_exporters/faster_rcnn.py",
  "condition": [
   "  def tpu_subgraph_predict_fn(preprocessed_inputs, true_image_shapes):"
  ],
  "consequent": [
   "  def tpu_subgraph_first_stage_fn(preprocessed_inputs):"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/tpu_exporters/faster_rcnn.py",
  "condition": [
   "    prediction_dict = detection_model.predict(preprocessed_inputs,"
  ],
  "consequent": [
   "    prediction_dict = detection_model._predict_first_stage(preprocessed_inputs)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/tpu_exporters/faster_rcnn.py",
  "condition": [
   "    return ("
  ],
  "consequent": [
   "    # [b, h, w, c] -> [b, c, h, w]",
   "    rpn_box_predictor_features = tf.transpose(",
   "        prediction_dict[RPN_BOX_PREDICTOR_FEATURES], perm=[0, 3, 1, 2])",
   "    # [b, h, w, c] -> [b, c, h, w]",
   "    rpn_features_to_crop = tf.transpose(",
   "        prediction_dict[RPN_FEATURES_TO_CROP], perm=[0, 3, 1, 2])"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/tpu_exporters/faster_rcnn.py",
  "condition": [
   "        # [batch, anchor, depth] -> [depth, batch, anchor]"
  ],
  "consequent": [
   "    # [batch, anchor, depth] -> [depth, batch, anchor]",
   "    rpn_box_encodings = tf.transpose("
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/tpu_exporters/faster_rcnn.py",
  "condition": [
   "        tf.transpose(prediction_dict[RPN_BOX_ENCODINGS], perm=[2, 0, 1]),"
  ],
  "consequent": [
   "        prediction_dict[RPN_BOX_ENCODINGS], perm=[2, 0, 1])"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/tpu_exporters/faster_rcnn.py",
  "condition": [
   "        # [batch, anchor, depth] -> [depth, batch, anchor]"
  ],
  "consequent": [
   "    # [batch, anchor, depth] -> [depth, batch, anchor]"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/tpu_exporters/faster_rcnn.py",
  "condition": [
   "        tf.transpose("
  ],
  "consequent": [
   "    rpn_objectness_predictions_with_background = tf.transpose("
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/tpu_exporters/faster_rcnn.py",
  "condition": [
   "            prediction_dict[RPN_OBJECTNESS_PREDICTIONS_WITH_BACKGROUND],"
  ],
  "consequent": [
   "        prediction_dict[RPN_OBJECTNESS_PREDICTIONS_WITH_BACKGROUND],"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/tpu_exporters/faster_rcnn.py",
  "condition": [
   "            perm=[2, 0, 1]),"
  ],
  "consequent": [
   "        perm=[2, 0, 1])"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/tpu_exporters/faster_rcnn.py",
  "condition": [
   "        # [anchors, depth]"
  ],
  "consequent": [
   "    # [anchors, depth]"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/tpu_exporters/faster_rcnn.py",
  "condition": [
   "        tf.transpose(prediction_dict[ANCHORS], perm=[1, 0]),"
  ],
  "consequent": [
   "    anchors = tf.transpose(prediction_dict[ANCHORS], perm=[1, 0])",
   "",
   "    return (rpn_box_predictor_features, rpn_features_to_crop,",
   "            prediction_dict['image_shape'], rpn_box_encodings,",
   "            rpn_objectness_predictions_with_background, anchors)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/tpu_exporters/faster_rcnn.py",
  "condition": [
   "  def tpu_subgraph_predict():"
  ],
  "consequent": [
   "  def tpu_subgraph_first_stage():"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/tpu_exporters/faster_rcnn.py",
  "condition": [
   "        return tf.contrib.tpu.rewrite(tpu_subgraph_predict_fn,"
  ],
  "consequent": [
   "        return tf.contrib.tpu.rewrite(tpu_subgraph_first_stage_fn,"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/tpu_exporters/faster_rcnn.py",
  "condition": [
   "                                      [preprocessed_inputs, true_image_shapes])"
  ],
  "consequent": [
   "                                      [preprocessed_inputs])"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/tpu_exporters/faster_rcnn.py",
  "condition": [
   "      return tf.contrib.tpu.rewrite(tpu_subgraph_predict_fn,"
  ],
  "consequent": [
   "      return tf.contrib.tpu.rewrite(tpu_subgraph_first_stage_fn,"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/tpu_exporters/faster_rcnn.py",
  "condition": [
   "                                    [preprocessed_inputs, true_image_shapes])"
  ],
  "consequent": [
   "                                    [preprocessed_inputs])"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/tpu_exporters/faster_rcnn.py",
  "condition": [
   "  (rpn_box_encodings, rpn_objectness_predictions_with_background, anchors,"
  ],
  "consequent": [
   "  (rpn_box_predictor_features, rpn_features_to_crop, image_shape,",
   "   rpn_box_encodings, rpn_objectness_predictions_with_background,"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/tpu_exporters/faster_rcnn.py",
  "condition": [
   "   refined_box_encodings, class_predictions_with_background, num_proposals,"
  ],
  "consequent": [
   "   anchors) = \\"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/tpu_exporters/faster_rcnn.py",
  "condition": [
   "   proposal_boxes) = tpu_functional.TPUPartitionedCall("
  ],
  "consequent": [
   "      tpu_functional.TPUPartitionedCall("
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/tpu_exporters/faster_rcnn.py",
  "condition": [
   "       args=tpu_subgraph_predict.captured_inputs,"
  ],
  "consequent": [
   "          args=tpu_subgraph_first_stage.captured_inputs,"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/tpu_exporters/faster_rcnn.py",
  "condition": [
   "       device_ordinal=tpu_ops.tpu_ordinal_selector(),"
  ],
  "consequent": [
   "          device_ordinal=tpu_ops.tpu_ordinal_selector(),"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/tpu_exporters/faster_rcnn.py",
  "condition": [
   "       Tout=["
  ],
  "consequent": [
   "          Tout=[",
   "              o.type"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/tpu_exporters/faster_rcnn.py",
  "condition": [
   "           o.type for o in tpu_subgraph_predict.definition.signature.output_arg"
  ],
  "consequent": [
   "              for o in tpu_subgraph_first_stage.definition.signature.output_arg"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/tpu_exporters/faster_rcnn.py",
  "condition": [
   "       ],"
  ],
  "consequent": [
   "          ],"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/tpu_exporters/faster_rcnn.py",
  "condition": [
   "       f=tpu_subgraph_predict)"
  ],
  "consequent": [
   "          f=tpu_subgraph_first_stage)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/learning_schedules.py",
  "condition": [
   "    warmup_steps = list(range(boundaries[0]))"
  ],
  "consequent": [
   "    warmup_steps = range(boundaries[0])"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/np_box_list_ops.py",
  "condition": [
   "def clip_to_window(boxlist, window, filter_nonoverlapping=True):"
  ],
  "consequent": [
   "def clip_to_window(boxlist, window):"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/np_box_list_ops.py",
  "condition": [
   "  if filter_nonoverlapping:",
   "    areas = area(clipped)"
  ],
  "consequent": [
   "  areas = area(clipped)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/np_box_list_ops.py",
  "condition": [
   "    nonzero_area_indices = np.reshape(",
   "        np.nonzero(np.greater(areas, 0.0)), [-1]).astype(np.int32)"
  ],
  "consequent": [
   "  nonzero_area_indices = np.reshape(np.nonzero(np.greater(areas, 0.0)),",
   "                                    [-1]).astype(np.int32)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/np_box_list_ops.py",
  "condition": [
   "    clipped = gather(clipped, nonzero_area_indices)"
  ],
  "consequent": [
   "  return gather(clipped, nonzero_area_indices)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "class DetectionEvaluator(six.with_metaclass(ABCMeta, object)):"
  ],
  "consequent": [
   "class DetectionEvaluator(object):"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "      groundtruth_dict: A dictionary of groundtruth numpy arrays required for"
  ],
  "consequent": [
   "      groundtruth_dict: A dictionary of groundtruth numpy arrays required"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "        evaluations."
  ],
  "consequent": [
   "        for evaluations."
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "      detections_dict: A dictionary of detection numpy arrays required for"
  ],
  "consequent": [
   "      detections_dict: A dictionary of detection numpy arrays required"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "        evaluation."
  ],
  "consequent": [
   "        for evaluation."
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "      evaluate_corlocs: (optional) boolean which determines if corloc scores are"
  ],
  "consequent": [
   "      evaluate_corlocs: (optional) boolean which determines if corloc scores"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "        to be returned or not."
  ],
  "consequent": [
   "        are to be returned or not."
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "      evaluate_masks: If False, evaluation will be performed based on boxes. If"
  ],
  "consequent": [
   "      evaluate_masks: If False, evaluation will be performed based on boxes."
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "        True, mask evaluation will be performed instead."
  ],
  "consequent": [
   "        If True, mask evaluation will be performed instead."
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "          category_name = six.text_type(category_name, 'utf-8')"
  ],
  "consequent": [
   "          category_name = unicode(category_name, 'utf-8')"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "        category_name = unicodedata.normalize('NFKD', category_name)"
  ],
  "consequent": [
   "        category_name = unicodedata.normalize('NFKD', category_name).encode(",
   "            'ascii', 'ignore')"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "              self._metric_prefix +",
   "              'PerformanceByCategory/CorLoc@{}IOU/{}'.format("
  ],
  "consequent": [
   "              self._metric_prefix + 'PerformanceByCategory/CorLoc@{}IOU/{}'"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "                  self._matching_iou_threshold, category_name))"
  ],
  "consequent": [
   "              .format(self._matching_iou_threshold, category_name))"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "        standard_fields.InputDataFields.groundtruth_difficult: Optional length M"
  ],
  "consequent": [
   "        standard_fields.InputDataFields.groundtruth_difficult: Optional length"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "          numpy boolean array denoting whether a ground truth box is a difficult"
  ],
  "consequent": [
   "          M numpy boolean array denoting whether a ground truth box is a"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "          instance or not. This field is optional to support the case that no"
  ],
  "consequent": [
   "          difficult instance or not. This field is optional to support the case"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "          boxes are difficult."
  ],
  "consequent": [
   "          that no boxes are difficult."
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "    if (standard_fields.InputDataFields.groundtruth_difficult in six.viewkeys("
  ],
  "consequent": [
   "    if (standard_fields.InputDataFields.groundtruth_difficult in"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "        groundtruth_dict) and"
  ],
  "consequent": [
   "        groundtruth_dict.keys() and"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "        logging.warning("
  ],
  "consequent": [
   "        logging.warn("
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "        standard_fields.DetectionResultFields.detection_masks: uint8 numpy array"
  ],
  "consequent": [
   "        standard_fields.DetectionResultFields.detection_masks: uint8 numpy"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "          of shape [num_boxes, height, width] containing `num_boxes` masks of"
  ],
  "consequent": [
   "          array of shape [num_boxes, height, width] containing `num_boxes` masks"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "          values ranging between 0 and 1."
  ],
  "consequent": [
   "          of values ranging between 0 and 1."
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "          category_name = six.text_type(category_name, 'utf-8')"
  ],
  "consequent": [
   "          category_name = unicode(category_name, 'utf-8')"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "        category_name = unicodedata.normalize('NFKD', category_name)"
  ],
  "consequent": [
   "        category_name = unicodedata.normalize("
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "        if six.PY2:",
   "          category_name = category_name.encode('ascii', 'ignore')"
  ],
  "consequent": [
   "            'NFKD', category_name).encode('ascii', 'ignore')"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "              self._metric_prefix +",
   "              'PerformanceByCategory/CorLoc@{}IOU/{}'.format("
  ],
  "consequent": [
   "              self._metric_prefix + 'PerformanceByCategory/CorLoc@{}IOU/{}'"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "                  self._matching_iou_threshold, category_name))"
  ],
  "consequent": [
   "              .format(self._matching_iou_threshold, category_name))"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "    eval_dict_keys = list(eval_dict_filtered.keys())"
  ],
  "consequent": [
   "    eval_dict_keys = eval_dict_filtered.keys()"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "    args.extend(six.itervalues(eval_dict_filtered))"
  ],
  "consequent": [
   "    args.extend(eval_dict_filtered.values())"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "        standard_fields.InputDataFields.groundtruth_group_of: Optional length M"
  ],
  "consequent": [
   "        standard_fields.InputDataFields.groundtruth_group_of: Optional length"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "          numpy boolean array denoting whether a groundtruth box contains a"
  ],
  "consequent": [
   "          M numpy boolean array denoting whether a groundtruth box contains a"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "    if (standard_fields.InputDataFields.groundtruth_group_of in six.viewkeys("
  ],
  "consequent": [
   "    if (standard_fields.InputDataFields.groundtruth_group_of in"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "        groundtruth_dict) and"
  ],
  "consequent": [
   "        groundtruth_dict.keys() and"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "        logging.warning("
  ],
  "consequent": [
   "        logging.warn("
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "      group_of_weight: Weight of group-of boxes. If set to 0, detections of the"
  ],
  "consequent": [
   "      group_of_weight: weight of a group-of box. If set to 0, detections of the"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "        correct class within a group-of box are ignored. If weight is > 0, then"
  ],
  "consequent": [
   "        correct class within a group-of box are ignored. If weight is > 0"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "        if at least one detection falls within a group-of box with",
   "        matching_iou_threshold, weight group_of_weight is added to true",
   "        positives. Consequently, if no detection falls within a group-of box,",
   "        weight group_of_weight is added to false negatives."
  ],
  "consequent": [
   "        (default for Open Images Detection Challenge), then if at least one",
   "        detection falls within a group-of box with matching_iou_threshold,",
   "        weight group_of_weight is added to true positives. Consequently, if no",
   "        detection falls within a group-of box, weight group_of_weight is added",
   "        to false negatives."
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "        standard_fields.InputDataFields.groundtruth_group_of: Optional length M"
  ],
  "consequent": [
   "        standard_fields.InputDataFields.groundtruth_group_of: Optional length"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "          numpy boolean array denoting whether a groundtruth box contains a"
  ],
  "consequent": [
   "          M numpy boolean array denoting whether a groundtruth box contains a"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "               evaluate_corlocs=False):"
  ],
  "consequent": [
   "               evaluate_corlocs=False,",
   "               group_of_weight=1.0):"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "               evaluate_corlocs=False):"
  ],
  "consequent": [
   "               evaluate_corlocs=False,",
   "               group_of_weight=1.0):"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "        group_of_weight=0.0)"
  ],
  "consequent": [
   "        group_of_weight=1.0)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "      matching_iou_threshold: IOU threshold used for matching detected boxes to"
  ],
  "consequent": [
   "      matching_iou_threshold: IOU threshold used for matching detected boxes"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "        ground-truth boxes."
  ],
  "consequent": [
   "        to ground-truth boxes."
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "      per_image_eval_class: The class that contains functions for computing per"
  ],
  "consequent": [
   "      per_image_eval_class: The class that contains functions for computing"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "        image metrics."
  ],
  "consequent": [
   "        per image metrics."
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "      groundtruth_boxes: float32 numpy array of shape [num_boxes, 4] containing"
  ],
  "consequent": [
   "      groundtruth_boxes: float32 numpy array of shape [num_boxes, 4]"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "        `num_boxes` groundtruth boxes of the format [ymin, xmin, ymax, xmax] in",
   "        absolute image coordinates."
  ],
  "consequent": [
   "        containing `num_boxes` groundtruth boxes of the format",
   "        [ymin, xmin, ymax, xmax] in absolute image coordinates."
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "        whether a ground truth box is a group-of box or not. To support the case"
  ],
  "consequent": [
   "          whether a ground truth box is a group-of box or not. To support"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "        that no boxes are groups-of, it is by default set as None."
  ],
  "consequent": [
   "          the case that no boxes are groups-of, it is by default set as None."
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "      groundtruth_masks: uint8 numpy array of shape [num_boxes, height, width]"
  ],
  "consequent": [
   "      groundtruth_masks: uint8 numpy array of shape"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "        containing `num_boxes` groundtruth masks. The mask values range from 0",
   "        to 1."
  ],
  "consequent": [
   "        [num_boxes, height, width] containing `num_boxes` groundtruth masks.",
   "        The mask values range from 0 to 1."
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "      logging.warning("
  ],
  "consequent": [
   "      logging.warn("
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "        groundtruth_is_difficult_list.astype(dtype=bool)"
  ],
  "consequent": [
   "        groundtruth_is_difficult_list.astype(dtype=bool),"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "  def add_single_detected_image_info(self,"
  ],
  "consequent": [
   "  def add_single_detected_image_info(self, image_key, detected_boxes,"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "                                     image_key,",
   "                                     detected_boxes,",
   "                                     detected_scores,",
   "                                     detected_class_labels,"
  ],
  "consequent": [
   "                                     detected_scores, detected_class_labels,"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "      detected_boxes: float32 numpy array of shape [num_boxes, 4] containing"
  ],
  "consequent": [
   "      detected_boxes: float32 numpy array of shape [num_boxes, 4]"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "        `num_boxes` detection boxes of the format [ymin, xmin, ymax, xmax] in",
   "        absolute image coordinates."
  ],
  "consequent": [
   "        containing `num_boxes` detection boxes of the format",
   "        [ymin, xmin, ymax, xmax] in absolute image coordinates."
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "        containing `num_boxes` detection masks with values ranging between 0 and"
  ],
  "consequent": [
   "        containing `num_boxes` detection masks with values ranging"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "        1."
  ],
  "consequent": [
   "        between 0 and 1."
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "      raise ValueError(",
   "          'detected_boxes, detected_scores and '"
  ],
  "consequent": [
   "      raise ValueError('detected_boxes, detected_scores and '"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "          'detected_class_labels should all have same lengths. Got'"
  ],
  "consequent": [
   "                       'detected_class_labels should all have same lengths. Got'"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "          '[%d, %d, %d]' % len(detected_boxes), len(detected_scores),",
   "          len(detected_class_labels))"
  ],
  "consequent": [
   "                       '[%d, %d, %d]' % len(detected_boxes),",
   "                       len(detected_scores), len(detected_class_labels))"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "      logging.warning("
  ],
  "consequent": [
   "      logging.warn("
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "      groundtruth_masks = self.groundtruth_masks.pop(image_key)"
  ],
  "consequent": [
   "      groundtruth_masks = self.groundtruth_masks.pop(",
   "          image_key)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "      groundtruth_class_labels: An integer numpy array of length M, representing"
  ],
  "consequent": [
   "      groundtruth_class_labels: An integer numpy array of length M,"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "        M class labels of object instances in ground truth"
  ],
  "consequent": [
   "          representing M class labels of object instances in ground truth"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "        whether a ground truth box is a difficult instance or not"
  ],
  "consequent": [
   "          whether a ground truth box is a difficult instance or not"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "        whether a ground truth box is a group-of box or not"
  ],
  "consequent": [
   "          whether a ground truth box is a group-of box or not"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "          groundtruth_class_labels[groundtruth_is_group_of_list"
  ],
  "consequent": [
   "          groundtruth_class_labels[groundtruth_is_group_of_list] == class_index)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "      logging.warning("
  ],
  "consequent": [
   "      logging.warn("
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation.py",
  "condition": [
   "    return ObjectDetectionEvalMetrics(self.average_precision_per_class, mean_ap,",
   "                                      self.precisions_per_class,",
   "                                      self.recalls_per_class,",
   "                                      self.corloc_per_class, mean_corloc)"
  ],
  "consequent": [
   "    return ObjectDetectionEvalMetrics(",
   "        self.average_precision_per_class, mean_ap, self.precisions_per_class,",
   "        self.recalls_per_class, self.corloc_per_class, mean_corloc)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation_test.py",
  "condition": [
   "        metrics[expected_metric_name + '_PerformanceByCategory/AP@0.5IOU/dog'],"
  ],
  "consequent": [
   "        metrics[",
   "            expected_metric_name + '_PerformanceByCategory/AP@0.5IOU/dog'],"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation_test.py",
  "condition": [
   "        1.0)"
  ],
  "consequent": [
   "        0.5)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation_test.py",
  "condition": [
   "        metrics[expected_metric_name + '_Precision/mAP@0.5IOU'], 0.5)"
  ],
  "consequent": [
   "        metrics[",
   "            expected_metric_name + '_Precision/mAP@0.5IOU'],",
   "        0.25)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation_test.py",
  "condition": [
   "    expected_corloc_per_class = np.array([0, 0, 0], dtype=float)"
  ],
  "consequent": [
   "    expected_corloc_per_class = np.array([0, np.divide(0, 0), 0], dtype=float)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/object_detection_evaluation_test.py",
  "condition": [
   "      for key, (value_op, _) in six.iteritems(metric_ops):"
  ],
  "consequent": [
   "      for key, (value_op, _) in metric_ops.iteritems():"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/ops_test.py",
  "condition": [
   "        fields.InputDataFields.groundtruth_label_types: [six.b('APPROPRIATE')],"
  ],
  "consequent": [
   "        fields.InputDataFields.groundtruth_label_types: ['APPROPRIATE'],"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/ops_test.py",
  "condition": [
   "        fields.InputDataFields.groundtruth_label_types: [six.b('APPROPRIATE')],"
  ],
  "consequent": [
   "        fields.InputDataFields.groundtruth_label_types: ['APPROPRIATE'],"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/ops_test.py",
  "condition": [
   "    image = tf.constant(",
   "        list(range(1, 3 * 2 + 1)) * 6, dtype=tf.float32, shape=image_shape)"
  ],
  "consequent": [
   "    image = tf.constant(range(1, 3 * 2 + 1) * 6, dtype=tf.float32,",
   "                        shape=image_shape)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/ops_test.py",
  "condition": [
   "    image = tf.constant(",
   "        list(range(1, 3 * 3 + 1)), dtype=tf.float32, shape=[3, 3, 1])"
  ],
  "consequent": [
   "    image = tf.constant(range(1, 3 * 3 + 1), dtype=tf.float32,",
   "                        shape=[3, 3, 1])"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/ops_test.py",
  "condition": [
   "    image = tf.constant(",
   "        list(range(1, 3 * 2 + 1)) * 6, dtype=tf.float32, shape=image_shape)"
  ],
  "consequent": [
   "    image = tf.constant(range(1, 3 * 2 + 1) * 6, dtype=tf.float32,",
   "                        shape=image_shape)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/ops_test.py",
  "condition": [
   "    image = tf.constant(",
   "        list(range(1, 3 * 2 + 1)) * 6, dtype=tf.float32, shape=image_shape)"
  ],
  "consequent": [
   "    image = tf.constant(range(1, 3 * 2 + 1) * 6, dtype=tf.float32,",
   "                        shape=image_shape)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/ops_test.py",
  "condition": [
   "    images = tf.constant(",
   "        list(range(1, 2 * 2 * 4 + 1)) * 2, dtype=tf.float32, shape=image_shape)"
  ],
  "consequent": [
   "    images = tf.constant(range(1, 2 * 2 * 4  + 1) * 2, dtype=tf.float32,",
   "                         shape=image_shape)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/spatial_transform_ops.py",
  "condition": [
   "  length = end - start"
  ],
  "consequent": [
   "  length = tf.cast(end - start, dtype=tf.float32)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/spatial_transform_ops.py",
  "condition": [
   "  num_boxes = tf.shape(feature_grid_y)[1]"
  ],
  "consequent": [
   "  assert feature_grid_y.shape[0] == feature_grid_x.shape[0]",
   "  assert feature_grid_y.shape[1] == feature_grid_x.shape[1]",
   "  num_boxes = feature_grid_y.shape[1].value"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/spatial_transform_ops.py",
  "condition": [
   "  batch_size = tf.shape(feature_grid_y)[0]"
  ],
  "consequent": [
   "  batch_size = feature_grid_y.shape[0].value"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/spatial_transform_ops.py",
  "condition": [
   "  size_y = tf.shape(feature_grid_y)[2]"
  ],
  "consequent": [
   "  size_y = feature_grid_y.shape[2]"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/spatial_transform_ops.py",
  "condition": [
   "  size_x = tf.shape(feature_grid_x)[2]"
  ],
  "consequent": [
   "  size_x = feature_grid_x.shape[2]"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/spatial_transform_ops.py",
  "condition": [
   "  heights = [tf.shape(feature)[1] for feature in features]"
  ],
  "consequent": [
   "  heights = [feature.shape[1].value for feature in features]"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/spatial_transform_ops.py",
  "condition": [
   "  widths = [tf.shape(feature)[2] for feature in features]"
  ],
  "consequent": [
   "  widths = [feature.shape[2].value for feature in features]"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/spatial_transform_ops.py",
  "condition": [
   "  max_height = tf.reduce_max(heights)"
  ],
  "consequent": [
   "  max_height = max(heights)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/spatial_transform_ops.py",
  "condition": [
   "  max_width = tf.reduce_max(widths)"
  ],
  "consequent": [
   "  max_width = max(widths)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/spatial_transform_ops.py",
  "condition": [
   "  true_feature_shapes = tf.stack([tf.shape(feature)[1:3]",
   "                                  for feature in features])"
  ],
  "consequent": [
   "  true_feature_shapes = tf.stack([feature.shape[1:3] for feature in features])"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/spatial_transform_ops.py",
  "condition": [
   "          tf.ones([1, tf.shape(tensor)[-1]], dtype=tensor.dtype), tensor"
  ],
  "consequent": [
   "          tf.ones([1, tensor.shape[-1].value], dtype=tensor.dtype), tensor"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/spatial_transform_ops.py",
  "condition": [
   "    batch_size = tf.shape(features)[0]",
   "    num_levels = features.get_shape().as_list()[1]",
   "    max_feature_height = tf.shape(features)[2]",
   "    max_feature_width = tf.shape(features)[3]",
   "    num_filters = features.get_shape().as_list()[4]"
  ],
  "consequent": [
   "    (batch_size, num_levels, max_feature_height, max_feature_width,",
   "     num_filters) = features.get_shape().as_list()"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/spatial_transform_ops.py",
  "condition": [
   "    num_boxes = tf.shape(boxes)[1]"
  ],
  "consequent": [
   "    _, num_boxes, _ = boxes.get_shape().as_list()"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/spatial_transform_ops.py",
  "condition": [
   "    box_levels = tf.zeros(tf.shape(boxes)[:2], dtype=tf.int32)"
  ],
  "consequent": [
   "    box_levels = tf.zeros(boxes.shape.as_list()[:2], dtype=tf.int32)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/variables_helper.py",
  "condition": [
   "  variables_to_ignore_patterns = list([fre for fre in filter_regex_list if fre])"
  ],
  "consequent": [
   "  variables_to_ignore_patterns = list(filter(None, filter_regex_list))"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/variables_helper.py",
  "condition": [
   "    return list(vars_in_ckpt.values())"
  ],
  "consequent": [
   "    return vars_in_ckpt.values()"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/variables_helper_test.py",
  "condition": [
   "    self.assertItemsEqual(list(out_variables.keys()), ['ckpt_weights'])"
  ],
  "consequent": [
   "    self.assertItemsEqual(out_variables.keys(), ['ckpt_weights'])"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/visualization_utils.py",
  "condition": [
   "            if classes[i] in six.viewkeys(category_index):"
  ],
  "consequent": [
   "            if classes[i] in category_index.keys():"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/visualization_utils.py",
  "condition": [
   "class EvalMetricOpsVisualization(six.with_metaclass(abc.ABCMeta, object)):"
  ],
  "consequent": [
   "class EvalMetricOpsVisualization(object):"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/visualization_utils_test.py",
  "condition": [
   "    _, update_op = metric_ops[next(six.iterkeys(metric_ops))]"
  ],
  "consequent": [
   "    _, update_op = metric_ops[metric_ops.keys()[0]]"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/visualization_utils_test.py",
  "condition": [
   "      for key, (value_op, _) in six.iteritems(metric_ops):"
  ],
  "consequent": [
   "      for key, (value_op, _) in metric_ops.iteritems():"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/visualization_utils_test.py",
  "condition": [
   "      for key, value_op in six.iteritems(value_ops_out):"
  ],
  "consequent": [
   "      for key, value_op in value_ops_out.iteritems():"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/visualization_utils_test.py",
  "condition": [
   "          six.b(''),"
  ],
  "consequent": [
   "          '',"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/vrd_evaluation.py",
  "condition": [
   "      logging.warning('No groundtruth for the image with id %s.', image_id)"
  ],
  "consequent": [
   "      logging.warn('No groundtruth for the image with id %s.', image_id)"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/vrd_evaluation.py",
  "condition": [
   "      for key, average_precision in six.iteritems(average_precisions):"
  ],
  "consequent": [
   "      for key, average_precision in average_precisions.iteritems():"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/vrd_evaluation.py",
  "condition": [
   "      for key, average_precision in six.iteritems(average_precisions):"
  ],
  "consequent": [
   "      for key, average_precision in average_precisions.iteritems():"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/vrd_evaluation.py",
  "condition": [
   "    first_box_key = next(six.iterkeys(groundtruth_box_tuples.dtype.fields))"
  ],
  "consequent": [
   "    first_box_key = groundtruth_box_tuples.dtype.fields.keys()[0]"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/vrd_evaluation.py",
  "condition": [
   "    first_box_key = next(six.iterkeys(detections_box_tuples.dtype.fields))"
  ],
  "consequent": [
   "    first_box_key = detections_box_tuples.dtype.fields.keys()[0]"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/vrd_evaluation.py",
  "condition": [
   "      logging.warning("
  ],
  "consequent": [
   "      logging.warn("
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/vrd_evaluation.py",
  "condition": [
   "      logging.warning('No ground truth instances')"
  ],
  "consequent": [
   "      logging.warn('No ground truth instances')"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/vrd_evaluation.py",
  "condition": [
   "    for relation_field_value, _ in (six.iteritems("
  ],
  "consequent": [
   "    for relation_field_value, _ in ("
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/vrd_evaluation.py",
  "condition": [
   "        self._num_gt_instances_per_relationship)):"
  ],
  "consequent": [
   "        self._num_gt_instances_per_relationship.iteritems()):"
  ]
 },
 {
  "sha": "fe748d4a4a1576b57c279014ac0ceb47344399c4",
  "author": "pkulzc",
  "created_at": "2019-07-16 01:50:58",
  "file_path": "research/object_detection/utils/vrd_evaluation.py",
  "condition": [
   "    self._mean_average_precision = np.mean(",
   "        list(self._average_precisions.values()))"
  ],
  "consequent": [
   "    self._mean_average_precision = np.mean(self._average_precisions.values())"
  ]
 },
 {
  "sha": "81123ebf39e2491791b5aa8b4f50d46c10a66223",
  "author": "Toby Boyd",
  "created_at": "2019-07-12 06:35:01",
  "file_path": "official/transformer/v2/transformer_benchmark.py",
  "condition": [
   "    FLAGS.train_steps = 20000 * 12"
  ],
  "consequent": [
   "    FLAGS.train_steps = 400000"
  ]
 },
 {
  "sha": "35620eaf6d13afad531ef384a789e35204bea47d",
  "author": "Toby Boyd",
  "created_at": "2019-07-12 04:46:10",
  "file_path": "official/transformer/v2/transformer_benchmark.py",
  "condition": [
   "      if 'bleu_uncased_history' in stats:",
   "        bleu_uncased_best = max(stats['bleu_uncased_history'],",
   "                                key=lambda x: x[1])",
   "        metrics.append({'name': 'bleu_uncased',"
  ],
  "consequent": [
   "      metrics.append({'name': 'bleu_uncased',"
  ]
 },
 {
  "sha": "35620eaf6d13afad531ef384a789e35204bea47d",
  "author": "Toby Boyd",
  "created_at": "2019-07-12 04:46:10",
  "file_path": "official/transformer/v2/transformer_benchmark.py",
  "condition": [
   "                        'value': bleu_uncased_best[1],",
   "                        'min_value': bleu_min,",
   "                        'max_value': bleu_max})",
   "        metrics.append({'name': 'bleu_best_score_iteration',",
   "                        'value': bleu_uncased_best[0]})",
   "        metrics.append({'name': 'bleu_uncased_last',",
   "                        'value': stats['bleu_uncased']})",
   "      else:",
   "        metrics.append({'name': 'bleu_uncased',",
   "                        'value': stats['bleu_uncased'],"
  ],
  "consequent": [
   "                      'value': stats['bleu_uncased'],"
  ]
 },
 {
  "sha": "35620eaf6d13afad531ef384a789e35204bea47d",
  "author": "Toby Boyd",
  "created_at": "2019-07-12 04:46:10",
  "file_path": "official/transformer/v2/transformer_benchmark.py",
  "condition": [
   "                        'min_value': bleu_min,"
  ],
  "consequent": [
   "                      'min_value': bleu_min,"
  ]
 },
 {
  "sha": "35620eaf6d13afad531ef384a789e35204bea47d",
  "author": "Toby Boyd",
  "created_at": "2019-07-12 04:46:10",
  "file_path": "official/transformer/v2/transformer_benchmark.py",
  "condition": [
   "                        'max_value': bleu_max})"
  ],
  "consequent": [
   "                      'max_value': bleu_max})"
  ]
 },
 {
  "sha": "35620eaf6d13afad531ef384a789e35204bea47d",
  "author": "Toby Boyd",
  "created_at": "2019-07-12 04:46:10",
  "file_path": "official/transformer/v2/transformer_benchmark.py",
  "condition": [
   "    FLAGS.batch_size = 2048"
  ],
  "consequent": [
   "    FLAGS.batch_size = 4096"
  ]
 },
 {
  "sha": "35620eaf6d13afad531ef384a789e35204bea47d",
  "author": "Toby Boyd",
  "created_at": "2019-07-12 04:46:10",
  "file_path": "official/transformer/v2/transformer_benchmark.py",
  "condition": [
   "    FLAGS.train_steps = 1000"
  ],
  "consequent": [
   "    FLAGS.train_steps = 100000"
  ]
 },
 {
  "sha": "35620eaf6d13afad531ef384a789e35204bea47d",
  "author": "Toby Boyd",
  "created_at": "2019-07-12 04:46:10",
  "file_path": "official/transformer/v2/transformer_benchmark.py",
  "condition": [
   "    FLAGS.steps_between_evals = 500"
  ],
  "consequent": [
   "    FLAGS.steps_between_evals = 5000"
  ]
 },
 {
  "sha": "35620eaf6d13afad531ef384a789e35204bea47d",
  "author": "Toby Boyd",
  "created_at": "2019-07-12 04:46:10",
  "file_path": "official/transformer/v2/transformer_main.py",
  "condition": [
   "        cased_score_history.append([i, cased_score])",
   "        uncased_score_history.append([i, uncased_score])"
  ],
  "consequent": [
   "",
   "      print(\"BLEU: uncased={}, cased={}\".format(uncased_score, cased_score))"
  ]
 },
 {
  "sha": "fa28535d2940adf24c5e668c4bdba46379286aec",
  "author": "Toby Boyd",
  "created_at": "2019-07-11 15:24:20",
  "file_path": "official/resnet/keras/resnet_cifar_model.py",
  "condition": [
   "  x = layers.Dense(classes,",
   "                   activation='softmax',",
   "                   kernel_initializer=initializers.RandomNormal(stddev=0.01),"
  ],
  "consequent": [
   "  x = layers.Dense(classes, activation='softmax',",
   "                   # kernel_initializer='he_normal',"
  ]
 },
 {
  "sha": "fa28535d2940adf24c5e668c4bdba46379286aec",
  "author": "Toby Boyd",
  "created_at": "2019-07-11 15:24:20",
  "file_path": "official/resnet/keras/resnet_model.py",
  "condition": [
   "  Args:"
  ],
  "consequent": [
   "  # Arguments"
  ]
 },
 {
  "sha": "fa28535d2940adf24c5e668c4bdba46379286aec",
  "author": "Toby Boyd",
  "created_at": "2019-07-11 15:24:20",
  "file_path": "official/resnet/keras/resnet_model.py",
  "condition": [
   "    input_tensor: input tensor"
  ],
  "consequent": [
   "      input_tensor: input tensor"
  ]
 },
 {
  "sha": "fa28535d2940adf24c5e668c4bdba46379286aec",
  "author": "Toby Boyd",
  "created_at": "2019-07-11 15:24:20",
  "file_path": "official/resnet/keras/resnet_model.py",
  "condition": [
   "    kernel_size: default 3, the kernel size of middle conv layer at main path"
  ],
  "consequent": [
   "      kernel_size: default 3, the kernel size of",
   "          middle conv layer at main path"
  ]
 },
 {
  "sha": "fa28535d2940adf24c5e668c4bdba46379286aec",
  "author": "Toby Boyd",
  "created_at": "2019-07-11 15:24:20",
  "file_path": "official/resnet/keras/resnet_model.py",
  "condition": [
   "    filters: list of integers, the filters of 3 conv layer at main path"
  ],
  "consequent": [
   "      filters: list of integers, the filters of 3 conv layer at main path"
  ]
 },
 {
  "sha": "fa28535d2940adf24c5e668c4bdba46379286aec",
  "author": "Toby Boyd",
  "created_at": "2019-07-11 15:24:20",
  "file_path": "official/resnet/keras/resnet_model.py",
  "condition": [
   "    stage: integer, current stage label, used for generating layer names"
  ],
  "consequent": [
   "      stage: integer, current stage label, used for generating layer names"
  ]
 },
 {
  "sha": "fa28535d2940adf24c5e668c4bdba46379286aec",
  "author": "Toby Boyd",
  "created_at": "2019-07-11 15:24:20",
  "file_path": "official/resnet/keras/resnet_model.py",
  "condition": [
   "    block: 'a','b'..., current block label, used for generating layer names"
  ],
  "consequent": [
   "      block: 'a','b'..., current block label, used for generating layer names"
  ]
 },
 {
  "sha": "fa28535d2940adf24c5e668c4bdba46379286aec",
  "author": "Toby Boyd",
  "created_at": "2019-07-11 15:24:20",
  "file_path": "official/resnet/keras/resnet_model.py",
  "condition": [
   "  Returns:"
  ],
  "consequent": [
   "  # Returns"
  ]
 },
 {
  "sha": "fa28535d2940adf24c5e668c4bdba46379286aec",
  "author": "Toby Boyd",
  "created_at": "2019-07-11 15:24:20",
  "file_path": "official/resnet/keras/resnet_model.py",
  "condition": [
   "    Output tensor for the block."
  ],
  "consequent": [
   "      Output tensor for the block."
  ]
 },
 {
  "sha": "f4b02d150ebbe62286bc0509cbaa486c492c7d88",
  "author": "Toby Boyd",
  "created_at": "2019-07-11 13:00:39",
  "file_path": "official/utils/misc/keras_utils.py",
  "condition": [
   "    # Logs start of step 1 then end of each step based on log_steps interval."
  ],
  "consequent": [
   "    # Logs start of step 0 then end of each step based on log_steps interval."
  ]
 },
 {
  "sha": "f4b02d150ebbe62286bc0509cbaa486c492c7d88",
  "author": "Toby Boyd",
  "created_at": "2019-07-11 13:00:39",
  "file_path": "official/utils/misc/keras_utils.py",
  "condition": [
   "    self.global_steps += 1",
   "    if self.global_steps == 1:"
  ],
  "consequent": [
   "    if self.record_batch:",
   "      timestamp = time.time()"
  ]
 },
 {
  "sha": "f4b02d150ebbe62286bc0509cbaa486c492c7d88",
  "author": "Toby Boyd",
  "created_at": "2019-07-11 13:00:39",
  "file_path": "official/utils/misc/keras_utils.py",
  "condition": [
   "      self.start_time = time.time()"
  ],
  "consequent": [
   "      self.start_time = timestamp",
   "      self.record_batch = False",
   "      if batch == 0:"
  ]
 },
 {
  "sha": "f4b02d150ebbe62286bc0509cbaa486c492c7d88",
  "author": "Toby Boyd",
  "created_at": "2019-07-11 13:00:39",
  "file_path": "official/utils/misc/keras_utils.py",
  "condition": [
   "      self.timestamp_log.append(BatchTimestamp(self.global_steps,"
  ],
  "consequent": [
   "        self.timestamp_log.append(BatchTimestamp(batch, timestamp))"
  ]
 },
 {
  "sha": "f4b02d150ebbe62286bc0509cbaa486c492c7d88",
  "author": "Toby Boyd",
  "created_at": "2019-07-11 13:00:39",
  "file_path": "official/utils/misc/keras_utils.py",
  "condition": [
   "    \"\"\"Records elapse time of the batch and calculates examples per second.\"\"\"",
   "    if self.global_steps % self.log_steps == 0:"
  ],
  "consequent": [
   "    if batch % self.log_steps == 0:"
  ]
 },
 {
  "sha": "f4b02d150ebbe62286bc0509cbaa486c492c7d88",
  "author": "Toby Boyd",
  "created_at": "2019-07-11 13:00:39",
  "file_path": "official/utils/misc/keras_utils.py",
  "condition": [
   "      self.timestamp_log.append(BatchTimestamp(self.global_steps, timestamp))"
  ],
  "consequent": [
   "      if batch != 0:",
   "        self.record_batch = True",
   "        self.timestamp_log.append(BatchTimestamp(batch, timestamp))"
  ]
 },
 {
  "sha": "f4b02d150ebbe62286bc0509cbaa486c492c7d88",
  "author": "Toby Boyd",
  "created_at": "2019-07-11 13:00:39",
  "file_path": "official/utils/misc/keras_utils.py",
  "condition": [
   "      tf.compat.v1.logging.info("
  ],
  "consequent": [
   "        tf.compat.v1.logging.info("
  ]
 },
 {
  "sha": "f4b02d150ebbe62286bc0509cbaa486c492c7d88",
  "author": "Toby Boyd",
  "created_at": "2019-07-11 13:00:39",
  "file_path": "official/utils/misc/keras_utils.py",
  "condition": [
   "          \"BenchmarkMetric: {'global step':%d, 'time_taken': %f,\""
  ],
  "consequent": [
   "            \"BenchmarkMetric: {'num_batches':%d, 'time_taken': %f,\""
  ]
 },
 {
  "sha": "f4b02d150ebbe62286bc0509cbaa486c492c7d88",
  "author": "Toby Boyd",
  "created_at": "2019-07-11 13:00:39",
  "file_path": "official/utils/misc/keras_utils.py",
  "condition": [
   "          \"'examples_per_second': %f}\" %"
  ],
  "consequent": [
   "            \"'examples_per_second': %f}\" %"
  ]
 },
 {
  "sha": "f4b02d150ebbe62286bc0509cbaa486c492c7d88",
  "author": "Toby Boyd",
  "created_at": "2019-07-11 13:00:39",
  "file_path": "official/utils/misc/keras_utils.py",
  "condition": [
   "          (self.global_steps, elapsed_time, examples_per_second))"
  ],
  "consequent": [
   "            (batch, elapsed_time, examples_per_second))"
  ]
 },
 {
  "sha": "2ed43e66c4507798c5a3be0f4cc98c57ebb112a2",
  "author": "Haoyu Zhang",
  "created_at": "2019-07-10 08:00:10",
  "file_path": "official/resnet/keras/keras_cifar_main.py",
  "condition": [
   "      num_gpus=flags_obj.num_gpus,"
  ],
  "consequent": [
   "      num_gpus=flags_obj.num_gpus)"
  ]
 },
 {
  "sha": "2ed43e66c4507798c5a3be0f4cc98c57ebb112a2",
  "author": "Haoyu Zhang",
  "created_at": "2019-07-10 08:00:10",
  "file_path": "official/resnet/keras/keras_cifar_main.py",
  "condition": [
   "      parse_record_fn=parse_record_keras,",
   "      datasets_num_private_threads=flags_obj.datasets_num_private_threads,",
   "      dtype=dtype)",
   "",
   "  eval_input_dataset = None",
   "  if not flags_obj.skip_eval:",
   "    eval_input_dataset = input_fn(",
   "        is_training=False,",
   "        data_dir=flags_obj.data_dir,",
   "        batch_size=flags_obj.batch_size,",
   "        num_epochs=flags_obj.train_epochs,",
   "        parse_record_fn=parse_record_keras)"
  ],
  "consequent": [
   "      parse_record_fn=parse_record_keras)",
   "",
   "  eval_input_dataset = input_fn(",
   "      is_training=False,",
   "      data_dir=flags_obj.data_dir,",
   "      batch_size=flags_obj.batch_size,",
   "      num_epochs=flags_obj.train_epochs,",
   "      parse_record_fn=parse_record_keras)"
  ]
 },
 {
  "sha": "2ed43e66c4507798c5a3be0f4cc98c57ebb112a2",
  "author": "Haoyu Zhang",
  "created_at": "2019-07-10 08:00:10",
  "file_path": "official/resnet/keras/keras_cifar_main.py",
  "condition": [
   "                  metrics=(['categorical_accuracy']",
   "                           if flags_obj.report_accuracy_metrics else None),",
   "                  run_eagerly=flags_obj.run_eagerly)"
  ],
  "consequent": [
   "                  run_eagerly=flags_obj.run_eagerly,",
   "                  metrics=['categorical_accuracy'])"
  ]
 },
 {
  "sha": "2ed43e66c4507798c5a3be0f4cc98c57ebb112a2",
  "author": "Haoyu Zhang",
  "created_at": "2019-07-10 08:00:10",
  "file_path": "official/resnet/keras/resnet_cifar_model.py",
  "condition": [
   "  if backend.image_data_format() == 'channels_last':"
  ],
  "consequent": [
   "  if tf.keras.backend.image_data_format() == 'channels_last':"
  ]
 },
 {
  "sha": "2ed43e66c4507798c5a3be0f4cc98c57ebb112a2",
  "author": "Haoyu Zhang",
  "created_at": "2019-07-10 08:00:10",
  "file_path": "official/resnet/keras/resnet_cifar_model.py",
  "condition": [
   "  x = layers.Conv2D(filters1, kernel_size,"
  ],
  "consequent": [
   "  x = tf.keras.layers.Conv2D(filters1, kernel_size,"
  ]
 },
 {
  "sha": "2ed43e66c4507798c5a3be0f4cc98c57ebb112a2",
  "author": "Haoyu Zhang",
  "created_at": "2019-07-10 08:00:10",
  "file_path": "official/resnet/keras/resnet_cifar_model.py",
  "condition": [
   "                    padding='same', use_bias=False,"
  ],
  "consequent": [
   "                             padding='same',"
  ]
 },
 {
  "sha": "2ed43e66c4507798c5a3be0f4cc98c57ebb112a2",
  "author": "Haoyu Zhang",
  "created_at": "2019-07-10 08:00:10",
  "file_path": "official/resnet/keras/resnet_cifar_model.py",
  "condition": [
   "                    kernel_initializer='he_normal',"
  ],
  "consequent": [
   "                             kernel_initializer='he_normal',",
   "                             kernel_regularizer="
  ]
 },
 {
  "sha": "2ed43e66c4507798c5a3be0f4cc98c57ebb112a2",
  "author": "Haoyu Zhang",
  "created_at": "2019-07-10 08:00:10",
  "file_path": "official/resnet/keras/resnet_cifar_model.py",
  "condition": [
   "                    kernel_regularizer=regularizers.l2(L2_WEIGHT_DECAY),"
  ],
  "consequent": [
   "                             tf.keras.regularizers.l2(L2_WEIGHT_DECAY),",
   "                             bias_regularizer=",
   "                             tf.keras.regularizers.l2(L2_WEIGHT_DECAY),"
  ]
 },
 {
  "sha": "2ed43e66c4507798c5a3be0f4cc98c57ebb112a2",
  "author": "Haoyu Zhang",
  "created_at": "2019-07-10 08:00:10",
  "file_path": "official/resnet/keras/resnet_cifar_model.py",
  "condition": [
   "                    name=conv_name_base + '2a')(input_tensor)"
  ],
  "consequent": [
   "                             name=conv_name_base + '2a')(input_tensor)"
  ]
 },
 {
  "sha": "2ed43e66c4507798c5a3be0f4cc98c57ebb112a2",
  "author": "Haoyu Zhang",
  "created_at": "2019-07-10 08:00:10",
  "file_path": "official/resnet/keras/resnet_cifar_model.py",
  "condition": [
   "  x = layers.BatchNormalization("
  ],
  "consequent": [
   "  x = tf.keras.layers.BatchNormalization(axis=bn_axis,"
  ]
 },
 {
  "sha": "2ed43e66c4507798c5a3be0f4cc98c57ebb112a2",
  "author": "Haoyu Zhang",
  "created_at": "2019-07-10 08:00:10",
  "file_path": "official/resnet/keras/resnet_cifar_model.py",
  "condition": [
   "      axis=bn_axis, momentum=BATCH_NORM_DECAY, epsilon=BATCH_NORM_EPSILON,",
   "      name=bn_name_base + '2a')(x, training=training)"
  ],
  "consequent": [
   "                                         name=bn_name_base + '2a',",
   "                                         momentum=BATCH_NORM_DECAY,",
   "                                         epsilon=BATCH_NORM_EPSILON)(",
   "                                             x, training=training)"
  ]
 },
 {
  "sha": "2ed43e66c4507798c5a3be0f4cc98c57ebb112a2",
  "author": "Haoyu Zhang",
  "created_at": "2019-07-10 08:00:10",
  "file_path": "official/resnet/keras/resnet_cifar_model.py",
  "condition": [
   "  x = layers.Activation('relu')(x)"
  ],
  "consequent": [
   "  x = tf.keras.layers.Activation('relu')(x)"
  ]
 },
 {
  "sha": "2ed43e66c4507798c5a3be0f4cc98c57ebb112a2",
  "author": "Haoyu Zhang",
  "created_at": "2019-07-10 08:00:10",
  "file_path": "official/resnet/keras/resnet_cifar_model.py",
  "condition": [
   "  x = layers.Conv2D(filters2, kernel_size,"
  ],
  "consequent": [
   "  x = tf.keras.layers.Conv2D(filters2, kernel_size,"
  ]
 },
 {
  "sha": "2ed43e66c4507798c5a3be0f4cc98c57ebb112a2",
  "author": "Haoyu Zhang",
  "created_at": "2019-07-10 08:00:10",
  "file_path": "official/resnet/keras/resnet_cifar_model.py",
  "condition": [
   "                    padding='same', use_bias=False,"
  ],
  "consequent": [
   "                             padding='same',"
  ]
 },
 {
  "sha": "2ed43e66c4507798c5a3be0f4cc98c57ebb112a2",
  "author": "Haoyu Zhang",
  "created_at": "2019-07-10 08:00:10",
  "file_path": "official/resnet/keras/resnet_cifar_model.py",
  "condition": [
   "                    kernel_initializer='he_normal',"
  ],
  "consequent": [
   "                             kernel_initializer='he_normal',",
   "                             kernel_regularizer="
  ]
 },
 {
  "sha": "2ed43e66c4507798c5a3be0f4cc98c57ebb112a2",
  "author": "Haoyu Zhang",
  "created_at": "2019-07-10 08:00:10",
  "file_path": "official/resnet/keras/resnet_cifar_model.py",
  "condition": [
   "                    kernel_regularizer=regularizers.l2(L2_WEIGHT_DECAY),"
  ],
  "consequent": [
   "                             tf.keras.regularizers.l2(L2_WEIGHT_DECAY),",
   "                             bias_regularizer=",
   "                             tf.keras.regularizers.l2(L2_WEIGHT_DECAY),"
  ]
 },
 {
  "sha": "2ed43e66c4507798c5a3be0f4cc98c57ebb112a2",
  "author": "Haoyu Zhang",
  "created_at": "2019-07-10 08:00:10",
  "file_path": "official/resnet/keras/resnet_cifar_model.py",
  "condition": [
   "                    name=conv_name_base + '2b')(x)"
  ],
  "consequent": [
   "                             name=conv_name_base + '2b')(x)"
  ]
 },
 {
  "sha": "2ed43e66c4507798c5a3be0f4cc98c57ebb112a2",
  "author": "Haoyu Zhang",
  "created_at": "2019-07-10 08:00:10",
  "file_path": "official/resnet/keras/resnet_cifar_model.py",
  "condition": [
   "  x = layers.BatchNormalization("
  ],
  "consequent": [
   "  x = tf.keras.layers.BatchNormalization(axis=bn_axis,"
  ]
 },
 {
  "sha": "2ed43e66c4507798c5a3be0f4cc98c57ebb112a2",
  "author": "Haoyu Zhang",
  "created_at": "2019-07-10 08:00:10",
  "file_path": "official/resnet/keras/resnet_cifar_model.py",
  "condition": [
   "      axis=bn_axis, momentum=BATCH_NORM_DECAY, epsilon=BATCH_NORM_EPSILON,",
   "      name=bn_name_base + '2b')(x, training=training)"
  ],
  "consequent": [
   "                                         name=bn_name_base + '2b',",
   "                                         momentum=BATCH_NORM_DECAY,",
   "                                         epsilon=BATCH_NORM_EPSILON)(",
   "                                             x, training=training)"
  ]
 },
 {
  "sha": "2ed43e66c4507798c5a3be0f4cc98c57ebb112a2",
  "author": "Haoyu Zhang",
  "created_at": "2019-07-10 08:00:10",
  "file_path": "official/resnet/keras/resnet_cifar_model.py",
  "condition": [
   "  x = layers.add([x, input_tensor])"
  ],
  "consequent": [
   "  x = tf.keras.layers.add([x, input_tensor])"
  ]
 },
 {
  "sha": "2ed43e66c4507798c5a3be0f4cc98c57ebb112a2",
  "author": "Haoyu Zhang",
  "created_at": "2019-07-10 08:00:10",
  "file_path": "official/resnet/keras/resnet_cifar_model.py",
  "condition": [
   "  x = layers.Activation('relu')(x)"
  ],
  "consequent": [
   "  x = tf.keras.layers.Activation('relu')(x)"
  ]
 },
 {
  "sha": "2ed43e66c4507798c5a3be0f4cc98c57ebb112a2",
  "author": "Haoyu Zhang",
  "created_at": "2019-07-10 08:00:10",
  "file_path": "official/resnet/keras/resnet_cifar_model.py",
  "condition": [
   "  x = layers.Conv2D(filters1, kernel_size, strides=strides,"
  ],
  "consequent": [
   "  x = tf.keras.layers.Conv2D(filters1, kernel_size, strides=strides,",
   "                             padding='same',"
  ]
 },
 {
  "sha": "2ed43e66c4507798c5a3be0f4cc98c57ebb112a2",
  "author": "Haoyu Zhang",
  "created_at": "2019-07-10 08:00:10",
  "file_path": "official/resnet/keras/resnet_cifar_model.py",
  "condition": [
   "                    padding='same', use_bias=False,",
   "                    kernel_initializer='he_normal',",
   "                    kernel_regularizer=regularizers.l2(L2_WEIGHT_DECAY),",
   "                    name=conv_name_base + '2a')(input_tensor)",
   "  x = layers.BatchNormalization(",
   "      axis=bn_axis, momentum=BATCH_NORM_DECAY, epsilon=BATCH_NORM_EPSILON,",
   "      name=bn_name_base + '2a')(x, training=training)",
   "  x = layers.Activation('relu')(x)",
   "",
   "  x = layers.Conv2D(filters2, kernel_size, padding='same', use_bias=False,",
   "                    kernel_initializer='he_normal',",
   "                    kernel_regularizer=regularizers.l2(L2_WEIGHT_DECAY),",
   "                    name=conv_name_base + '2b')(x)",
   "  x = layers.BatchNormalization(",
   "      axis=bn_axis, momentum=BATCH_NORM_DECAY, epsilon=BATCH_NORM_EPSILON,",
   "      name=bn_name_base + '2b')(x, training=training)",
   "",
   "  shortcut = layers.Conv2D(filters2, (1, 1), strides=strides, use_bias=False,",
   "                           kernel_initializer='he_normal',"
  ],
  "consequent": [
   "                             kernel_initializer='he_normal',",
   "                             kernel_regularizer="
  ]
 },
 {
  "sha": "2ed43e66c4507798c5a3be0f4cc98c57ebb112a2",
  "author": "Haoyu Zhang",
  "created_at": "2019-07-10 08:00:10",
  "file_path": "official/resnet/keras/resnet_cifar_model.py",
  "condition": [
   "                           kernel_regularizer=regularizers.l2(L2_WEIGHT_DECAY),"
  ],
  "consequent": [
   "                             tf.keras.regularizers.l2(L2_WEIGHT_DECAY),",
   "                             bias_regularizer=",
   "                             tf.keras.regularizers.l2(L2_WEIGHT_DECAY),"
  ]
 },
 {
  "sha": "2ed43e66c4507798c5a3be0f4cc98c57ebb112a2",
  "author": "Haoyu Zhang",
  "created_at": "2019-07-10 08:00:10",
  "file_path": "official/resnet/keras/resnet_cifar_model.py",
  "condition": [
   "                           name=conv_name_base + '1')(input_tensor)"
  ],
  "consequent": [
   "                             name=conv_name_base + '2a')(input_tensor)",
   "  x = tf.keras.layers.BatchNormalization(axis=bn_axis,",
   "                                         name=bn_name_base + '2a',",
   "                                         momentum=BATCH_NORM_DECAY,",
   "                                         epsilon=BATCH_NORM_EPSILON)(",
   "                                             x, training=training)",
   "  x = tf.keras.layers.Activation('relu')(x)",
   "",
   "  x = tf.keras.layers.Conv2D(filters2, kernel_size, padding='same',",
   "                             kernel_initializer='he_normal',",
   "                             kernel_regularizer=",
   "                             tf.keras.regularizers.l2(L2_WEIGHT_DECAY),",
   "                             bias_regularizer=",
   "                             tf.keras.regularizers.l2(L2_WEIGHT_DECAY),",
   "                             name=conv_name_base + '2b')(x)",
   "  x = tf.keras.layers.BatchNormalization(axis=bn_axis,",
   "                                         name=bn_name_base + '2b',",
   "                                         momentum=BATCH_NORM_DECAY,",
   "                                         epsilon=BATCH_NORM_EPSILON)(",
   "                                             x, training=training)",
   "",
   "  shortcut = tf.keras.layers.Conv2D(filters2, (1, 1), strides=strides,",
   "                                    kernel_initializer='he_normal',",
   "                                    kernel_regularizer=",
   "                                    tf.keras.regularizers.l2(L2_WEIGHT_DECAY),",
   "                                    bias_regularizer=",
   "                                    tf.keras.regularizers.l2(L2_WEIGHT_DECAY),",
   "                                    name=conv_name_base + '1')(input_tensor)"
  ]
 },
 {
  "sha": "2ed43e66c4507798c5a3be0f4cc98c57ebb112a2",
  "author": "Haoyu Zhang",
  "created_at": "2019-07-10 08:00:10",
  "file_path": "official/resnet/keras/resnet_cifar_model.py",
  "condition": [
   "  shortcut = layers.BatchNormalization("
  ],
  "consequent": [
   "  shortcut = tf.keras.layers.BatchNormalization(",
   "      axis=bn_axis, name=bn_name_base + '1',"
  ]
 },
 {
  "sha": "2ed43e66c4507798c5a3be0f4cc98c57ebb112a2",
  "author": "Haoyu Zhang",
  "created_at": "2019-07-10 08:00:10",
  "file_path": "official/resnet/keras/resnet_cifar_model.py",
  "condition": [
   "      axis=bn_axis, momentum=BATCH_NORM_DECAY, epsilon=BATCH_NORM_EPSILON,"
  ],
  "consequent": [
   "      momentum=BATCH_NORM_DECAY, epsilon=BATCH_NORM_EPSILON)("
  ]
 },
 {
  "sha": "2ed43e66c4507798c5a3be0f4cc98c57ebb112a2",
  "author": "Haoyu Zhang",
  "created_at": "2019-07-10 08:00:10",
  "file_path": "official/resnet/keras/resnet_cifar_model.py",
  "condition": [
   "      name=bn_name_base + '1')(shortcut, training=training)"
  ],
  "consequent": [
   "          shortcut, training=training)"
  ]
 },
 {
  "sha": "2ed43e66c4507798c5a3be0f4cc98c57ebb112a2",
  "author": "Haoyu Zhang",
  "created_at": "2019-07-10 08:00:10",
  "file_path": "official/resnet/keras/resnet_cifar_model.py",
  "condition": [
   "  x = layers.add([x, shortcut])"
  ],
  "consequent": [
   "  x = tf.keras.layers.add([x, shortcut])"
  ]
 },
 {
  "sha": "2ed43e66c4507798c5a3be0f4cc98c57ebb112a2",
  "author": "Haoyu Zhang",
  "created_at": "2019-07-10 08:00:10",
  "file_path": "official/resnet/keras/resnet_cifar_model.py",
  "condition": [
   "  x = layers.Activation('relu')(x)"
  ],
  "consequent": [
   "  x = tf.keras.layers.Activation('relu')(x)"
  ]
 },
 {
  "sha": "2ed43e66c4507798c5a3be0f4cc98c57ebb112a2",
  "author": "Haoyu Zhang",
  "created_at": "2019-07-10 08:00:10",
  "file_path": "official/resnet/keras/resnet_cifar_model.py",
  "condition": [
   "  x = layers.ZeroPadding2D(padding=(1, 1), name='conv1_pad')(x)"
  ],
  "consequent": [
   "  x = tf.keras.layers.ZeroPadding2D(padding=(1, 1), name='conv1_pad')(x)"
  ]
 },
 {
  "sha": "2ed43e66c4507798c5a3be0f4cc98c57ebb112a2",
  "author": "Haoyu Zhang",
  "created_at": "2019-07-10 08:00:10",
  "file_path": "official/resnet/keras/resnet_cifar_model.py",
  "condition": [
   "  x = layers.Conv2D(16, (3, 3),"
  ],
  "consequent": [
   "  x = tf.keras.layers.Conv2D(16, (3, 3),"
  ]
 },
 {
  "sha": "2ed43e66c4507798c5a3be0f4cc98c57ebb112a2",
  "author": "Haoyu Zhang",
  "created_at": "2019-07-10 08:00:10",
  "file_path": "official/resnet/keras/resnet_cifar_model.py",
  "condition": [
   "                    strides=(1, 1),"
  ],
  "consequent": [
   "                             strides=(1, 1),"
  ]
 },
 {
  "sha": "2ed43e66c4507798c5a3be0f4cc98c57ebb112a2",
  "author": "Haoyu Zhang",
  "created_at": "2019-07-10 08:00:10",
  "file_path": "official/resnet/keras/resnet_cifar_model.py",
  "condition": [
   "                    padding='valid', use_bias=False,"
  ],
  "consequent": [
   "                             padding='valid',"
  ]
 },
 {
  "sha": "2ed43e66c4507798c5a3be0f4cc98c57ebb112a2",
  "author": "Haoyu Zhang",
  "created_at": "2019-07-10 08:00:10",
  "file_path": "official/resnet/keras/resnet_cifar_model.py",
  "condition": [
   "                    kernel_initializer='he_normal',"
  ],
  "consequent": [
   "                             kernel_initializer='he_normal',",
   "                             kernel_regularizer="
  ]
 },
 {
  "sha": "2ed43e66c4507798c5a3be0f4cc98c57ebb112a2",
  "author": "Haoyu Zhang",
  "created_at": "2019-07-10 08:00:10",
  "file_path": "official/resnet/keras/resnet_cifar_model.py",
  "condition": [
   "                    kernel_regularizer=regularizers.l2(L2_WEIGHT_DECAY),"
  ],
  "consequent": [
   "                             tf.keras.regularizers.l2(L2_WEIGHT_DECAY),",
   "                             bias_regularizer=",
   "                             tf.keras.regularizers.l2(L2_WEIGHT_DECAY),"
  ]
 },
 {
  "sha": "2ed43e66c4507798c5a3be0f4cc98c57ebb112a2",
  "author": "Haoyu Zhang",
  "created_at": "2019-07-10 08:00:10",
  "file_path": "official/resnet/keras/resnet_cifar_model.py",
  "condition": [
   "                    name='conv1')(x)"
  ],
  "consequent": [
   "                             name='conv1')(x)"
  ]
 },
 {
  "sha": "2ed43e66c4507798c5a3be0f4cc98c57ebb112a2",
  "author": "Haoyu Zhang",
  "created_at": "2019-07-10 08:00:10",
  "file_path": "official/resnet/keras/resnet_cifar_model.py",
  "condition": [
   "  x = layers.BatchNormalization(axis=bn_axis,"
  ],
  "consequent": [
   "  x = tf.keras.layers.BatchNormalization(axis=bn_axis, name='bn_conv1',"
  ]
 },
 {
  "sha": "2ed43e66c4507798c5a3be0f4cc98c57ebb112a2",
  "author": "Haoyu Zhang",
  "created_at": "2019-07-10 08:00:10",
  "file_path": "official/resnet/keras/resnet_cifar_model.py",
  "condition": [
   "                                momentum=BATCH_NORM_DECAY,"
  ],
  "consequent": [
   "                                         momentum=BATCH_NORM_DECAY,"
  ]
 },
 {
  "sha": "2ed43e66c4507798c5a3be0f4cc98c57ebb112a2",
  "author": "Haoyu Zhang",
  "created_at": "2019-07-10 08:00:10",
  "file_path": "official/resnet/keras/resnet_cifar_model.py",
  "condition": [
   "                                epsilon=BATCH_NORM_EPSILON,"
  ],
  "consequent": [
   "                                         epsilon=BATCH_NORM_EPSILON)("
  ]
 },
 {
  "sha": "2ed43e66c4507798c5a3be0f4cc98c57ebb112a2",
  "author": "Haoyu Zhang",
  "created_at": "2019-07-10 08:00:10",
  "file_path": "official/resnet/keras/resnet_cifar_model.py",
  "condition": [
   "                                name='bn_conv1',)(x, training=training)"
  ],
  "consequent": [
   "                                             x, training=training)"
  ]
 },
 {
  "sha": "2ed43e66c4507798c5a3be0f4cc98c57ebb112a2",
  "author": "Haoyu Zhang",
  "created_at": "2019-07-10 08:00:10",
  "file_path": "official/resnet/keras/resnet_cifar_model.py",
  "condition": [
   "  x = layers.Activation('relu')(x)"
  ],
  "consequent": [
   "  x = tf.keras.layers.Activation('relu')(x)"
  ]
 },
 {
  "sha": "2ed43e66c4507798c5a3be0f4cc98c57ebb112a2",
  "author": "Haoyu Zhang",
  "created_at": "2019-07-10 08:00:10",
  "file_path": "official/resnet/keras/resnet_cifar_model.py",
  "condition": [
   "  rm_axes = [1, 2] if backend.image_data_format() == 'channels_last' else [2, 3]",
   "  x = layers.Lambda(lambda x: backend.mean(x, rm_axes), name='reduce_mean')(x)",
   "  x = layers.Dense(classes, activation='softmax',"
  ],
  "consequent": [
   "  x = tf.keras.layers.GlobalAveragePooling2D(name='avg_pool')(x)",
   "  x = tf.keras.layers.Dense(classes, activation='softmax',"
  ]
 },
 {
  "sha": "2ed43e66c4507798c5a3be0f4cc98c57ebb112a2",
  "author": "Haoyu Zhang",
  "created_at": "2019-07-10 08:00:10",
  "file_path": "official/resnet/keras/resnet_cifar_model.py",
  "condition": [
   "                   # kernel_initializer='he_normal',"
  ],
  "consequent": [
   "                            kernel_initializer='he_normal',",
   "                            kernel_regularizer="
  ]
 },
 {
  "sha": "2ed43e66c4507798c5a3be0f4cc98c57ebb112a2",
  "author": "Haoyu Zhang",
  "created_at": "2019-07-10 08:00:10",
  "file_path": "official/resnet/keras/resnet_cifar_model.py",
  "condition": [
   "                   kernel_regularizer=regularizers.l2(L2_WEIGHT_DECAY),"
  ],
  "consequent": [
   "                            tf.keras.regularizers.l2(L2_WEIGHT_DECAY),",
   "                            bias_regularizer=",
   "                            tf.keras.regularizers.l2(L2_WEIGHT_DECAY),"
  ]
 },
 {
  "sha": "2ed43e66c4507798c5a3be0f4cc98c57ebb112a2",
  "author": "Haoyu Zhang",
  "created_at": "2019-07-10 08:00:10",
  "file_path": "official/resnet/keras/resnet_cifar_model.py",
  "condition": [
   "                   name='fc10')(x)"
  ],
  "consequent": [
   "                            name='fc10')(x)"
  ]
 },
 {
  "sha": "2fd76007cf3d51f0a0e92321787a10a5b125b7c4",
  "author": "David Andersen",
  "created_at": "2019-07-10 04:26:39",
  "file_path": "research/adversarial_crypto/train_eval.py",
  "condition": [
   "  as_int = tf.random.uniform("
  ],
  "consequent": [
   "  as_int = tf.random_uniform("
  ]
 },
 {
  "sha": "2fd76007cf3d51f0a0e92321787a10a5b125b7c4",
  "author": "David Andersen",
  "created_at": "2019-07-10 04:26:39",
  "file_path": "research/adversarial_crypto/train_eval.py",
  "condition": [
   "    batch_size = tf.compat.v1.placeholder_with_default(FLAGS.batch_size, shape=[])"
  ],
  "consequent": [
   "    batch_size = tf.placeholder_with_default(FLAGS.batch_size, shape=[])"
  ]
 },
 {
  "sha": "2fd76007cf3d51f0a0e92321787a10a5b125b7c4",
  "author": "David Andersen",
  "created_at": "2019-07-10 04:26:39",
  "file_path": "research/adversarial_crypto/train_eval.py",
  "condition": [
   "      fc = tf.expand_dims(fc, 2) # 2D"
  ],
  "consequent": [
   "      fc = tf.expand_dims(fc, 2)"
  ]
 },
 {
  "sha": "2fd76007cf3d51f0a0e92321787a10a5b125b7c4",
  "author": "David Andersen",
  "created_at": "2019-07-10 04:26:39",
  "file_path": "research/adversarial_crypto/train_eval.py",
  "condition": [
   "        *[w.initializer for w in tf.compat.v1.get_collection('eve')])"
  ],
  "consequent": [
   "        *[w.initializer for w in tf.get_collection('eve')])"
  ]
 },
 {
  "sha": "2fd76007cf3d51f0a0e92321787a10a5b125b7c4",
  "author": "David Andersen",
  "created_at": "2019-07-10 04:26:39",
  "file_path": "research/adversarial_crypto/train_eval.py",
  "condition": [
   "    optimizer = tf.compat.v1.train.AdamOptimizer(learning_rate=FLAGS.learning_rate)"
  ],
  "consequent": [
   "    optimizer = tf.train.AdamOptimizer(learning_rate=FLAGS.learning_rate)"
  ]
 },
 {
  "sha": "2fd76007cf3d51f0a0e92321787a10a5b125b7c4",
  "author": "David Andersen",
  "created_at": "2019-07-10 04:26:39",
  "file_path": "research/adversarial_crypto/train_eval.py",
  "condition": [
   "        self.eve_loss, var_list=tf.compat.v1.get_collection('eve'))"
  ],
  "consequent": [
   "        self.eve_loss, var_list=tf.get_collection('eve'))"
  ]
 },
 {
  "sha": "2fd76007cf3d51f0a0e92321787a10a5b125b7c4",
  "author": "David Andersen",
  "created_at": "2019-07-10 04:26:39",
  "file_path": "research/adversarial_crypto/train_eval.py",
  "condition": [
   "        var_list=(tf.compat.v1.get_collection('alice') + tf.compat.v1.get_collection('bob')))"
  ],
  "consequent": [
   "        var_list=(tf.get_collection('alice') + tf.get_collection('bob')))"
  ]
 },
 {
  "sha": "2fd76007cf3d51f0a0e92321787a10a5b125b7c4",
  "author": "David Andersen",
  "created_at": "2019-07-10 04:26:39",
  "file_path": "research/adversarial_crypto/train_eval.py",
  "condition": [
   "  init = tf.compat.v1.global_variables_initializer()"
  ],
  "consequent": [
   "  init = tf.global_variables_initializer()"
  ]
 },
 {
  "sha": "2fd76007cf3d51f0a0e92321787a10a5b125b7c4",
  "author": "David Andersen",
  "created_at": "2019-07-10 04:26:39",
  "file_path": "research/adversarial_crypto/train_eval.py",
  "condition": [
   "  with tf.compat.v1.Session() as s:"
  ],
  "consequent": [
   "  with tf.Session() as s:"
  ]
 },
 {
  "sha": "2fd76007cf3d51f0a0e92321787a10a5b125b7c4",
  "author": "David Andersen",
  "created_at": "2019-07-10 04:26:39",
  "file_path": "research/adversarial_crypto/train_eval.py",
  "condition": [
   "  tf.compat.v1.app.run()"
  ],
  "consequent": [
   "  tf.app.run()"
  ]
 },
 {
  "sha": "18e477c6dabc4b969b3ffd149366510af86ef48a",
  "author": "Toby Boyd",
  "created_at": "2019-07-09 07:48:17",
  "file_path": "official/recommendation/ncf_keras_benchmark.py",
  "condition": [
   "  def benchmark_1_gpu_no_dist_strat_early_stop(self):"
  ],
  "consequent": [
   "  def benchmark_1_gpu_no_dist_strat_run_eagerly_early_stop(self):"
  ]
 },
 {
  "sha": "18e477c6dabc4b969b3ffd149366510af86ef48a",
  "author": "Toby Boyd",
  "created_at": "2019-07-09 07:48:17",
  "file_path": "official/recommendation/ncf_keras_benchmark.py",
  "condition": [
   "#############################################",
   "# Tests below with mlperf in the test name are of two types",
   "#  1) 1 GPU tests are based on MLPerf 0.5 and the TensorFlow pulled submission.",
   "#  2) 8 GPU tests are based on MLPerf 0.5 and use NVIDIA's hyper parameters.",
   "#",
   "# The purpose of both is to get a number to compare to existing results. To do",
   "# this the number of epochs is held constant rather than a race to a given",
   "# accuracy. The accuracy validation is done by the \"early_stop\" tests.",
   "#############################################"
  ],
  "consequent": [
   "  def benchmark_1_gpu_ctl_mlperf_like(self):",
   "    \"\"\"1-GPU test to compare Google implementation with MLPerf 0.5.",
   "",
   "       Using similar rules as MLPerf 0.5",
   "       - Using Google's convergence hparams as base for 1-GPU test.",
   "       - Fixed the number of epochs to 7, to remove the perf variance.",
   "       - MLPerf submission consistently converges in 7 epochs.",
   "    \"\"\"",
   "    self._setup()",
   "    FLAGS.keras_use_ctl = True",
   "    FLAGS.train_epochs = 7",
   "    self._run_and_report_benchmark()"
  ]
 },
 {
  "sha": "18e477c6dabc4b969b3ffd149366510af86ef48a",
  "author": "Toby Boyd",
  "created_at": "2019-07-09 07:48:17",
  "file_path": "official/recommendation/ncf_keras_benchmark.py",
  "condition": [
   "    \"\"\"1 GPU using keras fit/compile.\"\"\""
  ],
  "consequent": [
   "    \"\"\"1-GPU MLPerf like test with compile/fit version.\"\"\""
  ]
 },
 {
  "sha": "18e477c6dabc4b969b3ffd149366510af86ef48a",
  "author": "Toby Boyd",
  "created_at": "2019-07-09 07:48:17",
  "file_path": "official/recommendation/ncf_keras_benchmark.py",
  "condition": [
   "    \"\"\"1 GPU using compile/fit without dist_strat.\"\"\""
  ],
  "consequent": [
   "    \"\"\"1-GPU MLPerf like test with compile/fit version without dist_strat.\"\"\""
  ]
 },
 {
  "sha": "18e477c6dabc4b969b3ffd149366510af86ef48a",
  "author": "Toby Boyd",
  "created_at": "2019-07-09 07:48:17",
  "file_path": "official/recommendation/ncf_keras_benchmark.py",
  "condition": [
   "    \"\"\"1 GPU using compile/fit with XLA.\"\"\""
  ],
  "consequent": [
   "    \"\"\"1-GPU MLPerf like test with compile/fit version w/xla.\"\"\""
  ]
 },
 {
  "sha": "18e477c6dabc4b969b3ffd149366510af86ef48a",
  "author": "Toby Boyd",
  "created_at": "2019-07-09 07:48:17",
  "file_path": "official/recommendation/ncf_keras_benchmark.py",
  "condition": [
   "  def benchmark_1_gpu_ctl_mlperf_like(self):"
  ],
  "consequent": [
   "  def benchmark_8_gpu_ctl_mlperf_like(self):",
   "    \"\"\"8 GPU test meant to compare Google implementation."
  ]
 },
 {
  "sha": "18e477c6dabc4b969b3ffd149366510af86ef48a",
  "author": "Toby Boyd",
  "created_at": "2019-07-09 07:48:17",
  "file_path": "official/recommendation/ncf_keras_benchmark.py",
  "condition": [
   "  def benchmark_xla_1_gpu_ctl_mlperf_like(self):",
   "    \"\"\"1 GPU using CTL with XLA.\"\"\""
  ],
  "consequent": [
   "       MLPerf 0.5 top line submission using the",
   "       - hyper-parameters from the winning MLPerf0.5 submission.",
   "       - Using similar rules as MLPerf0.5",
   "       - Fixed epochs to MLPerf submission's convergence on 17 epochs",
   "    \"\"\""
  ]
 },
 {
  "sha": "18e477c6dabc4b969b3ffd149366510af86ef48a",
  "author": "Toby Boyd",
  "created_at": "2019-07-09 07:48:17",
  "file_path": "official/recommendation/ncf_keras_benchmark.py",
  "condition": [
   "    FLAGS.keras_use_ctl = True",
   "    FLAGS.enable_xla = True"
  ],
  "consequent": [
   "    FLAGS.keras_use_ctl = True"
  ]
 },
 {
  "sha": "18e477c6dabc4b969b3ffd149366510af86ef48a",
  "author": "Toby Boyd",
  "created_at": "2019-07-09 07:48:17",
  "file_path": "official/recommendation/ncf_keras_benchmark.py",
  "condition": [
   "  def benchmark_xla_8_gpu_mlperf_like(self):"
  ],
  "consequent": [
   "  def benchmark_8_gpu_mlperf_like(self):"
  ]
 },
 {
  "sha": "18e477c6dabc4b969b3ffd149366510af86ef48a",
  "author": "Toby Boyd",
  "created_at": "2019-07-09 07:48:17",
  "file_path": "official/recommendation/ncf_keras_benchmark.py",
  "condition": [
   "    \"\"\"8 GPU using keras fit/compile with XLA.\"\"\""
  ],
  "consequent": [
   "    \"\"\"8 GPU test meant to compare Google implementation",
   "       with MLperf top line submission using the",
   "       hyper-parameters from the winning MLPerf0.5 submission.",
   "       Using similar rules as MLPerf0.5",
   "       Fixed epochs to MLPerf sumbmission's convergnce on 17 epochs",
   "    \"\"\""
  ]
 },
 {
  "sha": "cf1a276a21f02f00cd9e867bcc2c0a521a75a280",
  "author": "Toby Boyd",
  "created_at": "2019-07-09 05:29:10",
  "file_path": "official/recommendation/ncf_keras_main.py",
  "condition": [
   "        grads = neumf_model.sparse_to_dense_grads(",
   "            list(zip(grads, keras_model.trainable_variables)))"
  ],
  "consequent": [
   "        grads = neumf_model.sparse_to_dense_grads(list(zip(grads, keras_model.trainable_variables)))"
  ]
 },
 {
  "sha": "cf1a276a21f02f00cd9e867bcc2c0a521a75a280",
  "author": "Toby Boyd",
  "created_at": "2019-07-09 05:29:10",
  "file_path": "official/transformer/v2/transformer_benchmark.py",
  "condition": [
   "    FLAGS.model_dir = self._get_model_dir('benchmark_8_gpu_fp16')"
  ],
  "consequent": [
   "    FLAGS.model_dir = self._get_model_dir('benchmark_8_gpu')",
   "    self._run_and_report_benchmark(total_batch_size=FLAGS.batch_size,",
   "                                   log_steps=FLAGS.log_steps,",
   "                                   bleu_min=28,",
   "                                   bleu_max=29)",
   "",
   "  def benchmark_8_gpu_static_batch(self):",
   "    \"\"\"Benchmark 8 gpu.",
   "",
   "      Should converge to 28.4 BLEU (uncased). This has not be verified yet.\"",
   "    \"\"\"",
   "    self._setup()",
   "    FLAGS.num_gpus = 8",
   "    FLAGS.data_dir = self.train_data_dir",
   "    FLAGS.vocab_file = self.vocab_file",
   "    # Sets values directly to avoid validation check.",
   "    FLAGS['bleu_source'].value = self.bleu_source",
   "    FLAGS['bleu_ref'].value = self.bleu_ref",
   "    FLAGS.param_set = 'big'",
   "    FLAGS.batch_size = 3072*8",
   "    FLAGS.static_batch = True",
   "    FLAGS.max_length = 64",
   "    FLAGS.train_steps = 400000",
   "    FLAGS.steps_between_evals = 20000",
   "    FLAGS.model_dir = self._get_model_dir('benchmark_8_gpu_static_batch')"
  ]
 },
 {
  "sha": "cad067d8097bbd5b4e091ff862dfe2e076dbe726",
  "author": "Yang Liu",
  "created_at": "2019-07-09 05:28:44",
  "file_path": "tutorials/image/cifar10/cifar10_eval.py",
  "condition": [
   "    images, labels = cifar10.inputs(eval_data=FLAGS.eval_data)"
  ],
  "consequent": [
   "    eval_data = FLAGS.eval_data == 'test'",
   "    images, labels = cifar10.inputs(eval_data=eval_data)"
  ]
 },
 {
  "sha": "ddbf38334a8a2d4e469d72fc4fde22c8b794680e",
  "author": "Yuhao Zhang",
  "created_at": "2019-07-09 02:58:17",
  "file_path": "research/deep_speech/deep_speech.py",
  "condition": [
   "  distribution_strategy = distribution_utils.get_distribution_strategy(num_gpus=num_gpus)"
  ],
  "consequent": [
   "  distribution_strategy = distribution_utils.get_distribution_strategy(num_gpus)"
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/benchmark/benchmark_uploader.py",
  "condition": [
   "    with tf.io.gfile.GFile(run_json_file) as f:"
  ],
  "consequent": [
   "    with tf.gfile.GFile(run_json_file) as f:"
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/benchmark/benchmark_uploader.py",
  "condition": [
   "    with tf.io.gfile.GFile(metric_json_file) as f:"
  ],
  "consequent": [
   "    with tf.gfile.GFile(metric_json_file) as f:"
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/benchmark/benchmark_uploader_test.py",
  "condition": [
   "    tf.io.gfile.rmtree(self.get_temp_dir())"
  ],
  "consequent": [
   "    tf.gfile.DeleteRecursively(self.get_temp_dir())"
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/boosted_trees/train_higgs_test.py",
  "condition": [
   "tf.compat.v1.logging.set_verbosity(tf.compat.v1.logging.ERROR)"
  ],
  "consequent": [
   "tf.logging.set_verbosity(tf.logging.ERROR)"
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/boosted_trees/train_higgs_test.py",
  "condition": [
   "    tf.io.gfile.copy(tmpfile.name, self.input_npz)"
  ],
  "consequent": [
   "    tf.gfile.Copy(tmpfile.name, self.input_npz)"
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/mnist/mnist_eager.py",
  "condition": [
   "  avg_loss = tf.keras.metrics.Mean('loss', dtype=tf.float32)"
  ],
  "consequent": [
   "  avg_loss = tfe.metrics.Mean('loss', dtype=tf.float32)"
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/mnist/mnist_eager.py",
  "condition": [
   "  accuracy = tf.keras.metrics.Accuracy('accuracy', dtype=tf.float32)"
  ],
  "consequent": [
   "  accuracy = tfe.metrics.Accuracy('accuracy', dtype=tf.float32)"
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/mnist/mnist_eager.py",
  "condition": [
   "    avg_loss.update_state(loss(logits, labels))"
  ],
  "consequent": [
   "    avg_loss(loss(logits, labels))"
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/mnist/mnist_eager.py",
  "condition": [
   "    accuracy.update_state("
  ],
  "consequent": [
   "    accuracy("
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/mnist/mnist_eager_test.py",
  "condition": [
   "from tensorflow.python import eager as tfe  # pylint: disable=g-bad-import-order"
  ],
  "consequent": [
   "import tensorflow.contrib.eager as tfe  # pylint: disable=g-bad-import-order"
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/mnist/mnist_eager_test.py",
  "condition": [
   "  return '/device:GPU:0' if tfe.context.num_gpus() else '/device:CPU:0'"
  ],
  "consequent": [
   "  return \"/device:GPU:0\" if tfe.num_gpus() else \"/device:CPU:0\""
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/mnist/mnist_eager_test.py",
  "condition": [
   "  return 'channels_first' if tfe.context.num_gpus() else 'channels_last'"
  ],
  "consequent": [
   "  return \"channels_first\" if tfe.num_gpus() else \"channels_last\""
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/mnist/mnist_eager_test.py",
  "condition": [
   "    model.call = tf.function(model.call)"
  ],
  "consequent": [
   "    model.call = tfe.defun(model.call)"
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/mnist/mnist_eager_test.py",
  "condition": [
   "    model.call = tf.function(model.call)"
  ],
  "consequent": [
   "    model.call = tfe.defun(model.call)"
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/mnist/mnist_eager_test.py",
  "condition": [
   "  \"\"\"Run tests for MNIST eager loop."
  ],
  "consequent": [
   "  \"\"\"Run tests for MNIST eager loop.\"\"\""
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/mnist/mnist_eager_test.py",
  "condition": [
   "if __name__ == '__main__':"
  ],
  "consequent": [
   "if __name__ == \"__main__\":"
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/mnist/mnist_test.py",
  "condition": [
   "  \"\"\"Run tests for MNIST model."
  ],
  "consequent": [
   "  \"\"\"Run tests for MNIST model.\"\"\""
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/mnist/mnist_test.py",
  "condition": [
   "  tf.compat.v1.logging.set_verbosity(tf.compat.v1.logging.ERROR)"
  ],
  "consequent": [
   "  tf.logging.set_verbosity(tf.logging.ERROR)"
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/recommendation/data_test.py",
  "condition": [
   "    with self.session(graph=g) as sess:"
  ],
  "consequent": [
   "    with self.test_session(graph=g) as sess:"
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/recommendation/ncf_test.py",
  "condition": [
   "      init = [tf.compat.v1.global_variables_initializer(),"
  ],
  "consequent": [
   "      init = [tf.global_variables_initializer(),"
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/recommendation/ncf_test.py",
  "condition": [
   "              tf.compat.v1.local_variables_initializer()]"
  ],
  "consequent": [
   "              tf.local_variables_initializer()]"
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/recommendation/ncf_test.py",
  "condition": [
   "    with self.session(graph=g) as sess:"
  ],
  "consequent": [
   "    with self.test_session(graph=g) as sess:"
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/resnet/cifar10_test.py",
  "condition": [
   "    with self.session() as sess:"
  ],
  "consequent": [
   "    with self.test_session() as sess:"
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/resnet/keras/keras_common_test.py",
  "condition": [
   "from official.utils.misc import keras_utils"
  ],
  "consequent": [
   "",
   "tf.compat.v1.logging.set_verbosity(tf.compat.v1.logging.ERROR)"
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/resnet/keras/keras_common_test.py",
  "condition": [
   "    th = keras_utils.TimeHistory(128, 100)"
  ],
  "consequent": [
   "    th = keras_common.TimeHistory(128, 100)"
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/resnet/keras/keras_common_test.py",
  "condition": [
   "    th.timestamp_log = [keras_utils.BatchTimestamp(0, 1),",
   "                        keras_utils.BatchTimestamp(1, 2),",
   "                        keras_utils.BatchTimestamp(2, 3)]"
  ],
  "consequent": [
   "    th.batch_start_timestamps = [1, 2, 3]",
   "    th.batch_end_timestamps = [4, 5, 6]"
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/resnet/keras/keras_common_test.py",
  "condition": [
   "    stats = keras_common.build_stats(history, eval_output, [th])"
  ],
  "consequent": [
   "    stats = keras_common.build_stats(history, eval_output, th)"
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/resnet/keras/keras_common_test.py",
  "condition": [
   "    self.assertEqual(3, stats['step_timestamp_log'][2].timestamp)"
  ],
  "consequent": [
   "    self.assertItemsEqual([1, 2, 3], stats['batch_start_timestamps'])",
   "    self.assertItemsEqual([4, 5, 6], stats['batch_end_timestamps'])"
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/resnet/keras/keras_common_test.py",
  "condition": [
   "    th = keras_utils.TimeHistory(batch_size=128, log_steps=3)"
  ],
  "consequent": [
   "    th = keras_common.TimeHistory(batch_size=128, log_steps=3)"
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/resnet/keras/keras_common_test.py",
  "condition": [
   "    self.assertEqual(3, len(th.timestamp_log))"
  ],
  "consequent": [
   "    self.assertEqual(3, len(th.batch_start_timestamps))",
   "    self.assertEqual(2, len(th.batch_end_timestamps))",
   "",
   "    self.assertEqual(0, th.batch_start_timestamps[0].batch_index)",
   "    self.assertEqual(1, th.batch_start_timestamps[1].batch_index)",
   "    self.assertEqual(4, th.batch_start_timestamps[2].batch_index)",
   "",
   "    self.assertEqual(3, th.batch_end_timestamps[0].batch_index)",
   "    self.assertEqual(6, th.batch_end_timestamps[1].batch_index)"
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/resnet/keras/keras_imagenet_test.py",
  "condition": [
   "if __name__ == \"__main__\":"
  ],
  "consequent": [
   "if __name__ == '__main__':"
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/transformer/compute_bleu_test.py",
  "condition": [
   "    with tf.io.gfile.GFile(temp_file.name, \"w\") as w:"
  ],
  "consequent": [
   "    with tf.gfile.Open(temp_file.name, 'w') as w:"
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/transformer/model/beam_search_test.py",
  "condition": [
   "    with self.session() as sess:"
  ],
  "consequent": [
   "    with self.test_session() as sess:"
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/transformer/model/beam_search_test.py",
  "condition": [
   "    y = tf.compat.v1.placeholder(dtype=tf.int32, shape=[])"
  ],
  "consequent": [
   "    y = tf.placeholder(dtype=tf.int32, shape=[])"
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/transformer/model/beam_search_test.py",
  "condition": [
   "    x = tf.ones([7, tf.cast(tf.sqrt(y), tf.int32), 2, 5])"
  ],
  "consequent": [
   "    x = tf.ones([7, tf.to_int32(tf.sqrt(y)), 2, 5])"
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/transformer/model/beam_search_test.py",
  "condition": [
   "    with self.session() as sess:"
  ],
  "consequent": [
   "    with self.test_session() as sess:"
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/transformer/model/beam_search_test.py",
  "condition": [
   "    with self.session() as sess:"
  ],
  "consequent": [
   "    with self.test_session() as sess:"
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/transformer/model/beam_search_test.py",
  "condition": [
   "    with self.session() as sess:"
  ],
  "consequent": [
   "    with self.test_session() as sess:"
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/transformer/model/beam_search_test.py",
  "condition": [
   "    with self.session() as sess:"
  ],
  "consequent": [
   "    with self.test_session() as sess:"
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/transformer/model/model_utils_test.py",
  "condition": [
   "    with self.session() as sess:"
  ],
  "consequent": [
   "    with self.test_session() as sess:"
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/transformer/model/model_utils_test.py",
  "condition": [
   "    with self.session() as sess:"
  ],
  "consequent": [
   "    with self.test_session() as sess:"
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/transformer/model/model_utils_test.py",
  "condition": [
   "    with self.session() as sess:"
  ],
  "consequent": [
   "    with self.test_session() as sess:"
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/transformer/utils/tokenizer_test.py",
  "condition": [
   "    with tf.io.gfile.GFile(temp_file.name, \"w\") as w:"
  ],
  "consequent": [
   "    with tf.gfile.Open(temp_file.name, 'w') as w:"
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/utils/data/file_io_test.py",
  "condition": [
   "    with self.session(graph=tf.Graph()) as sess:"
  ],
  "consequent": [
   "    with self.test_session(graph=tf.Graph()) as sess:"
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/utils/logs/logger_test.py",
  "condition": [
   "    with flagsaver.flagsaver(benchmark_logger_type=\"foo\"):"
  ],
  "consequent": [
   "    with flagsaver.flagsaver(benchmark_logger_type='foo'):"
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/utils/logs/logger_test.py",
  "condition": [
   "    with flagsaver.flagsaver(benchmark_logger_type=\"BaseBenchmarkLogger\"):"
  ],
  "consequent": [
   "    with flagsaver.flagsaver(benchmark_logger_type='BaseBenchmarkLogger'):"
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/utils/logs/logger_test.py",
  "condition": [
   "    with flagsaver.flagsaver(benchmark_log_dir=\"/tmp\"):"
  ],
  "consequent": [
   "    with flagsaver.flagsaver(benchmark_log_dir='/tmp'):"
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/utils/logs/logger_test.py",
  "condition": [
   "      with flagsaver.flagsaver(benchmark_logger_type=\"BenchmarkFileLogger\"):"
  ],
  "consequent": [
   "      with flagsaver.flagsaver(benchmark_logger_type='BenchmarkFileLogger'):"
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/utils/logs/logger_test.py",
  "condition": [
   "  @unittest.skipIf(bigquery is None, \"Bigquery dependency is not installed.\")"
  ],
  "consequent": [
   "  @unittest.skipIf(bigquery is None, 'Bigquery dependency is not installed.')"
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/utils/logs/logger_test.py",
  "condition": [
   "    with flagsaver.flagsaver(benchmark_logger_type=\"BenchmarkBigQueryLogger\"):"
  ],
  "consequent": [
   "    with flagsaver.flagsaver(benchmark_logger_type='BenchmarkBigQueryLogger'):"
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/utils/logs/logger_test.py",
  "condition": [
   "    if keras_utils.is_v2_0():",
   "      self.assertEqual(run_info[\"run_parameters\"][2],"
  ],
  "consequent": [
   "    self.assertEqual(run_info[\"run_parameters\"][2],"
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/utils/logs/logger_test.py",
  "condition": [
   "                       {\"name\": \"random_tensor\", \"string_value\":"
  ],
  "consequent": [
   "                     {\"name\": \"random_tensor\", \"string_value\":"
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/utils/logs/logger_test.py",
  "condition": [
   "                            \"tf.Tensor(2.0, shape=(), dtype=float32)\"})",
   "    else:",
   "      self.assertEqual(run_info[\"run_parameters\"][2],",
   "                       {\"name\": \"random_tensor\", \"string_value\":",
   "                            \"Tensor(\\\"Const:0\\\", shape=(), dtype=float32)\"})"
  ],
  "consequent": [
   "                          \"Tensor(\\\"Const:0\\\", shape=(), dtype=float32)\"})"
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/utils/logs/logger_test.py",
  "condition": [
   "@unittest.skipIf(bigquery is None, \"Bigquery dependency is not installed.\")"
  ],
  "consequent": [
   "@unittest.skipIf(bigquery is None, 'Bigquery dependency is not installed.')"
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/utils/misc/model_helpers_test.py",
  "condition": [
   "\"\"\"Tests for Model Helper functions.\"\"\""
  ],
  "consequent": [
   "\"\"\" Tests for Model Helper functions.\"\"\""
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/utils/misc/model_helpers_test.py",
  "condition": [
   "    with self.session() as sess:"
  ],
  "consequent": [
   "    with self.test_session() as sess:"
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/utils/misc/model_helpers_test.py",
  "condition": [
   "    with self.session() as sess:"
  ],
  "consequent": [
   "    with self.test_session() as sess:"
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/utils/misc/model_helpers_test.py",
  "condition": [
   "    with self.session() as sess:"
  ],
  "consequent": [
   "    with self.test_session() as sess:"
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/utils/testing/reference_data.py",
  "condition": [
   "    with self.session(graph=graph) as sess:"
  ],
  "consequent": [
   "    with self.test_session(graph=graph) as sess:"
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/utils/testing/reference_data.py",
  "condition": [
   "    with self.session(graph=graph) as sess:"
  ],
  "consequent": [
   "    with self.test_session(graph=graph) as sess:"
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/wide_deep/census_test.py",
  "condition": [
   "tf.compat.v1.logging.set_verbosity(tf.compat.v1.logging.ERROR)"
  ],
  "consequent": [
   "tf.logging.set_verbosity(tf.logging.ERROR)"
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/wide_deep/census_test.py",
  "condition": [
   "    with tf.io.gfile.GFile(self.input_csv, 'w') as temp_csv:"
  ],
  "consequent": [
   "    with tf.gfile.Open(self.input_csv, 'w') as temp_csv:"
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/wide_deep/census_test.py",
  "condition": [
   "    with tf.io.gfile.GFile(TEST_CSV, 'r') as temp_csv:"
  ],
  "consequent": [
   "    with tf.gfile.Open(TEST_CSV, \"r\") as temp_csv:"
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/wide_deep/census_test.py",
  "condition": [
   "      with tf.io.gfile.GFile(",
   "          os.path.join(self.temp_dir, fname), 'w') as test_csv:"
  ],
  "consequent": [
   "      with tf.gfile.Open(os.path.join(self.temp_dir, fname), 'w') as test_csv:"
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/wide_deep/movielens_dataset.py",
  "condition": [
   "    movielens.USER_COLUMN: tf.compat.v1.FixedLenFeature([1], dtype=tf.int64),"
  ],
  "consequent": [
   "    movielens.USER_COLUMN: tf.FixedLenFeature([1], dtype=tf.int64),"
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/wide_deep/movielens_dataset.py",
  "condition": [
   "    movielens.ITEM_COLUMN: tf.compat.v1.FixedLenFeature([1], dtype=tf.int64),"
  ],
  "consequent": [
   "    movielens.ITEM_COLUMN: tf.FixedLenFeature([1], dtype=tf.int64),"
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/wide_deep/movielens_dataset.py",
  "condition": [
   "    movielens.TIMESTAMP_COLUMN: tf.compat.v1.FixedLenFeature([1],"
  ],
  "consequent": [
   "    movielens.TIMESTAMP_COLUMN: tf.FixedLenFeature([1], dtype=tf.int64),"
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/wide_deep/movielens_dataset.py",
  "condition": [
   "                                                             dtype=tf.int64),",
   "    movielens.GENRE_COLUMN: tf.compat.v1.FixedLenFeature("
  ],
  "consequent": [
   "    movielens.GENRE_COLUMN: tf.FixedLenFeature("
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/wide_deep/movielens_dataset.py",
  "condition": [
   "    movielens.RATING_COLUMN: tf.compat.v1.FixedLenFeature([1],"
  ],
  "consequent": [
   "    movielens.RATING_COLUMN: tf.FixedLenFeature([1], dtype=tf.float32),"
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/wide_deep/movielens_test.py",
  "condition": [
   "tf.compat.v1.logging.set_verbosity(tf.compat.v1.logging.ERROR)"
  ],
  "consequent": [
   "tf.logging.set_verbosity(tf.logging.ERROR)"
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/wide_deep/movielens_test.py",
  "condition": [
   "    tf.io.gfile.makedirs(os.path.join(self.temp_dir, movielens.ML_1M))"
  ],
  "consequent": [
   "    tf.gfile.MakeDirs(os.path.join(self.temp_dir, movielens.ML_1M))"
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/wide_deep/movielens_test.py",
  "condition": [
   "    with tf.io.gfile.GFile(self.ratings_csv, \"w\") as f:"
  ],
  "consequent": [
   "    with tf.gfile.Open(self.ratings_csv, \"w\") as f:"
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/wide_deep/movielens_test.py",
  "condition": [
   "    with tf.io.gfile.GFile(self.item_csv, \"w\") as f:"
  ],
  "consequent": [
   "    with tf.gfile.Open(self.item_csv, \"w\") as f:"
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/wide_deep/movielens_test.py",
  "condition": [
   "  @unittest.skipIf(keras_utils.is_v2_0(), \"TF 1.0 only test.\")"
  ],
  "consequent": [
   ""
  ]
 },
 {
  "sha": "4909765543ff0c96627161ecc75eec6c309dbdce",
  "author": "Toby Boyd",
  "created_at": "2019-07-04 01:51:14",
  "file_path": "official/wide_deep/movielens_test.py",
  "condition": [
   "    with self.session() as sess:"
  ],
  "consequent": [
   "    with self.test_session() as sess:"
  ]
 },
 {
  "sha": "680eb35c45ba7915cb1bc667fb40d9bcee9381c5",
  "author": "Yuefeng Zhou",
  "created_at": "2019-07-03 03:11:33",
  "file_path": "official/utils/misc/distribution_utils.py",
  "condition": [
   "    if num_gpus > 1:"
  ],
  "consequent": [
   "    if num_gpus > 1 or num_workers > 1:"
  ]
 },
 {
  "sha": "680eb35c45ba7915cb1bc667fb40d9bcee9381c5",
  "author": "Yuefeng Zhou",
  "created_at": "2019-07-03 03:11:33",
  "file_path": "official/utils/misc/distribution_utils.py",
  "condition": [
   "  if distribution_strategy == \"multi_worker_mirrored\":"
  ],
  "consequent": [
   "  if distribution_strategy == \"multi_worker_mirrored\" or num_workers > 1:"
  ]
 },
 {
  "sha": "58a3de6c68639c3eac95f7c84089f320d32a85bb",
  "author": "Toby Boyd",
  "created_at": "2019-06-29 04:28:15",
  "file_path": "official/transformer/v2/transformer_benchmark.py",
  "condition": [
   "    FLAGS.train_steps = 400000"
  ],
  "consequent": [
   "    FLAGS.train_steps = 100000"
  ]
 },
 {
  "sha": "58a3de6c68639c3eac95f7c84089f320d32a85bb",
  "author": "Toby Boyd",
  "created_at": "2019-06-29 04:28:15",
  "file_path": "official/transformer/v2/transformer_benchmark.py",
  "condition": [
   "    FLAGS.steps_between_evals = 20000"
  ],
  "consequent": [
   "    FLAGS.steps_between_evals = 5000"
  ]
 },
 {
  "sha": "44ff121d477ed9666f957a2a3a991fd571aba154",
  "author": "nnigania",
  "created_at": "2019-06-29 02:36:37",
  "file_path": "official/recommendation/ncf_keras_main.py",
  "condition": [
   "        # Converting gradients to dense form helps in perf on GPU for NCF",
   "        grads = neumf_model.sparse_to_dense_grads(list(zip(grads, keras_model.trainable_variables)))",
   "        optimizer.apply_gradients(grads)"
  ],
  "consequent": [
   "        optimizer.apply_gradients(list(zip(grads,",
   "                                           keras_model.trainable_variables)))"
  ]
 },
 {
  "sha": "44ff121d477ed9666f957a2a3a991fd571aba154",
  "author": "nnigania",
  "created_at": "2019-06-29 02:36:37",
  "file_path": "official/recommendation/neumf_model.py",
  "condition": [
   "def sparse_to_dense_grads(grads_and_vars):"
  ],
  "consequent": [
   "def _sparse_to_dense_grads(grads_and_vars):"
  ]
 },
 {
  "sha": "44ff121d477ed9666f957a2a3a991fd571aba154",
  "author": "nnigania",
  "created_at": "2019-06-29 02:36:37",
  "file_path": "official/recommendation/neumf_model.py",
  "condition": [
   "    gradients = sparse_to_dense_grads(gradients)"
  ],
  "consequent": [
   "    gradients = _sparse_to_dense_grads(gradients)"
  ]
 },
 {
  "sha": "adc271722e512c8a55ef18b46c666a031de77774",
  "author": "George K",
  "created_at": "2019-06-23 04:24:33",
  "file_path": "tutorials/image/cifar10/cifar10.py",
  "condition": [
   "tf.app.flags.DEFINE_boolean('use_fp16', True,"
  ],
  "consequent": [
   "tf.app.flags.DEFINE_boolean('use_fp16', False,"
  ]
 },
 {
  "sha": "adc271722e512c8a55ef18b46c666a031de77774",
  "author": "George K",
  "created_at": "2019-06-23 04:24:33",
  "file_path": "tutorials/image/cifar10/cifar10.py",
  "condition": [
   "  images, labels = cifar10_input.inputs(eval_data=eval_data, batch_size=FLAGS.batch_size)"
  ],
  "consequent": [
   "  images, labels = cifar10_input.inputs(eval_data=eval_data,",
   "                                        batch_size=FLAGS.batch_size)"
  ]
 },
 {
  "sha": "47a59023ebb4ebdfdfdeefd003ae38ab0a5fac1f",
  "author": "Toby Boyd",
  "created_at": "2019-06-22 22:25:07",
  "file_path": "official/resnet/ctl/ctl_imagenet_test.py",
  "condition": [
   "        '-distribution_strategy', 'off',"
  ],
  "consequent": [
   "        \"-distribution_strategy\", \"off\","
  ]
 },
 {
  "sha": "47a59023ebb4ebdfdfdeefd003ae38ab0a5fac1f",
  "author": "Toby Boyd",
  "created_at": "2019-06-22 22:25:07",
  "file_path": "official/resnet/ctl/ctl_imagenet_test.py",
  "condition": [
   "        '-model_dir', 'ctl_imagenet_no_dist_strat',"
  ],
  "consequent": [
   "        \"-model_dir\", \"ctl_imagenet_no_dist_strat\","
  ]
 },
 {
  "sha": "47a59023ebb4ebdfdfdeefd003ae38ab0a5fac1f",
  "author": "Toby Boyd",
  "created_at": "2019-06-22 22:25:07",
  "file_path": "official/resnet/ctl/ctl_imagenet_test.py",
  "condition": [
   "        '-data_format', 'channels_last',"
  ],
  "consequent": [
   "        \"-data_format\", \"channels_last\","
  ]
 },
 {
  "sha": "47a59023ebb4ebdfdfdeefd003ae38ab0a5fac1f",
  "author": "Toby Boyd",
  "created_at": "2019-06-22 22:25:07",
  "file_path": "official/resnet/ctl/ctl_imagenet_test.py",
  "condition": [
   "    num_gpus = '2'"
  ],
  "consequent": [
   "    num_gpus = \"2\""
  ]
 },
 {
  "sha": "47a59023ebb4ebdfdfdeefd003ae38ab0a5fac1f",
  "author": "Toby Boyd",
  "created_at": "2019-06-22 22:25:07",
  "file_path": "official/resnet/ctl/ctl_imagenet_test.py",
  "condition": [
   "      num_gpus = '0'"
  ],
  "consequent": [
   "      num_gpus = \"0\""
  ]
 },
 {
  "sha": "47a59023ebb4ebdfdfdeefd003ae38ab0a5fac1f",
  "author": "Toby Boyd",
  "created_at": "2019-06-22 22:25:07",
  "file_path": "official/resnet/ctl/ctl_imagenet_test.py",
  "condition": [
   "        '-num_gpus', num_gpus,"
  ],
  "consequent": [
   "        \"-num_gpus\", num_gpus,"
  ]
 },
 {
  "sha": "47a59023ebb4ebdfdfdeefd003ae38ab0a5fac1f",
  "author": "Toby Boyd",
  "created_at": "2019-06-22 22:25:07",
  "file_path": "official/resnet/ctl/ctl_imagenet_test.py",
  "condition": [
   "        '-distribution_strategy', 'default',"
  ],
  "consequent": [
   "        \"-distribution_strategy\", \"default\","
  ]
 },
 {
  "sha": "47a59023ebb4ebdfdfdeefd003ae38ab0a5fac1f",
  "author": "Toby Boyd",
  "created_at": "2019-06-22 22:25:07",
  "file_path": "official/resnet/ctl/ctl_imagenet_test.py",
  "condition": [
   "        '-model_dir', 'ctl_imagenet_2_gpu',"
  ],
  "consequent": [
   "        \"-model_dir\", \"ctl_imagenet_2_gpu\","
  ]
 },
 {
  "sha": "47a59023ebb4ebdfdfdeefd003ae38ab0a5fac1f",
  "author": "Toby Boyd",
  "created_at": "2019-06-22 22:25:07",
  "file_path": "official/resnet/ctl/ctl_imagenet_test.py",
  "condition": [
   "        '-data_format', 'channels_last',"
  ],
  "consequent": [
   "        \"-data_format\", \"channels_last\","
  ]
 },
 {
  "sha": "47a59023ebb4ebdfdfdeefd003ae38ab0a5fac1f",
  "author": "Toby Boyd",
  "created_at": "2019-06-22 22:25:07",
  "file_path": "official/transformer/v2/transformer_main_test.py",
  "condition": [
   "FIXED_TIMESTAMP = 'my_time_stamp'"
  ],
  "consequent": [
   "FIXED_TIMESTAMP = \"my_time_stamp\""
  ]
 },
 {
  "sha": "47a59023ebb4ebdfdfdeefd003ae38ab0a5fac1f",
  "author": "Toby Boyd",
  "created_at": "2019-06-22 22:25:07",
  "file_path": "official/transformer/v2/transformer_main_test.py",
  "condition": [
   "WEIGHT_PATTERN = re.compile(r'weights-epoch-.+\\.hdf5')"
  ],
  "consequent": [
   "WEIGHT_PATTERN = re.compile(r\"weights-epoch-.+\\.hdf5\")"
  ]
 },
 {
  "sha": "47a59023ebb4ebdfdfdeefd003ae38ab0a5fac1f",
  "author": "Toby Boyd",
  "created_at": "2019-06-22 22:25:07",
  "file_path": "official/transformer/v2/transformer_main_test.py",
  "condition": [
   "  with open(filepath, 'w') as f:"
  ],
  "consequent": [
   "  with open(filepath, \"w\") as f:"
  ]
 },
 {
  "sha": "47a59023ebb4ebdfdfdeefd003ae38ab0a5fac1f",
  "author": "Toby Boyd",
  "created_at": "2019-06-22 22:25:07",
  "file_path": "official/transformer/v2/transformer_main_test.py",
  "condition": [
   "      f.write('{}\\n'.format(l))"
  ],
  "consequent": [
   "      f.write(\"{}\\n\".format(l))"
  ]
 },
 {
  "sha": "47a59023ebb4ebdfdfdeefd003ae38ab0a5fac1f",
  "author": "Toby Boyd",
  "created_at": "2019-06-22 22:25:07",
  "file_path": "official/transformer/v2/transformer_main_test.py",
  "condition": [
   "    FLAGS.param_set = 'tiny'"
  ],
  "consequent": [
   "    FLAGS.param_set = \"tiny\""
  ]
 },
 {
  "sha": "47a59023ebb4ebdfdfdeefd003ae38ab0a5fac1f",
  "author": "Toby Boyd",
  "created_at": "2019-06-22 22:25:07",
  "file_path": "official/transformer/v2/transformer_main_test.py",
  "condition": [
   "    FLAGS.distribution_strategy = 'off'"
  ],
  "consequent": [
   "    FLAGS.distribution_strategy = \"off\""
  ]
 },
 {
  "sha": "47a59023ebb4ebdfdfdeefd003ae38ab0a5fac1f",
  "author": "Toby Boyd",
  "created_at": "2019-06-22 22:25:07",
  "file_path": "official/transformer/v2/transformer_main_test.py",
  "condition": [
   "    FLAGS.dtype = 'fp32'"
  ],
  "consequent": [
   "    FLAGS.dtype = \"fp32\""
  ]
 },
 {
  "sha": "47a59023ebb4ebdfdfdeefd003ae38ab0a5fac1f",
  "author": "Toby Boyd",
  "created_at": "2019-06-22 22:25:07",
  "file_path": "official/transformer/v2/transformer_main_test.py",
  "condition": [
   "    self.vocab_file = os.path.join(temp_dir, 'vocab')"
  ],
  "consequent": [
   "    self.vocab_file = os.path.join(temp_dir, \"vocab\")"
  ]
 },
 {
  "sha": "47a59023ebb4ebdfdfdeefd003ae38ab0a5fac1f",
  "author": "Toby Boyd",
  "created_at": "2019-06-22 22:25:07",
  "file_path": "official/transformer/v2/transformer_main_test.py",
  "condition": [
   "    self.vocab_size = misc.get_model_params(FLAGS.param_set, 0)['vocab_size']"
  ],
  "consequent": [
   "    self.vocab_size = misc.get_model_params(FLAGS.param_set, 0)[\"vocab_size\"]"
  ]
 },
 {
  "sha": "47a59023ebb4ebdfdfdeefd003ae38ab0a5fac1f",
  "author": "Toby Boyd",
  "created_at": "2019-06-22 22:25:07",
  "file_path": "official/transformer/v2/transformer_main_test.py",
  "condition": [
   "    self.bleu_source = os.path.join(temp_dir, 'bleu_source')"
  ],
  "consequent": [
   "    self.bleu_source = os.path.join(temp_dir, \"bleu_source\")"
  ]
 },
 {
  "sha": "47a59023ebb4ebdfdfdeefd003ae38ab0a5fac1f",
  "author": "Toby Boyd",
  "created_at": "2019-06-22 22:25:07",
  "file_path": "official/transformer/v2/transformer_main_test.py",
  "condition": [
   "    self.bleu_ref = os.path.join(temp_dir, 'bleu_ref')"
  ],
  "consequent": [
   "    self.bleu_ref = os.path.join(temp_dir, \"bleu_ref\")"
  ]
 },
 {
  "sha": "47a59023ebb4ebdfdfdeefd003ae38ab0a5fac1f",
  "author": "Toby Boyd",
  "created_at": "2019-06-22 22:25:07",
  "file_path": "official/transformer/v2/transformer_main_test.py",
  "condition": [
   "    FLAGS.distribution_strategy = 'one_device'"
  ],
  "consequent": [
   "    FLAGS.distribution_strategy = \"one_device\""
  ]
 },
 {
  "sha": "47a59023ebb4ebdfdfdeefd003ae38ab0a5fac1f",
  "author": "Toby Boyd",
  "created_at": "2019-06-22 22:25:07",
  "file_path": "official/transformer/v2/transformer_main_test.py",
  "condition": [
   "    FLAGS.distribution_strategy = 'mirrored'"
  ],
  "consequent": [
   "    FLAGS.distribution_strategy = \"mirrored\""
  ]
 },
 {
  "sha": "47a59023ebb4ebdfdfdeefd003ae38ab0a5fac1f",
  "author": "Toby Boyd",
  "created_at": "2019-06-22 22:25:07",
  "file_path": "official/transformer/v2/transformer_main_test.py",
  "condition": [
   "    FLAGS.param_set = 'base'"
  ],
  "consequent": [
   "    FLAGS.param_set = \"base\""
  ]
 },
 {
  "sha": "47a59023ebb4ebdfdfdeefd003ae38ab0a5fac1f",
  "author": "Toby Boyd",
  "created_at": "2019-06-22 22:25:07",
  "file_path": "official/transformer/v2/transformer_main_test.py",
  "condition": [
   "    FLAGS.distribution_strategy = 'mirrored'"
  ],
  "consequent": [
   "    FLAGS.distribution_strategy = \"mirrored\""
  ]
 },
 {
  "sha": "47a59023ebb4ebdfdfdeefd003ae38ab0a5fac1f",
  "author": "Toby Boyd",
  "created_at": "2019-06-22 22:25:07",
  "file_path": "official/transformer/v2/transformer_main_test.py",
  "condition": [
   "    FLAGS.param_set = 'base'"
  ],
  "consequent": [
   "    FLAGS.param_set = \"base\""
  ]
 },
 {
  "sha": "47a59023ebb4ebdfdfdeefd003ae38ab0a5fac1f",
  "author": "Toby Boyd",
  "created_at": "2019-06-22 22:25:07",
  "file_path": "official/transformer/v2/transformer_main_test.py",
  "condition": [
   "    FLAGS.dtype = 'fp16'"
  ],
  "consequent": [
   "    FLAGS.dtype = \"fp16\""
  ]
 },
 {
  "sha": "47a59023ebb4ebdfdfdeefd003ae38ab0a5fac1f",
  "author": "Toby Boyd",
  "created_at": "2019-06-22 22:25:07",
  "file_path": "official/transformer/v2/transformer_main_test.py",
  "condition": [
   "    _generate_file(self.bleu_source, ['a b', 'c d'])"
  ],
  "consequent": [
   "    _generate_file(self.bleu_source, [\"a b\", \"c d\"])"
  ]
 },
 {
  "sha": "47a59023ebb4ebdfdfdeefd003ae38ab0a5fac1f",
  "author": "Toby Boyd",
  "created_at": "2019-06-22 22:25:07",
  "file_path": "official/transformer/v2/transformer_main_test.py",
  "condition": [
   "    _generate_file(self.bleu_ref, ['a b', 'd c'])"
  ],
  "consequent": [
   "    _generate_file(self.bleu_ref, [\"a b\", \"d c\"])"
  ]
 },
 {
  "sha": "47a59023ebb4ebdfdfdeefd003ae38ab0a5fac1f",
  "author": "Toby Boyd",
  "created_at": "2019-06-22 22:25:07",
  "file_path": "official/transformer/v2/transformer_main_test.py",
  "condition": [
   "        'ignored_program_name',"
  ],
  "consequent": [
   "        \"ignored_program_name\","
  ]
 },
 {
  "sha": "47a59023ebb4ebdfdfdeefd003ae38ab0a5fac1f",
  "author": "Toby Boyd",
  "created_at": "2019-06-22 22:25:07",
  "file_path": "official/transformer/v2/transformer_main_test.py",
  "condition": [
   "        '--vocab_file={}'.format(self.vocab_file),"
  ],
  "consequent": [
   "        \"--vocab_file={}\".format(self.vocab_file),"
  ]
 },
 {
  "sha": "47a59023ebb4ebdfdfdeefd003ae38ab0a5fac1f",
  "author": "Toby Boyd",
  "created_at": "2019-06-22 22:25:07",
  "file_path": "official/transformer/v2/transformer_main_test.py",
  "condition": [
   "        '--bleu_source={}'.format(self.bleu_source),"
  ],
  "consequent": [
   "        \"--bleu_source={}\".format(self.bleu_source),"
  ]
 },
 {
  "sha": "47a59023ebb4ebdfdfdeefd003ae38ab0a5fac1f",
  "author": "Toby Boyd",
  "created_at": "2019-06-22 22:25:07",
  "file_path": "official/transformer/v2/transformer_main_test.py",
  "condition": [
   "        '--bleu_ref={}'.format(self.bleu_ref),"
  ],
  "consequent": [
   "        \"--bleu_ref={}\".format(self.bleu_ref),"
  ]
 },
 {
  "sha": "47a59023ebb4ebdfdfdeefd003ae38ab0a5fac1f",
  "author": "Toby Boyd",
  "created_at": "2019-06-22 22:25:07",
  "file_path": "official/transformer/v2/transformer_main_test.py",
  "condition": [
   "    self._prepare_files_and_flags('--dtype=fp16')"
  ],
  "consequent": [
   "    self._prepare_files_and_flags(\"--dtype=fp16\")"
  ]
 },
 {
  "sha": "47a59023ebb4ebdfdfdeefd003ae38ab0a5fac1f",
  "author": "Toby Boyd",
  "created_at": "2019-06-22 22:25:07",
  "file_path": "official/transformer/v2/transformer_main_test.py",
  "condition": [
   "if __name__ == '__main__':"
  ],
  "consequent": [
   "if __name__ == \"__main__\":",
   "  misc.define_transformer_flags()"
  ]
 },
 {
  "sha": "513fdbb258b75755ccbaadae128350052fa69f72",
  "author": "guptapriya",
  "created_at": "2019-06-22 02:47:48",
  "file_path": "official/transformer/v2/transformer.py",
  "condition": [
   "      if params[\"enable_metrics_in_training\"]:",
   "        logits = metrics.MetricLayer(vocab_size)([logits, targets])"
  ],
  "consequent": [
   "      logits = metrics.MetricLayer(vocab_size)([logits, targets])"
  ]
 },
 {
  "sha": "0f6845ce513d7be2cbffbf9a0e56b38cbba2fdd7",
  "author": "Neil",
  "created_at": "2019-06-22 02:04:29",
  "file_path": "official/utils/flags/_conventions.py",
  "condition": [
   "def _stdout_utf8():",
   "  try:"
  ],
  "consequent": [
   "try:"
  ]
 },
 {
  "sha": "0f6845ce513d7be2cbffbf9a0e56b38cbba2fdd7",
  "author": "Neil",
  "created_at": "2019-06-22 02:04:29",
  "file_path": "official/utils/flags/_conventions.py",
  "condition": [
   "    codecs.lookup(\"utf-8\")"
  ],
  "consequent": [
   "  codecs.lookup(\"utf-8\")"
  ]
 },
 {
  "sha": "0f6845ce513d7be2cbffbf9a0e56b38cbba2fdd7",
  "author": "Neil",
  "created_at": "2019-06-22 02:04:29",
  "file_path": "official/utils/flags/_conventions.py",
  "condition": [
   "else:"
  ],
  "consequent": [
   "except LookupError:"
  ]
 },
 {
  "sha": "0f6845ce513d7be2cbffbf9a0e56b38cbba2fdd7",
  "author": "Neil",
  "created_at": "2019-06-22 02:04:29",
  "file_path": "official/utils/flags/_conventions.py",
  "condition": [
   "    return _help_wrap(text, *args, **kwargs).replace(u\"\\ufeff\", u\"\")"
  ],
  "consequent": [
   "    return _help_wrap(text, *args, **kwargs).replace(\"\\ufeff\", \"\")"
  ]
 },
 {
  "sha": "f21337b1a88559f0866509aaf37bcb19716cd678",
  "author": "Toby Boyd",
  "created_at": "2019-06-22 01:03:22",
  "file_path": "official/resnet/keras/keras_cifar_benchmark.py",
  "condition": [
   "    \"\"\"Test keras based model w/forced eager and no dist_strat.\"\"\""
  ],
  "consequent": [
   "    \"\"\"Test keras based model with forced eager and no dist_strat.\"\"\""
  ]
 },
 {
  "sha": "f21337b1a88559f0866509aaf37bcb19716cd678",
  "author": "Toby Boyd",
  "created_at": "2019-06-22 01:03:22",
  "file_path": "official/resnet/keras/keras_cifar_benchmark.py",
  "condition": [
   "    \"\"\"Test 1 gpu without distribution strategy and forced eager.\"\"\""
  ],
  "consequent": [
   "    \"\"\"Test keras based model with forced eager.\"\"\""
  ]
 },
 {
  "sha": "a68f65f8b06969ee314354e3692fce10be7712c7",
  "author": "Toby Boyd",
  "created_at": "2019-06-21 23:22:10",
  "file_path": "official/recommendation/ncf_common.py",
  "condition": [
   "  flags_core.define_base(export_dir=False, run_eagerly=True)"
  ],
  "consequent": [
   "  flags_core.define_base(export_dir=False)"
  ]
 },
 {
  "sha": "a68f65f8b06969ee314354e3692fce10be7712c7",
  "author": "Toby Boyd",
  "created_at": "2019-06-21 23:22:10",
  "file_path": "official/recommendation/ncf_common.py",
  "condition": [
   "      all_reduce_alg=False,"
  ],
  "consequent": [
   "      all_reduce_alg=False"
  ]
 },
 {
  "sha": "a68f65f8b06969ee314354e3692fce10be7712c7",
  "author": "Toby Boyd",
  "created_at": "2019-06-21 23:22:10",
  "file_path": "official/recommendation/ncf_common.py",
  "condition": [
   "  \"\"\"Convert the logits returned by the base model to softmax logits."
  ],
  "consequent": [
   "  '''Convert the logits returned by the base model to softmax logits."
  ]
 },
 {
  "sha": "a68f65f8b06969ee314354e3692fce10be7712c7",
  "author": "Toby Boyd",
  "created_at": "2019-06-21 23:22:10",
  "file_path": "official/recommendation/ncf_common.py",
  "condition": [
   "  Args:",
   "    logits: used to create softmax.",
   "",
   "  Returns:",
   "    Softmax with the first column of zeros is equivalent to sigmoid."
  ],
  "consequent": [
   "  Softmax with the first column of zeros is equivalent to sigmoid."
  ]
 },
 {
  "sha": "a68f65f8b06969ee314354e3692fce10be7712c7",
  "author": "Toby Boyd",
  "created_at": "2019-06-21 23:22:10",
  "file_path": "official/recommendation/ncf_common.py",
  "condition": [
   "  \"\"\""
  ],
  "consequent": [
   "  '''"
  ]
 },
 {
  "sha": "a68f65f8b06969ee314354e3692fce10be7712c7",
  "author": "Toby Boyd",
  "created_at": "2019-06-21 23:22:10",
  "file_path": "official/recommendation/ncf_keras_benchmark.py",
  "condition": [
   "    \"\"\"NCF with custom training loop. Works only in TF 2.0.\"\"\""
  ],
  "consequent": [
   "    self._setup()",
   "    FLAGS.keras_use_ctl = True",
   "    FLAGS.num_gpus = 2",
   "    self._run_and_report_benchmark()",
   "",
   "  # NCF with custom training loop. Works only in TF 2.0"
  ]
 },
 {
  "sha": "a68f65f8b06969ee314354e3692fce10be7712c7",
  "author": "Toby Boyd",
  "created_at": "2019-06-21 23:22:10",
  "file_path": "official/recommendation/ncf_keras_benchmark.py",
  "condition": [
   "    \"\"\"1-GPU test to compare Google implementation with MLPerf 0.5."
  ],
  "consequent": [
   "    \"\"\"1-GPU test to compare Google implementation with MLperf0.5."
  ]
 },
 {
  "sha": "a68f65f8b06969ee314354e3692fce10be7712c7",
  "author": "Toby Boyd",
  "created_at": "2019-06-21 23:22:10",
  "file_path": "official/recommendation/ncf_keras_benchmark.py",
  "condition": [
   "",
   "       Using similar rules as MLPerf 0.5"
  ],
  "consequent": [
   "       Using similar rules as MLPerf0.5"
  ]
 },
 {
  "sha": "a68f65f8b06969ee314354e3692fce10be7712c7",
  "author": "Toby Boyd",
  "created_at": "2019-06-21 23:22:10",
  "file_path": "official/recommendation/ncf_keras_benchmark.py",
  "condition": [
   "       - Using Google's convergence hparams as base for 1-GPU test."
  ],
  "consequent": [
   "       Using Google's convergence hparams as base for 1-GPU test."
  ]
 },
 {
  "sha": "a68f65f8b06969ee314354e3692fce10be7712c7",
  "author": "Toby Boyd",
  "created_at": "2019-06-21 23:22:10",
  "file_path": "official/recommendation/ncf_keras_benchmark.py",
  "condition": [
   "       - Fixed the number of epochs to 7, to remove the perf variance."
  ],
  "consequent": [
   "       Fixed the number of epochs to 7, to remove the perf variance."
  ]
 },
 {
  "sha": "a68f65f8b06969ee314354e3692fce10be7712c7",
  "author": "Toby Boyd",
  "created_at": "2019-06-21 23:22:10",
  "file_path": "official/recommendation/ncf_keras_benchmark.py",
  "condition": [
   "       - MLPerf submission consistently converges in 7 epochs."
  ],
  "consequent": [
   "       MLPerf submission consistently converges in 7 epochs."
  ]
 },
 {
  "sha": "a68f65f8b06969ee314354e3692fce10be7712c7",
  "author": "Toby Boyd",
  "created_at": "2019-06-21 23:22:10",
  "file_path": "official/recommendation/ncf_keras_benchmark.py",
  "condition": [
   "    \"\"\"1-GPU MLPerf like test with compile/fit version.\"\"\""
  ],
  "consequent": [
   "    \"\"\"1-GPU MLPerf like test with compile/fit version\"\"\""
  ]
 },
 {
  "sha": "a68f65f8b06969ee314354e3692fce10be7712c7",
  "author": "Toby Boyd",
  "created_at": "2019-06-21 23:22:10",
  "file_path": "official/recommendation/ncf_keras_benchmark.py",
  "condition": [
   "    \"\"\"8 GPU test meant to compare Google implementation."
  ],
  "consequent": [
   "    \"\"\"8 GPU test meant to compare Google implementation"
  ]
 },
 {
  "sha": "a68f65f8b06969ee314354e3692fce10be7712c7",
  "author": "Toby Boyd",
  "created_at": "2019-06-21 23:22:10",
  "file_path": "official/recommendation/ncf_keras_benchmark.py",
  "condition": [
   "",
   "       MLPerf 0.5 top line submission using the"
  ],
  "consequent": [
   "       with MLperf top line submission using the"
  ]
 },
 {
  "sha": "a68f65f8b06969ee314354e3692fce10be7712c7",
  "author": "Toby Boyd",
  "created_at": "2019-06-21 23:22:10",
  "file_path": "official/recommendation/ncf_keras_benchmark.py",
  "condition": [
   "       - hyper-parameters from the winning MLPerf0.5 submission."
  ],
  "consequent": [
   "       hyper-parameters from the winning MLPerf0.5 submission."
  ]
 },
 {
  "sha": "a68f65f8b06969ee314354e3692fce10be7712c7",
  "author": "Toby Boyd",
  "created_at": "2019-06-21 23:22:10",
  "file_path": "official/recommendation/ncf_keras_benchmark.py",
  "condition": [
   "       - Using similar rules as MLPerf0.5"
  ],
  "consequent": [
   "       Using similar rules as MLPerf0.5"
  ]
 },
 {
  "sha": "a68f65f8b06969ee314354e3692fce10be7712c7",
  "author": "Toby Boyd",
  "created_at": "2019-06-21 23:22:10",
  "file_path": "official/recommendation/ncf_keras_benchmark.py",
  "condition": [
   "       - Fixed epochs to MLPerf submission's convergence on 17 epochs"
  ],
  "consequent": [
   "       Fixed epochs to MLPerf sumbmission's convergnce on 17 epochs"
  ]
 },
 {
  "sha": "a68f65f8b06969ee314354e3692fce10be7712c7",
  "author": "Toby Boyd",
  "created_at": "2019-06-21 23:22:10",
  "file_path": "official/recommendation/ncf_keras_main.py",
  "condition": [
   "    if params[\"distribute_strategy\"] or not keras_utils.is_v2_0():"
  ],
  "consequent": [
   "    if params[\"distribute_strategy\"] or not ncf_common.is_tf_v2():"
  ]
 },
 {
  "sha": "a68f65f8b06969ee314354e3692fce10be7712c7",
  "author": "Toby Boyd",
  "created_at": "2019-06-21 23:22:10",
  "file_path": "official/recommendation/ncf_keras_main.py",
  "condition": [
   "    This is needed because:"
  ],
  "consequent": [
   "    This is needed becasue:"
  ]
 },
 {
  "sha": "a68f65f8b06969ee314354e3692fce10be7712c7",
  "author": "Toby Boyd",
  "created_at": "2019-06-21 23:22:10",
  "file_path": "official/recommendation/ncf_keras_main.py",
  "condition": [
   "    if params[\"distribute_strategy\"] or not keras_utils.is_v2_0():"
  ],
  "consequent": [
   "    if params[\"distribute_strategy\"] or not ncf_common.is_tf_v2():"
  ]
 },
 {
  "sha": "a68f65f8b06969ee314354e3692fce10be7712c7",
  "author": "Toby Boyd",
  "created_at": "2019-06-21 23:22:10",
  "file_path": "official/recommendation/ncf_keras_main.py",
  "condition": [
   "      not keras_utils.is_v2_0() or strategy is None)):"
  ],
  "consequent": [
   "      not ncf_common.is_tf_v2() or strategy is None)):"
  ]
 },
 {
  "sha": "a68f65f8b06969ee314354e3692fce10be7712c7",
  "author": "Toby Boyd",
  "created_at": "2019-06-21 23:22:10",
  "file_path": "official/recommendation/ncf_keras_main.py",
  "condition": [
   "      keras_model.compile(optimizer=optimizer,"
  ],
  "consequent": [
   "      keras_model.compile(optimizer=optimizer)"
  ]
 },
 {
  "sha": "a68f65f8b06969ee314354e3692fce10be7712c7",
  "author": "Toby Boyd",
  "created_at": "2019-06-21 23:22:10",
  "file_path": "official/resnet/estimator_benchmark.py",
  "condition": [
   "    flag_methods = [imagenet_main.define_imagenet_flags]"
  ],
  "consequent": [
   "    flag_methods = [",
   "        lambda: imagenet_main.define_imagenet_flags(dynamic_loss_scale=True,",
   "                                                    fp16_implementation=True)",
   "    ]"
  ]
 },
 {
  "sha": "a68f65f8b06969ee314354e3692fce10be7712c7",
  "author": "Toby Boyd",
  "created_at": "2019-06-21 23:22:10",
  "file_path": "official/resnet/estimator_benchmark.py",
  "condition": [
   "    flag_methods = [imagenet_main.define_imagenet_flags]"
  ],
  "consequent": [
   "    flag_methods = [",
   "        lambda: imagenet_main.define_imagenet_flags(dynamic_loss_scale=True,",
   "                                                    fp16_implementation=True)",
   "    ]"
  ]
 },
 {
  "sha": "a68f65f8b06969ee314354e3692fce10be7712c7",
  "author": "Toby Boyd",
  "created_at": "2019-06-21 23:22:10",
  "file_path": "official/resnet/imagenet_main.py",
  "condition": [
   "def define_imagenet_flags():"
  ],
  "consequent": [
   "def define_imagenet_flags(dynamic_loss_scale=False,",
   "                          fp16_implementation=False,",
   "                          enable_xla=False):"
  ]
 },
 {
  "sha": "a68f65f8b06969ee314354e3692fce10be7712c7",
  "author": "Toby Boyd",
  "created_at": "2019-06-21 23:22:10",
  "file_path": "official/resnet/imagenet_main.py",
  "condition": [
   "      dynamic_loss_scale=True,",
   "      fp16_implementation=True)"
  ],
  "consequent": [
   "      dynamic_loss_scale=dynamic_loss_scale,",
   "      fp16_implementation=fp16_implementation,",
   "      enable_xla=enable_xla)"
  ]
 },
 {
  "sha": "a68f65f8b06969ee314354e3692fce10be7712c7",
  "author": "Toby Boyd",
  "created_at": "2019-06-21 23:22:10",
  "file_path": "official/resnet/imagenet_main.py",
  "condition": [
   "  define_imagenet_flags()"
  ],
  "consequent": [
   "  define_imagenet_flags(dynamic_loss_scale=True, fp16_implementation=True)"
  ]
 },
 {
  "sha": "a68f65f8b06969ee314354e3692fce10be7712c7",
  "author": "Toby Boyd",
  "created_at": "2019-06-21 23:22:10",
  "file_path": "official/resnet/keras/keras_cifar_benchmark.py",
  "condition": [
   "    flag_methods = [keras_cifar_main.define_cifar_flags]"
  ],
  "consequent": [
   "    flag_methods = [",
   "        keras_common.define_keras_flags, cifar_main.define_cifar_flags",
   "    ]"
  ]
 },
 {
  "sha": "a68f65f8b06969ee314354e3692fce10be7712c7",
  "author": "Toby Boyd",
  "created_at": "2019-06-21 23:22:10",
  "file_path": "official/resnet/keras/keras_cifar_benchmark.py",
  "condition": [
   "    flag_methods = [keras_cifar_main.define_cifar_flags]"
  ],
  "consequent": [
   "    flag_methods = [",
   "        keras_common.define_keras_flags, cifar_main.define_cifar_flags",
   "    ]"
  ]
 },
 {
  "sha": "a68f65f8b06969ee314354e3692fce10be7712c7",
  "author": "Toby Boyd",
  "created_at": "2019-06-21 23:22:10",
  "file_path": "official/resnet/keras/keras_cifar_main.py",
  "condition": [
   "  keras_utils.set_session_config(enable_eager=flags_obj.enable_eager,"
  ],
  "consequent": [
   "  keras_utils.set_session_config(enable_eager=flags_obj.enable_eager)"
  ]
 },
 {
  "sha": "a68f65f8b06969ee314354e3692fce10be7712c7",
  "author": "Toby Boyd",
  "created_at": "2019-06-21 23:22:10",
  "file_path": "official/resnet/keras/keras_cifar_main.py",
  "condition": [
   "  define_cifar_flags()"
  ],
  "consequent": [
   "  cifar_main.define_cifar_flags()",
   "  keras_common.define_keras_flags()"
  ]
 },
 {
  "sha": "a68f65f8b06969ee314354e3692fce10be7712c7",
  "author": "Toby Boyd",
  "created_at": "2019-06-21 23:22:10",
  "file_path": "official/resnet/keras/keras_cifar_test.py",
  "condition": [
   "      \"-batch_size\", \"4\","
  ],
  "consequent": [
   "      '-batch_size', '4',"
  ]
 },
 {
  "sha": "a68f65f8b06969ee314354e3692fce10be7712c7",
  "author": "Toby Boyd",
  "created_at": "2019-06-21 23:22:10",
  "file_path": "official/resnet/keras/keras_cifar_test.py",
  "condition": [
   "      \"-train_steps\", \"1\","
  ],
  "consequent": [
   "      '-train_steps', '1',"
  ]
 },
 {
  "sha": "a68f65f8b06969ee314354e3692fce10be7712c7",
  "author": "Toby Boyd",
  "created_at": "2019-06-21 23:22:10",
  "file_path": "official/resnet/keras/keras_cifar_test.py",
  "condition": [
   "      \"-use_synthetic_data\", \"true\""
  ],
  "consequent": [
   "      '-use_synthetic_data', 'true'"
  ]
 },
 {
  "sha": "a68f65f8b06969ee314354e3692fce10be7712c7",
  "author": "Toby Boyd",
  "created_at": "2019-06-21 23:22:10",
  "file_path": "official/resnet/keras/keras_cifar_test.py",
  "condition": [
   "    keras_cifar_main.define_cifar_flags()"
  ],
  "consequent": [
   "    cifar10_main.define_cifar_flags()",
   "    keras_common.define_keras_flags()"
  ]
 },
 {
  "sha": "a68f65f8b06969ee314354e3692fce10be7712c7",
  "author": "Toby Boyd",
  "created_at": "2019-06-21 23:22:10",
  "file_path": "official/resnet/keras/keras_cifar_test.py",
  "condition": [
   "    cifar10_main.NUM_IMAGES[\"validation\"] = 4"
  ],
  "consequent": [
   "    cifar10_main.NUM_IMAGES['validation'] = 4"
  ]
 },
 {
  "sha": "a68f65f8b06969ee314354e3692fce10be7712c7",
  "author": "Toby Boyd",
  "created_at": "2019-06-21 23:22:10",
  "file_path": "official/resnet/keras/keras_common.py",
  "condition": [
   "def define_keras_flags(dynamic_loss_scale=True):"
  ],
  "consequent": [
   "def define_keras_flags():"
  ]
 },
 {
  "sha": "a68f65f8b06969ee314354e3692fce10be7712c7",
  "author": "Toby Boyd",
  "created_at": "2019-06-21 23:22:10",
  "file_path": "official/resnet/keras/keras_imagenet_test.py",
  "condition": [
   "      \"-batch_size\", \"4\","
  ],
  "consequent": [
   "      '-batch_size', '4',"
  ]
 },
 {
  "sha": "a68f65f8b06969ee314354e3692fce10be7712c7",
  "author": "Toby Boyd",
  "created_at": "2019-06-21 23:22:10",
  "file_path": "official/resnet/keras/keras_imagenet_test.py",
  "condition": [
   "      \"-train_steps\", \"1\","
  ],
  "consequent": [
   "      '-train_steps', '1',"
  ]
 },
 {
  "sha": "a68f65f8b06969ee314354e3692fce10be7712c7",
  "author": "Toby Boyd",
  "created_at": "2019-06-21 23:22:10",
  "file_path": "official/resnet/keras/keras_imagenet_test.py",
  "condition": [
   "      \"-use_synthetic_data\", \"true\""
  ],
  "consequent": [
   "      '-use_synthetic_data', 'true'"
  ]
 },
 {
  "sha": "a68f65f8b06969ee314354e3692fce10be7712c7",
  "author": "Toby Boyd",
  "created_at": "2019-06-21 23:22:10",
  "file_path": "official/resnet/keras/keras_imagenet_test.py",
  "condition": [
   "    imagenet_main.NUM_IMAGES[\"validation\"] = 4"
  ],
  "consequent": [
   "    imagenet_main.NUM_IMAGES['validation'] = 4"
  ]
 },
 {
  "sha": "a68f65f8b06969ee314354e3692fce10be7712c7",
  "author": "Toby Boyd",
  "created_at": "2019-06-21 23:22:10",
  "file_path": "official/resnet/resnet_run_loop.py",
  "condition": [
   "                        fp16_implementation=False):"
  ],
  "consequent": [
   "                        fp16_implementation=False, enable_xla=False):"
  ]
 },
 {
  "sha": "a68f65f8b06969ee314354e3692fce10be7712c7",
  "author": "Toby Boyd",
  "created_at": "2019-06-21 23:22:10",
  "file_path": "official/resnet/resnet_run_loop.py",
  "condition": [
   "                                tf_data_experimental_slack=True)"
  ],
  "consequent": [
   "                                tf_data_experimental_slack=True,",
   "                                enable_xla=enable_xla)"
  ]
 },
 {
  "sha": "a68f65f8b06969ee314354e3692fce10be7712c7",
  "author": "Toby Boyd",
  "created_at": "2019-06-21 23:22:10",
  "file_path": "official/utils/flags/_base.py",
  "condition": [
   "                distribution_strategy=True, run_eagerly=False):"
  ],
  "consequent": [
   "                distribution_strategy=True):"
  ]
 },
 {
  "sha": "adc8f11bfe595b840d242d4bd214b85148a4dac3",
  "author": "Haoyu Zhang",
  "created_at": "2019-06-21 06:57:37",
  "file_path": "official/resnet/keras/keras_imagenet_test.py",
  "condition": [
   "    keras_imagenet_main.define_imagenet_keras_flags()"
  ],
  "consequent": [
   "    imagenet_main.define_imagenet_flags()",
   "    keras_common.define_keras_flags()"
  ]
 },
 {
  "sha": "092def7b4b4a49cc5d2583d1265c37227ed27fea",
  "author": "Haoyu Zhang",
  "created_at": "2019-06-21 06:19:06",
  "file_path": "official/resnet/keras/keras_cifar_test.py",
  "condition": [
   "    config = keras_utils.get_config_proto_v1()"
  ],
  "consequent": [
   "    config = keras_common.get_config_proto_v1()"
  ]
 },
 {
  "sha": "092def7b4b4a49cc5d2583d1265c37227ed27fea",
  "author": "Haoyu Zhang",
  "created_at": "2019-06-21 06:19:06",
  "file_path": "official/resnet/keras/keras_cifar_test.py",
  "condition": [
   "    config = keras_utils.get_config_proto_v1()"
  ],
  "consequent": [
   "    config = keras_common.get_config_proto_v1()"
  ]
 },
 {
  "sha": "092def7b4b4a49cc5d2583d1265c37227ed27fea",
  "author": "Haoyu Zhang",
  "created_at": "2019-06-21 06:19:06",
  "file_path": "official/resnet/keras/keras_cifar_test.py",
  "condition": [
   "    config = keras_utils.get_config_proto_v1()"
  ],
  "consequent": [
   "    config = keras_common.get_config_proto_v1()"
  ]
 },
 {
  "sha": "092def7b4b4a49cc5d2583d1265c37227ed27fea",
  "author": "Haoyu Zhang",
  "created_at": "2019-06-21 06:19:06",
  "file_path": "official/resnet/keras/keras_imagenet_test.py",
  "condition": [
   "    config = keras_utils.get_config_proto_v1()"
  ],
  "consequent": [
   "    config = keras_common.get_config_proto_v1()"
  ]
 },
 {
  "sha": "092def7b4b4a49cc5d2583d1265c37227ed27fea",
  "author": "Haoyu Zhang",
  "created_at": "2019-06-21 06:19:06",
  "file_path": "official/resnet/keras/keras_imagenet_test.py",
  "condition": [
   "    config = keras_utils.get_config_proto_v1()"
  ],
  "consequent": [
   "    config = keras_common.get_config_proto_v1()"
  ]
 },
 {
  "sha": "092def7b4b4a49cc5d2583d1265c37227ed27fea",
  "author": "Haoyu Zhang",
  "created_at": "2019-06-21 06:19:06",
  "file_path": "official/resnet/keras/keras_imagenet_test.py",
  "condition": [
   "    config = keras_utils.get_config_proto_v1()"
  ],
  "consequent": [
   "    config = keras_common.get_config_proto_v1()"
  ]
 },
 {
  "sha": "092def7b4b4a49cc5d2583d1265c37227ed27fea",
  "author": "Haoyu Zhang",
  "created_at": "2019-06-21 06:19:06",
  "file_path": "official/resnet/keras/keras_imagenet_test.py",
  "condition": [
   "    config = keras_utils.get_config_proto_v1()"
  ],
  "consequent": [
   "    config = keras_common.get_config_proto_v1()"
  ]
 },
 {
  "sha": "092def7b4b4a49cc5d2583d1265c37227ed27fea",
  "author": "Haoyu Zhang",
  "created_at": "2019-06-21 06:19:06",
  "file_path": "official/resnet/keras/keras_imagenet_test.py",
  "condition": [
   "    config = keras_utils.get_config_proto_v1()"
  ],
  "consequent": [
   "    config = keras_common.get_config_proto_v1()"
  ]
 },
 {
  "sha": "092def7b4b4a49cc5d2583d1265c37227ed27fea",
  "author": "Haoyu Zhang",
  "created_at": "2019-06-21 06:19:06",
  "file_path": "official/resnet/keras/keras_imagenet_test.py",
  "condition": [
   "    config = keras_utils.get_config_proto_v1()"
  ],
  "consequent": [
   "    config = keras_common.get_config_proto_v1()"
  ]
 },
 {
  "sha": "018ab4b5fdf782ffe3a28b90fe3e2c377f56016e",
  "author": "Igor",
  "created_at": "2019-06-21 04:39:21",
  "file_path": "official/transformer/v2/transformer_benchmark.py",
  "condition": [
   "    FLAGS.steps_between_evals = 20000"
  ],
  "consequent": [
   "    FLAGS.steps_between_evals = 5000"
  ]
 },
 {
  "sha": "018ab4b5fdf782ffe3a28b90fe3e2c377f56016e",
  "author": "Igor",
  "created_at": "2019-06-21 04:39:21",
  "file_path": "official/transformer/v2/transformer_benchmark.py",
  "condition": [
   "    FLAGS.train_steps = 400000"
  ],
  "consequent": [
   "    FLAGS.train_steps = 100000"
  ]
 },
 {
  "sha": "018ab4b5fdf782ffe3a28b90fe3e2c377f56016e",
  "author": "Igor",
  "created_at": "2019-06-21 04:39:21",
  "file_path": "official/transformer/v2/transformer_benchmark.py",
  "condition": [
   "    FLAGS.steps_between_evals = 20000"
  ],
  "consequent": [
   "    FLAGS.steps_between_evals = 5000"
  ]
 },
 {
  "sha": "cf3c240728d9a4cf3c5fe6a5cf49d199c6b0a4be",
  "author": "Haoyu Zhang",
  "created_at": "2019-06-21 02:54:58",
  "file_path": "official/resnet/keras/keras_cifar_main.py",
  "condition": [
   "    if flags_obj.set_learning_phase_to_train:",
   "      # TODO(haoyuzhang): Understand slowdown of setting learning phase when",
   "      # not using distribution strategy.",
   "      tf.keras.backend.set_learning_phase(1)"
  ],
  "consequent": [
   "    tf.keras.backend.set_learning_phase(1)"
  ]
 },
 {
  "sha": "cf3c240728d9a4cf3c5fe6a5cf49d199c6b0a4be",
  "author": "Haoyu Zhang",
  "created_at": "2019-06-21 02:54:58",
  "file_path": "official/resnet/keras/keras_imagenet_main.py",
  "condition": [
   "    if flags_obj.set_learning_phase_to_train:",
   "      # TODO(haoyuzhang): Understand slowdown of setting learning phase when",
   "      # not using distribution strategy.",
   "      tf.keras.backend.set_learning_phase(1)"
  ],
  "consequent": [
   "    tf.keras.backend.set_learning_phase(1)"
  ]
 },
 {
  "sha": "0cc529052ae35227dc6a06ca21a6ffba1112350f",
  "author": "anj-s",
  "created_at": "2019-06-20 11:37:46",
  "file_path": "official/resnet/ctl/ctl_imagenet_main.py",
  "condition": [
   ""
  ],
  "consequent": [
   "  "
  ]
 },
 {
  "sha": "0cc529052ae35227dc6a06ca21a6ffba1112350f",
  "author": "anj-s",
  "created_at": "2019-06-20 11:37:46",
  "file_path": "official/resnet/ctl/ctl_imagenet_test.py",
  "condition": [
   ""
  ],
  "consequent": [
   "    "
  ]
 },
 {
  "sha": "f8ec01aec2535993881b018a84be4545ea64e7a7",
  "author": "Reed",
  "created_at": "2019-06-20 07:49:49",
  "file_path": "official/transformer/model/model_utils.py",
  "condition": [
   "# Very low numbers to represent -infinity. We do not actually use -Inf, since we",
   "# want to be able to multiply these values by zero to get zero. (-Inf * 0 = NaN)",
   "_NEG_INF_FP32 = -1e9"
  ],
  "consequent": [
   "_NEG_INF = -1e9"
  ]
 },
 {
  "sha": "f8ec01aec2535993881b018a84be4545ea64e7a7",
  "author": "Reed",
  "created_at": "2019-06-20 07:49:49",
  "file_path": "official/transformer/model/model_utils.py",
  "condition": [
   "def get_decoder_self_attention_bias(length, dtype=tf.float32):"
  ],
  "consequent": [
   "def get_decoder_self_attention_bias(length):"
  ]
 },
 {
  "sha": "f8ec01aec2535993881b018a84be4545ea64e7a7",
  "author": "Reed",
  "created_at": "2019-06-20 07:49:49",
  "file_path": "official/transformer/model/model_utils.py",
  "condition": [
   "    valid_locs = tf.linalg.band_part(tf.ones([length, length], dtype=dtype),"
  ],
  "consequent": [
   "    valid_locs = tf.linalg.band_part(tf.ones([length, length]), -1, 0)"
  ]
 },
 {
  "sha": "f8ec01aec2535993881b018a84be4545ea64e7a7",
  "author": "Reed",
  "created_at": "2019-06-20 07:49:49",
  "file_path": "official/transformer/model/model_utils.py",
  "condition": [
   "    decoder_bias = neg_inf * (1.0 - valid_locs)"
  ],
  "consequent": [
   "    decoder_bias = _NEG_INF * (1.0 - valid_locs)"
  ]
 },
 {
  "sha": "f8ec01aec2535993881b018a84be4545ea64e7a7",
  "author": "Reed",
  "created_at": "2019-06-20 07:49:49",
  "file_path": "official/transformer/model/model_utils.py",
  "condition": [
   "def get_padding(x, padding_value=0, dtype=tf.float32):"
  ],
  "consequent": [
   "def get_padding(x, padding_value=0):"
  ]
 },
 {
  "sha": "f8ec01aec2535993881b018a84be4545ea64e7a7",
  "author": "Reed",
  "created_at": "2019-06-20 07:49:49",
  "file_path": "official/transformer/model/model_utils.py",
  "condition": [
   "    return tf.cast(tf.equal(x, padding_value), dtype)"
  ],
  "consequent": [
   "    return tf.cast(tf.equal(x, padding_value), tf.float32)"
  ]
 },
 {
  "sha": "f8ec01aec2535993881b018a84be4545ea64e7a7",
  "author": "Reed",
  "created_at": "2019-06-20 07:49:49",
  "file_path": "official/transformer/model/model_utils.py",
  "condition": [
   "    attention_bias = padding * _NEG_INF_FP32"
  ],
  "consequent": [
   "    attention_bias = padding * _NEG_INF"
  ]
 },
 {
  "sha": "f8ec01aec2535993881b018a84be4545ea64e7a7",
  "author": "Reed",
  "created_at": "2019-06-20 07:49:49",
  "file_path": "official/transformer/v2/attention_layer.py",
  "condition": [
   "      k = tf.concat([tf.cast(cache[\"k\"], k.dtype), k], axis=1)"
  ],
  "consequent": [
   "      k = tf.concat([cache[\"k\"], k], axis=1)"
  ]
 },
 {
  "sha": "f8ec01aec2535993881b018a84be4545ea64e7a7",
  "author": "Reed",
  "created_at": "2019-06-20 07:49:49",
  "file_path": "official/transformer/v2/attention_layer.py",
  "condition": [
   "      v = tf.concat([tf.cast(cache[\"v\"], k.dtype), v], axis=1)"
  ],
  "consequent": [
   "      v = tf.concat([cache[\"v\"], v], axis=1)"
  ]
 },
 {
  "sha": "f8ec01aec2535993881b018a84be4545ea64e7a7",
  "author": "Reed",
  "created_at": "2019-06-20 07:49:49",
  "file_path": "official/transformer/v2/attention_layer.py",
  "condition": [
   "    weights = _float32_softmax(logits, name=\"attention_weights\")"
  ],
  "consequent": [
   "    weights = tf.nn.softmax(logits, name=\"attention_weights\")"
  ]
 },
 {
  "sha": "f8ec01aec2535993881b018a84be4545ea64e7a7",
  "author": "Reed",
  "created_at": "2019-06-20 07:49:49",
  "file_path": "official/transformer/v2/misc.py",
  "condition": [
   "      dtype=True,"
  ],
  "consequent": [
   "      dtype=False,"
  ]
 },
 {
  "sha": "f8ec01aec2535993881b018a84be4545ea64e7a7",
  "author": "Reed",
  "created_at": "2019-06-20 07:49:49",
  "file_path": "official/transformer/v2/transformer.py",
  "condition": [
   "        pos_encoding = model_utils.get_position_encoding("
  ],
  "consequent": [
   "        decoder_inputs += model_utils.get_position_encoding("
  ]
 },
 {
  "sha": "f8ec01aec2535993881b018a84be4545ea64e7a7",
  "author": "Reed",
  "created_at": "2019-06-20 07:49:49",
  "file_path": "official/transformer/v2/transformer.py",
  "condition": [
   "          length, dtype=self.params['dtype'])"
  ],
  "consequent": [
   "          length)"
  ]
 },
 {
  "sha": "f8ec01aec2535993881b018a84be4545ea64e7a7",
  "author": "Reed",
  "created_at": "2019-06-20 07:49:49",
  "file_path": "official/transformer/v2/transformer.py",
  "condition": [
   "        initializer=tf.ones_initializer(),"
  ],
  "consequent": [
   "        initializer=tf.ones_initializer())"
  ]
 },
 {
  "sha": "f8ec01aec2535993881b018a84be4545ea64e7a7",
  "author": "Reed",
  "created_at": "2019-06-20 07:49:49",
  "file_path": "official/transformer/v2/transformer.py",
  "condition": [
   "        initializer=tf.zeros_initializer(),"
  ],
  "consequent": [
   "        initializer=tf.zeros_initializer())"
  ]
 },
 {
  "sha": "f8ec01aec2535993881b018a84be4545ea64e7a7",
  "author": "Reed",
  "created_at": "2019-06-20 07:49:49",
  "file_path": "official/transformer/v2/transformer.py",
  "condition": [
   "    return tf.cast(norm_x * self.scale + self.bias, input_dtype)"
  ],
  "consequent": [
   "    return norm_x * self.scale + self.bias"
  ]
 },
 {
  "sha": "269581dc231192d2a19f5fa54821b3bc6a104292",
  "author": "Toby Boyd",
  "created_at": "2019-06-20 05:48:55",
  "file_path": "official/resnet/imagenet_main.py",
  "condition": [
   "def define_imagenet_flags(dynamic_loss_scale=False,"
  ],
  "consequent": [
   "def define_imagenet_flags(dynamic_loss_scale=False, fp16_implementation=False):"
  ]
 },
 {
  "sha": "269581dc231192d2a19f5fa54821b3bc6a104292",
  "author": "Toby Boyd",
  "created_at": "2019-06-20 05:48:55",
  "file_path": "official/resnet/imagenet_main.py",
  "condition": [
   "      fp16_implementation=fp16_implementation,"
  ],
  "consequent": [
   "      fp16_implementation=fp16_implementation)"
  ]
 },
 {
  "sha": "269581dc231192d2a19f5fa54821b3bc6a104292",
  "author": "Toby Boyd",
  "created_at": "2019-06-20 05:48:55",
  "file_path": "official/resnet/keras/keras_cifar_main.py",
  "condition": [
   "  keras_utils.set_session_config(enable_eager=flags_obj.enable_eager)"
  ],
  "consequent": [
   "  # TODO(tobyboyd): Remove eager flag when tf 1.0 testing ends.",
   "  # Eager is default in tf 2.0 and should not be toggled",
   "  if keras_common.is_v2_0():",
   "    keras_common.set_config_v2()",
   "  else:",
   "    config = keras_common.get_config_proto_v1()",
   "    if flags_obj.enable_eager:",
   "      tf.compat.v1.enable_eager_execution(config=config)",
   "    else:",
   "      sess = tf.Session(config=config)",
   "      tf.keras.backend.set_session(sess)"
  ]
 },
 {
  "sha": "269581dc231192d2a19f5fa54821b3bc6a104292",
  "author": "Toby Boyd",
  "created_at": "2019-06-20 05:48:55",
  "file_path": "official/resnet/keras/keras_common.py",
  "condition": [
   "  \"\"\"Set CuDNN batchnorm mode for better performance."
  ],
  "consequent": [
   "  \"\"\"Set CuDNN batchnorm mode for better performance. Note that the spatial"
  ]
 },
 {
  "sha": "269581dc231192d2a19f5fa54821b3bc6a104292",
  "author": "Toby Boyd",
  "created_at": "2019-06-20 05:48:55",
  "file_path": "official/resnet/keras/keras_common.py",
  "condition": [
   "",
   "     Note: Spatial Persistent mode may lead to accuracy losses for certain"
  ],
  "consequent": [
   "     persistent mode may lead to accuracy losses for certain models.\"\"\""
  ]
 },
 {
  "sha": "269581dc231192d2a19f5fa54821b3bc6a104292",
  "author": "Toby Boyd",
  "created_at": "2019-06-20 05:48:55",
  "file_path": "official/resnet/keras/keras_imagenet_benchmark.py",
  "condition": [
   "    flag_methods = [keras_imagenet_main.define_imagenet_keras_flags]"
  ],
  "consequent": [
   "    flag_methods = [",
   "        keras_common.define_keras_flags,",
   "        lambda: imagenet_main.define_imagenet_flags(dynamic_loss_scale=True)",
   "    ]"
  ]
 },
 {
  "sha": "269581dc231192d2a19f5fa54821b3bc6a104292",
  "author": "Toby Boyd",
  "created_at": "2019-06-20 05:48:55",
  "file_path": "official/resnet/keras/keras_imagenet_benchmark.py",
  "condition": [
   "    flag_methods = [keras_imagenet_main.define_imagenet_keras_flags]"
  ],
  "consequent": [
   "    flag_methods = [",
   "        keras_common.define_keras_flags,",
   "        lambda: imagenet_main.define_imagenet_flags(dynamic_loss_scale=True)",
   "    ]"
  ]
 },
 {
  "sha": "269581dc231192d2a19f5fa54821b3bc6a104292",
  "author": "Toby Boyd",
  "created_at": "2019-06-20 05:48:55",
  "file_path": "official/resnet/keras/keras_imagenet_benchmark.py",
  "condition": [
   "    flag_methods = [keras_imagenet_main.define_imagenet_keras_flags]",
   ""
  ],
  "consequent": [
   "    flag_methods = [",
   "        keras_common.define_keras_flags,",
   "        lambda: imagenet_main.define_imagenet_flags(dynamic_loss_scale=True)",
   "    ]"
  ]
 },
 {
  "sha": "269581dc231192d2a19f5fa54821b3bc6a104292",
  "author": "Toby Boyd",
  "created_at": "2019-06-20 05:48:55",
  "file_path": "official/resnet/keras/keras_imagenet_main.py",
  "condition": [
   "  keras_utils.set_session_config(",
   "      enable_eager=flags_obj.enable_eager,",
   "      enable_xla=flags_obj.enable_xla,",
   "      enable_grappler_layout_optimizer=",
   "      flags_obj.enable_grappler_layout_optimizer)"
  ],
  "consequent": [
   "  # TODO(tobyboyd): Remove eager flag when tf 1.0 testing ends.",
   "  # Eager is default in tf 2.0 and should not be toggled",
   "  if keras_common.is_v2_0():",
   "    keras_common.set_config_v2()",
   "  else:",
   "    config = keras_common.get_config_proto_v1()",
   "    if flags_obj.enable_eager:",
   "      tf.compat.v1.enable_eager_execution(config=config)",
   "    else:",
   "      sess = tf.Session(config=config)",
   "      tf.keras.backend.set_session(sess)"
  ]
 },
 {
  "sha": "269581dc231192d2a19f5fa54821b3bc6a104292",
  "author": "Toby Boyd",
  "created_at": "2019-06-20 05:48:55",
  "file_path": "official/resnet/keras/keras_imagenet_main.py",
  "condition": [
   "  define_imagenet_keras_flags()"
  ],
  "consequent": [
   "  imagenet_main.define_imagenet_flags(dynamic_loss_scale=True)",
   "  keras_common.define_keras_flags()"
  ]
 },
 {
  "sha": "269581dc231192d2a19f5fa54821b3bc6a104292",
  "author": "Toby Boyd",
  "created_at": "2019-06-20 05:48:55",
  "file_path": "official/resnet/resnet_run_loop.py",
  "condition": [
   "      optimizer = (",
   "          tf.compat.v1.train.experimental.enable_mixed_precision_graph_rewrite("
  ],
  "consequent": [
   "      optimizer = tf.compat.v1.train.experimental.enable_mixed_precision_graph_rewrite("
  ]
 },
 {
  "sha": "269581dc231192d2a19f5fa54821b3bc6a104292",
  "author": "Toby Boyd",
  "created_at": "2019-06-20 05:48:55",
  "file_path": "official/resnet/resnet_run_loop.py",
  "condition": [
   "              optimizer, loss_scale=loss_scale))"
  ],
  "consequent": [
   "          optimizer, loss_scale=loss_scale)"
  ]
 },
 {
  "sha": "269581dc231192d2a19f5fa54821b3bc6a104292",
  "author": "Toby Boyd",
  "created_at": "2019-06-20 05:48:55",
  "file_path": "official/resnet/resnet_run_loop.py",
  "condition": [
   "                        fp16_implementation=False, enable_xla=False):"
  ],
  "consequent": [
   "                        fp16_implementation=False):"
  ]
 },
 {
  "sha": "269581dc231192d2a19f5fa54821b3bc6a104292",
  "author": "Toby Boyd",
  "created_at": "2019-06-20 05:48:55",
  "file_path": "official/resnet/resnet_run_loop.py",
  "condition": [
   "                                tf_data_experimental_slack=True,"
  ],
  "consequent": [
   "                                tf_data_experimental_slack=True)"
  ]
 },
 {
  "sha": "269581dc231192d2a19f5fa54821b3bc6a104292",
  "author": "Toby Boyd",
  "created_at": "2019-06-20 05:48:55",
  "file_path": "official/transformer/transformer_estimator_benchmark.py",
  "condition": [
   "",
   "    flags_str = flags_core.get_nondefault_flags_as_str()",
   "    self.report_benchmark(iters=eval_results['global_step'],"
  ],
  "consequent": [
   "    self.report_benchmark(",
   "        iters=eval_results['global_step'],"
  ]
 },
 {
  "sha": "269581dc231192d2a19f5fa54821b3bc6a104292",
  "author": "Toby Boyd",
  "created_at": "2019-06-20 05:48:55",
  "file_path": "official/transformer/transformer_estimator_benchmark.py",
  "condition": [
   "                          wall_time=wall_time_sec,"
  ],
  "consequent": [
   "        wall_time=wall_time_sec,",
   "        metrics=metrics)"
  ]
 },
 {
  "sha": "269581dc231192d2a19f5fa54821b3bc6a104292",
  "author": "Toby Boyd",
  "created_at": "2019-06-20 05:48:55",
  "file_path": "official/transformer/v2/misc.py",
  "condition": [
   "      all_reduce_alg=True,"
  ],
  "consequent": [
   "      all_reduce_alg=True"
  ]
 },
 {
  "sha": "269581dc231192d2a19f5fa54821b3bc6a104292",
  "author": "Toby Boyd",
  "created_at": "2019-06-20 05:48:55",
  "file_path": "official/utils/flags/_performance.py",
  "condition": [
   "                       tf_data_experimental_slack=False, enable_xla=False):"
  ],
  "consequent": [
   "                       tf_data_experimental_slack=False):"
  ]
 }
]